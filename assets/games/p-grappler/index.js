// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'index.data';
    var REMOTE_PACKAGE_BASE = 'index.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      err('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = Module['locateFile'] ? Module['locateFile'](REMOTE_PACKAGE_BASE, '') : REMOTE_PACKAGE_BASE;
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onerror = function(event) {
        throw new Error("NetworkError for: " + packageName);
      }
      xhr.onload = function(event) {
        if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
          var packageData = xhr.response;
          callback(packageData);
        } else {
          throw new Error(xhr.statusText + " : " + xhr.responseURL);
        }
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetchedCallback = null;
      var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;

      if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'run_tree', true, true);

    function DataRequest(start, end, audio) {
      this.start = start;
      this.end = end;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);
        this.finish(byteArray);
      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      }
    };

        var files = metadata.files;
        for (var i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].audio).open('GET', files[i].filename);
        }

  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (var i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_index.data');

    };
    Module['addRunDependency']('datafile_index.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"filename": "/run_tree/sheet.png", "start": 0, "end": 405, "audio": 0}], "remote_package_size": 405, "package_uuid": "ec4a8663-9cf0-45dd-9576-f16507a2876c"});

})();



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  assert(STATICTOP < TOTAL_MEMORY, 'not enough memory for static allocation - increase TOTAL_MEMORY');
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// Add a wasm function to the table.
// Attempting to call this with JS function will cause of table.set() to fail
function addWasmFunction(func) {
  var table = Module['wasmTable'];
  var ret = table.length;
  table.grow(1);
  table.set(ret, func);
  return ret;
}

// 'sig' parameter is currently only used for LLVM backend under certain
// circumstance: RESERVED_FUNCTION_POINTERS=1, EMULATED_FUNCTION_POINTERS=0.
function addFunction(func, sig) {

  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;


// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};


// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  function convertReturnValue(ret) {
    if (returnType === 'string') return Pointer_stringify(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (typeof EmterpreterAsync === 'object' && EmterpreterAsync.state) {
    assert(opts && opts.async, 'The call to ' + ident + ' is running asynchronously. If this was intended, add the async option to the ccall/cwrap call.');
    assert(!EmterpreterAsync.restartFunc, 'Cannot have multiple async ccalls in flight at once');
    return new Promise(function(resolve) {
      EmterpreterAsync.restartFunc = func;
      EmterpreterAsync.asyncFinalizers.push(function(ret) {
        if (stack !== 0) stackRestore(stack);
        resolve(convertReturnValue(ret));
      });
    });
  }
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  // If this is an async ccall, ensure we return a promise
  if (opts && opts.async) return Promise.resolve(ret);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortStackOverflowEmterpreter() {
  abort("Emterpreter stack overflow! Decrease the recursion level or increase EMT_STACK_MAX in tools/emterpretify.py (current value " + EMT_STACK_MAX + ").");
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  if (typeof WebAssembly === 'object' && typeof WebAssembly.Memory === 'function') {
    assert(TOTAL_MEMORY % WASM_PAGE_SIZE === 0);
    Module['wasmMemory'] = new WebAssembly.Memory({ 'initial': TOTAL_MEMORY / WASM_PAGE_SIZE, 'maximum': TOTAL_MEMORY / WASM_PAGE_SIZE });
    buffer = Module['wasmMemory'].buffer;
  } else
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}




function integrateWasmJS() {
  // wasm.js has several methods for creating the compiled code module here:
  //  * 'native-wasm' : use native WebAssembly support in the browser
  //  * 'interpret-s-expr': load s-expression code from a .wast and interpret
  //  * 'interpret-binary': load binary wasm and interpret
  //  * 'interpret-asm2wasm': load asm.js code, translate to wasm, and interpret
  //  * 'asmjs': no wasm, just load the asm.js code and use that (good for testing)
  // The method is set at compile time (BINARYEN_METHOD)
  // The method can be a comma-separated list, in which case, we will try the
  // options one by one. Some of them can fail gracefully, and then we can try
  // the next.

  // inputs

  var method = 'native-wasm';

  var wasmTextFile = 'index.wast';
  var wasmBinaryFile = 'index.wasm';
  var asmjsCodeFile = 'index.temp.asm.js';

  if (!isDataURI(wasmTextFile)) {
    wasmTextFile = locateFile(wasmTextFile);
  }
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }
  if (!isDataURI(asmjsCodeFile)) {
    asmjsCodeFile = locateFile(asmjsCodeFile);
  }

  // utilities

  var wasmPageSize = 64*1024;

  var info = {
    'global': null,
    'env': null,
    'asm2wasm': asm2wasmImports,
    'parent': Module // Module inside wasm-js.cpp refers to wasm-js.cpp; this allows access to the outside program.
  };

  var exports = null;


  function mergeMemory(newBuffer) {
    // The wasm instance creates its memory. But static init code might have written to
    // buffer already, including the mem init file, and we must copy it over in a proper merge.
    // TODO: avoid this copy, by avoiding such static init writes
    // TODO: in shorter term, just copy up to the last static init write
    var oldBuffer = Module['buffer'];
    if (newBuffer.byteLength < oldBuffer.byteLength) {
      err('the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here');
    }
    var oldView = new Int8Array(oldBuffer);
    var newView = new Int8Array(newBuffer);


    newView.set(oldView);
    updateGlobalBuffer(newBuffer);
    updateGlobalBufferViews();
  }

  function getBinary() {
    try {
      if (Module['wasmBinary']) {
        return new Uint8Array(Module['wasmBinary']);
      }
      if (Module['readBinary']) {
        return Module['readBinary'](wasmBinaryFile);
      } else {
        throw "both async and sync fetching of the wasm failed";
      }
    }
    catch (err) {
      abort(err);
    }
  }

  function getBinaryPromise() {
    // if we don't have the binary yet, and have the Fetch api, use that
    // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
    if (!Module['wasmBinary'] && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
        return getBinary();
      });
    }
    // Otherwise, getBinary should be able to get it synchronously
    return new Promise(function(resolve, reject) {
      resolve(getBinary());
    });
  }

  // do-method functions


  function doNativeWasm(global, env, providedBuffer) {
    if (typeof WebAssembly !== 'object') {
      // when the method is just native-wasm, our error message can be very specific
      abort('No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.');
      err('no native wasm support detected');
      return false;
    }
    // prepare memory import
    if (!(Module['wasmMemory'] instanceof WebAssembly.Memory)) {
      err('no native wasm Memory in use');
      return false;
    }
    env['memory'] = Module['wasmMemory'];
    // Load the wasm module and create an instance of using native support in the JS engine.
    info['global'] = {
      'NaN': NaN,
      'Infinity': Infinity
    };
    info['global.Math'] = Math;
    info['env'] = env;
    // handle a generated wasm instance, receiving its exports and
    // performing other necessary setup
    function receiveInstance(instance, module) {
      exports = instance.exports;
      if (exports.memory) mergeMemory(exports.memory);
      Module['asm'] = exports;
      Module["usingWasm"] = true;
      removeRunDependency('wasm-instantiate');
    }
    addRunDependency('wasm-instantiate');

    // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
    // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
    // to any other async startup actions they are performing.
    if (Module['instantiateWasm']) {
      try {
        return Module['instantiateWasm'](info, receiveInstance);
      } catch(e) {
        err('Module.instantiateWasm callback failed with error: ' + e);
        return false;
      }
    }

    // Async compilation can be confusing when an error on the page overwrites Module
    // (for example, if the order of elements is wrong, and the one defining Module is
    // later), so we save Module and check it later.
    var trueModule = Module;
    function receiveInstantiatedSource(output) {
      // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
      // receiveInstance() will swap in the exports (to Module.asm) so they can be called
      assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
      trueModule = null;
      receiveInstance(output['instance'], output['module']);
    }
    function instantiateArrayBuffer(receiver) {
      getBinaryPromise().then(function(binary) {
        return WebAssembly.instantiate(binary, info);
      }).then(receiver, function(reason) {
        err('failed to asynchronously prepare wasm: ' + reason);
        abort(reason);
      });
    }
    // Prefer streaming instantiation if available.
    if (!Module['wasmBinary'] &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      WebAssembly.instantiateStreaming(fetch(wasmBinaryFile, { credentials: 'same-origin' }), info)
        .then(receiveInstantiatedSource, function(reason) {
          // We expect the most common failure cause to be a bad MIME type for the binary,
          // in which case falling back to ArrayBuffer instantiation should work.
          err('wasm streaming compile failed: ' + reason);
          err('falling back to ArrayBuffer instantiation');
          instantiateArrayBuffer(receiveInstantiatedSource);
        });
    } else {
      instantiateArrayBuffer(receiveInstantiatedSource);
    }
    return {}; // no exports yet; we'll fill them in later
  }


  // We may have a preloaded value in Module.asm, save it
  Module['asmPreload'] = Module['asm'];

  // Memory growth integration code

  var asmjsReallocBuffer = Module['reallocBuffer'];

  var wasmReallocBuffer = function(size) {
    var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.
    size = alignUp(size, PAGE_MULTIPLE); // round up to wasm page size
    var old = Module['buffer'];
    var oldSize = old.byteLength;
    if (Module["usingWasm"]) {
      // native wasm support
      try {
        var result = Module['wasmMemory'].grow((size - oldSize) / wasmPageSize); // .grow() takes a delta compared to the previous size
        if (result !== (-1 | 0)) {
          // success in native wasm memory growth, get the buffer from the memory
          return Module['buffer'] = Module['wasmMemory'].buffer;
        } else {
          return null;
        }
      } catch(e) {
        console.error('Module.reallocBuffer: Attempted to grow from ' + oldSize  + ' bytes to ' + size + ' bytes, but got error: ' + e);
        return null;
      }
    }
  };

  Module['reallocBuffer'] = function(size) {
    if (finalMethod === 'asmjs') {
      return asmjsReallocBuffer(size);
    } else {
      return wasmReallocBuffer(size);
    }
  };

  // we may try more than one; this is the final one, that worked and we are using
  var finalMethod = '';

  // Provide an "asm.js function" for the application, called to "link" the asm.js module. We instantiate
  // the wasm module at that time, and it receives imports and provides exports and so forth, the app
  // doesn't need to care that it is wasm or polyfilled wasm or asm.js.

  Module['asm'] = function(global, env, providedBuffer) {
    // import table
    if (!env['table']) {
     assert(Module['wasmTableSize'] !== undefined);
      var TABLE_SIZE = Module['wasmTableSize'];
      var MAX_TABLE_SIZE = Module['wasmMaxTableSize'];
      if (typeof WebAssembly === 'object' && typeof WebAssembly.Table === 'function') {
        if (MAX_TABLE_SIZE !== undefined) {
          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, 'maximum': MAX_TABLE_SIZE, 'element': 'anyfunc' });
        } else {
          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, element: 'anyfunc' });
        }
      } else {
        env['table'] = new Array(TABLE_SIZE); // works in binaryen interpreter at least
      }
      Module['wasmTable'] = env['table'];
    }

    if (!env['__memory_base']) {
      env['__memory_base'] = Module['STATIC_BASE']; // tell the memory segments where to place themselves
    }
    if (!env['__table_base']) {
      env['__table_base'] = 0; // table starts at 0 by default, in dynamic linking this will change
    }

    // try the methods. each should return the exports if it succeeded

    var exports;
    exports = doNativeWasm(global, env, providedBuffer);

    assert(exports, 'no binaryen method succeeded. consider enabling more options, like interpreting, if you want that: http://kripken.github.io/emscripten-site/docs/compiling/WebAssembly.html#binaryen-methods');


    return exports;
  };

  var methodHandler = Module['asm']; // note our method handler, as we may modify Module['asm'] later
}

integrateWasmJS();

// === Body ===

var ASM_CONSTS = [function() { return GL.legacyGLEmulation }];

function _emscripten_asm_const_i(code) {
  assert(typeof EmterpreterAsync !== 'object' || EmterpreterAsync.state !== 2, 'cannot have an EM_ASM on the stack when emterpreter pauses/resumes - the JS is not emterpreted, so we would end up running it again from the start');
  return ASM_CONSTS[code]();
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 42176;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_game_cpp() } });







var STATIC_BUMP = 42176;
Module["STATIC_BASE"] = STATIC_BASE;
Module["STATIC_BUMP"] = STATIC_BUMP;

/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}

var EMTSTACKTOP = getMemory(1048576);
var EMT_STACK_MAX = EMTSTACKTOP + 1048576;

var eb = getMemory(244448);
assert(eb % 8 === 0);
__ATPRERUN__.push(function() {
  HEAPU8.set([140,1,14,0,0,0,0,0,2,9,0,0,128,0,0,0,2,10,0,0,129,0,0,0,2,11,0,0,130,0,0,0,135,12,0,0,0,0,0,0,25,12,12,1,135,5,1,0,12,0,0,0,135,12,2,0,5,0,0,0,1,12,81,75,134,6,0,0,0,90,3,0,5,12,0,0,121,6,3,0,1,12,0,0,83,6,12,0,1,12,85,75,134,7,0,0,0,90,3,0,5,12,0,0,121,7,3,0,1,12,0,0,83,7,12,0,1,12,89,75,134,8,0,0,0,90,3,0,5,12,0,0,121,8,3,0,1,12,0,0,83,8,12,0,1,12,93,75,134,3,0,0,0,90,3,0,5,12,0,0,121,3,3,0,1,12,0,0,83,3,12,0,1,13,99,75,134,12,0,0,4,118,3,0,5,13,0,0,120,12,3,0,1,1,206,75,119,0,30,0,1,13,121,75,134,12,0,0,4,118,3,0,5,13,0,0,120,12,3,0,1,1,222,75,119,0,23,0,1,13,140,75,134,12,0,0,4,118,3,0,5,13,0,0,120,12,3,0,1,1,235,75,119,0,16,0,1,13,161,75,134,12,0,0,4,118,3,0,5,13,0,0,120,12,3,0,1,1,250,75,119,0,9,0,1,13,176,75,134,12,0,0,4,118,3,0,5,13,0,0,32,4,12,0,1,12,191,75,125,1,4,12,5,0,0,0,1,13,9,76,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,175,19,1,13,22,76,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,168,19,1,13,35,76,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,161,19,1,13,43,76,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,154,19,1,13,55,76,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,147,19,1,13,67,76,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,6,0,119,0,140,19,1,13,79,76,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,133,19,1,13,89,76,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,4,0,119,0,126,19,1,13,100,76,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,5,0,119,0,119,19,1,13,112,76,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,112,19,1,13,124,76,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,105,19,1,13,136,76,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,7,0,119,0,98,19,1,13,150,76,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,91,19,1,13,166,76,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,6,0,119,0,84,19,1,13,183,76,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,7,0,119,0,77,19,1,13,203,76,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,8,0,119,0,70,19,1,13,214,76,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,9,0,119,0,63,19,1,13,226,76,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,56,19,1,13,236,76,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,8,0,119,0,49,19,1,13,248,76,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,9,0,119,0,42,19,1,13,7,77,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,10,0,119,0,35,19,1,13,16,77,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,11,0,119,0,28,19,1,13,26,77,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,21,19,1,13,38,77,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,10,0,119,0,14,19,1,13,52,77,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,11,0,119,0,7,19,1,13,65,77,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,12,0,119,0,0,19,1,13,77,77,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,13,0,119,0,249,18,1,13,91,77,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,12,0,119,0,242,18,1,13,104,77,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,235,18,1,13,116,77,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,13,0,119,0,228,18,1,13,135,77,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,221,18,1,13,153,77,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,4,0,119,0,214,18,1,13,166,77,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,207,18,1,13,177,77,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,5,0,119,0,200,18,1,13,189,77,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,193,18,1,13,202,77,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,4,0,119,0,186,18,1,13,211,77,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,5,0,119,0,179,18,1,13,219,77,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,14,0,119,0,172,18,1,13,226,77,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,165,18,1,13,239,77,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,14,0,119,0,158,18,1,13,251,77,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,15,0,119,0,151,18,1,13,7,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,144,18,1,13,20,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,137,18,1,13,33,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,130,18,1,13,41,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,4,0,119,0,123,18,1,13,52,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,6,0,119,0,116,18,1,13,61,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,15,0,119,0,109,18,1,13,75,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,7,0,119,0,102,18,1,13,86,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,16,0,119,0,95,18,1,13,96,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,6,0,119,0,88,18,1,13,106,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,16,0,119,0,81,18,1,13,117,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,74,18,1,13,129,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,17,0,119,0,67,18,1,13,140,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,60,18,1,13,149,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,4,0,119,0,53,18,1,13,158,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,18,0,119,0,46,18,1,13,167,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,19,0,119,0,39,18,1,13,176,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,20,0,119,0,32,18,1,13,186,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,21,0,119,0,25,18,1,13,196,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,22,0,119,0,18,18,1,13,206,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,23,0,119,0,11,18,1,13,216,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,24,0,119,0,4,18,1,13,226,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,25,0,119,0,253,17,1,13,237,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,246,17,1,13,251,78,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,239,17,1,13,9,79,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,17,0,119,0,232,17,1,13,23,79,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,18,0,119,0,225,17,1,13,37,79,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,218,17,1,13,51,79,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,211,17,1,13,65,79,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,4,0,119,0,204,17,1,13,79,79,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,5,0,119,0,197,17,1,13,93,79,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,190,17,1,13,107,79,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,183,17,1,13,121,79,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,5,0,119,0,176,17,1,13,135,79,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,6,0,119,0,169,17,1,13,149,79,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,26,0,119,0,162,17,1,13,164,79,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,27,0,119,0,155,17,1,13,179,79,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,28,0,119,0,148,17,1,13,194,79,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,29,0,119,0,141,17,1,13,209,79,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,30,0,119,0,134,17,1,13,224,79,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,31,0,119,0,127,17,1,13,239,79,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,32,0,119,0,120,17,1,13,254,79,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,33,0,119,0,113,17,1,13,13,80,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,34,0,119,0,106,17,1,13,28,80,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,35,0,119,0,99,17,1,13,43,80,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,36,0,119,0,92,17,1,13,58,80,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,37,0,119,0,85,17,1,13,73,80,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,78,17,1,13,81,80,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,4,0,119,0,71,17,1,13,89,80,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,7,0,119,0,64,17,1,13,97,80,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,8,0,119,0,57,17,1,13,105,80,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,19,0,119,0,50,17,1,13,114,80,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,20,0,119,0,43,17,1,13,123,80,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,21,0,119,0,36,17,1,13,132,80,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,22,0,119,0,29,17,1,13,141,80,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,6,0,119,0,22,17,1,13,156,80,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,23,0,119,0,15,17,1,13,174,80,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,24,0,119,0,8,17,1,13,188,80,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,38,0,119,0,1,17,1,13,203,80,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,7,0,119,0,250,16,1,13,216,80,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,9,0,119,0,243,16,1,13,231,80,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,8,0,119,0,236,16,1,13,251,80,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,9,0,119,0,229,16,1,13,8,81,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,10,0,119,0,222,16,1,13,21,81,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,11,0,119,0,215,16,1,13,37,81,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,12,0,119,0,208,16,1,13,53,81,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,25,0,119,0,201,16,1,13,69,81,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,194,16,1,13,81,81,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,187,16,1,13,95,81,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,26,0,119,0,180,16,1,13,109,81,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,173,16,1,13,126,81,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,27,0,119,0,166,16,1,13,143,81,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,13,0,119,0,159,16,1,13,156,81,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,14,0,119,0,152,16,1,13,170,81,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,15,0,119,0,145,16,1,13,184,81,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,28,0,119,0,138,16,1,13,200,81,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,29,0,119,0,131,16,1,13,217,81,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,30,0,119,0,124,16,1,13,234,81,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,117,16,1,13,243,81,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,110,16,1,13,0,82,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,103,16,1,13,13,82,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,96,16,1,13,26,82,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,16,0,119,0,89,16,1,13,40,82,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,39,0,119,0,82,16,1,13,54,82,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,17,0,119,0,75,16,1,13,66,82,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,40,0,119,0,68,16,1,13,81,82,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,18,0,119,0,61,16,1,13,95,82,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,19,0,119,0,54,16,1,13,109,82,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,20,0,119,0,47,16,1,13,123,82,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,40,16,1,13,133,82,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,21,0,119,0,33,16,1,13,143,82,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,22,0,119,0,26,16,1,13,154,82,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,23,0,119,0,19,16,1,13,165,82,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,12,16,1,13,181,82,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,24,0,119,0,5,16,1,13,197,82,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,25,0,119,0,254,15,1,13,214,82,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,26,0,119,0,247,15,1,13,231,82,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,27,0,119,0,240,15,1,13,251,82,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,28,0,119,0,233,15,1,13,15,83,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,4,0,119,0,226,15,1,13,29,83,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,5,0,119,0,219,15,1,13,44,83,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,212,15,1,13,59,83,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,31,0,119,0,205,15,1,13,73,83,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,32,0,119,0,198,15,1,13,90,83,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,33,0,119,0,191,15,1,13,104,83,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,29,0,119,0,184,15,1,13,125,83,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,11,0,119,0,177,15,1,13,147,83,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,8,0,119,0,170,15,1,13,159,83,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,163,15,1,13,175,83,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,156,15,1,13,191,83,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,149,15,1,13,208,83,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,142,15,1,13,225,83,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,135,15,1,13,245,83,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,128,15,1,13,9,84,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,121,15,1,13,17,84,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,114,15,1,13,25,84,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,107,15,1,13,33,84,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,100,15,1,13,41,84,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,30,0,119,0,93,15,1,13,52,84,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,31,0,119,0,86,15,1,13,63,84,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,32,0,119,0,79,15,1,13,74,84,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,72,15,1,13,88,84,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,5,0,119,0,65,15,1,13,102,84,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,41,0,119,0,58,15,1,13,117,84,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,42,0,119,0,51,15,1,13,132,84,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,44,15,1,13,146,84,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,4,0,119,0,37,15,1,13,160,84,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,43,0,119,0,30,15,1,13,175,84,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,44,0,119,0,23,15,1,13,190,84,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,16,15,1,13,202,84,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,9,15,1,13,214,84,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,2,15,1,13,226,84,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,251,14,1,13,238,84,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,45,0,119,0,244,14,1,13,251,84,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,34,0,119,0,237,14,1,13,8,85,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,33,0,119,0,230,14,1,13,20,85,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,6,0,119,0,223,14,1,13,32,85,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,4,0,119,0,216,14,1,13,39,85,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,35,0,119,0,209,14,1,13,46,85,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,36,0,119,0,202,14,1,13,54,85,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,37,0,119,0,195,14,1,13,62,85,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,34,0,119,0,188,14,1,13,79,85,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,6,0,119,0,181,14,1,13,93,85,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,38,0,119,0,174,14,1,13,108,85,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,7,0,119,0,167,14,1,13,120,85,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,46,0,119,0,160,14,1,13,131,85,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,47,0,119,0,153,14,1,13,142,85,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,8,0,119,0,146,14,1,13,152,85,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,139,14,1,13,165,85,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,132,14,1,13,181,85,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,125,14,1,13,201,85,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,118,14,1,13,214,85,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,4,0,119,0,111,14,1,13,230,85,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,35,0,119,0,104,14,1,13,254,85,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,36,0,119,0,97,14,1,13,22,86,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,7,0,119,0,90,14,1,13,42,86,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,8,0,119,0,83,14,1,13,59,86,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,10,0,119,0,76,14,1,13,75,86,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,37,0,119,0,69,14,1,13,102,86,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,38,0,119,0,62,14,1,13,129,86,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,48,0,119,0,55,14,1,13,145,86,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,5,0,119,0,48,14,1,13,158,86,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,11,0,119,0,41,14,1,13,170,86,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,49,0,119,0,34,14,1,13,187,86,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,9,0,119,0,27,14,1,13,202,86,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,39,0,119,0,20,14,1,13,228,86,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,40,0,119,0,13,14,1,13,254,86,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,41,0,119,0,6,14,1,13,7,87,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,50,0,119,0,255,13,1,13,21,87,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,10,0,119,0,248,13,1,13,33,87,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,42,0,119,0,241,13,1,13,56,87,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,43,0,119,0,234,13,1,13,79,87,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,5,0,119,0,227,13,1,13,101,87,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,4,0,119,0,220,13,1,13,123,87,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,213,13,1,13,147,87,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,44,0,119,0,206,13,1,13,172,87,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,45,0,119,0,199,13,1,13,196,87,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,46,0,119,0,192,13,1,13,221,87,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,11,0,119,0,185,13,1,13,247,87,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,6,0,119,0,178,13,1,13,17,88,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,12,0,119,0,171,13,1,13,40,88,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,47,0,119,0,164,13,1,13,68,88,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,48,0,119,0,157,13,1,13,96,88,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,150,13,1,13,116,88,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,7,0,119,0,143,13,1,13,137,88,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,51,0,119,0,136,13,1,13,153,88,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,5,0,119,0,129,13,1,13,176,88,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,4,0,119,0,122,13,1,13,199,88,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,115,13,1,13,222,88,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,6,0,119,0,108,13,1,13,248,88,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,4,0,119,0,101,13,1,13,18,89,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,94,13,1,13,44,89,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,49,0,119,0,87,13,1,13,68,89,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,80,13,1,13,86,89,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,39,0,119,0,73,13,1,13,105,89,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,5,0,119,0,66,13,1,13,123,89,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,40,0,119,0,59,13,1,13,142,89,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,41,0,119,0,52,13,1,13,160,89,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,42,0,119,0,45,13,1,13,179,89,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,43,0,119,0,38,13,1,13,197,89,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,44,0,119,0,31,13,1,13,216,89,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,4,0,119,0,24,13,1,13,234,89,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,45,0,119,0,17,13,1,13,253,89,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,10,13,1,13,15,90,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,46,0,119,0,3,13,1,13,34,90,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,50,0,119,0,252,12,1,13,52,90,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,47,0,119,0,245,12,1,13,71,90,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,51,0,119,0,238,12,1,13,89,90,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,48,0,119,0,231,12,1,13,108,90,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,224,12,1,13,126,90,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,49,0,119,0,217,12,1,13,145,90,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,210,12,1,13,163,90,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,50,0,119,0,203,12,1,13,182,90,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,13,0,119,0,196,12,1,13,200,90,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,51,0,119,0,189,12,1,13,219,90,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,14,0,119,0,182,12,1,13,237,90,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,52,0,119,0,175,12,1,13,0,91,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,168,12,1,13,18,91,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,53,0,119,0,161,12,1,13,37,91,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,154,12,1,13,55,91,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,54,0,119,0,147,12,1,13,74,91,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,12,0,119,0,140,12,1,13,92,91,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,55,0,119,0,133,12,1,13,111,91,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,13,0,119,0,126,12,1,13,129,91,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,56,0,119,0,119,12,1,13,148,91,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,52,0,119,0,112,12,1,13,171,91,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,53,0,119,0,105,12,1,13,194,91,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,54,0,119,0,98,12,1,13,217,91,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,55,0,119,0,91,12,1,13,240,91,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,84,12,1,13,1,92,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,8,0,119,0,77,12,1,13,21,92,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,15,0,119,0,70,12,1,13,41,92,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,16,0,119,0,63,12,1,13,59,92,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,14,0,119,0,56,12,1,13,79,92,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,6,0,119,0,49,12,1,13,97,92,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,57,0,119,0,42,12,1,13,116,92,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,58,0,119,0,35,12,1,13,134,92,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,59,0,119,0,28,12,1,13,153,92,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,52,0,119,0,21,12,1,13,172,92,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,56,0,119,0,14,12,1,13,192,92,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,7,12,1,13,211,92,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,57,0,119,0,0,12,1,13,231,92,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,249,11,1,13,250,92,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,58,0,119,0,242,11,1,13,14,93,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,53,0,119,0,235,11,1,13,33,93,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,59,0,119,0,228,11,1,13,53,93,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,54,0,119,0,221,11,1,13,72,93,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,60,0,119,0,214,11,1,13,92,93,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,55,0,119,0,207,11,1,13,112,93,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,61,0,119,0,200,11,1,13,133,93,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,56,0,119,0,193,11,1,13,153,93,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,62,0,119,0,186,11,1,13,174,93,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,57,0,119,0,179,11,1,13,194,93,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,63,0,119,0,172,11,1,13,215,93,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,17,0,119,0,165,11,1,13,239,93,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,4,0,119,0,158,11,1,13,253,93,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,64,0,119,0,151,11,1,13,12,94,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,5,0,119,0,144,11,1,13,26,94,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,65,0,119,0,137,11,1,13,41,94,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,60,0,119,0,130,11,1,13,55,94,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,66,0,119,0,123,11,1,13,70,94,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,61,0,119,0,116,11,1,13,84,94,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,67,0,119,0,109,11,1,13,99,94,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,102,11,1,13,113,94,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,68,0,119,0,95,11,1,13,128,94,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,88,11,1,13,142,94,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,69,0,119,0,81,11,1,13,157,94,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,58,0,119,0,74,11,1,13,171,94,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,70,0,119,0,67,11,1,13,186,94,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,59,0,119,0,60,11,1,13,200,94,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,71,0,119,0,53,11,1,13,215,94,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,62,0,119,0,46,11,1,13,228,94,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,63,0,119,0,39,11,1,13,244,94,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,9,0,119,0,32,11,1,13,254,94,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,64,0,119,0,25,11,1,13,11,95,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,72,0,119,0,18,11,1,13,22,95,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,60,0,119,0,11,11,1,13,35,95,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,61,0,119,0,4,11,1,13,54,95,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,62,0,119,0,253,10,1,13,74,95,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,65,0,119,0,246,10,1,13,87,95,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,66,0,119,0,239,10,1,13,103,95,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,67,0,119,0,232,10,1,13,116,95,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,10,0,119,0,225,10,1,13,127,95,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,18,0,119,0,218,10,1,13,140,95,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,19,0,119,0,211,10,1,13,156,95,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,20,0,119,0,204,10,1,13,175,95,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,197,10,1,13,187,95,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,11,0,119,0,190,10,1,13,201,95,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,63,0,119,0,183,10,1,13,224,95,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,64,0,119,0,176,10,1,13,244,95,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,68,0,119,0,169,10,1,13,12,96,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,69,0,119,0,162,10,1,13,26,96,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,21,0,119,0,155,10,1,13,46,96,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,22,0,119,0,148,10,1,13,68,96,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,70,0,119,0,141,10,1,13,250,75,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,71,0,119,0,134,10,1,13,90,96,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,65,0,119,0,127,10,1,13,111,96,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,73,0,119,0,120,10,1,13,206,75,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,113,10,1,13,235,75,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,12,0,119,0,106,10,1,13,127,96,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,74,0,119,0,99,10,1,13,143,96,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,75,0,119,0,92,10,1,13,191,75,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,72,0,119,0,85,10,1,13,158,96,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,76,0,119,0,78,10,1,13,185,96,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,77,0,119,0,71,10,1,13,211,96,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,7,0,119,0,64,10,1,13,229,96,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,8,0,119,0,57,10,1,13,248,96,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,23,0,119,0,50,10,1,13,13,97,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,43,10,1,13,33,97,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,66,0,119,0,36,10,1,13,48,97,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,24,0,119,0,29,10,1,13,68,97,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,67,0,119,0,22,10,1,13,82,97,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,25,0,119,0,15,10,1,13,101,97,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,26,0,119,0,8,10,1,13,119,97,134,12,0,0,4,118,3,0], eb + 0);
  HEAPU8.set([1,13,0,0,120,12,3,0,1,2,4,0,119,0,1,10,1,13,140,97,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,68,0,119,0,250,9,1,13,155,97,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,69,0,119,0,243,9,1,13,170,97,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,70,0,119,0,236,9,1,13,190,97,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,71,0,119,0,229,9,1,13,210,97,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,72,0,119,0,222,9,1,13,230,97,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,73,0,119,0,215,9,1,13,0,98,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,13,0,119,0,208,9,1,13,12,98,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,14,0,119,0,201,9,1,13,23,98,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,78,0,119,0,194,9,1,13,37,98,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,27,0,119,0,187,9,1,13,222,75,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,79,0,119,0,180,9,1,13,52,98,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,7,0,119,0,173,9,1,13,64,98,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,166,9,1,13,76,98,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,159,9,1,13,88,98,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,152,9,1,13,100,98,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,73,0,119,0,145,9,1,13,112,98,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,74,0,119,0,138,9,1,13,124,98,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,28,0,119,0,131,9,1,13,136,98,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,15,0,119,0,124,9,1,13,148,98,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,75,0,119,0,117,9,1,13,161,98,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,76,0,119,0,110,9,1,13,174,98,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,77,0,119,0,103,9,1,13,187,98,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,78,0,119,0,96,9,1,13,200,98,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,79,0,119,0,89,9,1,13,213,98,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,80,0,119,0,82,9,1,13,226,98,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,81,0,119,0,75,9,1,13,239,98,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,82,0,119,0,68,9,1,13,252,98,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,29,0,119,0,61,9,1,13,15,99,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,30,0,119,0,54,9,1,13,34,99,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,31,0,119,0,47,9,1,13,53,99,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,80,0,119,0,40,9,1,13,71,99,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,33,9,1,13,88,99,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,74,0,119,0,26,9,1,13,106,99,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,8,0,119,0,19,9,1,13,123,99,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,75,0,119,0,12,9,1,13,141,99,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,76,0,119,0,5,9,1,13,158,99,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,77,0,119,0,254,8,1,13,176,99,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,5,0,119,0,247,8,1,13,193,99,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,78,0,119,0,240,8,1,13,211,99,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,4,0,119,0,233,8,1,13,228,99,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,79,0,119,0,226,8,1,13,246,99,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,83,0,119,0,219,8,1,13,7,100,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,80,0,119,0,212,8,1,13,25,100,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,205,8,1,13,42,100,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,81,0,119,0,198,8,1,13,60,100,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,191,8,1,13,77,100,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,82,0,119,0,184,8,1,13,95,100,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,32,0,119,0,177,8,1,13,112,100,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,83,0,119,0,170,8,1,13,130,100,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,84,0,119,0,163,8,1,13,149,100,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,85,0,119,0,156,8,1,13,168,100,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,86,0,119,0,149,8,1,13,187,100,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,16,0,119,0,142,8,1,13,206,100,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,87,0,119,0,135,8,1,13,226,100,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,88,0,119,0,128,8,1,13,246,100,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,89,0,119,0,121,8,1,13,10,101,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,90,0,119,0,114,8,1,13,28,101,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,107,8,1,13,45,101,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,91,0,119,0,100,8,1,13,63,101,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,93,8,1,13,80,101,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,92,0,119,0,86,8,1,13,98,101,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,93,0,119,0,79,8,1,13,116,101,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,17,0,119,0,72,8,1,13,133,101,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,94,0,119,0,65,8,1,13,151,101,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,95,0,119,0,58,8,1,13,170,101,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,96,0,119,0,51,8,1,13,189,101,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,97,0,119,0,44,8,1,13,208,101,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,9,0,119,0,37,8,1,13,230,101,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,33,0,119,0,30,8,1,13,251,101,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,34,0,119,0,23,8,1,13,16,102,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,35,0,119,0,16,8,1,13,37,102,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,36,0,119,0,9,8,1,13,58,102,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,37,0,119,0,2,8,1,13,79,102,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,38,0,119,0,251,7,1,13,100,102,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,18,0,119,0,244,7,1,13,113,102,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,84,0,119,0,237,7,1,13,129,102,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,85,0,119,0,230,7,1,13,145,102,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,98,0,119,0,223,7,1,13,155,102,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,99,0,119,0,216,7,1,13,166,102,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,5,0,119,0,209,7,1,13,179,102,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,81,0,119,0,202,7,1,13,204,102,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,9,0,119,0,195,7,1,13,227,102,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,19,0,119,0,188,7,1,13,245,102,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,86,0,119,0,181,7,1,13,6,103,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,39,0,119,0,174,7,1,13,34,103,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,9,0,119,0,167,7,1,13,64,103,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,100,0,119,0,160,7,1,13,77,103,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,101,0,119,0,153,7,1,13,102,103,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,10,0,119,0,146,7,1,13,125,103,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,20,0,119,0,139,7,1,13,148,103,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,87,0,119,0,132,7,1,13,169,103,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,88,0,119,0,125,7,1,13,191,103,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,102,0,119,0,118,7,1,13,209,103,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,89,0,119,0,111,7,1,13,227,103,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,40,0,119,0,104,7,1,13,245,103,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,21,0,119,0,97,7,1,13,7,104,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,103,0,119,0,90,7,1,13,26,104,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,90,0,119,0,83,7,1,13,45,104,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,41,0,119,0,76,7,1,13,64,104,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,22,0,119,0,69,7,1,13,83,104,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,104,0,119,0,62,7,1,13,102,104,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,105,0,119,0,55,7,1,13,121,104,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,106,0,119,0,48,7,1,13,140,104,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,107,0,119,0,41,7,1,13,159,104,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,108,0,119,0,34,7,1,13,179,104,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,109,0,119,0,27,7,1,13,199,104,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,110,0,119,0,20,7,1,13,219,104,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,111,0,119,0,13,7,1,13,239,104,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,112,0,119,0,6,7,1,13,2,105,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,113,0,119,0,255,6,1,13,21,105,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,114,0,119,0,248,6,1,13,41,105,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,115,0,119,0,241,6,1,13,61,105,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,91,0,119,0,234,6,1,13,77,105,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,92,0,119,0,227,6,1,13,100,105,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,6,0,119,0,220,6,1,13,122,105,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,116,0,119,0,213,6,1,13,135,105,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,93,0,119,0,206,6,1,13,148,105,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,42,0,119,0,199,6,1,13,161,105,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,23,0,119,0,192,6,1,13,174,105,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,94,0,119,0,185,6,1,13,188,105,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,95,0,119,0,178,6,1,13,202,105,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,96,0,119,0,171,6,1,13,216,105,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,97,0,119,0,164,6,1,13,230,105,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,98,0,119,0,157,6,1,13,248,105,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,99,0,119,0,150,6,1,13,11,106,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,100,0,119,0,143,6,1,13,32,106,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,101,0,119,0,136,6,1,13,54,106,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,102,0,119,0,129,6,1,13,70,106,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,103,0,119,0,122,6,1,13,87,106,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,104,0,119,0,115,6,1,13,103,106,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,108,6,1,13,119,106,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,43,0,119,0,101,6,1,13,141,106,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,24,0,119,0,94,6,1,13,165,106,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,105,0,119,0,87,6,1,13,177,106,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,82,0,119,0,80,6,1,13,201,106,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,44,0,119,0,73,6,1,13,217,106,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,117,0,119,0,66,6,1,13,231,106,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,118,0,119,0,59,6,1,13,248,106,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,119,0,119,0,52,6,1,13,6,107,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,45,6,1,13,30,107,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,106,0,119,0,38,6,1,13,55,107,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,31,6,1,13,79,107,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,107,0,119,0,24,6,1,13,104,107,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,17,6,1,13,130,107,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,108,0,119,0,10,6,1,13,157,107,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,3,6,1,13,183,107,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,109,0,119,0,252,5,1,13,210,107,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,110,0,119,0,245,5,1,13,237,107,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,111,0,119,0,238,5,1,13,8,108,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,112,0,119,0,231,5,1,13,37,108,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,113,0,119,0,224,5,1,13,66,108,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,114,0,119,0,217,5,1,13,85,108,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,15,0,119,0,210,5,1,13,176,75,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,120,0,119,0,203,5,1,13,140,75,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,16,0,119,0,196,5,1,13,99,75,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,189,5,1,13,161,75,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,121,0,119,0,182,5,1,13,121,75,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,83,0,119,0,175,5,1,13,97,108,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,115,0,119,0,168,5,1,13,120,108,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,116,0,119,0,161,5,1,13,143,108,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,45,0,119,0,154,5,1,13,164,108,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,17,0,119,0,147,5,1,13,181,108,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,18,0,119,0,140,5,1,13,197,108,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,46,0,119,0,133,5,1,13,235,108,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,84,0,119,0,126,5,1,13,252,108,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,119,5,1,13,14,109,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,25,0,119,0,112,5,1,13,47,109,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,26,0,119,0,105,5,1,13,73,109,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,85,0,119,0,98,5,1,13,91,109,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,122,0,119,0,91,5,1,13,112,109,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,123,0,119,0,84,5,1,13,130,109,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,19,0,119,0,77,5,1,13,146,109,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,47,0,119,0,70,5,1,13,166,109,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,27,0,119,0,63,5,1,13,188,109,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,28,0,119,0,56,5,1,13,211,109,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,7,0,119,0,49,5,1,13,234,109,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,48,0,119,0,42,5,1,13,4,110,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,29,0,119,0,35,5,1,13,32,110,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,117,0,119,0,28,5,1,13,54,110,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,11,0,119,0,21,5,1,13,78,110,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,30,0,119,0,14,5,1,13,93,110,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,6,0,119,0,7,5,1,13,107,110,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,7,0,119,0,0,5,1,13,121,110,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,124,0,119,0,249,4,1,13,143,110,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,125,0,119,0,242,4,1,13,161,110,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,126,0,119,0,235,4,1,13,180,110,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,127,0,119,0,228,4,1,13,198,110,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,128,0,119,0,221,4,1,13,217,110,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,118,0,119,0,214,4,1,13,246,110,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,49,0,119,0,207,4,1,13,16,111,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,50,0,119,0,200,4,1,13,38,111,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,20,0,119,0,193,4,1,13,63,111,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,129,0,119,0,186,4,1,13,84,111,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,130,0,119,0,179,4,1,13,106,111,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,31,0,119,0,172,4,1,13,129,111,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,32,0,119,0,165,4,1,13,152,111,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,10,0,119,0,158,4,1,13,175,111,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,5,0,119,0,151,4,1,13,188,111,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,51,0,119,0,144,4,1,13,0,0,135,12,3,0,13,0,0,0,121,12,139,4,1,13,247,111,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,86,0,119,0,133,4,1,13,120,108,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,116,0,119,0,126,4,1,13,6,112,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,52,0,119,0,119,4,1,13,217,106,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,117,0,119,0,112,4,1,13,174,80,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,24,0,119,0,105,4,1,13,19,112,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,87,0,119,0,98,4,1,13,27,112,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,12,0,119,0,91,4,1,13,33,112,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,5,0,119,0,84,4,1,13,44,112,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,7,0,119,0,77,4,1,13,55,112,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,131,0,119,0,70,4,1,13,66,112,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,132,0,119,0,63,4,1,13,77,112,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,4,0,119,0,56,4,1,13,88,112,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,4,0,119,0,49,4,1,13,99,112,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,119,0,119,0,42,4,1,13,110,112,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,120,0,119,0,35,4,1,13,121,112,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,3,0,119,0,28,4,1,13,132,112,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,6,0,119,0,21,4,1,13,143,112,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,53,0,119,0,14,4,1,13,154,112,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,54,0,119,0,7,4,1,13,165,112,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,88,0,119,0,0,4,1,13,177,112,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,89,0,119,0,249,3,1,13,189,112,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,90,0,119,0,242,3,1,13,201,112,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,91,0,119,0,235,3,1,13,213,112,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,92,0,119,0,228,3,1,13,225,112,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,93,0,119,0,221,3,1,13,237,112,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,94,0,119,0,214,3,1,13,249,112,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,95,0,119,0,207,3,1,13,5,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,96,0,119,0,200,3,1,13,17,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,97,0,119,0,193,3,1,13,29,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,98,0,119,0,186,3,1,13,41,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,99,0,119,0,179,3,1,13,53,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,121,0,119,0,172,3,1,13,63,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,5,0,119,0,165,3,1,13,73,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,5,0,119,0,158,3,1,13,83,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,122,0,119,0,151,3,1,13,93,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,123,0,119,0,144,3,1,13,103,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,124,0,119,0,137,3,1,13,114,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,125,0,119,0,130,3,1,13,125,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,126,0,119,0,123,3,1,13,136,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,55,0,119,0,116,3,1,13,146,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,4,0,119,0,109,3,1,13,156,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,7,0,119,0,102,3,1,13,166,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,56,0,119,0,95,3,1,13,176,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,57,0,119,0,88,3,1,13,186,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,58,0,119,0,81,3,1,13,197,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,59,0,119,0,74,3,1,13,208,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,60,0,119,0,67,3,1,13,219,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,100,0,119,0,60,3,1,13,230,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,101,0,119,0,53,3,1,13,241,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,102,0,119,0,46,3,1,13,252,113,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,103,0,119,0,39,3,1,13,7,114,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,104,0,119,0,32,3,1,13,18,114,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,105,0,119,0,25,3,1,13,30,114,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,106,0,119,0,18,3,1,13,42,114,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,107,0,119,0,11,3,1,13,54,114,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,108,0,119,0,4,3,1,13,65,114,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,109,0,119,0,253,2,1,13,76,114,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,110,0,119,0,246,2,1,13,87,114,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,111,0,119,0,239,2,1,13,98,114,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,112,0,119,0,232,2,1,13,109,114,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,113,0,119,0,225,2,1,13,121,114,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,114,0,119,0,218,2,1,13,133,114,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,115,0,119,0,211,2,1,13,145,114,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,8,0,119,0,204,2,1,13,157,114,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,116,0,119,0,197,2,1,13,170,114,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,4,0,119,0,190,2,1,13,182,114,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,117,0,119,0,183,2,1,13,195,114,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,127,0,119,0,176,2,1,13,213,114,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,133,0,119,0,169,2,1,13,227,114,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,9,0,119,0,162,2,1,13,239,114,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,128,0,119,0,155,2,1,13,250,114,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,6,0,119,0,148,2,1,13,5,115,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,6,0,119,0,141,2,1,13,16,115,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,129,0,119,0,134,2,1,13,27,115,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,130,0,119,0,127,2,1,13,38,115,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,118,0,119,0,120,2,1,13,50,115,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,119,0,119,0,113,2,1,13,62,115,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,120,0,119,0,106,2,1,13,74,115,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,121,0,119,0,99,2,1,13,86,115,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,122,0,119,0,92,2,1,13,1,92,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,8,0,119,0,85,2,1,13,98,115,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,123,0,119,0,78,2,1,13,118,115,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,124,0,119,0,71,2,1,13,139,115,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,61,0,119,0,64,2,1,13,155,115,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,131,0,119,0,57,2,1,13,171,115,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,62,0,119,0,50,2,1,13,186,115,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,63,0,119,0,43,2,1,13,204,115,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,125,0,119,0,36,2,1,13,226,115,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,126,0,119,0,29,2,1,13,239,115,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,13,0,119,0,22,2,1,13,252,115,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,14,0,119,0,15,2,1,13,8,116,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,15,0,119,0,8,2,1,13,23,116,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,127,0,119,0,1,2,1,13,37,116,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,128,0,119,0,250,1,1,13,171,91,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,129,0,119,0,243,1,1,13,148,91,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,130,0,119,0,236,1,1,13,217,91,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,131,0,119,0,229,1,1,13,194,91,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,132,0,119,0,222,1,1,13,51,116,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,133,0,119,0,215,1,1,13,65,116,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,134,0,119,0,208,1,1,13,79,116,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,201,1,1,13,87,116,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,2,0,119,0,194,1,1,13,97,116,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,5,0,119,0,187,1,1,13,107,116,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,8,0,119,0,180,1,1,13,117,116,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,7,0,119,0,173,1,1,13,126,116,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,7,0,119,0,166,1,1,13,135,116,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,8,0,119,0,159,1,1,13,148,116,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,8,0,119,0,152,1,1,13,161,116,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,135,0,119,0,145,1,1,13,174,116,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,136,0,119,0,138,1,1,13,187,116,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,4,0,119,0,131,1,1,13,196,116,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,132,0,119,0,124,1,1,13,205,116,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,133,0,119,0,117,1,1,13,215,116,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,134,0,119,0,110,1,1,13,225,116,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,10,0,119,0,103,1,1,13,239,116,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,134,0,119,0,96,1,1,13,253,116,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,135,0,119,0,89,1,1,13,12,117,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,136,0,119,0,82,1,1,13,27,117,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,5,0,119,0,75,1,1,13,39,117,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,135,0,119,0,68,1,1,13,51,117,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,136,0,119,0,61,1,1,13,64,117,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,137,0,119,0,54,1,1,13,77,117,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,1,0,119,0,47,1,1,13,87,117,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,6,0,119,0,40,1,1,13,97,117,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,138,0,119,0,33,1,1,13,107,117,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,139,0,119,0,26,1,1,13,118,117,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,140,0,119,0,19,1,1,13,129,117,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,141,0,119,0,12,1,1,13,140,117,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,142,0,119,0,5,1,1,13,154,117,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,143,0,119,0,254,0,1,13,168,117,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,5,0,119,0,247,0,1,13,181,117,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,5,0,119,0,240,0,1,13,194,117,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,9,0,119,0,233,0,1,13,207,117,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,137,0,119,0,226,0,1,13,220,117,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,138,0,119,0,219,0,1,13,233,117,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,6,0,119,0,212,0,1,13,246,117,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,8,0,119,0,205,0,1,13,3,118,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,137,0,119,0,198,0,1,13,16,118,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,138,0,119,0,191,0,1,13,29,118,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,9,0,119,0,184,0,1,13,42,118,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,9,0,119,0,177,0,1,13,55,118,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,144,0,119,0,170,0,1,13,68,118,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,145,0,119,0,163,0,1,13,81,118,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,6,0,119,0,156,0,1,13,94,118,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,9,0,119,0,149,0,1,13,107,118,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,64,0,119,0,142,0,1,13,120,118,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,65,0,119,0,135,0,1,13,133,118,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,139,0,119,0,128,0,1,13,147,118,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,140,0,119,0,121,0,1,13,161,118,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,141,0,119,0,114,0,1,13,175,118,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,142,0,119,0,107,0,1,13,189,118,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,143,0,119,0,100,0,1,13,203,118,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,144,0,119,0,93,0,1,13,217,118,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,145,0,119,0,86,0,1,13,231,118,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,146,0,119,0,79,0,1,13,245,118,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,147,0,119,0,72,0,1,13,3,119,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,148,0,119,0,65,0,1,13,17,119,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,149,0,119,0,58,0,1,13,31,119,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,150,0,119,0,51,0,1,13,45,119,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,151,0,119,0,44,0,1,13,59,119,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,152,0,119,0,37,0,1,13,73,119,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,153,0,119,0,30,0,1,13,87,119,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,154,0,119,0,23,0,1,13,101,119,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,66,0,119,0,16,0,1,13,126,119,134,12,0,0,4,118,3,0,1,13,0,0,120,12,3,0,1,2,67,0,119,0,9,0,1,13,151,119,134,12,0,0,4,118,3,0,1,13,0,0], eb + 10240);
  HEAPU8.set([120,12,3,0,1,2,155,0,119,0,2,0,1,2,0,0,139,2,0,0,140,0,12,0,0,0,0,0,1,1,0,0,1,2,0,0,135,0,4,0,1,2,0,0,1,2,0,0,1,1,0,0,135,0,5,0,2,1,0,0,1,1,0,0,135,0,6,0,1,0,0,0,41,0,0,24,1,1,0,0,1,2,0,0,135,0,7,0,1,2,0,0,1,2,0,0,135,0,8,0,2,0,0,0,1,2,0,0,1,1,0,0,1,3,0,0,135,0,9,0,2,1,3,0,1,3,0,0,1,1,0,0,1,2,0,0,135,0,10,0,3,1,2,0,1,2,0,0,1,1,0,0,1,3,0,0,135,0,11,0,2,1,3,0,1,3,0,0,1,1,0,0,135,0,12,0,3,1,0,0,1,1,0,0,1,3,0,0,135,0,13,0,1,3,0,0,1,3,0,0,1,1,0,0,135,0,14,0,3,1,0,0,1,1,0,0,135,0,15,0,1,0,0,0,41,0,0,24,1,1,0,0,1,3,0,0,1,2,0,0,1,4,0,0,135,0,16,0,1,3,2,4,1,4,0,0,1,2,0,0,1,3,0,0,1,1,0,0,135,0,17,0,4,2,3,1,1,1,0,0,1,3,0,0,1,2,0,0,1,4,0,0,135,0,18,0,1,3,2,4,1,4,0,0,1,2,0,0,135,0,19,0,4,2,0,0,1,2,0,0,135,0,20,0,2,0,0,0,41,0,0,24,1,2,0,0,1,4,0,0,1,3,0,0,135,0,21,0,2,4,3,0,1,3,0,0,1,4,0,0,1,2,0,0,135,0,22,0,3,4,2,0,1,2,0,0,1,4,0,0,135,0,23,0,2,4,0,0,1,4,0,0,1,2,0,0,135,0,24,0,4,2,0,0,1,2,0,0,1,4,0,0,1,3,0,0,1,1,0,0,135,0,25,0,2,4,3,1,1,1,0,0,1,3,0,0,1,4,0,0,1,2,0,0,135,0,26,0,1,3,4,2,1,2,0,0,1,4,0,0,135,0,27,0,2,4,0,0,1,4,0,0,1,2,0,0,135,0,28,0,4,2,0,0,1,2,0,0,1,4,0,0,1,3,0,0,135,0,29,0,2,4,3,0,1,3,0,0,135,0,30,0,3,0,0,0,135,0,31,0,1,3,0,0,135,0,32,0,3,0,0,0,1,3,0,0,135,0,33,0,3,0,0,0,1,3,0,0,135,0,34,0,3,0,0,0,1,3,0,0,1,4,0,0,135,0,35,0,3,4,0,0,1,4,0,0,135,0,36,0,4,0,0,0,1,4,0,0,135,0,37,0,4,0,0,0,1,4,0,0,1,3,0,0,1,2,0,0,1,1,0,0,1,5,0,0,1,6,0,0,1,7,0,0,135,0,38,0,4,3,2,1,5,6,7,0,1,7,0,0,1,6,0,0,1,5,0,0,1,1,0,0,1,2,0,0,1,3,0,0,1,4,0,0,135,0,39,0,7,6,5,1,2,3,4,0,1,4,0,0,1,3,0,0,1,2,0,0,1,1,0,0,135,0,40,0,4,3,2,1,1,1,0,0,1,2,0,0,135,0,41,0,1,2,0,0,1,2,0,0,1,1,0,0,1,3,0,0,135,0,42,0,2,1,3,0,1,3,0,0,1,1,0,0,1,2,0,0,1,4,0,0,135,0,43,0,3,1,2,4,1,4,0,0,1,2,0,0,1,1,0,0,135,0,44,0,4,2,1,0,1,1,0,0,1,2,0,0,1,4,0,0,1,3,0,0,135,0,45,0,1,2,4,3,1,3,0,0,1,4,0,0,1,2,0,0,1,1,0,0,135,0,46,0,3,4,2,1,1,1,0,0,1,2,0,0,135,0,47,0,1,2,0,0,1,2,0,0,1,1,0,0,1,4,0,0,135,0,48,0,2,1,4,0,1,4,0,0,1,1,0,0,1,2,0,0,135,0,49,0,4,1,2,0,1,2,0,0,1,1,0,0,1,4,0,0,135,0,50,0,2,1,4,0,1,4,0,0,1,1,0,0,1,2,0,0,135,0,51,0,4,1,2,0,1,2,0,0,1,1,0,0,1,4,0,0,135,0,52,0,2,1,4,0,1,4,0,0,1,1,0,0,1,2,0,0,135,0,53,0,4,1,2,0,1,2,0,0,135,0,54,0,2,0,0,0,41,0,0,24,1,2,0,0,135,0,55,0,2,0,0,0,41,0,0,24,1,2,0,0,135,0,56,0,2,0,0,0,1,2,0,0,1,1,0,0,1,4,0,0,1,3,0,0,135,0,57,0,2,1,4,3,1,3,0,0,135,0,58,0,3,0,0,0,1,3,0,0,59,4,0,0,145,4,4,0,135,0,59,0,3,4,0,0,1,4,0,0,59,3,0,0,145,3,3,0,59,1,0,0,145,1,1,0,135,0,60,0,4,3,1,0,1,1,0,0,59,3,0,0,145,3,3,0,59,4,0,0,145,4,4,0,59,2,0,0,145,2,2,0,135,0,61,0,1,3,4,2,1,2,0,0,59,4,0,0,145,4,4,0,59,3,0,0,145,3,3,0,59,1,0,0,145,1,1,0,59,5,0,0,145,5,5,0,135,0,62,0,2,4,3,1,5,0,0,0,1,5,0,0,1,1,0,0,135,0,63,0,5,1,0,0,1,1,0,0,1,5,0,0,1,3,0,0,135,0,64,0,1,5,3,0,1,3,0,0,1,5,0,0,1,1,0,0,1,4,0,0,135,0,65,0,3,5,1,4,1,4,0,0,1,1,0,0,1,5,0,0,1,3,0,0,1,2,0,0,135,0,66,0,4,1,5,3,2,0,0,0,1,2,0,0,1,3,0,0,1,5,0,0,135,0,67,0,2,3,5,0,1,5,0,0,1,3,0,0,1,2,0,0,135,0,68,0,5,3,2,0,1,2,0,0,1,3,0,0,1,5,0,0,135,0,69,0,2,3,5,0,1,5,0,0,1,3,0,0,1,2,0,0,135,0,70,0,5,3,2,0,1,2,0,0,1,3,0,0,1,5,0,0,135,0,71,0,2,3,5,0,1,5,0,0,1,3,0,0,1,2,0,0,135,0,72,0,5,3,2,0,1,2,0,0,1,3,0,0,1,5,0,0,135,0,73,0,2,3,5,0,1,5,0,0,1,3,0,0,1,2,0,0,135,0,74,0,5,3,2,0,1,2,0,0,1,3,0,0,1,5,0,0,1,1,0,0,135,0,75,0,2,3,5,1,1,1,0,0,1,5,0,0,1,3,0,0,1,2,0,0,135,0,76,0,1,5,3,2,1,2,0,0,1,3,0,0,1,5,0,0,1,1,0,0,135,0,77,0,2,3,5,1,1,1,0,0,135,0,78,0,1,0,0,0,1,1,0,0,59,5,0,0,135,0,79,0,1,5,0,0,1,5,0,0,1,1,0,0,135,0,80,0,5,1,0,0,1,1,0,0,59,5,0,0,145,5,5,0,135,0,81,0,1,5,0,0,1,5,0,0,1,1,0,0,135,0,82,0,5,1,0,0,1,1,0,0,1,5,0,0,135,0,83,0,1,5,0,0,1,5,0,0,1,1,0,0,135,0,84,0,5,1,0,0,1,1,0,0,59,5,0,0,59,3,0,0,135,0,85,0,1,5,3,0,1,3,0,0,1,5,0,0,135,0,86,0,3,5,0,0,1,5,0,0,59,3,0,0,145,3,3,0,59,1,0,0,145,1,1,0,135,0,87,0,5,3,1,0,1,1,0,0,1,3,0,0,135,0,88,0,1,3,0,0,1,3,0,0,1,1,0,0,1,5,0,0,135,0,89,0,3,1,5,0,1,5,0,0,1,1,0,0,135,0,90,0,5,1,0,0,1,1,0,0,59,5,0,0,59,3,0,0,59,2,0,0,135,0,91,0,1,5,3,2,1,2,0,0,1,3,0,0,135,0,92,0,2,3,0,0,1,3,0,0,59,2,0,0,145,2,2,0,59,5,0,0,145,5,5,0,59,1,0,0,145,1,1,0,135,0,93,0,3,2,5,1,1,1,0,0,1,5,0,0,135,0,94,0,1,5,0,0,1,5,0,0,1,1,0,0,1,2,0,0,1,3,0,0,135,0,95,0,5,1,2,3,1,3,0,0,1,2,0,0,135,0,96,0,3,2,0,0,1,2,0,0,1,3,0,0,135,0,97,0,2,3,0,0,1,3,0,0,1,2,0,0,135,0,98,0,3,2,0,0,1,2,0,0,1,3,0,0,135,0,99,0,2,3,0,0,1,3,0,0,1,2,0,0,1,1,0,0,1,5,0,0,1,4,0,0,135,0,100,0,3,2,1,5,4,0,0,0,1,4,0,0,1,5,0,0,135,0,101,0,4,5,0,0,1,5,0,0,1,4,0,0,135,0,102,0,5,4,0,0,1,4,0,0,1,5,0,0,135,0,103,0,4,5,0,0,1,5,0,0,1,4,0,0,135,0,104,0,5,4,0,0,1,4,0,0,59,5,0,0,59,1,0,0,59,2,0,0,59,3,0,0,135,0,105,0,4,5,1,2,3,0,0,0,1,3,0,0,1,2,0,0,135,0,106,0,3,2,0,0,1,2,0,0,59,3,0,0,145,3,3,0,59,1,0,0,145,1,1,0,59,5,0,0,145,5,5,0,59,4,0,0,145,4,4,0,135,0,107,0,2,3,1,5,4,0,0,0,1,4,0,0,1,5,0,0,135,0,108,0,4,5,0,0,1,5,0,0,1,4,0,0,135,0,109,0,5,4,0,0,1,4,0,0,1,5,0,0,1,1,0,0,1,3,0,0,1,2,0,0,135,0,110,0,4,5,1,3,2,0,0,0,1,2,0,0,1,3,0,0,135,0,111,0,2,3,0,0,1,3,0,0,1,2,0,0,135,0,112,0,3,2,0,0,1,2,0,0,1,3,0,0,135,0,113,0,2,3,0,0,1,3,0,0,1,2,0,0,135,0,114,0,3,2,0,0,1,2,0,0,1,3,0,0,1,1,0,0,1,5,0,0,1,4,0,0,1,6,0,0,135,0,115,0,2,3,1,5,4,6,0,0,1,6,0,0,1,4,0,0,1,5,0,0,1,1,0,0,135,0,116,0,6,4,5,1,1,1,0,0,1,5,0,0,1,4,0,0,1,6,0,0,135,0,117,0,1,5,4,6,1,6,0,0,1,4,0,0,1,5,0,0,1,1,0,0,135,0,118,0,6,4,5,1,1,1,0,0,1,5,0,0,1,4,0,0,1,6,0,0,135,0,119,0,1,5,4,6,1,6,0,0,1,4,0,0,1,5,0,0,1,1,0,0,135,0,120,0,6,4,5,1,1,1,0,0,1,5,0,0,1,4,0,0,1,6,0,0,135,0,121,0,1,5,4,6,1,6,0,0,1,4,0,0,1,5,0,0,1,1,0,0,1,3,0,0,135,0,122,0,6,4,5,1,3,0,0,0,1,3,0,0,1,1,0,0,1,5,0,0,135,0,123,0,3,1,5,0,1,5,0,0,1,1,0,0,1,3,0,0,135,0,124,0,5,1,3,0,1,3,0,0,1,1,0,0,135,0,125,0,3,1,0,0,1,1,0,0,1,3,0,0,135,0,126,0,1,3,0,0,1,3,0,0,1,1,0,0,135,0,127,0,3,1,0,0,41,0,0,24,1,1,0,0,135,0,128,0,1,0,0,0,135,0,129,0,1,1,0,0,1,3,0,0,1,5,0,0,1,4,0,0,1,6,0,0,135,0,130,0,1,3,5,4,6,0,0,0,1,6,0,0,1,4,0,0,1,5,0,0,135,0,131,0,6,4,5,0,1,5,0,0,1,4,0,0,1,6,0,0,1,3,0,0,135,0,132,0,5,4,6,3,1,3,0,0,1,6,0,0,1,4,0,0,1,5,0,0,1,1,0,0,1,2,0,0,1,7,0,0,135,0,133,0,3,6,4,5,1,2,7,0,1,7,0,0,1,2,0,0,135,0,134,0,7,2,0,0,1,2,0,0,1,7,0,0,135,0,135,0,2,7,0,0,135,0,136,0,1,7,0,0,1,2,0,0,1,1,0,0,1,5,0,0,1,4,0,0,135,0,137,0,7,2,1,5,4,0,0,0,1,4,0,0,1,5,0,0,1,1,0,0,135,0,138,0,4,5,1,0,1,1,0,0,1,5,0,0,1,4,0,0,135,0,139,0,1,5,4,0,1,4,0,0,1,5,0,0,135,0,140,0,4,5,0,0,1,5,0,0,1,4,0,0,1,1,0,0,135,0,141,0,5,4,1,0,1,1,0,0,1,4,0,0,1,5,0,0,1,2,0,0,135,0,142,0,1,4,5,2,1,2,0,0,1,5,0,0,1,4,0,0,1,1,0,0,1,7,0,0,135,0,143,0,2,5,4,1,7,0,0,0,1,7,0,0,1,1,0,0,135,0,144,0,7,1,0,0,1,1,0,0,1,7,0,0,1,4,0,0,135,0,145,0,1,7,4,0,1,4,0,0,1,7,0,0,1,1,0,0,1,5,0,0,135,0,146,0,4,7,1,5,1,5,0,0,1,1,0,0,1,7,0,0,1,4,0,0,1,2,0,0,135,0,147,0,5,1,7,4,2,0,0,0,1,2,0,0,1,4,0,0,135,0,148,0,2,4,0,0,1,4,0,0,1,2,0,0,135,0,149,0,4,2,0,0,1,2,0,0,1,4,0,0,135,0,150,0,2,4,0,0,1,4,0,0,1,2,0,0,135,0,151,0,4,2,0,0,1,2,0,0,1,4,0,0,135,0,152,0,2,4,0,0,1,4,0,0,1,2,0,0,135,0,153,0,4,2,0,0,1,2,0,0,1,4,0,0,135,0,154,0,2,4,0,0,1,4,0,0,1,2,0,0,135,0,155,0,4,2,0,0,1,2,0,0,1,4,0,0,135,0,156,0,2,4,0,0,1,4,0,0,1,2,0,0,135,0,157,0,4,2,0,0,1,2,0,0,1,4,0,0,135,0,158,0,2,4,0,0,1,4,0,0,1,2,0,0,135,0,159,0,4,2,0,0,1,2,0,0,1,4,0,0,1,7,0,0,135,0,160,0,2,4,7,0,1,7,0,0,1,4,0,0,1,2,0,0,135,0,161,0,7,4,2,0,1,2,0,0,1,4,0,0,135,0,162,0,2,4,0,0,1,4,0,0,1,2,0,0,135,0,163,0,4,2,0,0,1,2,0,0,1,4,0,0,1,7,0,0,135,0,164,0,2,4,7,0,1,7,0,0,1,4,0,0,1,2,0,0,1,1,0,0,135,0,165,0,7,4,2,1,1,1,0,0,1,2,0,0,1,4,0,0,1,7,0,0,1,5,0,0,135,0,166,0,1,2,4,7,5,0,0,0,1,5,0,0,1,7,0,0,1,4,0,0,135,0,167,0,5,7,4,0,1,4,0,0,1,7,0,0,1,5,0,0,135,0,168,0,4,7,5,0,1,5,0,0,1,7,0,0,1,4,0,0,135,0,169,0,5,7,4,0,1,4,0,0,1,7,0,0,1,5,0,0,135,0,170,0,4,7,5,0,1,5,0,0,1,7,0,0,1,4,0,0,135,0,171,0,5,7,4,0,1,4,0,0,1,7,0,0,1,5,0,0,135,0,172,0,4,7,5,0,1,5,0,0,1,7,0,0,1,4,0,0,135,0,173,0,5,7,4,0,1,4,0,0,1,7,0,0,1,5,0,0,135,0,174,0,4,7,5,0,1,5,0,0,1,7,0,0,1,4,0,0,135,0,175,0,5,7,4,0,1,4,0,0,1,7,0,0,1,5,0,0,135,0,176,0,4,7,5,0,1,5,0,0,1,7,0,0,1,4,0,0,135,0,177,0,5,7,4,0,1,4,0,0,1,7,0,0,59,5,0,0,145,5,5,0,1,2,0,0,135,0,178,0,4,7,5,2,1,2,0,0,1,5,0,0,1,7,0,0,1,4,0,0,135,0,179,0,2,5,7,4,1,4,0,0,1,7,0,0,1,5,0,0,1,2,0,0,1,1,0,0,135,0,180,0,4,7,5,2,1,0,0,0,1,1,0,0,1,2,0,0,1,5,0,0,135,0,181,0,1,2,5,0,1,5,0,0,135,0,182,0,5,0,0,0,1,5,0,0,1,2,0,0,1,1,0,0,1,7,0,0,135,0,183,0,5,2,1,7,1,7,0,0,1,1,0,0,135,0,184,0,7,1,0,0,1,1,0,0,1,7,0,0,135,0,185,0,1,7,0,0,1,7,0,0,1,1,0,0,135,0,186,0,7,1,0,0,1,1,0,0,1,7,0,0,59,2,0,0,59,5,0,0,59,4,0,0,59,6,0,0,135,0,187,0,1,7,2,5,4,6,0,0,1,6,0,0,1,4,0,0,1,5,0,0,135,0,188,0,6,4,5,0,1,5,0,0,1,4,0,0,59,6,0,0,145,6,6,0,59,2,0,0,145,2,2,0,59,7,0,0,145,7,7,0,59,1,0,0,145,1,1,0,135,0,189,0,5,4,6,2,7,1,0,0,1,1,0,0,1,7,0,0,1,2,0,0,135,0,190,0,1,7,2,0,1,2,0,0,1,7,0,0,59,1,0,0,59,6,0,0,59,4,0,0,59,5,0,0,135,0,191,0,2,7,1,6,4,5,0,0,1,5,0,0,1,4,0,0,1,6,0,0,135,0,192,0,5,4,6,0,1,6,0,0,1,4,0,0,59,5,0,0,145,5,5,0,59,1,0,0,145,1,1,0,59,7,0,0,145,7,7,0,59,2,0,0,145,2,2,0,135,0,193,0,6,4,5,1,7,2,0,0,1,2,0,0,1,7,0,0,1,1,0,0,135,0,194,0,2,7,1,0,1,1,0,0,1,7,0,0,1,2,0,0,135,0,195,0,1,7,2,0,1,2,0,0,1,7,0,0,1,1,0,0,135,0,196,0,2,7,1,0,1,1,0,0,1,7,0,0,1,2,0,0,135,0,197,0,1,7,2,0,59,2,0,0,145,2,2,0,135,0,198,0,2,0,0,0,59,2,0,0,145,2,2,0,59,7,0,0,145,7,7,0,59,1,0,0,145,1,1,0,59,5,0,0,145,5,5,0,135,0,199,0,2,7,1,5,1,5,0,0,135,0,200,0,5,0,0,0,1,5,0,0,135,0,201,0,5,0,0,0,1,5,0,0,1,1,0,0,1,7,0,0,1,2,0,0,135,0,202,0,5,1,7,2,1,2,0,0,1,7,0,0,135,0,203,0,2,7,0,0,1,7,0,0,135,0,204,0,7,0,0,0,1,7,0,0,135,0,205,0,7,0,0,0,1,7,0,0,135,0,206,0,7,0,0,0,59,7,0,0,145,7,7,0,135,0,207,0,7,0,0,0,59,7,0,0,145,7,7,0,135,0,208,0,7,0,0,0,1,7,0,0,1,2,0,0,135,0,209,0,7,2,0,0,59,2,0,0,145,2,2,0,59,7,0,0,145,7,7,0,135,0,210,0,2,7,0,0,1,7,0,0,135,0,211,0,7,0,0,0,1,7,0,0,135,0,212,0,7,0,0,0,1,7,0,0,135,0,213,0,7,0,0,0,1,7,0,0,135,0,214,0,7,0,0,0,1,7,0,0,1,2,0,0,1,1,0,0,1,5,0,0,135,0,215,0,7,2,1,5,1,5,0,0,1,1,0,0,135,0,216,0,5,1,0,0,1,1,0,0,1,5,0,0,135,0,217,0,1,5,0,0,1,5,0,0,135,0,218,0,5,0,0,0,1,5,0,0,135,0,219,0,5,0,0,0,1,5,0,0,135,0,220,0,5,0,0,0,41,0,0,24,1,5,0,0,1,1,0,0,135,0,221,0,5,1,0,0,1,1,0,0,1,5,0,0,135,0,222,0,1,5,0,0,1,5,0,0,1,1,0,0,135,0,223,0,5,1,0,0,1,1,0,0,1,5,0,0,135,0,224,0,1,5,0,0,1,5,0,0,135,0,225,0,5,0,0,0,135,0,226,0,1,5,0,0,135,0,227,0,5,0,0,0,135,0,228,0,1,5,0,0,135,0,229,0,5,0,0,0,135,0,230,0,1,5,0,0,135,0,231,0,5,0,0,0,1,5,0,0,1,1,0,0,135,0,232,0,5,1,0,0,135,0,233,0,135,0,234,0,1,1,0,0,1,5,0,0,135,0,235,0,1,5,0,0,59,5,0,0,135,0,236,0,5,0,0,0,1,5,0,0,135,0,237,0,5,0,0,0,1,5,0,0,135,0,238,0,5,0,0,0,59,5,0,0,59,1,0,0,135,0,239,0,5,1,0,0,59,1,0,0,145,1,1,0,59,5,0,0,145,5,5,0,59,2,0,0,145,2,2,0,59,7,0,0,145,7,7,0,135,0,240,0,1,5,2,7,1,7,0,0,59,2,0,0,145,2,2,0,135,0,241,0,7,2,0,0,1,2,0,0,1,7,0,0,1,5,0,0,1,1,0,0,135,0,242,0,2,7,5,1,1,1,0,0,135,0,243,0,1,0,0,0,41,0,0,24,1,1,0,0,1,5,0,0,135,0,244,0,1,5,0,0,1,5,0,0,135,0,245,0,5,0,0,0,1,5,0,0,1,1,0,0,135,0,246,0,5,1,0,0,135,0,247,0,1,1,0,0,135,0,248,0,1,0,0,0,1,1,0,0,1,5,0,0,1,7,0,0,135,0,249,0,1,5,7,0,1,7,0,0,135,0,250,0,7,0,0,0,59,7,0,0,135,0,251,0,7,0,0,0,59,7,0,0,145,7,7,0,135,0,252,0,7,0,0,0,1,7,0,0,135,0,253,0,7,0,0,0,1,7,0,0,135,0,254,0,7,0,0,0,1,7,0,0,135,0,255,0,7,0,0,0,1,7,0,0,135,0,0,1,7,0,0,0,1,7,0,0,135,0,1,1,7,0,0,0,1,7,0,0,135,0,2,1,7,0,0,0,1,7,0,0,135,0,3,1,7,0,0,0,1,7,0,0,135,0,4,1,7,0,0,0,59,7,0,0,59,5,0,0,135,0,5,1,7,5,0,0,59,5,0,0,145,5,5,0,59,7,0,0,145,7,7,0,135,0,6,1,5,7,0,0,1,7,0,0,1,5,0,0,135,0,7,1,7,5,0,0,1,5,0,0,1,7,0,0,135,0,8,1,5,7,0,0,59,7,0,0,59,5,0,0,59,1,0,0,135,0,9,1,7,5,1,0,59,1,0,0,145,1,1,0,59,5,0,0,145,5,5,0,59,7,0,0,145,7,7,0,135,0,10,1,1,5,7,0,1,7,0,0,1,5,0,0,1,1,0,0,135,0,11,1,7,5,1,0,1,1,0,0,1,5,0,0,1,7,0,0,135,0,12,1,1,5,7,0,59,7,0,0,59,5,0,0,59,1,0,0,59,2,0,0,135,0,13,1,7,5,1,2,59,2,0,0,145,2,2,0,59,1,0,0,145,1,1,0,59,5,0,0,145,5,5,0,59,7,0,0,145,7,7,0,135,0,14,1,2,1,5,7,1,7,0,0,1,5,0,0,1,1,0,0,1,2,0,0,135,0,15,1,7,5,1,2,1,2,0,0,1,1,0,0,1,5,0,0,1,7,0,0,135,0,16,1,2,1,5,7,1,7,0,0,135,0,17,1,7,0,0,0,1,7,0,0,135,0,18,1,7,0,0,0,1,7,0,0,135,0,19,1,7,0,0,0,1,7,0,0,135,0,20,1,7,0,0,0,1,7,0,0,135,0,21,1,7,0,0,0,1,7,0,0,135,0,22,1,7,0,0,0,1,7,0,0,135,0,23,1,7,0,0,0,1,7,0,0,135,0,24,1,7,0,0,0,1,7,0,0,135,0,25,1,7,0,0,0,1,7,0,0,135,0,26,1,7,0,0,0,1,7,0,0,135,0,27,1,7,0,0,0,1,7,0,0,135,0,28,1,7,0,0,0,59,7,0,0,59,5,0,0,59,1,0,0,59,2,0,0,135,0,29,1,7,5,1,2,59,2,0,0,145,2,2,0,59,1,0,0,145,1,1,0,59,5,0,0,145,5,5,0,59,7,0,0,145,7,7,0,135,0,30,1,2,1,5,7,1,7,0,0,1,5,0,0,1,1,0,0,1,2,0,0,135,0,31,1,7,5,1,2,1,2,0,0,1,1,0,0,1,5,0,0,1,7,0,0,135,0,32,1,2,1,5,7,1,7,0,0,1,5,0,0,135,0,33,1,7,5,0,0,1,5,0,0,1,7,0,0,135,0,34,1,5,7,0,0,1,7,0,0,1,5,0,0,135,0,35,1,7,5,0,0,1,5,0,0,1,7,0,0,135,0,36,1,5,7,0,0,1,7,0,0,1,5,0,0,1,1,0,0,135,0,37,1,7,5,1,0,1,1,0,0,1,5,0,0,135,0,38,1,1,5,0,0,1,5,0,0,1,1,0,0,135,0,39,1,5,1,0,0,1,1,0,0,135,0,40,1,1,0,0,0,1,1,0,0,1,5,0,0,1,7,0,0,135,0,41,1,1,5,7,0,1,7,0,0,1,5,0,0,1,1,0,0,1,2,0,0,135,0,42,1,7,5,1,2,1,2,0,0,1,1,0,0,1,5,0,0,135,0,43,1,2,1,5,0,1,5,0,0,1,1,0,0,1,2,0,0,135,0,44,1,5,1,2,0,1,2,0,0,1,1,0,0,1,5,0,0,135,0,45,1,2,1,5,0,1,5,0,0,1,1,0,0,1,2,0,0,135,0,46,1,5,1,2,0,1,2,0,0,1,1,0,0,1,5,0,0,135,0,47,1,2,1,5,0,1,5,0,0,1,1,0,0,135,0,48,1,5,1,0,0,59,1,0,0,145,1,1,0,59,5,0,0,145,5,5,0,135,0,49,1,1,5,0,0,1,5,0,0,59,1,0,0,145,1,1,0,135,0,50,1,5,1,0,0,1,1,0,0,1,5,0,0,135,0,51,1,1,5,0,0,1,5,0,0,59,1,0,0,145,1,1,0,135,0,52,1,5,1,0,0,1,1,0,0,1,5,0,0,135,0,53,1,1,5,0,0,1,5,0,0,1,1,0,0,1,2,0,0,135,0,54,1,5,1,2,0,1,2,0,0,1,1,0,0,1,5,0,0,135,0,55,1,2,1,5,0,1,5,0,0,1,1,0,0,1,2,0,0,135,0,56,1,5,1,2,0,1,2,0,0,1,1,0,0,135,0,57,1,2,1,0,0,1,1,0,0,1,2,0,0,135,0,58,1,1,2,0,0,1,2,0,0,1,1,0,0,135,0,59,1,2,1,0,0,1,1,0,0,1,2,0,0,59,5,0,0,145,5,5,0,59,7,0,0,145,7,7,0,59,4,0,0,145,4,4,0,59,6,0,0,145,6,6,0,1,3,0,0,135,0,60,1,1,2,5,7,4,6,3,0,1,3,0,0,1,6,0,0,1,4,0,0,1,7,0,0,1,5,0,0,1,2,0,0,1,1,0,0,135,0,61,1,3,6,4,7,5,2,1,0,1,1,0,0,1,2,0,0,1,5,0,0,1,7,0,0,1,4,0,0,135,0,62,1,1,2,5,7,4,0,0,0,1,4,0,0,1,7,0,0,1,5,0,0,1,2,0,0,1,1,0,0,135,0,63,1,4,7,5,2,1,0,0,0,1,1,0,0,1,2,0,0,1,5,0,0,135,0,64,1,1,2,5,0,1,5,0,0,135,0,65,1,5,0,0,0,1,5,0,0,1,2,0,0,1,1,0,0,135,0,66,1,5,2,1,0,1,1,0,0,135,0,67,1,1,0,0,0,1,1,0,0,1,2,0,0,1,5,0,0,135,0,68,1,1,2,5,0,1,5,0,0,1,2,0,0,1,1,0,0,135,0,69,1,5,2,1,0,1,1,0,0,1,2,0,0,1,5,0,0,135,0,70,1,1,2,5,0,1,5,0,0,1,2,0,0,59,1,0,0,145,1,1,0,135,0,71,1,5,2,1,0,1,1,0,0,1,2,0,0,1,5,0,0,135,0,72,1,1,2,5,0,1,5,0,0,1,2,0,0,1,1,0,0,135,0,73,1,5,2,1,0,1,1,0,0,1,2,0,0,1,5,0,0,135,0,74,1,1,2,5,0,1,5,0,0,1,2,0,0,59,1,0,0,145,1,1,0,135,0,75,1,5,2,1,0,1,1,0,0,1,2,0,0,1,5,0,0,135,0,76,1,1,2,5,0,1,5,0,0,1,2,0,0,1,1,0,0,135,0,77,1,5,2,1,0,1,1,0,0,1,2,0,0,1,5,0,0,135,0,78,1,1,2,5,0,1,5,0,0,1,2,0,0,1,1,0,0,135,0,79,1,5,2,1,0,1,1,0,0,1,2,0,0,1,5,0,0,135,0,80,1,1,2,5,0,1,5,0,0,1,2,0,0,1,1,0,0,1,7,0,0,1,4,0,0,135,0,81,1,5,2,1,7,4,0,0,0,1,4,0,0,1,7,0,0,1,1,0,0,1,2,0,0,1,5,0,0,135,0,82,1,4,7,1,2,5,0,0,0,1,5,0,0,1,2,0,0,1,1,0,0,1,7,0,0,1,4,0,0,1,6,0,0,135,0,83,1,5,2,1,7,4,6,0,0,1,6,0,0,1,4,0,0,135,0,84,1,6,4,0,0,1,4,0,0,1,6,0,0,135,0,85,1,4,6,0,0,1,6,0,0,1,4,0,0,135,0,86,1,6,4,0,0,1,4,0,0,1,6,0,0,1,7,0,0,135,0,87,1,4,6,7,0,1,7,0,0,1,6,0,0,1,4,0,0,135,0,88,1,7,6,4,0,41,0,0,24,1,4,0,0,135,0,89,1,4,0,0,0,41,0,0,24,1,4,0,0,1,6,0,0,1,7,0,0,1,1,0,0,1,2,0,0,1,5,0,0,1,3,0,0,135,0,90,1,4,6,7,1,2,5,3,0,1,3,0,0,1,5,0,0,1,2,0,0,1,1,0,0,1,7,0,0,1,6,0,0,1,4,0,0,1,8,0,0,1,9,0,0,135,0,91,1,3,5,2,1,7,6,4,8,9,0,0,0,1,9,0,0,1,8,0,0,1,4,0,0,1,6,0,0,1,7,0,0,1,1,0,0,1,2,0,0,135,0,92,1,9,8,4,6,7,1,2,0,1,2,0,0,1,1,0,0,1,7,0,0,1,6,0,0,1,4,0,0,1,8,0,0,1,9,0,0,1,5,0,0,135,0,93,1,2,1,7,6,4,8,9,5,1,5,0,0,1,9,0,0,1,8,0,0,1,4,0,0,1,6,0,0,1,7,0,0,135,0,94,1,5,9,8,4,6,7,0,0,1,7,0,0,1,6,0,0,1,4,0,0,1,8,0,0,1,9,0,0,1,5,0,0,1,1,0,0,1,2,0,0,135,0,95,1,7,6,4,8,9,5,1,2,1,2,0,0,59,1,0,0,59,5,0,0,1,9,0,0,1,8,0,0,1,4,0,0,135,0,96,1,2,1,5,9,8,4,0,0,1,4,0,0,59,8,0,0,145,8,8,0,59,9,0,0,145,9,9,0,1,5,0,0,1,1,0,0,1,2,0,0,135,0,97,1,4,8,9,5,1,2,0,0,1,2,0,0,59,1,0,0,59,5,0,0,1,9,0,0,1,8,0,0,59,4,0,0,59,6,0,0,1,7,0,0,1,3,0,0,1,10,0,0,135,0,98,1,2,1,5,9,8,4,6,7,3,10,0,0,1,10,0,0,59,3,0,0,145,3,3,0,59,7,0,0,145,7,7,0,1,6,0,0,1,4,0,0,59,8,0,0,145,8,8,0,59,9,0,0,145,9,9,0,1,5,0,0,1,1,0,0,1,2,0,0,135,0,99,1,10,3,7,6,4,8,9,5,1,2,0,0,1,2,0,0,1,1,0,0,1,5,0,0,135,0,100,1,2,1,5,0,1,5,0,0,1,1,0,0,1,2,0,0,135,0,101,1,5,1,2,0,1,2,0,0,1,1,0,0,1,5,0,0,135,0,102,1,2,1,5,0,59,5,0,0,135,0,103,1,5,0,0,0,59,5,0,0,145,5,5,0,135,0,104,1,5,0,0,0,1,5,0,0,135,0,105,1,5,0,0,0,1,5,0,0,135,0,106,1,5,0,0,0,59,5,0,0,59,1,0,0,135,0,107,1,5,1,0,0,59,1,0,0,145,1,1,0,59,5,0,0,145,5,5,0,135,0,108,1,1,5,0,0,1,5,0,0,135,0,109,1,5,0,0,0,1,5,0,0,135,0,110,1,5,0,0,0,1,5,0,0,59,1,0,0,59,2,0,0,135,0,111,1,5,1,2,0,1,2,0,0,59,1,0,0,145,1,1,0,59,5,0,0,145,5,5,0,135,0,112,1,2,1,5,0,1,5,0,0,59,1,0,0,59,2,0,0,1,9,0,0,59,8,0,0,59,4,0,0,135,0,113,1,5,1,2,9,8,4,0,0,1,4,0,0,59,8,0,0,145,8,8,0,59,9,0,0,145,9,9,0,1,2,0,0,59,1,0,0,145,1,1,0,59,5,0,0,145,5,5,0,135,0,114,1,4,8,9,2,1,5,0,0,1,5,0,0,135,0,115,1,5,0,0,0,1,5,0,0,1,1,0,0,135,0,116,1,5,1,0,0,1,1,0,0,1,5,0,0,1,2,0,0,135,0,117,1,1,5,2,0,1,2,0,0,1,5,0,0,1,1,0,0,1,9,0,0,1,8,0,0,135,0,118,1,2,5,1,9,8,0,0,0,1,8,0,0,59,9,0,0,145,9,9,0,135,0,119,1,8,9,0,0,1,9,0,0,1,8,0,0,135,0,120,1,9,8,0,0,1,8,0,0,1,9,0,0,135,0,121,1,8,9,0,0,1,9,0,0,1,8,0,0,135,0,122,1,9,8,0,0,1,8,0,0,1,9,0,0,1,1,0,0,135,0,123,1,8,9,1,0,59,1,0,0,145,1,1,0,135,0,124,1,1,0,0,0,1,1,0,0,1,9,0,0,135,0,125,1,1,9,0,0,135,0,126,1,1,9,0,0,135,0,127,1,9,0,0,0,1,9,0,0,135,0,128,1,9,0,0,0,135,0,129,1,1,9,0,0,1,1,0,0,1,8,0,0,1,5,0,0,1,2,0,0,1,4,0,0,1,6,0,0,1,7,0,0,1,3,0,0,1,10,0,0,135,0,130,1,9,1,8,5,2,4,6,7,3,10,0,0,1,10,0,0,1,3,0,0,1,7,0,0,1,6,0,0,1,4,0,0,1,2,0,0,1,5,0,0,1,8,0,0,1,1,0,0,1,9,0,0,1,11,0,0,135,0,131,1,10,3,7,6,4,2,5,8,1,9,11,0,1,11,0,0,1,9,0,0,1,1,0,0,1,8,0,0,1,5,0,0,1,2,0,0,1,4,0,0,1,6,0,0,1,7,0,0,135,0,132,1,11,9,1,8,5,2,4,6,7,0,0,0,1,7,0,0,1,6,0,0,1,4,0,0,1,2,0,0,1,5,0,0,1,8,0,0,135,0,133,1,7,6,4,2,5,8,0,0,1,8,0,0,1,5,0,0,1,2,0,0,1,4,0,0,1,6,0,0,1,7,0,0,135,0,134,1,8,5,2,4,6,7,0,0,1,7,0,0,1,6,0,0,1,4,0,0,135,0,135,1,7,6,4,0,1,4,0,0,1,6,0,0,1,7,0,0,135,0,136,1,4,6,7,0,1,7,0,0,1,6,0,0,1,4,0,0,1,2,0,0,1,5,0,0,135,0,137,1,7,6,4,2,5,0,0,0,1,5,0,0,1,2,0,0,1,4,0,0,1,6,0,0,1,7,0,0,135,0,138,1,5,2,4,6,7,0,0,0,1,7,0,0,1,6,0,0,1,4,0,0,1,2,0,0,135,0,139,1,7,6,4,2,1,2,0,0,1,4,0,0,1,6,0,0,135,0,140,1,2,4,6,0,1,6,0,0,1,4,0,0,1,2,0,0,135,0,141,1,6,4,2,0,1,2,0,0,135,0,142,1,2,0,0,0,59,2,0,0,145,2,2,0,59,4,0,0,145,4,4,0,59,6,0,0,145,6,6,0,59,7,0,0,145,7,7,0,135,0,143,1,2,4,6,7,1,7,0,0,1,6,0,0,1,4,0,0,1,2,0,0,135,0,144,1,7,6,4,2,1,2,0,0,135,0,145,1,2,0,0,0,1,2,0,0,1,4,0,0,1,6,0,0,1,7,0,0,1,5,0,0,135,0,146,1,2,4,6,7,5,0,0,0,1,5,0,0,1,7,0,0,1,6,0,0,135,0,147,1,5,7,6,0,1,6,0,0,1,7,0,0,1,5,0,0,135,0,148,1,6,7,5,0,1,5,0,0,1,7,0,0,1,6,0,0,135,0,149,1,5,7,6,0,1,6,0,0,135,0,150,1,6,0,0,0,1,6,0,0,1,7,0,0,1,5,0,0,1,4,0,0,1,2,0,0,135,0,151,1,6,7,5,4,2,0,0,0,1,2,0,0,1,4,0,0,1,5,0,0,135,0,152,1,2,4,5,0,1,5,0,0,1,4,0,0,1,2,0,0,135,0,153,1,5,4,2,0,1,2,0,0,1,4,0,0,1,5,0,0,1,7,0,0,1,6,0,0,1,8,0,0,135,0,154,1,2,4,5,7,6,8,0,0,1,8,0,0,1,6,0,0,1,7,0,0,1,5,0,0,1,4,0,0,1,2,0,0,1,1,0,0,135,0,155,1,8,6,7,5,4,2,1,0,1,1,0,0,1,2,0,0,59,4,0,0,145,4,4,0,135,0,156,1,1,2,4,0,1,4,0,0,1,2,0,0,1,1,0,0,135,0,157,1,4,2,1,0,1,1,0,0,1,2,0,0,1,4,0,0,135,0,158,1,1,2,4,0,1,4,0,0,1,2,0,0,1,1,0,0,135,0,159,1,4,2,1,0,1,1,0,0,1,2,0,0,1,4,0,0,1,5,0,0,1,7,0,0,135,0,160,1,1,2,4,5,7,0,0,0,1,7,0,0,1,5,0,0,1,4,0,0,1,2,0,0,1,1,0,0,1,6,0,0,135,0,161,1,7,5,4,2,1,6,0,0,1,6,0,0,1,1,0,0,1,2,0,0,1,4,0,0,135,0,162,1,6,1,2,4,1,4,0,0,1,2,0,0,1,1,0,0,135,0,163,1,4,2,1,0,1,1,0,0,1,2,0,0,1,4,0,0,135,0,164,1,1,2,4,0,1,4,0,0,1,2,0,0,1,1,0,0,1,6,0,0,1,5,0,0,1,7,0,0,1,8,0,0,1,9,0,0,135,0,165,1,4,2,1,6,5,7,8,9,1,9,0,0,1,8,0,0,1,7,0,0,1,5,0,0,1,6,0,0,1,1,0,0,135,0,166,1,9,8,7,5,6,1,0,0,1,1,0,0,135,0,167,1,1,0,0,0,1,1,0,0,1,6,0,0,1,5,0,0,1,7,0,0,1,8,0,0,1,9,0,0,1,2,0,0,135,0,168,1,1,6,5,7,8,9,2,0,1,2,0,0,1,9,0,0,1,8,0,0,1,7,0,0,1,5,0,0,1,6,0,0,1,1,0,0,1,4,0,0,135,0,169,1,2,9,8,7,5,6,1,4,1,4,0,0,1,1,0,0,1,6,0,0,1,5,0,0,1,7,0,0,1,8,0,0,1,9,0,0,1,2,0,0,1,11,0,0,135,0,170,1,4,1,6,5,7,8,9,2,11,0,0,0,1,11,0,0,1,2,0,0,1,9,0,0,1,8,0,0,1,7,0,0,1,5,0,0,1,6,0,0,135,0,171,1,11,2,9,8,7,5,6,0,1,6,0,0,1,5,0,0,1,7,0,0,1,8,0,0,1,9,0,0,1,2,0,0,1,11,0,0,1,1,0,0,1,4,0,0,135,0,172,1,6,5,7,8,9,2,11,1,4,0,0,0,1,4,0,0,1,1,0,0,1,11,0,0,1,2,0,0,1,9,0,0,1,8,0,0,1,7,0,0,1,5,0,0,1,6,0,0,1,3,0,0,1,10,0,0,135,0,173,1,4,1,11,2,9,8,7,5,6,3,10,0,1,10,0,0,1,3,0,0,1,6,0,0,135,0,174,1,10,3,6,0,1,6,0,0,59,3,0,0,135,0,175,1,6,3,0,0,1,3,0,0,1,6,0,0,135,0,176,1,3,6,0,0,1,6,0,0,59,3,0,0,145,3,3,0,135,0,177,1,6,3,0,0,1,3,0,0,1,6,0,0,135,0,178,1,3,6,0,0,1,6,0,0,1,3,0,0,135,0,179,1,6,3,0,0,1,3,0,0,1,6,0,0,135,0,180,1,3,6,0,0,1,6,0,0,1,3,0,0,135,0,181,1,6,3,0,0,1,3,0,0,1,6,0,0,135,0,182,1,3,6,0,0,1,6,0,0,59,3,0,0,59,10,0,0,135,0,183,1,6,3,10,0,1,10,0,0,1,3,0,0,135,0,184,1,10,3,0,0,1,3,0,0,59,10,0,0,145,10,10,0,59,6,0,0,145,6,6,0,135,0,185,1,3,10,6,0,1,6,0,0,1,10,0,0,135,0,186,1,6,10,0,0,1,10,0,0,1,6,0,0,1,3,0,0,135,0,187,1,10,6,3,0,1,3,0,0,1,6,0,0,135,0,188,1,3,6,0,0,1,6,0,0,1,3,0,0,1,10,0,0,135,0,189,1,6,3,10,0,1,10,0,0,1,3,0,0,135,0,190,1,10,3,0,0,1,3,0,0,59,10,0,0,59,6,0,0,59,5,0,0,135,0,191,1,3,10,6,5,1,5,0,0,1,6,0,0,135,0,192,1,5,6,0,0,1,6,0,0,59,5,0,0,145,5,5,0,59,10,0,0,145,10,10,0,59,3,0,0,145,3,3,0,135,0,193,1,6,5,10,3,1,3,0,0,1,10,0,0,135,0,194,1,3,10,0,0,1,10,0,0,1,3,0,0,1,5,0,0,1,6,0,0,135,0,195,1,10,3,5,6,1,6,0,0,1,5,0,0,135,0,196,1,6,5,0,0,1,5,0,0,1,6,0,0,1,3,0,0,1,10,0,0,135,0,197,1,5,6,3,10,1,10,0,0,1,3,0,0,135,0,198,1,10,3,0,0,1,3,0,0,59,10,0,0,59,6,0,0,59,5,0,0,59,7,0,0,135,0,199,1,3,10,6,5,7,0,0,0,1,7,0,0,1,5,0,0,135,0,200,1,7,5,0,0,1,5,0,0,59,7,0,0,145,7,7,0,59,6,0,0,145,6,6,0,59,10,0,0,145,10,10,0,59,3,0,0,145,3,3,0,135,0,201,1,5,7,6,10,3,0,0,0,1,3,0,0,1,10,0,0,135,0,202,1,3,10,0,0,1,10,0,0,1,3,0,0,1,6,0,0,1,7,0,0,1,5,0,0,135,0,203,1,10,3,6,7,5,0,0,0,1,5,0,0,1,7,0,0,135,0,204,1,5,7,0,0,1,7,0,0,1,5,0,0,1,6,0,0,1,3,0,0,1,10,0,0,135,0,205,1,7,5,6,3,10,0,0,0,1,10,0,0,1,3,0,0,135,0,206,1,10,3,0,0,1,3,0,0,135,0,207,1,3,0,0,0,1,3,0,0,135,0,208,1,3,0,0,0,1,3,0,0,135,0,209,1,3,0,0,0,1,3,0,0,135,0,210,1,3,0,0,0,59,3,0,0,145,3,3,0,1,10,0,0,135,0,211,1,3,10,0,0,1,10,0,0,1,3,0,0,1,6,0,0,1,5,0,0,1,7,0,0,1,8,0,0,135,0,212,1,10,3,6,5,7,8,0,0,1,8,0,0,1,7,0,0,1,5,0,0,1,6,0,0,135,0,213,1,8,7,5,6,1,6,0,0,1,5,0,0,1,7,0,0,1,8,0,0,135,0,214,1,6,5,7,8,1,8,0,0,1,7,0,0,1,5,0,0,1,6,0,0,1,3,0,0,135,0,215,1,8,7,5,6,3,0,0,0,1,3,0,0,59,6,0,0,145,6,6,0,135,0,216,1,3,6,0,0,1,6,0,0,1,3,0,0,135,0,217,1,6,3,0,0,1,3,0,0,1,6,0,0,135,0,218,1,3,6,0,0,1,6,0,0,1,3,0,0,135,0,219,1,6,3,0,0,1,3,0,0,1,6,0,0,1,5,0,0,135,0,220,1,3,6,5,0,1,5,0,0,135,0,221,1,5,0,0,0,59,5,0,0,59,6,0,0,59,3,0,0,135,0,222,1,5,6,3,0,1,3,0,0,135,0,223,1,3,0,0,0,59,3,0,0,145,3,3,0,59,6,0,0,145,6,6,0,59,5,0,0,145,5,5,0,135,0,224,1,3,6,5,0,1,5,0,0,135,0,225,1,5,0,0,0,1,5,0,0,1,6,0,0,1,3,0,0,135,0,226,1,5,6,3,0,1,3,0,0,135,0,227,1,3,0,0,0,1,3,0,0,1,6,0,0,1,5,0,0,135,0,228,1,3,6,5,0,1,5,0,0,135,0,229,1,5,0,0,0,1,5,0,0,1,6,0,0,1,3,0,0,135,0,230,1,5,6,3,0,1,3,0,0,135,0,231,1,3,0,0,0,1,3,0,0,1,6,0,0,1,5,0,0,135,0,232,1,3,6,5,0,1,5,0,0,135,0,233,1,5,0,0,0,1,5,0,0,1,6,0,0,1,3,0,0,135,0,234,1,5,6,3,0,1,3,0,0,135,0,235,1,3,0,0,0,1,3,0,0,1,6,0,0,1,5,0,0,1,7,0,0,135,0,236,1,3,6,5,7,59,7,0,0,59,5,0,0,135,0,237,1], eb + 20480);
  HEAPU8.set([7,5,0,0,1,5,0,0,135,0,238,1,5,0,0,0,59,5,0,0,145,5,5,0,59,7,0,0,145,7,7,0,135,0,239,1,5,7,0,0,1,7,0,0,135,0,240,1,7,0,0,0,1,7,0,0,1,5,0,0,135,0,241,1,7,5,0,0,1,5,0,0,135,0,242,1,5,0,0,0,1,5,0,0,1,7,0,0,135,0,243,1,5,7,0,0,1,7,0,0,135,0,244,1,7,0,0,0,59,7,0,0,59,5,0,0,59,6,0,0,135,0,245,1,7,5,6,0,1,6,0,0,135,0,246,1,6,0,0,0,59,6,0,0,145,6,6,0,59,5,0,0,145,5,5,0,59,7,0,0,145,7,7,0,135,0,247,1,6,5,7,0,1,7,0,0,135,0,248,1,7,0,0,0,1,7,0,0,1,5,0,0,1,6,0,0,135,0,249,1,7,5,6,0,1,6,0,0,135,0,250,1,6,0,0,0,1,6,0,0,1,5,0,0,1,7,0,0,135,0,251,1,6,5,7,0,1,7,0,0,135,0,252,1,7,0,0,0,1,7,0,0,1,5,0,0,1,6,0,0,135,0,253,1,7,5,6,0,1,6,0,0,1,5,0,0,1,7,0,0,135,0,254,1,6,5,7,0,1,7,0,0,135,0,255,1,7,0,0,0,1,7,0,0,1,5,0,0,135,0,0,2,7,5,0,0,1,5,0,0,135,0,1,2,5,0,0,0,135,0,2,2,1,5,0,0,1,7,0,0,135,0,3,2,5,7,0,0,1,7,0,0,135,0,4,2,7,0,0,0,1,7,0,0,1,5,0,0,1,6,0,0,135,0,5,2,7,5,6,0,1,6,0,0,1,5,0,0,1,7,0,0,135,0,6,2,6,5,7,0,1,7,0,0,1,5,0,0,1,6,0,0,1,3,0,0,135,0,7,2,7,5,6,3,1,3,0,0,135,0,8,2,3,0,0,0,41,0,0,24,1,3,0,0,135,0,9,2,3,0,0,0,41,0,0,24,1,3,0,0,1,6,0,0,1,5,0,0,1,7,0,0,135,0,10,2,3,6,5,7,1,7,0,0,135,0,11,2,7,0,0,0,1,7,0,0,1,5,0,0,1,6,0,0,1,3,0,0,1,8,0,0,1,10,0,0,1,9,0,0,1,2,0,0,1,11,0,0,1,1,0,0,135,0,12,2,7,5,6,3,8,10,9,2,11,1,0,0,1,1,0,0,1,11,0,0,1,2,0,0,1,9,0,0,1,10,0,0,135,0,13,2,1,11,2,9,10,0,0,0,1,10,0,0,1,9,0,0,1,2,0,0,1,11,0,0,1,1,0,0,135,0,14,2,10,9,2,11,1,0,0,0,1,1,0,0,135,0,15,2,1,0,0,0,1,1,0,0,1,11,0,0,135,0,16,2,1,11,0,0,1,11,0,0,1,1,0,0,135,0,17,2,11,1,0,0,1,1,0,0,135,0,18,2,1,0,0,0,41,0,0,24,1,1,0,0,1,11,0,0,1,2,0,0,1,9,0,0,135,0,19,2,1,11,2,9,1,9,0,0,1,2,0,0,1,11,0,0,1,1,0,0,1,10,0,0,135,0,20,2,9,2,11,1,10,0,0,0,1,10,0,0,1,1,0,0,1,11,0,0,1,2,0,0,1,9,0,0,135,0,21,2,10,1,11,2,9,0,0,0,1,9,0,0,1,2,0,0,135,0,22,2,9,2,0,0,1,2,0,0,1,9,0,0,1,11,0,0,1,1,0,0,135,0,23,2,2,9,11,1,1,1,0,0,1,11,0,0,1,9,0,0,1,2,0,0,1,10,0,0,135,0,24,2,1,11,9,2,10,0,0,0,1,10,0,0,1,2,0,0,1,9,0,0,135,0,25,2,10,2,9,0,135,0,26,2,1,9,0,0,1,2,0,0,1,10,0,0,1,11,0,0,1,1,0,0,135,0,27,2,9,2,10,11,1,0,0,0,59,1,0,0,145,1,1,0,59,11,0,0,145,11,11,0,135,0,28,2,1,11,0,0,59,11,0,0,145,11,11,0,135,0,29,2,11,0,0,0,1,11,0,0,1,1,0,0,135,0,30,2,11,1,0,0,1,1,0,0,1,11,0,0,135,0,31,2,1,11,0,0,1,11,0,0,1,1,0,0,135,0,32,2,11,1,0,0,1,1,0,0,1,11,0,0,135,0,33,2,1,11,0,0,1,11,0,0,1,1,0,0,135,0,34,2,11,1,0,0,1,1,0,0,1,11,0,0,1,10,0,0,135,0,35,2,1,11,10,0,1,10,0,0,1,11,0,0,1,1,0,0,1,2,0,0,135,0,36,2,10,11,1,2,1,2,0,0,1,1,0,0,1,11,0,0,1,10,0,0,135,0,37,2,2,1,11,10,1,10,0,0,135,0,38,2,10,0,0,0,1,10,0,0,1,11,0,0,135,0,39,2,10,11,0,0,1,11,0,0,1,10,0,0,135,0,40,2,11,10,0,0,1,10,0,0,1,11,0,0,1,1,0,0,1,2,0,0,1,9,0,0,135,0,41,2,10,11,1,2,9,0,0,0,1,9,0,0,1,2,0,0,1,1,0,0,1,11,0,0,1,10,0,0,135,0,42,2,9,2,1,11,10,0,0,0,1,10,0,0,1,11,0,0,1,1,0,0,1,2,0,0,1,9,0,0,1,8,0,0,135,0,43,2,10,11,1,2,9,8,0,0,1,8,0,0,1,9,0,0,1,2,0,0,1,1,0,0,1,11,0,0,1,10,0,0,1,3,0,0,1,6,0,0,1,5,0,0,135,0,44,2,8,9,2,1,11,10,3,6,5,0,0,0,1,5,0,0,1,6,0,0,1,3,0,0,1,10,0,0,135,0,45,2,5,6,3,10,1,10,0,0,135,0,46,2,10,0,0,0,1,10,0,0,1,3,0,0,1,6,0,0,1,5,0,0,135,0,47,2,10,3,6,5,1,5,0,0,135,0,48,2,5,0,0,0,135,0,49,2,59,5,0,0,59,6,0,0,135,0,50,2,5,6,0,0,59,6,0,0,145,6,6,0,59,5,0,0,145,5,5,0,135,0,51,2,6,5,0,0,1,5,0,0,1,6,0,0,135,0,52,2,5,6,0,0,1,6,0,0,1,5,0,0,135,0,53,2,6,5,0,0,59,5,0,0,59,6,0,0,59,3,0,0,135,0,54,2,5,6,3,0,59,3,0,0,145,3,3,0,59,6,0,0,145,6,6,0,59,5,0,0,145,5,5,0,135,0,55,2,3,6,5,0,1,5,0,0,1,6,0,0,1,3,0,0,135,0,56,2,5,6,3,0,1,3,0,0,1,6,0,0,1,5,0,0,135,0,57,2,3,6,5,0,59,5,0,0,59,6,0,0,59,3,0,0,59,10,0,0,135,0,58,2,5,6,3,10,59,10,0,0,145,10,10,0,59,3,0,0,145,3,3,0,59,6,0,0,145,6,6,0,59,5,0,0,145,5,5,0,135,0,59,2,10,3,6,5,1,5,0,0,1,6,0,0,1,3,0,0,1,10,0,0,135,0,60,2,5,6,3,10,1,10,0,0,1,3,0,0,1,6,0,0,1,5,0,0,135,0,61,2,10,3,6,5,1,5,0,0,135,0,62,2,5,0,0,0,1,5,0,0,135,0,63,2,5,0,0,0,1,5,0,0,135,0,64,2,5,0,0,0,1,5,0,0,135,0,65,2,5,0,0,0,1,5,0,0,135,0,66,2,5,0,0,0,1,5,0,0,135,0,67,2,5,0,0,0,1,5,0,0,135,0,68,2,5,0,0,0,1,5,0,0,135,0,69,2,5,0,0,0,1,5,0,0,135,0,70,2,5,0,0,0,1,5,0,0,135,0,71,2,5,0,0,0,1,5,0,0,135,0,72,2,5,0,0,0,1,5,0,0,135,0,73,2,5,0,0,0,1,5,0,0,1,6,0,0,1,3,0,0,135,0,74,2,5,6,3,0,59,3,0,0,59,6,0,0,59,5,0,0,135,0,75,2,3,6,5,0,59,5,0,0,145,5,5,0,59,6,0,0,145,6,6,0,59,3,0,0,145,3,3,0,135,0,76,2,5,6,3,0,1,3,0,0,1,6,0,0,1,5,0,0,135,0,77,2,3,6,5,0,1,5,0,0,1,6,0,0,1,3,0,0,135,0,78,2,5,6,3,0,1,3,0,0,1,6,0,0,1,5,0,0,135,0,79,2,3,6,5,0,1,5,0,0,1,6,0,0,1,3,0,0,135,0,80,2,5,6,3,0,1,3,0,0,1,6,0,0,1,5,0,0,135,0,81,2,3,6,5,0,1,5,0,0,1,6,0,0,1,3,0,0,1,10,0,0,135,0,82,2,5,6,3,10,59,10,0,0,59,3,0,0,59,6,0,0,59,5,0,0,135,0,83,2,10,3,6,5,59,5,0,0,145,5,5,0,59,6,0,0,145,6,6,0,59,3,0,0,145,3,3,0,59,10,0,0,145,10,10,0,135,0,84,2,5,6,3,10,1,10,0,0,1,3,0,0,1,6,0,0,1,5,0,0,135,0,85,2,10,3,6,5,1,5,0,0,1,6,0,0,1,3,0,0,1,10,0,0,135,0,86,2,5,6,3,10,1,10,0,0,1,3,0,0,1,6,0,0,1,5,0,0,135,0,87,2,10,3,6,5,1,5,0,0,1,6,0,0,1,3,0,0,1,10,0,0,135,0,88,2,5,6,3,10,1,10,0,0,1,3,0,0,1,6,0,0,1,5,0,0,135,0,89,2,10,3,6,5,1,5,0,0,135,0,90,2,5,0,0,0,1,5,0,0,135,0,91,2,5,0,0,0,1,5,0,0,135,0,92,2,5,0,0,0,1,5,0,0,135,0,93,2,5,0,0,0,1,5,0,0,135,0,94,2,5,0,0,0,1,5,0,0,135,0,95,2,5,0,0,0,1,5,0,0,135,0,96,2,5,0,0,0,1,5,0,0,135,0,97,2,5,0,0,0,1,5,0,0,135,0,98,2,5,0,0,0,1,5,0,0,135,0,99,2,5,0,0,0,1,5,0,0,135,0,100,2,5,0,0,0,1,5,0,0,135,0,101,2,5,0,0,0,1,5,0,0,135,0,102,2,5,0,0,0,1,5,0,0,135,0,103,2,5,0,0,0,1,5,0,0,135,0,104,2,5,0,0,0,1,5,0,0,135,0,105,2,5,0,0,0,59,5,0,0,145,5,5,0,135,0,106,2,5,0,0,0,1,5,0,0,135,0,107,2,5,0,0,0,59,5,0,0,135,0,108,2,5,0,0,0,1,5,0,0,135,0,109,2,5,0,0,0,1,5,0,0,1,6,0,0,1,3,0,0,135,0,110,2,5,6,3,0,1,3,0,0,1,6,0,0,135,0,111,2,3,6,0,0,1,6,0,0,59,3,0,0,145,3,3,0,135,0,112,2,6,3,0,0,1,3,0,0,1,6,0,0,1,5,0,0,135,0,113,2,3,6,5,0,59,5,0,0,59,6,0,0,59,3,0,0,135,0,114,2,5,6,3,0,59,3,0,0,145,3,3,0,59,6,0,0,145,6,6,0,59,5,0,0,145,5,5,0,135,0,115,2,3,6,5,0,1,5,0,0,1,6,0,0,1,3,0,0,135,0,116,2,5,6,3,0,1,3,0,0,1,6,0,0,1,5,0,0,135,0,117,2,3,6,5,0,1,5,0,0,135,0,118,2,5,0,0,0,1,5,0,0,135,0,119,2,5,0,0,0,1,5,0,0,135,0,120,2,5,0,0,0,1,5,0,0,135,0,121,2,5,0,0,0,1,5,0,0,135,0,122,2,5,0,0,0,1,5,0,0,135,0,123,2,5,0,0,0,1,5,0,0,135,0,124,2,5,0,0,0,1,5,0,0,1,6,0,0,1,3,0,0,1,10,0,0,135,0,125,2,5,6,3,10,1,10,0,0,1,3,0,0,1,6,0,0,135,0,126,2,10,3,6,0,1,6,0,0,1,3,0,0,1,10,0,0,1,5,0,0,135,0,127,2,6,3,10,5,1,5,0,0,1,10,0,0,1,3,0,0,1,6,0,0,135,0,128,2,5,10,3,6,1,6,0,0,135,0,129,2,6,0,0,0,1,6,0,0,135,0,130,2,6,0,0,0,135,0,131,2,135,0,132,2,135,0,133,2,1,6,0,0,135,0,134,2,6,0,0,0,1,6,0,0,135,0,135,2,6,0,0,0,1,6,0,0,135,0,136,2,6,0,0,0,1,6,0,0,135,0,137,2,6,0,0,0,1,6,0,0,135,0,138,2,6,0,0,0,1,6,0,0,135,0,139,2,6,0,0,0,1,6,0,0,135,0,140,2,6,0,0,0,1,6,0,0,135,0,141,2,6,0,0,0,59,6,0,0,59,3,0,0,59,10,0,0,59,5,0,0,59,11,0,0,59,1,0,0,135,0,142,2,6,3,10,5,11,1,0,0,59,1,0,0,59,11,0,0,59,5,0,0,59,10,0,0,59,3,0,0,59,6,0,0,135,0,143,2,1,11,5,10,3,6,0,0,59,6,0,0,59,3,0,0,59,10,0,0,59,5,0,0,135,0,144,2,6,3,10,5,59,5,0,0,145,5,5,0,59,10,0,0,145,10,10,0,59,3,0,0,145,3,3,0,59,6,0,0,145,6,6,0,135,0,145,2,5,10,3,6,59,6,0,0,59,3,0,0,59,10,0,0,135,0,146,2,6,3,10,0,59,10,0,0,145,10,10,0,59,3,0,0,145,3,3,0,59,6,0,0,145,6,6,0,135,0,147,2,10,3,6,0,59,6,0,0,59,3,0,0,59,10,0,0,135,0,148,2,6,3,10,0,59,10,0,0,145,10,10,0,59,3,0,0,145,3,3,0,59,6,0,0,145,6,6,0,135,0,149,2,10,3,6,0,1,6,0,0,135,0,150,2,6,0,0,0,1,6,0,0,135,0,151,2,6,0,0,0,1,6,0,0,1,3,0,0,59,10,0,0,145,10,10,0,135,0,152,2,6,3,10,0,1,10,0,0,1,3,0,0,1,6,0,0,135,0,153,2,10,3,6,0,1,6,0,0,1,3,0,0,1,10,0,0,135,0,154,2,6,3,10,0,1,10,0,0,1,3,0,0,1,6,0,0,135,0,155,2,10,3,6,0,1,6,0,0,59,3,0,0,145,3,3,0,135,0,156,2,6,3,0,0,1,3,0,0,1,6,0,0,135,0,157,2,3,6,0,0,1,6,0,0,1,3,0,0,135,0,158,2,6,3,0,0,1,3,0,0,1,6,0,0,135,0,159,2,3,6,0,0,1,6,0,0,1,3,0,0,59,10,0,0,145,10,10,0,135,0,160,2,6,3,10,0,1,10,0,0,1,3,0,0,1,6,0,0,135,0,161,2,10,3,6,0,1,6,0,0,1,3,0,0,1,10,0,0,135,0,162,2,6,3,10,0,1,10,0,0,1,3,0,0,1,6,0,0,135,0,163,2,10,3,6,0,1,6,0,0,1,3,0,0,59,10,0,0,135,0,164,2,6,3,10,0,1,10,0,0,1,3,0,0,59,6,0,0,145,6,6,0,135,0,165,2,10,3,6,0,1,6,0,0,1,3,0,0,1,10,0,0,135,0,166,2,6,3,10,0,1,10,0,0,1,3,0,0,1,6,0,0,135,0,167,2,10,3,6,0,1,6,0,0,1,3,0,0,1,10,0,0,135,0,168,2,6,3,10,0,1,10,0,0,1,3,0,0,1,6,0,0,135,0,169,2,10,3,6,0,1,6,0,0,1,3,0,0,1,10,0,0,135,0,170,2,6,3,10,0,1,10,0,0,1,3,0,0,1,6,0,0,135,0,171,2,10,3,6,0,1,6,0,0,1,3,0,0,1,10,0,0,1,5,0,0,1,11,0,0,1,1,0,0,1,2,0,0,1,9,0,0,135,0,172,2,6,3,10,5,11,1,2,9,59,9,0,0,135,0,173,2,9,0,0,0,59,9,0,0,145,9,9,0,135,0,174,2,9,0,0,0,1,9,0,0,135,0,175,2,9,0,0,0,1,9,0,0,135,0,176,2,9,0,0,0,59,9,0,0,59,2,0,0,135,0,177,2,9,2,0,0,59,2,0,0,145,2,2,0,59,9,0,0,145,9,9,0,135,0,178,2,2,9,0,0,1,9,0,0,1,2,0,0,135,0,179,2,9,2,0,0,1,2,0,0,1,9,0,0,135,0,180,2,2,9,0,0,59,9,0,0,59,2,0,0,59,1,0,0,135,0,181,2,9,2,1,0,59,1,0,0,145,1,1,0,59,2,0,0,145,2,2,0,59,9,0,0,145,9,9,0,135,0,182,2,1,2,9,0,1,9,0,0,1,2,0,0,1,1,0,0,135,0,183,2,9,2,1,0,1,1,0,0,1,2,0,0,1,9,0,0,135,0,184,2,1,2,9,0,59,9,0,0,59,2,0,0,59,1,0,0,59,11,0,0,135,0,185,2,9,2,1,11,59,11,0,0,145,11,11,0,59,1,0,0,145,1,1,0,59,2,0,0,145,2,2,0,59,9,0,0,145,9,9,0,135,0,186,2,11,1,2,9,1,9,0,0,1,2,0,0,1,1,0,0,1,11,0,0,135,0,187,2,9,2,1,11,1,11,0,0,1,1,0,0,1,2,0,0,1,9,0,0,135,0,188,2,11,1,2,9,1,9,0,0,135,0,189,2,9,0,0,0,1,9,0,0,135,0,190,2,9,0,0,0,1,9,0,0,135,0,191,2,9,0,0,0,1,9,0,0,135,0,192,2,9,0,0,0,1,9,0,0,135,0,193,2,9,0,0,0,1,9,0,0,135,0,194,2,9,0,0,0,1,9,0,0,135,0,195,2,9,0,0,0,1,9,0,0,135,0,196,2,9,0,0,0,1,9,0,0,135,0,197,2,9,0,0,0,1,9,0,0,135,0,198,2,9,0,0,0,1,9,0,0,135,0,199,2,9,0,0,0,1,9,0,0,135,0,200,2,9,0,0,0,1,9,0,0,135,0,201,2,9,0,0,0,1,9,0,0,135,0,202,2,9,0,0,0,1,9,0,0,135,0,203,2,9,0,0,0,1,9,0,0,135,0,204,2,9,0,0,0,1,9,0,0,1,2,0,0,1,1,0,0,1,11,0,0,135,0,205,2,9,2,1,11,1,11,0,0,1,1,0,0,1,2,0,0,1,9,0,0,135,0,206,2,11,1,2,9,1,9,0,0,135,0,207,2,9,0,0,0,139,0,0,0,140,8,150,0,0,0,0,0,2,142,0,0,255,0,0,0,2,143,0,0,195,56,0,0,1,108,0,0,136,144,0,0,0,109,144,0,136,144,0,0,1,145,128,0,3,144,144,145,137,144,0,0,130,144,0,0,136,145,0,0,49,144,144,145,144,136,0,0,1,145,128,0,135,144,208,2,145,0,0,0,25,74,109,116,25,91,109,112,25,8,109,108,25,25,109,104,25,31,109,100,25,35,109,96,25,36,109,92,25,37,109,88,25,38,109,84,25,39,109,80,25,40,109,76,25,41,109,72,25,42,109,68,25,44,109,64,25,45,109,60,25,46,109,56,25,47,109,52,25,48,109,48,25,49,109,44,25,50,109,40,25,51,109,36,25,52,109,32,25,53,109,28,25,54,109,24,25,55,109,20,25,56,109,16,25,57,109,12,25,58,109,120,25,59,109,8,25,61,109,4,0,62,109,0,85,91,0,0,85,8,1,0,85,25,2,0,85,31,3,0,85,35,4,0,85,36,5,0,85,37,6,0,85,38,7,0,82,145,37,0,32,145,145,16,1,146,2,0,1,147,1,0,125,144,145,146,147,0,0,0,85,39,144,0,82,144,91,0,116,40,144,0,82,144,35,0,82,147,31,0,5,66,144,147,82,144,39,0,5,147,66,144,85,44,147,0,82,147,40,0,25,147,147,8,116,48,147,0,82,144,31,0,82,146,39,0,5,147,144,146,85,49,147,0,82,146,48,0,82,144,39,0,5,147,146,144,85,50,147,0,116,51,35,0,82,147,31,0,82,144,40,0,106,144,144,8,46,147,147,144,220,137,0,0,82,147,31,0,82,144,40,0,106,144,144,8,25,144,144,1,46,147,147,144,220,137,0,0,1,144,89,57,1,146,109,54,1,145,247,16,1,148,130,57,135,147,209,2,144,146,145,148,82,147,35,0,82,148,36,0,82,145,49,0,1,146,0,0,134,71,0,0,84,25,3,0,147,148,145,146,82,146,91,0,109,146,12,71,82,146,91,0,106,146,146,12,120,146,9,0,1,145,203,54,134,146,0,0,176,165,3,0,145,0,0,0,85,74,146,0,82,33,74,0,137,109,0,0,139,33,0,0,82,145,48,0,82,148,35,0,82,147,37,0,1,144,7,0,134,146,0,0,200,16,3,0,145,148,147,144,120,146,9,0,1,144,75,55,134,146,0,0,176,165,3,0,144,0,0,0,85,74,146,0,82,33,74,0,137,109,0,0,139,33,0,0,82,146,48,0,82,144,35,0,5,88,146,144,82,146,37,0,5,144,88,146,25,144,144,7,43,144,144,3,85,46,144,0,82,146,46,0,25,146,146,1,82,147,36,0,5,144,146,147,85,45,144,0,82,144,25,0,82,147,45,0,48,144,144,147,208,138,0,0,1,147,157,57,134,144,0,0,176,165,3,0,147,0,0,0,85,74,144,0,82,33,74,0,137,109,0,0,139,33,0,0,1,144,0,0,85,42,144,0,82,144,36,0,82,147,42,0,50,144,144,147,240,138,0,0,1,108,113,0,119,0,253,2,82,144,91,0,106,144,144,12,82,146,44,0,82,148,42,0,5,147,146,148,3,144,144,147,85,52,144,0,82,28,8,0,25,144,28,1,85,8,144,0,79,144,28,0,85,54,144,0,1,144,4,0,82,147,54,0,47,144,144,147,56,139,0,0,1,108,13,0,119,0,235,2,82,144,37,0,34,144,144,8,121,144,18,0,82,144,35,0,82,147,46,0,48,144,144,147,92,139,0,0,1,108,16,0,119,0,226,2,82,144,35,0,82,147,31,0,5,34,144,147,82,147,52,0,82,144,46,0,4,144,34,144,3,147,147,144,85,52,147,0,1,147,1,0,85,50,147,0,116,51,46,0,82,147,52,0,1,144,0,0,82,148,44,0,4,144,144,148,3,147,147,144,85,53,147,0,82,147,42,0,120,147,5,0,1,147,211,57,82,144,54,0,91,147,147,144,85,54,147,0,1,147,0,0,85,47,147,0,82,147,50,0,82,144,47,0,56,147,147,144,0,141,0,0,82,147,54,0,1,148,0,0,1,144,7,0,138,147,148,144,0,140,0,0,24,140,0,0,48,140,0,0,84,140,0,0,124,140,0,0,192,140,0,0,216,140,0,0,119,0,61,0,82,110,47,0,82,144,52,0,82,148,8,0,90,148,148,110,95,144,110,148,119,0,55,0,82,111,47,0,82,148,52,0,82,144,8,0,90,144,144,111,95,148,111,144,119,0,49,0,82,112,47,0,82,144,52,0,82,148,8,0,91,148,148,112,82,146,53,0,91,146,146,112,3,148,148,146,95,144,112,148,119,0,40,0,82,113,47,0,82,148,52,0,82,144,8,0,91,144,144,113,82,146,53,0,91,146,146,113,42,146,146,1,3,144,144,146,95,148,113,144,119,0,30,0,82,114,47,0,82,144,8,0,91,144,144,114,1,146,0,0,82,145,53,0,91,145,145,114,1,149,0,0,134,148,0,0,44,236,2,0,146,145,149,0,3,144,144,148,19,144,144,142,0,43,144,0,82,144,52,0,82,148,47,0,95,144,148,43,119,0,13,0,82,115,47,0,82,148,52,0,82,144,8,0,90,144,144,115,95,148,115,144,119,0,7,0,82,116,47,0,82,144,52,0,82,148,8,0,90,148,148,116,95,144,116,148,119,0,1,0,82,147,47,0,25,147,147,1,85,47,147,0,119,0,177,255,82,147,37,0,32,147,147,8,121,147,22,0,82,147,48,0,82,148,31,0,46,147,147,148,44,141,0,0,82,147,52,0,82,148,48,0,1,144,255,255,95,147,148,144,82,144,8,0,82,148,48,0,3,144,144,148,85,8,144,0,82,144,52,0,82,148,31,0,3,144,144,148,85,52,144,0,82,144,53,0,82,148,31,0,3,144,144,148,85,53,144,0,119,0,39,0,82,144,37,0,33,144,144,16,121,144,11,0,82,144,8,0,25,144,144,1,85,8,144,0,82,144,52,0,25,144,144,1,85,52,144,0,82,144,53,0,25,144,144,1,85,53,144,0,119,0,26,0,82,144,48,0,82,148,31,0,46,144,144,148,200,141,0,0,82,144,52,0,82,148,50,0,1,147,255,255,95,144,148,147,82,147,52,0,82,148,50,0,25,148,148,1,1,144,255,255,95,147,148,144,82,144,8,0,82,148,50,0,3,144,144,148,85,8,144,0,82,144,52,0,82,148,49,0,3,144,144,148,85,52,144,0,82,144,53,0,82,148,49,0,3,144,144,148,85,53,144,0,82,144,37,0,34,144,144,8,121,144,3,0,1,108,42,0,119,0,136,1,82,144,48,0,82,148,31,0,45,144,144,148,36,142,0,0,1,108,42,0,119,0,130,1,82,144,48,0,25,144,144,1,82,148,31,0,46,144,144,148,64,142,0,0,1,108,64,0,119,0,41,2,82,144,54,0,1,148,0,0,1,145,7,0,138,144,148,145,112,142,0,0,20,143,0,0,200,143,0,0,120,144,0,0,60,145,0,0,32,146,0,0,216,146,0,0,119,0,82,1,82,148,35,0,26,148,148,1,85,41,148,0,82,148,41,0,35,148,148,1,120,148,76,1,1,148,0,0,85,47,148,0,82,148,50,0,82,147,47,0,56,148,148,147,196,142,0,0,82,117,47,0,82,148,52,0,82,147,8,0,90,147,147,117,95,148,117,147,82,147,47,0,25,147,147,1,85,47,147,0,119,0,244,255,82,147,41,0,26,147,147,1,85,41,147,0,82,147,52,0,82,148,50,0,1,149,255,255,95,147,148,149,82,149,8,0,82,148,50,0,3,149,149,148,85,8,149,0,82,149,52,0,82,148,49,0,3,149,149,148,85,52,149,0,82,149,53,0,82,148,49,0,3,149,149,148,85,53,149,0,119,0,219,255,82,149,35,0,26,149,149,1,85,41,149,0,82,149,41,0,35,149,149,1,120,149,35,1,1,149,0,0,85,47,149,0,82,149,50,0,82,148,47,0,56,149,149,148,120,143,0,0,82,118,47,0,82,119,52,0,82,148,8,0,91,148,148,118,82,147,49,0,4,147,118,147,91,147,119,147,3,148,148,147,95,119,118,148,82,148,47,0,25,148,148,1,85,47,148,0,119,0,240,255,82,148,41,0,26,148,148,1,85,41,148,0,82,148,52,0,82,149,50,0,1,147,255,255,95,148,149,147,82,147,8,0,82,149,50,0,3,147,147,149,85,8,147,0,82,147,52,0,82,149,49,0,3,147,147,149,85,52,147,0,82,147,53,0,82,149,49,0,3,147,147,149,85,53,147,0,119,0,215,255,82,147,35,0,26,147,147,1,85,41,147,0,82,147,41,0,35,147,147,1,120,147,246,0,1,147,0,0,85,47,147,0,82,147,50,0,82,149,47,0,56,147,147,149,40,144,0,0,82,120,47,0,82,147,52,0,82,149,8,0,91,149,149,120,82,148,53,0,91,148,148,120,3,149,149,148,95,147,120,149,82,149,47,0,25,149,149,1,85,47,149,0,119,0,241,255,82,149,41,0,26,149,149,1,85,41,149,0,82,149,52,0,82,147,50,0,1,148,255,255,95,149,147,148,82,148,8,0,82,147,50,0,3,148,148,147,85,8,148,0,82,148,52,0,82,147,49,0,3,148,148,147,85,52,148,0,82,148,53,0,82,147,49,0,3,148,148,147,85,53,148,0,119,0,216,255,82,148,35,0,26,148,148,1,85,41,148,0,82,148,41,0,35,148,148,1,120,148,202,0,1,148,0,0,85,47,148,0,82,148,50,0,82,147,47,0,56,148,148,147,236,144,0,0,82,121,47,0,82,122,52,0,82,147,8,0,91,147,147,121,82,149,53,0,91,149,149,121,82,145,49,0,4,145,121,145,91,145,122,145,3,149,149,145,42,149,149,1,3,147,147,149,95,122,121,147,82,147,47,0,25,147,147,1,85,47,147,0,119,0,236,255,82,147,41,0,26,147,147,1,85,41,147,0,82,147,52,0,82,148,50,0,1,149,255,255,95,147,148,149,82,149,8,0,82,148,50,0,3,149,149,148,85,8,149,0,82,149,52,0,82,148,49,0,3,149,149,148,85,52,149,0,82,149,53,0,82,148,49,0,3,149,149,148,85,53,149,0,119,0,211,255,82,149,35,0,26,149,149,1,85,41,149,0,82,149,41,0,35,149,149,1,120,149,153,0,1,149,0,0,85,47,149,0,82,149,50,0,82,148,47,0,56,149,149,148,208,145,0,0,82,149,8,0,82,148,47,0,91,67,149,148,82,123,47,0,82,124,53,0,82,149,47,0,82,148,49,0,4,125,149,148,82,149,52,0,91,149,149,125,91,147,124,123,91,145,124,125,134,148,0,0,44,236,2,0,149,147,145,0,3,148,67,148,19,148,148,142,0,68,148,0,82,148,52,0,82,145,47,0,95,148,145,68,82,145,47,0,25,145,145,1,85,47,145,0,119,0,228,255,82,145,41,0,26,145,145,1,85,41,145,0,82,145,52,0,82,148,50,0,1,147,255,255,95,145,148,147,82,147,8,0,82,148,50,0,3,147,147,148,85,8,147,0,82,147,52,0,82,148,49,0,3,147,147,148,85,52,147,0,82,147,53,0,82,148,49,0,3,147,147,148,85,53,147,0,119,0,203,255,82,147,35,0,26,147,147,1,85,41,147,0,82,147,41,0,35,147,147,1,120,147,96,0,1,147,0,0,85,47,147,0,82,147,50,0,82,148,47,0,56,147,147,148,136,146,0,0,82,126,47,0,82,127,52,0,82,148,8,0,91,148,148,126,82,145,49,0,4,145,126,145,91,145,127,145,42,145,145,1,3,148,148,145,95,127,126,148,82,148,47,0,25,148,148,1,85,47,148,0,119,0,239,255,82,148,41,0,26,148,148,1,85,41,148,0,82,148,52,0,82,147,50,0,1,145,255,255,95,148,147,145,82,145,8,0,82,147,50,0,3,145,145,147,85,8,145,0,82,145,52,0,82,147,49,0,3,145,145,147,85,52,145,0,82,145,53,0,82,147,49,0,3,145,145,147,85,53,145,0,119,0,214,255,82,145,35,0,26,145,145,1,85,41,145,0,82,145,41,0,35,145,145,1,120,145,50,0,1,145,0,0,85,47,145,0,82,145,50,0,82,147,47,0,56,145,145,147,100,147,0,0,82,145,8,0,82,147,47,0,91,69,145,147,82,147,52,0,82,148,47,0,82,149,49,0,4,148,148,149,91,147,147,148,1,148,0,0,1,149,0,0,134,145,0,0,44,236,2,0,147,148,149,0,3,145,69,145,19,145,145,142,0,70,145,0,82,145,52,0,82,149,47,0,95,145,149,70,82,149,47,0,25,149,149,1,85,47,149,0,119,0,230,255,82,149,41,0,26,149,149,1,85,41,149,0,82,149,52,0,82,145,50,0,1,148,255,255,95,149,145,148,82,148,8,0,82,145,50,0,3,148,148,145,85,8,148,0,82,148,52,0,82,145,49,0,3,148,148,145,85,52,148,0,82,148,53,0,82,145,49,0,3,148,148,145,85,53,148,0,119,0,205,255,82,144,37,0,32,144,144,16,121,144,27,0,82,144,91,0,106,144,144,12,82,145,44,0,82,149,42,0,5,148,145,149,3,144,144,148,85,52,144,0,1,144,0,0,85,41,144,0,82,144,35,0,82,148,41,0,57,144,144,148,40,148,0,0,82,144,52,0,82,148,50,0,25,148,148,1,1,149,255,255,95,144,148,149,82,149,41,0,25,149,149,1,85,41,149,0,82,149,52,0,82,148,49,0,3,149,149,148,85,52,149,0,119,0,240,255,32,149,108,42,121,149,169,0,1,108,0,0,82,148,51,0,26,148,148,1,82,144,50,0,5,149,148,144,85,55,149,0,82,149,54,0,1,147,0,0,1,144,7,0,138,149,147,144,120,148,0,0,144,148,0,0,220,148,0,0,36,149,0,0,128,149,0,0,252,149,0,0,76,150,0,0,119,0,147,0,82,148,52,0,82,145,8,0,82,147,55,0,135,144,210,2,148,145,147,0,119,0,141,0,1,144,0,0,85,47,144,0,82,144,55,0,82,147,47,0,56,144,144,147,192,150,0,0,82,128,47,0,82,129,52,0,82,147,8,0,91,147,147,128,82,145,50,0,4,145,128,145,91,145,129,145,3,147,147,145,95,129,128,147,82,147,47,0,25,147,147,1,85,47,147,0,119,0,240,255,1,147,0,0,85,47,147,0,82,147,55,0,82,144,47,0,56,147,147,144,192,150,0,0,82,130,47,0,82,147,52,0,82,144,8,0,91,144,144,130,82,145,53,0,91,145,145,130,3,144,144,145,95,147,130,144,82,144,47,0,25,144,144,1,85,47,144,0,119,0,241,255,1,144,0,0,85,47,144,0,82,144,55,0,82,147,47,0,56,144,144,147,192,150,0,0,82,131,47,0,82,132,52,0,82,147,8,0,91,147,147,131,82,145,53,0,91,145,145,131,82,148,50,0,4,148,131,148,91,148,132,148,3,145,145,148,42,145,145,1,3,147,147,145,95,132,131,147,82,147,47,0,25,147,147,1,85,47,147,0,119,0,236,255,1,147,0,0,85,47,147,0,82,147,55,0,82,144,47,0,56,147,147,144,192,150,0,0,82,147,8,0,82,144,47,0,91,60,147,144,82,133,47,0,82,134,53,0,82,147,47,0,82,144,50,0,4,135,147,144,82,147,52,0,91,147,147,135,91,145,134,133,91,148,134,135,134,144,0,0,44,236,2,0,147,145,148,0,3,144,60,144,19,144,144,142,0,63,144,0,82,144,52,0,82,148,47,0,95,144,148,63,82,148,47,0,25,148,148,1,85,47,148,0,119,0,228,255,1,148,0,0,85,47,148,0,82,148,55,0,82,144,47,0,56,148,148,144,192,150,0,0,82,136,47,0,82,137,52,0,82,144,8,0,91,144,144,136,82,145,50,0,4,145,136,145,91,145,137,145,42,145,145,1,3,144,144,145,95,137,136,144,82,144,47,0,25,144,144,1,85,47,144,0,119,0,239,255,1,144,0,0,85,47,144,0,82,144,55,0,82,148,47,0,56,144,144,148,192,150,0,0,82,144,8,0,82,148,47,0,91,64,144,148,82,148,52,0,82,145,47,0,82,147,50,0,4,145,145,147,91,148,148,145,1,145,0,0,1,147,0,0,134,144,0,0,44,236,2,0,148,145,147,0,3,144,64,144,19,144,144,142,0,65,144,0,82,144,52,0,82,147,47,0,95,144,147,65,82,147,47,0,25,147,147,1,85,47,147,0,119,0,230,255,82,149,8,0,82,147,55,0,3,149,149,147,85,8,149,0,82,149,42,0,25,149,149,1,85,42,149,0,119,0,255,252,32,149,108,13,121,149,10,0,1,147,175,57,134,149,0,0,176,165,3,0,147,0,0,0,85,74,149,0,82,33,74,0,137,109,0,0,139,33,0,0,119,0,67,2,32,149,108,16,121,149,8,0,1,147,190,57,1,144,109,54,1,145,13,17,1,148,130,57,135,149,209,2,147,144,145,148,119,0,58,2,32,149,108,64,121,149,8,0,1,148,216,57,1,145,109,54,1,144,75,17,1,147,130,57,135,149,209,2,148,145,144,147,119,0,49,2,32,149,108,113,121,149,47,2,82,149,37,0,34,149,149,8,121,149,4,2,1,149,0,0,85,42,149,0,82,149,36,0,82,147,42,0,57,149,149,147,0,160,0,0,82,149,91,0,106,149,149,12,82,144,44,0,82,145,42,0,5,147,144,145,3,149,149,147,85,56,149,0,82,149,91,0,106,149,149,12,82,145,44,0,82,144,42,0,5,147,145,144,3,72,149,147,82,149,35,0,82,144,31,0,5,147,149,144,3,73,72,147,1,147,0,0,82,144,46,0,4,147,147,144,3,147,73,147,85,57,147,0,82,147,38,0,120,147,4,0,82,147,37,0,91,75,143,147,119,0,2,0,1,75,1,0,83,58,75,0,82,147,37,0,32,147,147,4,121,147,53,0,82,144,35,0,82,149,48,0,5,147,144,149,85,47,147,0,82,147,47,0,34,147,147,2,120,147,30,0,79,149,58,0,82,144,57,0,79,144,144,0,42,144,144,4,5,147,149,144,19,147,147,142,0,76,147,0,82,77,56,0,25,147,77,1,85,56,147,0,83,77,76,0,79,144,58,0,82,149,57,0,79,149,149,0,38,149,149,15,5,147,144,149,19,147,147,142,0,78,147,0,82,79,56,0,25,147,79,1,85,56,147,0,83,79,78,0,82,147,47,0,26,147,147,2,85,47,147,0,82,147,57,0,25,147,147,1,85,57,147,0,119,0,225,255,1,147,0,0,82,149,47,0,47,147,147,149,204,152,0,0,79,149,58,0,82,144,57,0,79,144,144,0,42,144,144,4,5,147,149,144,19,147,147,142,0,80,147,0,82,81,56,0,25,147,81,1,85,56,147,0,83,81,80,0,119,0,76,1,82,147,37,0,32,147,147,2,121,147,108,0,82,144,35,0,82,149,48,0,5,147,144,149,85,47,147,0,82,147,47,0,34,147,147,4,120,147,54,0,79,149,58,0,82,144,57,0,79,144,144,0,42,144,144,6,5,147,149,144,19,147,147,142,0,82,147,0,82,83,56,0,25,147,83,1,85,56,147,0,83,83,82,0,79,144,58,0,82,149,57,0,79,149,149,0,42,149,149,4,38,149,149,3,5,147,144,149,19,147,147,142,0,84,147,0,82,85,56,0,25,147,85,1,85,56,147,0,83,85,84,0,79,149,58,0,82,144,57,0,79,144,144,0,42,144,144,2,38,144,144,3,5,147,149,144,19,147,147,142,0,86,147,0,82,87,56,0,25,147,87,1,85,56,147,0,83,87,86,0,79,144,58,0,82,149,57,0,79,149,149,0,38,149,149,3,5,147,144,149,19,147,147,142,0,89,147,0,82,90,56,0,25,147,90,1,85,56,147,0,83,90,89,0,82,147,47,0,26,147,147,4,85,47,147,0,82,147,57,0,25,147,147,1,85,57,147,0,119,0,201,255,1,147,0,0,82,149,47,0,47,147,147,149,8,154,0,0,79,149,58,0,82,144,57,0,79,144,144,0,42,144,144,6,5,147,149,144,19,147,147,142,0,92,147,0,82,93,56,0,25,147,93,1,85,56,147,0,83,93,92,0,1,147,1,0,82,144,47,0,47,147,147,144,72,154,0,0,79,144,58,0,82,149,57,0,79,149,149,0,42,149,149,4,38,149,149,3,5,147,144,149,19,147,147,142,0,94,147,0,82,95,56,0,25,147,95,1,85,56,147,0,83,95,94,0,82,147,47,0,36,147,147,2,120,147,235,0,79,149,58,0,82,144,57,0,79,144,144,0,42,144,144,2,38,144,144,3,5,147,149,144,19,147,147,142,0,96,147,0,82,97,56,0,25,147,97,1,85,56,147,0,83,97,96,0,119,0,222,0,82,147,37,0,32,147,147,1,121,147,219,0,82,144,35,0,82,149,48,0,5,147,144,149,85,47,147,0,82,147,47,0,34,147,147,8,120,147,102,0,79,149,58,0,82,144,57,0,79,144,144,0,42,144,144,7,5,147,149,144,19,147,147,142,0,98,147,0,82,99,56,0,25,147,99,1,85,56,147,0,83,99,98,0,79,144,58,0,82,149,57,0,79,149,149,0,42,149,149,6,38,149,149,1,5,147,144,149,19,147,147,142,0,100,147,0,82,101,56,0,25,147,101,1,85,56,147,0,83,101,100,0,79,149,58,0,82,144,57,0,79,144,144,0,42,144,144,5,38,144,144,1,5,147,149,144,19,147,147,142,0,102,147,0,82,103,56,0,25,147,103,1,85,56,147,0,83,103,102,0,79,144,58,0,82,149,57,0,79,149,149,0,42,149,149,4,38,149,149,1,5,147,144,149,19,147,147,142,0,104,147,0,82,105,56,0,25,147,105,1,85,56,147,0,83,105,104,0,79,149,58,0,82,144,57,0,79,144,144,0,42,144,144,3,38,144,144,1,5,147,149,144,19,147,147,142,0,106,147,0,82,107,56,0,25,147,107,1,85,56,147,0,83,107,106,0,79,144,58,0,82,149,57,0,79,149,149,0,42,149,149,2,38,149,149,1,5,147,144,149,19,147,147,142,0,9,147,0,82,10,56,0,25,147,10,1,85,56,147,0,83,10,9,0,79,149,58,0,82,144,57,0,79,144,144,0,42,144,144,1,38,144,144,1,5,147,149,144,19,147,147,142,0,11,147,0,82,12,56,0,25,147,12,1,85,56,147,0,83,12,11,0,79,144,58,0,82,149,57,0,79,149,149,0,38,149,149,1,5,147,144,149,19,147,147,142,0,13,147,0,82,14,56,0,25,147,14,1,85,56,147,0,83,14,13,0,82,147,47,0,26,147,147,8,85,47,147,0,82,147,57,0,25,147,147,1,85,57,147,0,119,0,153,255,1,147,0,0,82,149,47,0,47,147,147,149,128,156,0,0,79,149,58,0,82,144,57,0,79,144,144,0,42,144,144,7,5,147,149,144,19,147,147,142,0,15,147,0,82,16,56,0,25,147,16,1,85,56,147,0,83,16,15,0,1,147,1,0,82,144,47,0,47,147,147,144,192,156,0,0,79,144,58,0,82,149,57,0,79,149,149,0,42,149,149,6,38,149,149,1,5,147,144,149,19,147,147,142,0,17,147,0,82,18,56,0,25,147,18,1,85,56,147,0,83,18,17,0,1,147,2,0,82,149,47,0,47,147,147,149,0,157,0,0,79,149,58,0,82,144,57,0,79,144,144,0,42,144,144,5,38,144,144,1,5,147,149,144,19,147,147,142,0,19,147,0,82,20,56,0,25,147,20,1,85,56,147,0,83,20,19,0,1,147,3,0,82,144,47,0,47,147,147,144,64,157,0,0,79,144,58,0,82,149,57,0,79,149,149,0,42,149,149,4,38,149,149,1,5,147,144,149,19,147,147,142,0,21,147,0,82,22,56,0,25,147,22,1,85,56,147,0,83,22,21,0,1,147,4,0,82,149,47,0,47,147,147,149,128,157,0,0,79,149,58,0,82,144,57,0,79,144,144,0,42,144,144,3,38,144,144,1,5,147,149,144,19,147,147,142,0,23,147,0,82,24,56,0,25,147,24,1,85,56,147,0,83,24,23,0,1,147,5,0,82,144,47,0,47,147,147,144,192,157,0,0,79,144,58,0,82,149,57,0,79,149,149,0,42,149,149,2,38,149,149,1,5,147,144,149,19,147,147,142,0,26,147,0,82,27,56,0,25,147,27,1,85,56,147,0,83,27,26,0,82,147,47,0,36,147,147,6,120,147,13,0,79,149,58,0,82,144,57,0,79,144,144,0,42,144,144,1,38,144,144,1,5,147,149,144,19,147,147,142,0,29,147,0,82,30,56,0,25,147,30,1,85,56,147,0,83,30,29,0,82,147,48,0,82,144,31,0,46,147,147,144,72,159,0,0,82,147,91,0,106,147,147,12,82,149,44,0,82,145,42,0,5,144,149,145,3,147,147,144,85,56,147,0,82,147,48,0,32,147,147,1,121,147,24,0,82,147,35,0,26,147,147,1,85,59,147,0,82,147,59,0,34,147,147,0,120,147,64,0,82,147,56,0,82,144,59,0,41,144,144,1,25,144,144,1,1,145,255,255,95,147,144,145,82,138,56,0,82,145,59,0,41,145,145,1,25,145,145,0,82,144,59,0,90,144,138,144,95,138,145,144,82,144,59,0,26,144,144,1,85,59,144,0,119,0,237,255,82,144,48,0,33,144,144,3,120,144,48,0,82,144,35,0,26,144,144,1,85,59,144,0,82,144,59,0,34,144,144,0,120,144,38,0,82,144,56,0,82,145,59,0,41,145,145,2,25,145,145,3,1,147,255,255,95,144,145,147,82,139,56,0,82,147,59,0,41,147,147,2,25,147,147,2,82,145,59,0,27,145,145,3,25,145,145,2,90,145,139,145,95,139,147,145,82,140,56,0,82,145,59,0,41,145,145,2,25,145,145,1,82,147,59,0,27,147,147,3,25,147,147,1,90,147,140,147,95,140,145,147,82,141,56,0,82,147,59,0,41,147,147,2,25,147,147,0,82,145,59,0,27,145,145,3,25,145,145,0,90,145,141,145,95,141,147,145,82,145,59,0,26,145,145,1,85,59,145,0,119,0,217,255,82,145,42,0,25,145,145,1,85,42,145,0,119,0,7,254,1,147,233,57,1,144,109,54,1,149,164,17,1,148,130,57,135,145,209,2,147,144,149,148,119,0,36,0,82,145,37,0,32,145,145,16,121,145,33,0,82,145,91,0,25,145,145,12,116,61,145,0,116,62,61,0,1,145,0,0,85,41,145,0,82,145,35,0,82,148,36,0,5,32,145,148,82,145,31,0,5,148,32,145,82,145,41,0,57,148,148,145,0,160,0,0,82,148,62,0,82,145,61,0,79,145,145,0,41,145,145,8,82,149,61,0,103,149,149,1,20,145,145,149,84,148,145,0,82,145,41,0,25,145,145,1,85,41,145,0,82,145,62,0,25,145,145,2,85,62,145,0,82,145,61,0,25,145,145,2,85,61,145,0,119,0,231,255], eb + 30720);
  HEAPU8.set([1,145,1,0,85,74,145,0,82,33,74,0,137,109,0,0,139,33,0,0,1,145,0,0,139,145,0,0,140,6,195,0,0,0,0,0,2,186,0,0,0,202,154,59,2,187,0,0,24,2,0,0,2,188,0,0,66,75,0,0,1,184,0,0,136,189,0,0,0,185,189,0,136,189,0,0,1,190,48,2,3,189,189,190,137,189,0,0,130,189,0,0,136,190,0,0,49,189,189,190,116,160,0,0,1,190,48,2,135,189,208,2,190,0,0,0,1,190,0,0,97,185,187,190,1,190,28,2,3,190,185,190,25,93,190,12,134,96,0,0,184,170,3,0,1,0,0,0,135,99,211,2,34,190,99,0,121,190,11,0,68,190,1,0,134,110,0,0,184,170,3,0,190,0,0,0,68,10,1,0,1,20,1,0,1,21,31,75,135,129,211,2,0,165,110,0,119,0,24,0,58,10,1,0,1,190,1,8,19,190,4,190,33,190,190,0,38,190,190,1,0,20,190,0,1,189,0,8,19,189,4,189,32,189,189,0,121,189,9,0,38,191,4,1,32,191,191,0,1,192,32,75,1,193,37,75,125,189,191,192,193,0,0,0,0,190,189,0,119,0,3,0,1,189,34,75,0,190,189,0,0,21,190,0,0,129,99,0,0,165,96,0,1,190,0,0,32,190,190,0,2,189,0,0,0,0,240,127,19,189,129,189,2,193,0,0,0,0,240,127,13,189,189,193,19,190,190,189,121,190,47,0,25,153,20,3,1,189,32,0,2,193,0,0,255,255,254,255,19,193,4,193,134,190,0,0,116,101,3,0,0,189,2,153,193,0,0,0,134,190,0,0,152,176,3,0,0,21,20,0,70,189,10,10,59,192,0,0,59,191,0,0,70,192,192,191,20,189,189,192,121,189,9,0,38,192,5,32,33,192,192,0,1,191,58,75,1,194,62,75,125,189,192,191,194,0,0,0,0,193,189,0,119,0,8,0,38,194,5,32,33,194,194,0,1,191,50,75,1,192,54,75,125,189,194,191,192,0,0,0,0,193,189,0,1,189,3,0,134,190,0,0,152,176,3,0,0,193,189,0,1,189,32,0,1,193,0,32,21,193,4,193,134,190,0,0,116,101,3,0,0,189,2,153,193,0,0,0,0,92,153,0,119,0,230,3,3,193,185,187,134,190,0,0,192,183,3,0,10,193,0,0,59,193,2,0,65,159,190,193,59,193,0,0,70,193,159,193,121,193,4,0,94,190,185,187,26,190,190,1,97,185,187,190,39,190,5,32,32,190,190,97,121,190,177,0,38,193,5,32,32,193,193,0,121,193,3,0,0,190,21,0,119,0,3,0,25,193,21,9,0,190,193,0,0,173,190,0,39,190,20,2,0,166,190,0,1,190,11,0,16,190,190,3,1,193,12,0,4,193,193,3,32,193,193,0,20,190,190,193,121,190,3,0,58,29,159,0,119,0,20,0,59,17,8,0,1,190,12,0,4,35,190,3,26,35,35,1,59,190,16,0,65,17,17,190,33,190,35,0,120,190,252,255,78,190,173,0,32,190,190,45,121,190,6,0,68,190,159,0,64,190,190,17,63,190,17,190,68,29,190,0,119,0,4,0,63,190,159,17,64,29,190,17,119,0,1,0,94,167,185,187,34,193,167,0,121,193,5,0,1,193,0,0,4,193,193,167,0,190,193,0,119,0,2,0,0,190,167,0,0,168,190,0,34,190,168,0,41,190,190,31,42,190,190,31,134,169,0,0,236,245,2,0,168,190,93,0,45,190,169,93,60,163,0,0,1,190,28,2,3,190,185,190,1,193,48,0,107,190,11,193,1,193,28,2,3,193,185,193,25,18,193,11,119,0,2,0,0,18,169,0,26,193,18,1,42,190,167,31,38,190,190,2,25,190,190,43,83,193,190,0,26,170,18,2,25,190,5,15,83,170,190,0,0,22,185,0,58,45,29,0,75,171,45,0,25,172,22,1,38,190,5,32,1,193,208,30,91,193,193,171,20,190,190,193,83,22,190,0,76,190,171,0,64,190,45,190,59,193,16,0,65,45,190,193,4,193,172,185,32,193,193,1,121,193,15,0,38,193,4,8,32,193,193,0,34,190,3,1,59,189,0,0,69,189,45,189,19,190,190,189,19,193,193,190,121,193,3,0,0,39,172,0,119,0,6,0,1,193,46,0,83,172,193,0,25,39,22,2,119,0,2,0,0,39,172,0,59,193,0,0,70,193,45,193,120,193,2,0,119,0,3,0,0,22,39,0,119,0,222,255,0,91,39,0,120,3,3,0,1,184,25,0,119,0,13,0,1,193,254,255,4,193,193,185,3,193,193,91,47,193,193,3,48,164,0,0,25,193,3,2,3,193,193,93,4,23,193,170,0,89,93,0,0,90,170,0,119,0,2,0,1,184,25,0,32,193,184,25,121,193,6,0,4,193,93,185,4,193,193,170,3,23,193,91,0,89,93,0,0,90,170,0,3,94,23,166,1,190,32,0,134,193,0,0,116,101,3,0,0,190,2,94,4,0,0,0,134,193,0,0,152,176,3,0,0,173,166,0,1,190,48,0,2,189,0,0,0,0,1,0,21,189,4,189,134,193,0,0,116,101,3,0,0,190,2,94,189,0,0,0,4,189,91,185,134,193,0,0,152,176,3,0,0,185,189,0,4,95,89,90,1,189,48,0,4,190,91,185,3,190,190,95,4,190,23,190,1,192,0,0,1,191,0,0,134,193,0,0,116,101,3,0,0,189,190,192,191,0,0,0,134,193,0,0,152,176,3,0,0,170,95,0,1,191,32,0,1,192,0,32,21,192,4,192,134,193,0,0,116,101,3,0,0,191,2,94,192,0,0,0,0,92,94,0,119,0,39,3,34,193,3,0,1,192,6,0,125,174,193,192,3,0,0,0,59,192,0,0,70,192,159,192,121,192,9,0,94,192,185,187,26,97,192,28,97,185,187,97,60,192,0,0,0,0,0,16,65,56,159,192,0,87,97,0,119,0,3,0,58,56,159,0,94,87,185,187,34,193,87,0,121,193,4,0,25,193,185,32,0,192,193,0,119,0,5,0,25,193,185,32,1,191,32,1,3,193,193,191,0,192,193,0,0,16,192,0,0,34,16,0,58,63,56,0,75,98,63,0,85,34,98,0,25,34,34,4,77,192,98,0,64,192,63,192,60,193,0,0,0,202,154,59,65,63,192,193,59,193,0,0,70,193,63,193,120,193,246,255,1,193,0,0,47,193,193,87,224,166,0,0,0,32,16,0,0,51,34,0,0,100,87,0,34,193,100,29,1,192,29,0,125,101,193,100,192,0,0,0,26,13,51,4,48,192,13,32,220,165,0,0,0,47,32,0,119,0,37,0,0,14,13,0,1,15,0,0,82,192,14,0,1,193,0,0,135,102,212,2,192,193,101,0,135,193,211,2,1,192,0,0,134,103,0,0,40,171,3,0,102,193,15,192,135,104,211,2,1,192,0,0,134,15,0,0,228,172,3,0,103,104,186,192,135,192,211,2,1,193,0,0,134,105,0,0,12,128,3,0,15,192,186,193,135,193,211,2,134,106,0,0,16,167,3,0,103,104,105,193,135,193,211,2,85,14,106,0,26,14,14,4,57,193,32,14,228,165,0,0,120,15,3,0,0,47,32,0,119,0,4,0,26,107,32,4,85,107,15,0,0,47,107,0,48,193,47,51,164,166,0,0,0,61,51,0,26,108,61,4,82,193,108,0,121,193,3,0,0,60,61,0,119,0,8,0,48,193,47,108,156,166,0,0,0,61,108,0,119,0,248,255,0,60,108,0,119,0,2,0,0,60,51,0,94,193,185,187,4,109,193,101,97,185,187,109,1,193,0,0,47,193,193,109,208,166,0,0,0,32,47,0,0,51,60,0,0,100,109,0,119,0,187,255,0,31,47,0,0,50,60,0,0,88,109,0,119,0,4,0,0,31,16,0,0,50,34,0,0,88,87,0,34,193,88,0,121,193,84,0,0,59,31,0,0,68,50,0,0,112,88,0,1,193,0,0,4,111,193,112,34,193,111,9,1,192,9,0,125,113,193,111,192,0,0,0,48,192,59,68,156,167,0,0,1,12,0,0,0,33,59,0,82,114,33,0,24,192,114,113,3,192,192,12,85,33,192,0,1,192,1,0,22,192,192,113,26,192,192,1,19,192,114,192,24,193,186,113,5,12,192,193,25,33,33,4,55,193,33,68,40,167,0,0,82,192,59,0,32,192,192,0,121,192,4,0,25,192,59,4,0,193,192,0,119,0,2,0,0,193,59,0,0,175,193,0,120,12,4,0,0,74,68,0,0,176,175,0,119,0,14,0,85,68,12,0,25,74,68,4,0,176,175,0,119,0,10,0,0,74,68,0,82,192,59,0,32,192,192,0,121,192,4,0,25,192,59,4,0,193,192,0,119,0,2,0,0,193,59,0,0,176,193,0,39,193,5,32,32,193,193,102,125,115,193,16,176,0,0,0,25,192,174,25,28,192,192,9,25,192,192,1,4,191,74,115,42,191,191,2,47,192,192,191,8,168,0,0,25,192,174,25,28,192,192,9,25,192,192,1,41,192,192,2,3,192,115,192,0,193,192,0,119,0,2,0,0,193,74,0,0,177,193,0,94,193,185,187,3,112,193,113,97,185,187,112,1,193,0,0,49,193,193,112,52,168,0,0,0,58,176,0,0,67,177,0,119,0,6,0,0,59,176,0,0,68,177,0,119,0,177,255,0,58,31,0,0,67,50,0,48,193,58,67,152,168,0,0,4,193,16,58,42,193,193,2,27,116,193,9,82,117,58,0,35,193,117,10,121,193,3,0,0,38,116,0,119,0,12,0,0,19,116,0,1,25,10,0,27,25,25,10,25,118,19,1,48,193,117,25,144,168,0,0,0,38,118,0,119,0,4,0,0,19,118,0,119,0,249,255,1,38,0,0,39,192,5,32,32,192,192,102,1,191,0,0,125,193,192,191,38,0,0,0,4,193,174,193,33,191,174,0,39,192,5,32,32,192,192,103,19,191,191,192,41,191,191,31,42,191,191,31,3,119,193,191,4,191,67,16,42,191,191,2,27,191,191,9,26,191,191,9,47,191,119,191,112,171,0,0,25,191,16,4,1,193,0,36,3,193,119,193,28,193,193,9,1,192,0,4,4,193,193,192,41,193,193,2,3,120,191,193,1,193,0,36,3,193,119,193,1,191,0,36,3,191,119,191,28,191,191,9,27,191,191,9,4,121,193,191,34,191,121,8,121,191,11,0,0,24,121,0,1,42,10,0,27,122,42,10,34,191,24,7,121,191,4,0,25,24,24,1,0,42,122,0,119,0,251,255,0,41,122,0,119,0,2,0,1,41,10,0,82,123,120,0,7,124,123,41,5,191,124,41,4,125,123,191,25,191,120,4,13,126,191,67,32,191,125,0,19,191,126,191,121,191,5,0,0,66,120,0,0,69,38,0,0,80,58,0,119,0,115,0,38,193,124,1,32,193,193,0,121,193,5,0,61,193,0,0,0,0,0,90,58,191,193,0,119,0,5,0,62,193,0,0,1,0,0,0,0,0,64,67,58,191,193,0,58,178,191,0,43,191,41,1,0,127,191,0,48,193,125,127,220,169,0,0,61,193,0,0,0,0,0,63,58,191,193,0,119,0,11,0,13,192,125,127,19,192,126,192,121,192,4,0,59,192,1,0,58,193,192,0,119,0,4,0,61,192,0,0,0,0,192,63,58,193,192,0,58,191,193,0,58,183,191,0,120,20,4,0,58,27,183,0,58,28,178,0,119,0,15,0,78,191,21,0,32,128,191,45,121,128,4,0,68,193,183,0,58,191,193,0,119,0,2,0,58,191,183,0,58,27,191,0,121,128,4,0,68,193,178,0,58,191,193,0,119,0,2,0,58,191,178,0,58,28,191,0,4,191,123,125,85,120,191,0,63,191,28,27,70,191,191,28,121,191,58,0,4,191,123,125,3,130,191,41,85,120,130,0,2,191,0,0,255,201,154,59,48,191,191,130,232,170,0,0,0,49,120,0,0,72,58,0,26,131,49,4,1,191,0,0,85,49,191,0,48,191,131,72,176,170,0,0,26,132,72,4,1,191,0,0,85,132,191,0,0,77,132,0,119,0,2,0,0,77,72,0,82,191,131,0,25,133,191,1,85,131,133,0,2,191,0,0,255,201,154,59,48,191,191,133,220,170,0,0,0,49,131,0,0,72,77,0,119,0,236,255,0,48,131,0,0,71,77,0,119,0,3,0,0,48,120,0,0,71,58,0,4,191,16,71,42,191,191,2,27,134,191,9,82,135,71,0,35,191,135,10,121,191,5,0,0,66,48,0,0,69,134,0,0,80,71,0,119,0,16,0,0,53,134,0,1,55,10,0,27,55,55,10,25,136,53,1,48,191,135,55,64,171,0,0,0,66,48,0,0,69,136,0,0,80,71,0,119,0,6,0,0,53,136,0,119,0,247,255,0,66,120,0,0,69,38,0,0,80,58,0,25,137,66,4,0,75,69,0,16,191,137,67,125,81,191,137,67,0,0,0,0,82,80,0,119,0,4,0,0,75,38,0,0,81,67,0,0,82,58,0,1,191,0,0,4,138,191,75,48,191,82,81,196,171,0,0,0,84,81,0,26,139,84,4,82,191,139,0,121,191,4,0,0,83,84,0,1,85,1,0,119,0,10,0,48,191,82,139,184,171,0,0,0,84,139,0,119,0,247,255,0,83,139,0,1,85,0,0,119,0,3,0,0,83,81,0,1,85,0,0,39,191,5,32,32,191,191,103,121,191,80,0,33,191,174,0,40,191,191,1,38,191,191,1,3,191,174,191,15,191,75,191,1,193,251,255,15,193,193,75,19,191,191,193,121,191,9,0,26,11,5,1,33,191,174,0,40,191,191,1,38,191,191,1,3,191,174,191,26,191,191,1,4,46,191,75,119,0,7,0,26,11,5,2,33,191,174,0,40,191,191,1,38,191,191,1,3,191,174,191,26,46,191,1,38,191,4,8,120,191,52,0,121,85,20,0,26,191,83,4,82,140,191,0,120,140,3,0,1,54,9,0,119,0,16,0,31,191,140,10,120,191,11,0,1,40,0,0,1,62,10,0,27,62,62,10,25,141,40,1,9,191,140,62,121,191,3,0,0,54,141,0,119,0,6,0,0,40,141,0,119,0,249,255,1,54,0,0,119,0,2,0,1,54,9,0,4,191,83,16,42,191,191,2,27,191,191,9,26,142,191,9,39,191,11,32,32,191,191,102,121,191,12,0,4,143,142,54,1,191,0,0,15,191,191,143,1,193,0,0,125,179,191,143,193,0,0,0,0,30,11,0,15,193,46,179,125,57,193,46,179,0,0,0,119,0,18,0,3,193,142,75,4,144,193,54,1,193,0,0,15,193,193,144,1,191,0,0,125,180,193,144,191,0,0,0,0,30,11,0,15,191,46,180,125,57,191,46,180,0,0,0,119,0,6,0,0,30,11,0,0,57,46,0,119,0,3,0,0,30,5,0,0,57,174,0,33,145,57,0,121,145,4,0,1,193,1,0,0,191,193,0,119,0,4,0,43,193,4,3,38,193,193,1,0,191,193,0,0,146,191,0,39,191,30,32,32,147,191,102,121,147,8,0,1,52,0,0,1,191,0,0,15,191,191,75,1,193,0,0,125,86,191,75,193,0,0,0,119,0,34,0,34,193,75,0,125,148,193,138,75,0,0,0,34,193,148,0,41,193,193,31,42,193,193,31,134,149,0,0,236,245,2,0,148,193,93,0,4,193,93,149,34,193,193,2,121,193,12,0,0,37,149,0,26,150,37,1,1,193,48,0,83,150,193,0,4,193,93,150,34,193,193,2,121,193,3,0,0,37,150,0,119,0,249,255,0,36,150,0,119,0,2,0,0,36,149,0,26,193,36,1,42,191,75,31,38,191,191,2,25,191,191,43,83,193,191,0,26,151,36,2,83,151,30,0,0,52,151,0,4,86,93,151,25,191,20,1,3,191,191,57,3,191,191,146,3,152,191,86,1,193,32,0,134,191,0,0,116,101,3,0,0,193,2,152,4,0,0,0,134,191,0,0,152,176,3,0,0,21,20,0,1,193,48,0,2,192,0,0,0,0,1,0,21,192,4,192,134,191,0,0,116,101,3,0,0,193,2,152,192,0,0,0,121,147,110,0,16,191,16,82,125,181,191,16,82,0,0,0,0,73,181,0,82,191,73,0,1,192,0,0,25,193,185,9,134,154,0,0,236,245,2,0,191,192,193,0,45,193,73,181,148,174,0,0,25,193,185,9,45,193,154,193,140,174,0,0,1,192,48,0,107,185,8,192,25,26,185,8,119,0,18,0,0,26,154,0,119,0,16,0,48,192,185,154,204,174,0,0,1,193,48,0,4,191,154,185,135,192,213,2,185,193,191,0,0,9,154,0,26,155,9,1,48,192,185,155,196,174,0,0,0,9,155,0,119,0,252,255,0,26,155,0,119,0,2,0,0,26,154,0,25,191,185,9,4,191,191,26,134,192,0,0,152,176,3,0,0,26,191,0,25,73,73,4,57,192,73,16,80,174,0,0,38,192,4,8,32,192,192,0,40,191,145,1,19,192,192,191,120,192,5,0,1,191,1,0,134,192,0,0,152,176,3,0,0,188,191,0,16,192,73,83,1,191,0,0,15,191,191,57,19,192,192,191,121,192,42,0,0,65,57,0,0,78,73,0,82,192,78,0,1,191,0,0,25,193,185,9,134,156,0,0,236,245,2,0,192,191,193,0,48,193,185,156,128,175,0,0,1,191,48,0,4,192,156,185,135,193,213,2,185,191,192,0,0,8,156,0,26,157,8,1,48,193,185,157,120,175,0,0,0,8,157,0,119,0,252,255,0,7,157,0,119,0,2,0,0,7,156,0,34,191,65,9,1,190,9,0,125,192,191,65,190,0,0,0,134,193,0,0,152,176,3,0,0,7,192,0,25,78,78,4,26,158,65,9,16,193,78,83,1,192,9,0,15,192,192,65,19,193,193,192,120,193,3,0,0,64,158,0,119,0,4,0,0,65,158,0,119,0,218,255,0,64,57,0,1,192,48,0,25,190,64,9,1,191,9,0,1,189,0,0,134,193,0,0,116,101,3,0,0,192,190,191,189,0,0,0,119,0,98,0,121,85,3,0,0,193,83,0,119,0,3,0,25,189,82,4,0,193,189,0,0,182,193,0,16,193,82,182,1,189,255,255,15,189,189,57,19,193,193,189,121,193,74,0,0,76,57,0,0,79,82,0,82,193,79,0,1,189,0,0,25,191,185,9,134,160,0,0,236,245,2,0,193,189,191,0,25,191,185,9,45,191,160,191,92,176,0,0,1,189,48,0,107,185,8,189,25,6,185,8,119,0,2,0,0,6,160,0,45,189,79,82,176,176,0,0,25,162,6,1,1,191,1,0,134,189,0,0,152,176,3,0,0,6,191,0,38,189,4,8,32,189,189,0,34,191,76,1,19,189,189,191,121,189,3,0,0,44,162,0,119,0,25,0,1,191,1,0,134,189,0,0,152,176,3,0,0,188,191,0,0,44,162,0,119,0,19,0,50,189,6,185,192,176,0,0,0,44,6,0,119,0,15,0,1,191,48,0,1,193,0,0,4,193,193,185,3,193,6,193,135,189,213,2,185,191,193,0,0,43,6,0,26,161,43,1,48,189,185,161,240,176,0,0,0,43,161,0,119,0,252,255,0,44,161,0,119,0,1,0,25,189,185,9,4,163,189,44,15,191,163,76,125,193,191,163,76,0,0,0,134,189,0,0,152,176,3,0,0,44,193,0,4,164,76,163,25,79,79,4,16,189,79,182,1,193,255,255,15,193,193,164,19,189,189,193,120,189,3,0,0,70,164,0,119,0,4,0,0,76,164,0,119,0,186,255,0,70,57,0,1,193,48,0,25,191,70,18,1,190,18,0,1,192,0,0,134,189,0,0,116,101,3,0,0,193,191,190,192,0,0,0,4,192,93,52,134,189,0,0,152,176,3,0,0,52,192,0,1,192,32,0,1,190,0,32,21,190,4,190,134,189,0,0,116,101,3,0,0,192,2,152,190,0,0,0,0,92,152,0,137,185,0,0,15,190,92,2,125,189,190,2,92,0,0,0,139,189,0,0,140,3,66,0,0,0,0,0,2,52,0,0,255,0,0,0,2,53,0,0,132,0,0,0,2,54,0,0,195,56,0,0,2,55,0,0,255,255,0,0,2,56,0,0,83,78,82,116,2,57,0,0,69,84,76,80,1,45,0,0,136,58,0,0,0,46,58,0,136,58,0,0,1,59,112,4,3,58,58,59,137,58,0,0,130,58,0,0,136,59,0,0,49,58,58,59,28,178,0,0,1,59,112,4,135,58,208,2,59,0,0,0,1,58,84,4,3,30,46,58,1,58,80,4,3,31,46,58,1,58,76,4,3,35,46,58,1,58,72,4,3,39,46,58,0,41,46,0,1,58,98,4,3,43,46,58,1,58,97,4,3,44,46,58,1,58,94,4,3,3,46,58,1,58,88,4,3,4,46,58,1,58,68,4,3,5,46,58,1,58,64,4,3,6,46,58,1,58,60,4,3,7,46,58,1,58,56,4,3,8,46,58,1,58,52,4,3,9,46,58,1,58,48,4,3,10,46,58,1,58,44,4,3,11,46,58,1,58,40,4,3,12,46,58,1,58,36,4,3,14,46,58,1,58,32,4,3,17,46,58,1,58,24,4,3,18,46,58,1,58,20,4,3,19,46,58,1,58,16,4,3,20,46,58,1,58,12,4,3,22,46,58,1,58,8,4,3,23,46,58,1,58,4,4,3,25,46,58,1,58,0,4,3,27,46,58,85,31,0,0,85,35,1,0,85,39,2,0,1,58,0,0,83,43,58,0,1,58,0,0,83,44,58,0,1,58,0,0,85,5,58,0,1,58,0,0,85,6,58,0,1,58,0,0,85,8,58,0,1,58,1,0,85,9,58,0,1,58,0,0,85,11,58,0,1,58,0,0,85,12,58,0,1,58,0,0,85,14,58,0,82,58,31,0,116,17,58,0,82,58,31,0,1,59,0,0,109,58,8,59,82,59,31,0,1,58,0,0,109,59,4,58,82,58,31,0,1,59,0,0,109,58,12,59,82,58,17,0,134,59,0,0,228,38,3,0,58,0,0,0,120,59,6,0,1,59,0,0,85,30,59,0,82,38,30,0,137,46,0,0,139,38,0,0,82,59,35,0,32,59,59,1,121,59,6,0,1,59,1,0,85,30,59,0,82,38,30,0,137,46,0,0,139,38,0,0,82,58,17,0,134,59,0,0,132,138,3,0,18,58,0,0,106,33,18,4,2,59,0,0,82,68,72,73,47,59,33,59,200,181,0,0,2,59,0,0,84,65,68,73,47,59,33,59,36,180,0,0,2,59,0,0,73,66,103,67,1,58,1,0,138,33,59,58,0,180,0,0,1,45,132,0,119,0,250,1,119,0,1,0,1,59,1,0,85,14,59,0,82,58,17,0,82,60,18,0,134,59,0,0,232,1,3,0,58,60,0,0,119,0,241,1,2,59,0,0,68,78,69,73,49,59,59,33,88,180,0,0,2,59,0,0,68,78,69,73,1,60,1,0,138,33,59,60,80,180,0,0,1,45,132,0,119,0,230,1,1,45,101,0,119,0,252,1,2,59,0,0,84,65,68,73,1,60,1,0,138,33,59,60,116,180,0,0,1,45,132,0,119,0,221,1,119,0,1,0,82,59,9,0,121,59,3,0,1,45,82,0,119,0,240,1,79,59,43,0,32,59,59,0,82,60,8,0,33,60,60,0,20,59,59,60,120,59,3,0,1,45,84,0,119,0,232,1,82,59,35,0,32,59,59,2,121,59,3,0,1,45,86,0,119,0,227,1,82,59,5,0,82,60,18,0,3,59,59,60,82,60,5,0,47,59,59,60,220,180,0,0,1,45,88,0,119,0,219,1,82,59,6,0,82,60,5,0,82,58,18,0,3,60,60,58,48,59,59,60,132,181,0,0,116,22,6,0,82,59,6,0,120,59,10,0,82,47,18,0,1,60,0,16,48,60,60,47,24,181,0,0,0,59,47,0,119,0,3,0,1,60,0,16,0,59,60,0,85,6,59,0,82,59,5,0,82,60,18,0,3,59,59,60,82,60,6,0,57,59,59,60,76,181,0,0,82,59,6,0,41,59,59,1,85,6,59,0,119,0,247,255,82,60,31,0,106,60,60,4,82,58,6,0,134,59,0,0,132,107,3,0,60,58,0,0,85,23,59,0,82,59,23,0,120,59,3,0,1,45,96,0,119,0,180,1,82,59,31,0,82,58,23,0,109,59,4,58,82,59,17,0,82,60,31,0,106,60,60,4,82,61,5,0,3,60,60,61,82,61,18,0,134,58,0,0,156,172,2,0,59,60,61,0,120,58,3,0,1,45,99,0,119,0,165,1,82,58,5,0,82,61,18,0,3,58,58,61,85,5,58,0,119,0,136,1,47,58,33,57,252,184,0,0,2,58,0,0,82,68,72,73,1,61,1,0,138,33,58,61,236,181,0,0,1,45,132,0,119,0,127,1,119,0,1,0,82,58,9,0,120,58,3,0,1,45,9,0,119,0,146,1,1,58,0,0,85,9,58,0,82,58,18,0,33,58,58,13,121,58,3,0,1,45,11,0,119,0,139,1,82,58,17,0,134,37,0,0,124,147,3,0,58,0,0,0,82,58,17,0,85,58,37,0,2,58,0,0,0,0,0,1,82,61,17,0,82,61,61,0,48,58,58,61,84,182,0,0,1,45,13,0,119,0,125,1,82,58,17,0,134,40,0,0,124,147,3,0,58,0,0,0,82,58,17,0,109,58,4,40,2,58,0,0,0,0,0,1,82,61,17,0,106,61,61,4,48,58,58,61,140,182,0,0,1,45,15,0,119,0,111,1,82,61,17,0,134,58,0,0,204,19,3,0,61,0,0,0,19,58,58,52,0,42,58,0,82,58,31,0,109,58,16,42,82,58,31,0,106,58,58,16,33,58,58,1,121,58,19,0,82,58,31,0,106,58,58,16,33,58,58,2,121,58,15,0,82,58,31,0,106,58,58,16,33,58,58,4,121,58,11,0,82,58,31,0,106,58,58,16,33,58,58,8,121,58,7,0,82,58,31,0,106,58,58,16,33,58,58,16,121,58,3,0,1,45,21,0,119,0,81,1,82,61,17,0,134,58,0,0,204,19,3,0,61,0,0,0,19,58,58,52,85,12,58,0,1,58,6,0,82,61,12,0,47,58,58,61,52,183,0,0,1,45,23,0,119,0,69,1,82,58,12,0,32,58,58,3,121,58,7,0,82,58,31,0,106,58,58,16,32,58,58,16,121,58,3,0,1,45,26,0,119,0,60,1,82,58,12,0,32,58,58,3,121,58,4,0,1,58,3,0,83,43,58,0,119,0,6,0,82,58,12,0,38,58,58,1,121,58,3,0,1,45,30,0,119,0,49,1,82,61,17,0,134,58,0,0,204,19,3,0,61,0,0,0,19,58,58,52,85,19,58,0,82,58,19,0,121,58,3,0,1,45,32,0,119,0,39,1,82,61,17,0,134,58,0,0,204,19,3,0,61,0,0,0,19,58,58,52,85,20,58,0,82,58,20,0,121,58,3,0,1,45,34,0,119,0,29,1,82,61,17,0,134,58,0,0,204,19,3,0,61,0,0,0,19,58,58,52,85,11,58,0,1,58,1,0,82,61,11,0,47,58,58,61,4,184,0,0,1,45,36,0,119,0,17,1,82,58,17,0,82,58,58,0,120,58,3,0,1,45,39,0,119,0,12,1,82,58,17,0,106,58,58,4,120,58,3,0,1,45,39,0,119,0,7,1,78,58,43,0,121,58,17,0,82,58,17,0,1,61,1,0,109,58,8,61,2,61,0,0,0,0,0,64,82,58,17,0,82,58,58,0,7,61,61,58,29,61,61,4,82,58,17,0,106,58,58,4,48,61,61,58,112,184,0,0,1,45,46,0,119,0,246,0,119,0,221,0,82,61,17,0,82,60,12,0,38,60,60,2,1,59,3,0,1,62,1,0,125,58,60,59,62,0,0,0,82,59,12,0,38,59,59,4,1,60,1,0,1,63,0,0,125,62,59,60,63,0,0,0,3,58,58,62,109,61,8,58,2,58,0,0,0,0,0,64,82,61,17,0,82,61,61,0,7,58,58,61,82,61,17,0,106,61,61,8,7,58,58,61,82,61,17,0,106,61,61,4,48,58,58,61,232,184,0,0,1,45,42,0,119,0,216,0,82,58,35,0,32,58,58,2,121,58,189,0,1,45,44,0,119,0,211,0,47,58,33,56,16,186,0,0,2,58,0,0,69,84,76,80,1,61,1,0,138,33,58,61,32,185,0,0,1,45,132,0,119,0,178,0,119,0,1,0,82,58,9,0,121,58,3,0,1,45,48,0,119,0,197,0,1,58,0,3,82,61,18,0,48,58,58,61,76,185,0,0,1,45,50,0,119,0,191,0,82,58,18,0,29,58,58,3,85,8,58,0,82,58,8,0,27,58,58,3,82,61,18,0,46,58,58,61,116,185,0,0,1,45,52,0,119,0,181,0,1,58,0,0,85,7,58,0,82,58,8,0,82,61,7,0,57,58,58,61,228,187,0,0,82,58,17,0,134,13,0,0,204,19,3,0,58,0,0,0,82,58,7,0,41,58,58,2,25,58,58,0,95,41,58,13,82,58,17,0,134,15,0,0,204,19,3,0,58,0,0,0,82,58,7,0,41,58,58,2,25,58,58,1,95,41,58,15,82,58,17,0,134,16,0,0,204,19,3,0,58,0,0,0,82,58,7,0,41,58,58,2,25,58,58,2,95,41,58,16,82,58,7,0,41,58,58,2,25,58,58,3,1,61,255,255,95,41,58,61,82,61,7,0,25,61,61,1,85,7,61,0,119,0,220,255,2,61,0,0,83,78,82,116,1,58,1,0,138,33,61,58,44,186,0,0,1,45,132,0,119,0,111,0,119,0,1,0,82,61,9,0,121,61,3,0,1,45,57,0,119,0,130,0,82,61,31,0,106,61,61,4,121,61,3,0,1,45,59,0,119,0,125,0,78,61,43,0,121,61,36,0,82,61,35,0,32,61,61,2,121,61,3,0,1,45,62,0,119,0,118,0,82,61,8,0,120,61,3,0,1,45,64,0,119,0,114,0,82,61,8,0,82,58,18,0,48,61,61,58,152,186,0,0,1,45,66,0,119,0,108,0,1,61,4,0,83,43,61,0,1,61,0,0,85,7,61,0,82,61,18,0,82,58,7,0,57,61,61,58,228,187,0,0,82,61,17,0,134,21,0,0,204,19,3,0,61,0,0,0,82,61,7,0,41,61,61,2,25,61,61,3,95,41,61,21,82,61,7,0,25,61,61,1,85,7,61,0,119,0,241,255,82,61,17,0,106,61,61,8,38,61,61,1,120,61,3,0,1,45,71,0,119,0,82,0,82,61,18,0,82,58,17,0,106,58,58,8,41,58,58,1,46,61,61,58,32,187,0,0,1,45,73,0,119,0,74,0,1,61,1,0,83,44,61,0,82,61,31,0,106,61,61,16,32,24,61,16,1,61,0,0,85,10,61,0,121,24,19,0,82,61,17,0,106,61,61,8,82,58,10,0,56,61,61,58,228,187,0,0,82,58,17,0,134,61,0,0,104,144,3,0,58,0,0,0,19,61,61,55,0,26,61,0,82,61,10,0,41,61,61,1,96,4,61,26,82,61,10,0,25,61,61,1,85,10,61,0,119,0,239,255,82,61,17,0,106,61,61,8,82,58,10,0,56,61,61,58,228,187,0,0,82,58,17,0,134,61,0,0,104,144,3,0,58,0,0,0,19,61,61,52,0,28,61,0,82,58,31,0,106,58,58,16,91,58,54,58,5,61,28,58,19,61,61,52,0,29,61,0,82,61,10,0,95,3,61,29,82,61,10,0,25,61,61,1,85,10,61,0,119,0,234,255,45,61,45,53,48,188,0,0,1,45,0,0,82,61,9,0,121,61,3,0,1,45,133,0,119,0,18,0,106,61,18,4,2,58,0,0,0,0,0,32,19,61,61,58,120,61,3,0,1,45,135,0,119,0,11,0,82,58,17,0,82,62,18,0,134,61,0,0,232,1,3,0,58,62,0,0,82,62,17,0,134,61,0,0,124,147,3,0,62,0,0,0,119,0,220,253,1,59,9,0,1,65,127,0,138,45,59,65,80,190,0,0,76,190,0,0,116,190,0,0,76,190,0,0,152,190,0,0,76,190,0,0,188,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,224,190,0,0,76,190,0,0,4,191,0,0,76,190,0,0,76,190,0,0,40,191,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,191,0,0,76,190,0,0,112,191,0,0,76,190,0,0,148,191,0,0,76,190,0,0,184,191,0,0,76,190,0,0,76,190,0,0,220,191,0,0,76,190,0,0,76,190,0,0,0,192,0,0,76,190,0,0,36,192,0,0,76,190,0,0,60,192,0,0,76,190,0,0,96,192,0,0,76,190,0,0,132,192,0,0,76,190,0,0,168,192,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,204,192,0,0,76,190,0,0,240,192,0,0,76,190,0,0,76,190,0,0,20,193,0,0,76,190,0,0,56,193,0,0,76,190,0,0,92,193,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,128,193,0,0,76,190,0,0,164,193,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,200,193,0,0,76,190,0,0,236,193,0,0,76,190,0,0,16,194,0,0,76,190,0,0,52,194,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,194,0,0,76,190,0,0,76,190,0,0,112,194,0,0,76,190,0,0,148,194,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,76,190,0,0,4,198,0,0,76,190,0,0,40,198,0,0,119,0,15,2,1,62,235,55,134,61,0,0,176,165,3,0,62,0,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,62,249,55,134,61,0,0,176,165,3,0,62,0,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,62,75,55,134,61,0,0,176,165,3,0,62,0,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,62,75,55,134,61,0,0,176,165,3,0,62,0,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,62,6,56,134,61,0,0,176,165,3,0,62,0,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,62,26,56,134,61,0,0,176,165,3,0,62,0,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,62,26,56,134,61,0,0,176,165,3,0,62,0,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,62,26,56,134,61,0,0,176,165,3,0,62,0,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,62,36,56,134,61,0,0,176,165,3,0,62,0,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,62,52,56,134,61,0,0,176,165,3,0,62,0,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,62,70,56,134,61,0,0,176,165,3,0,62,0,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,62,91,56,134,61,0,0,176,165,3,0,62,0,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,62,75,55,134,61,0,0,176,165,3,0,62,0,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,61,1,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,62,75,55,134,61,0,0,176,165,3,0,62,0,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,62,105,56,134,61,0,0,176,165,3,0,62,0,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,62,120,56,134,61,0,0,176,165,3,0,62,0,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,62,120,56,134,61,0,0,176,165,3,0,62,0,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,62,105,56,134,61,0,0,176,165,3,0,62,0,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,62,133,56,134,61,0,0,176,165,3,0,62,0,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,82,61,17,0,1,62,4,0,109,61,8,62,1,62,1,0,85,30,62,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,61,149,56,134,62,0,0,176,165,3,0,61,0,0,0,85,30,62,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,61,166,56,134,62,0,0,176,165,3,0,61,0,0,0,85,30,62,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,61,179,56,134,62,0,0,176,165,3,0,61,0,0,0,85,30,62,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,61,166,56,134,62,0,0,176,165,3,0,61,0,0,0,85,30,62,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,61,105,56,134,62,0,0,176,165,3,0,61,0,0,0,85,30,62,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,61,204,56,134,62,0,0,176,165,3,0,61,0,0,0,85,30,62,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,82,62,17,0,79,61,43,0,109,62,8,61,1,61,1,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,61,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,62,203,54,134,61,0,0,176,165,3,0,62,0,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,62,212,56,134,61,0,0,176,165,3,0,62,0,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,82,61,9,0,121,61,9,0,1,62,105,56,134,61,0,0,176,165,3,0,62,0,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,82,61,35,0,121,61,6,0,1,61,1,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,82,61,31,0,106,61,61,4,120,61,9,0,1,62,222,56,134,61,0,0,176,165,3,0,62,0,0,0,85,30,61,0,82,38,30,0,137,46,0,0,139,38,0,0,82,62,17,0,82,62,62,0,82,58,31,0,106,58,58,16,5,61,62,58,25,61,61,7,29,61,61,8,85,27,61,0,82,48,17,0,82,61,17,0,106,49,61,4,82,62,27,0,5,58,62,49,106,62,48,8,5,61,58,62,3,61,61,49,85,25,61,0,82,61,31,0,106,61,61,4,82,62,5,0,82,58,25,0,82,63,14,0,33,63,63,0,40,63,63,1,38,63,63,1,134,32,0,0,128,232,2,0,61,62,58,25,63,0,0,0,82,63,31,0,109,63,8,32,82,63,31,0,106,63,63,8,120,63,6,0,1,63,0,0,85,30,63,0,82,38,30,0,137,46,0,0,139,38,0,0,82,58,31,0,106,58,58,4,135,63,214,2,58,0,0,0,82,63,31,0,1,58,0,0,109,63,4,58,82,63,39,0,33,63,63,3,121,63,8,0,82,63,39,0,82,62,17,0,106,62,62,8,25,62,62,1,13,63,63,62,0,58,63,0,119,0,3,0,1,63,0,0,0,58,63,0,40,58,58,1,78,63,43,0,33,63,63,0,20,58,58,63,121,58,9,0,79,58,44,0,121,58,3,0,1,45,111,0,119,0,6,0,82,50,17,0,106,63,50,8,109,50,12,63,119,0,2,0,1,45,111,0,32,63,45,111,121,63,5,0,82,51,17,0,106,58,51,8,25,58,58,1,109,51,12,58,82,63,31,0,82,62,31,0,106,62,62,8,82,61,25,0,82,60,17,0,106,60,60,12,82,59,31,0,106,59,59,16,82,64,12,0,82,65,11,0,134,58,0,0,192,211,1,0,63,62,61,60,59,64,65,0,120,58,6,0,1,58,0,0,85,30,58,0,82,38,30,0,137,46,0,0,139,38,0,0,78,58,44,0,121,58,29,0,82,34,31,0,82,58,31,0,106,58,58,16,32,58,58,16,121,58,13,0,82,65,17,0,106,65,65,12,134,58,0,0,144,179,2,0,34,4,65,0,120,58,18,0,1,58,0,0,85,30,58,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,12,0,82,65,17,0,106,65,65,12,134,58,0,0,0,183,2,0,34,3,65,0,120,58,6,0,1,58,0,0,85,30,58,0,82,38,30,0,137,46,0,0,139,38,0,0,82,58,14,0,33,58,58,0,1,65,0,0,33,65,65,0,19,58,58,65,121,58,10,0,1,58,2,0,82,65,17,0,106,65,65,12,47,58,58,65,64,197,0,0,82,65,31,0,134,58,0,0,8,109,2,0,65,0,0,0,78,58,43,0,121,58,28,0,82,58,17,0,79,65,43,0,109,58,8,65,82,65,17,0,79,58,43,0,109,65,12,58,1,58,3,0,82,65,39,0,49,58,58,65,124,197,0,0,82,58,17,0,82,65,39,0,109,58,12,65,82,58,31,0,82,64,8,0,82,59,17,0,106,59,59,12,134,65,0,0,188,106,2,0,58,41,64,59,120,65,14,0,1,65,0,0,85,30,65,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,8,0,78,65,44,0,121,65,6,0,82,65,17,0,25,36,65,8,82,65,36,0,25,65,65,1,85,36,65,0,82,59,31,0,106,59,59,8,135,65,214,2,59,0,0,0,82,65,31,0,1,59,0,0,109,65,8,59,1,59,1,0,85,30,59,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,65,105,56,134,59,0,0,176,165,3,0,65,0,0,0,85,30,59,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,59,48,19,106,65,18,4,43,65,65,24,83,59,65,0,1,65,49,19,106,59,18,4,43,59,59,16,83,65,59,0,1,59,50,19,106,65,18,4,43,65,65,8,83,59,65,0,1,65,51,19,106,59,18,4,83,65,59,0,1,65,48,19,134,59,0,0,176,165,3,0,65,0,0,0,85,30,59,0,82,38,30,0,137,46,0,0,139,38,0,0,119,0,1,0,1,59,0,0,139,59,0,0,140,5,165,0,0,0,0,0,2,158,0,0,14,75,0,0,2,159,0,0,255,0,0,0,2,160,0,0,255,255,255,127,1,155,0,0,136,161,0,0,0,156,161,0,136,161,0,0,25,161,161,64,137,161,0,0,130,161,0,0,136,162,0,0,49,161,161,162,228,198,0,0,1,162,64,0,135,161,208,2,162,0,0,0,25,134,156,56,25,138,156,40,0,143,156,0,25,145,156,48,25,147,156,60,85,134,1,0,33,58,0,0,25,63,143,40,0,66,63,0,25,69,143,39,25,71,145,4,1,15,0,0,1,18,0,0,1,27,0,0,0,14,15,0,0,17,18,0,1,161,255,255,47,161,161,17,92,199,0,0,4,161,160,17,47,161,161,14,84,199,0,0,134,161,0,0,96,186,3,0,1,162,75,0,85,161,162,0,1,34,255,255,119,0,4,0,3,34,14,17,119,0,2,0,0,34,17,0,82,88,134,0,78,90,88,0,41,162,90,24,42,162,162,24,120,162,3,0,1,155,94,0,119,0,141,3,0,95,90,0,0,103,88,0,41,162,95,24,42,162,162,24,1,161,0,0,1,163,38,0,138,162,161,163,52,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0], eb + 40960);
  HEAPU8.set([48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,48,200,0,0,60,200,0,0,119,0,5,0,0,19,103,0,119,0,8,0,1,155,10,0,119,0,6,0,25,98,103,1,85,134,98,0,78,95,98,0,0,103,98,0,119,0,204,255,32,162,155,10,121,162,19,0,1,155,0,0,0,20,103,0,0,110,103,0,102,162,110,1,33,162,162,37,121,162,3,0,0,19,20,0,119,0,11,0,25,118,20,1,25,110,110,2,85,134,110,0,78,162,110,0,33,162,162,37,121,162,3,0,0,19,118,0,119,0,3,0,0,20,118,0,119,0,242,255,4,14,19,88,121,58,4,0,134,162,0,0,152,176,3,0,0,88,14,0,120,14,2,0,119,0,3,0,0,17,34,0,119,0,151,255,82,161,134,0,102,161,161,1,134,162,0,0,60,184,3,0,161,0,0,0,32,133,162,0,82,55,134,0,121,133,5,0,1,22,255,255,0,38,27,0,1,57,1,0,119,0,12,0,102,162,55,2,32,162,162,36,121,162,6,0,102,162,55,1,26,22,162,48,1,38,1,0,1,57,3,0,119,0,4,0,1,22,255,255,0,38,27,0,1,57,1,0,3,135,55,57,85,134,135,0,78,136,135,0,41,162,136,24,42,162,162,24,26,137,162,32,1,162,31,0,16,162,162,137,1,161,1,0,22,161,161,137,2,163,0,0,137,40,1,0,19,161,161,163,32,161,161,0,20,162,162,161,121,162,5,0,1,25,0,0,0,53,136,0,0,152,135,0,119,0,31,0,1,26,0,0,0,139,137,0,0,153,135,0,1,162,1,0,22,162,162,139,20,162,162,26,0,140,162,0,25,141,153,1,85,134,141,0,78,142,141,0,41,162,142,24,42,162,162,24,26,139,162,32,1,162,31,0,16,162,162,139,1,161,1,0,22,161,161,139,2,163,0,0,137,40,1,0,19,161,161,163,32,161,161,0,20,162,162,161,121,162,5,0,0,25,140,0,0,53,142,0,0,152,141,0,119,0,4,0,0,26,140,0,0,153,141,0,119,0,230,255,41,162,53,24,42,162,162,24,32,162,162,42,121,162,71,0,102,161,152,1,134,162,0,0,60,184,3,0,161,0,0,0,120,162,3,0,1,155,27,0,119,0,19,0,82,144,134,0,102,162,144,2,32,162,162,36,121,162,14,0,25,146,144,1,78,162,146,0,26,162,162,48,41,162,162,2,1,161,10,0,97,4,162,161,78,161,146,0,26,161,161,48,41,161,161,3,94,24,3,161,1,45,1,0,25,154,144,3,119,0,2,0,1,155,27,0,32,161,155,27,121,161,25,0,1,155,0,0,121,38,3,0,1,5,255,255,119,0,205,2,121,58,15,0,82,161,2,0,1,162,4,0,26,162,162,1,3,161,161,162,1,162,4,0,26,162,162,1,11,162,162,0,19,161,161,162,0,59,161,0,82,60,59,0,25,161,59,4,85,2,161,0,0,131,60,0,119,0,2,0,1,131,0,0,0,24,131,0,1,45,0,0,82,161,134,0,25,154,161,1,85,134,154,0,34,61,24,0,121,61,5,0,1,162,0,0,4,162,162,24,0,161,162,0,119,0,2,0,0,161,24,0,0,36,161,0,121,61,5,0,1,162,0,32,20,162,25,162,0,161,162,0,119,0,2,0,0,161,25,0,0,37,161,0,0,47,45,0,0,64,154,0,119,0,12,0,134,62,0,0,36,141,3,0,134,0,0,0,34,161,62,0,121,161,3,0,1,5,255,255,119,0,159,2,0,36,62,0,0,37,25,0,0,47,38,0,82,64,134,0,78,161,64,0,32,161,161,46,121,161,61,0,25,65,64,1,78,161,65,0,33,161,161,42,121,161,8,0,85,134,65,0,134,76,0,0,36,141,3,0,134,0,0,0,0,23,76,0,82,56,134,0,119,0,52,0,102,162,64,2,134,161,0,0,60,184,3,0,162,0,0,0,121,161,20,0,82,67,134,0,102,161,67,3,32,161,161,36,121,161,16,0,25,68,67,2,78,161,68,0,26,161,161,48,41,161,161,2,1,162,10,0,97,4,161,162,78,162,68,0,26,162,162,48,41,162,162,3,94,70,3,162,25,72,67,4,85,134,72,0,0,23,70,0,0,56,72,0,119,0,28,0,121,47,3,0,1,5,255,255,119,0,114,2,121,58,15,0,82,162,2,0,1,161,4,0,26,161,161,1,3,162,162,161,1,161,4,0,26,161,161,1,11,161,161,0,19,162,162,161,0,73,162,0,82,74,73,0,25,162,73,4,85,2,162,0,0,132,74,0,119,0,2,0,1,132,0,0,82,162,134,0,25,75,162,2,85,134,75,0,0,23,132,0,0,56,75,0,119,0,3,0,1,23,255,255,0,56,64,0,1,21,0,0,0,77,56,0,1,162,57,0,78,161,77,0,26,161,161,65,48,162,162,161,108,204,0,0,1,5,255,255,119,0,81,2,0,157,77,0,25,77,77,1,85,134,77,0,78,162,157,0,26,162,162,65,1,161,0,29,27,163,21,58,3,161,161,163,90,78,162,161,19,162,78,159,0,79,162,0,1,162,8,0,26,161,79,1,57,162,162,161,176,204,0,0,0,21,79,0,119,0,233,255,41,162,78,24,42,162,162,24,120,162,3,0,1,5,255,255,119,0,59,2,1,162,255,255,15,80,162,22,41,162,78,24,42,162,162,24,32,162,162,19,121,162,6,0,121,80,3,0,1,5,255,255,119,0,50,2,1,155,54,0,119,0,20,0,121,80,11,0,41,162,22,2,97,4,162,79,41,162,22,3,3,81,3,162,106,82,81,4,0,83,138,0,116,83,81,0,109,83,4,82,1,155,54,0,119,0,9,0,120,58,3,0,1,5,0,0,119,0,34,2,134,162,0,0,36,101,2,0,138,79,2,0,82,84,134,0,1,155,55,0,32,162,155,54,121,162,7,0,1,155,0,0,121,58,4,0,0,84,77,0,1,155,55,0,119,0,2,0,1,16,0,0,32,162,155,55,121,162,15,2,1,155,0,0,26,162,84,1,78,85,162,0,33,161,21,0,38,163,85,15,32,163,163,3,19,161,161,163,121,161,4,0,38,161,85,223,0,162,161,0,119,0,2,0,0,162,85,0,0,9,162,0,2,162,0,0,255,255,254,255,19,162,37,162,0,86,162,0,1,162,0,32,19,162,37,162,32,162,162,0,125,150,162,37,86,0,0,0,1,161,65,0,1,164,56,0,138,9,161,164,196,206,0,0,168,206,0,0,200,206,0,0,168,206,0,0,228,206,0,0,232,206,0,0,236,206,0,0,168,206,0,0,168,206,0,0,168,206,0,0,168,206,0,0,168,206,0,0,168,206,0,0,168,206,0,0,168,206,0,0,168,206,0,0,168,206,0,0,168,206,0,0,240,206,0,0,168,206,0,0,168,206,0,0,168,206,0,0,168,206,0,0,36,207,0,0,168,206,0,0,168,206,0,0,168,206,0,0,168,206,0,0,168,206,0,0,168,206,0,0,168,206,0,0,168,206,0,0,40,207,0,0,168,206,0,0,44,207,0,0,80,207,0,0,252,207,0,0,20,208,0,0,24,208,0,0,168,206,0,0,28,208,0,0,168,206,0,0,168,206,0,0,168,206,0,0,32,208,0,0,64,208,0,0,16,209,0,0,116,209,0,0,168,206,0,0,168,206,0,0,156,209,0,0,168,206,0,0,184,209,0,0,168,206,0,0,168,206,0,0,212,209,0,0,0,39,88,0,1,40,0,0,1,41,14,75,0,51,23,0,0,52,150,0,0,54,66,0,119,0,202,0,119,0,78,0,116,145,138,0,1,161,0,0,85,71,161,0,85,138,145,0,1,49,255,255,1,155,81,0,119,0,194,0,119,0,70,0,119,0,69,0,119,0,68,0,120,23,10,0,1,162,32,0,1,164,0,0,134,161,0,0,116,101,3,0,0,162,36,164,150,0,0,0,1,12,0,0,1,155,91,0,119,0,181,0,0,49,23,0,1,155,81,0,119,0,178,0,119,0,172,0,119,0,53,0,82,162,138,0,83,69,162,0,0,39,69,0,1,40,0,0,1,41,14,75,1,51,1,0,0,52,86,0,0,54,66,0,119,0,167,0,0,104,138,0,82,105,104,0,106,106,104,4,34,161,106,0,121,161,16,0,1,161,0,0,1,162,0,0,134,107,0,0,16,167,3,0,161,162,105,106,135,108,211,2,0,109,138,0,85,109,107,0,109,109,4,108,1,8,1,0,1,10,14,75,0,111,107,0,0,112,108,0,1,155,72,0,119,0,147,0,1,162,1,8,19,162,150,162,33,162,162,0,38,162,162,1,0,8,162,0,1,161,0,8,19,161,150,161,32,161,161,0,121,161,8,0,38,163,150,1,32,163,163,0,1,164,16,75,125,161,163,158,164,0,0,0,0,162,161,0,119,0,3,0,1,161,15,75,0,162,161,0,0,10,162,0,0,111,105,0,0,112,106,0,1,155,72,0,119,0,124,0,86,161,138,0,134,16,0,0,28,160,0,0,0,161,36,23,150,9,0,0,119,0,99,1,119,0,250,255,119,0,249,255,119,0,205,255,134,162,0,0,96,186,3,0,82,162,162,0,134,28,0,0,92,179,3,0,162,0,0,0,1,155,77,0,119,0,107,0,19,162,21,159,41,162,162,24,42,162,162,24,1,161,0,0,1,163,8,0,138,162,161,163,128,208,0,0,144,208,0,0,160,208,0,0,192,208,0,0,208,208,0,0,120,208,0,0,224,208,0,0,240,208,0,0,1,16,0,0,119,0,72,1,82,161,138,0,85,161,34,0,1,16,0,0,119,0,68,1,82,161,138,0,85,161,34,0,1,16,0,0,119,0,64,1,82,89,138,0,85,89,34,0,34,163,34,0,41,163,163,31,42,163,163,31,109,89,4,163,1,16,0,0,119,0,56,1,82,163,138,0,84,163,34,0,1,16,0,0,119,0,52,1,82,163,138,0,83,163,34,0,1,16,0,0,119,0,48,1,82,163,138,0,85,163,34,0,1,16,0,0,119,0,44,1,82,91,138,0,85,91,34,0,34,161,34,0,41,161,161,31,42,161,161,31,109,91,4,161,1,16,0,0,119,0,36,1,0,97,138,0,82,99,97,0,106,100,97,4,134,101,0,0,124,136,3,0,99,100,63,0,4,102,66,101,0,6,101,0,1,30,0,0,1,32,14,75,38,162,150,8,32,162,162,0,15,163,102,23,20,162,162,163,121,162,3,0,0,161,23,0,119,0,3,0,25,162,102,1,0,161,162,0,0,43,161,0,0,50,150,0,0,113,99,0,0,114,100,0,1,155,73,0,119,0,30,0,1,31,120,0,1,162,8,0,16,162,162,23,1,161,8,0,125,35,162,23,161,0,0,0,39,161,150,8,0,46,161,0,1,155,67,0,119,0,20,0,82,117,138,0,32,162,117,0,1,161,24,75,125,28,162,161,117,0,0,0,1,155,77,0,119,0,13,0,0,87,138,0,1,8,0,0,1,10,14,75,82,111,87,0,106,112,87,4,1,155,72,0,119,0,6,0,0,31,9,0,0,35,23,0,0,46,150,0,1,155,67,0,119,0,1,0,32,161,155,67,121,161,34,0,1,155,0,0,0,92,138,0,82,93,92,0,106,94,92,4,38,161,31,32,134,96,0,0,148,127,3,0,93,94,63,161,38,161,46,8,32,161,161,0,32,164,93,0,32,162,94,0,19,164,164,162,20,161,161,164,0,149,161,0,0,6,96,0,1,161,0,0,1,164,2,0,125,30,149,161,164,0,0,0,121,149,3,0,0,164,158,0,119,0,4,0,43,161,31,4,3,161,158,161,0,164,161,0,0,32,164,0,0,43,35,0,0,50,46,0,0,113,93,0,0,114,94,0,1,155,73,0,119,0,109,0,32,164,155,72,121,164,13,0,1,155,0,0,134,6,0,0,236,245,2,0,111,112,63,0,0,30,8,0,0,32,10,0,0,43,23,0,0,50,150,0,0,113,111,0,0,114,112,0,1,155,73,0,119,0,95,0,32,164,155,77,121,164,24,0,1,155,0,0,1,164,0,0,134,119,0,0,52,119,2,0,28,164,23,0,32,120,119,0,0,39,28,0,1,40,0,0,1,41,14,75,121,120,3,0,0,164,23,0,119,0,3,0,4,161,119,28,0,164,161,0,0,51,164,0,0,52,86,0,121,120,4,0,3,161,28,23,0,164,161,0,119,0,2,0,0,164,119,0,0,54,164,0,119,0,70,0,32,164,155,81,121,164,68,0,1,155,0,0,82,7,138,0,1,13,0,0,82,121,7,0,120,121,3,0,0,11,13,0,119,0,19,0,134,122,0,0,240,175,3,0,147,121,0,0,34,123,122,0,4,164,49,13,16,164,164,122,20,164,123,164,121,164,3,0,1,155,85,0,119,0,9,0,3,124,122,13,48,164,124,49,116,211,0,0,25,7,7,4,0,13,124,0,119,0,237,255,0,11,124,0,119,0,1,0,32,164,155,85,121,164,6,0,1,155,0,0,121,123,3,0,1,5,255,255,119,0,135,0,0,11,13,0,1,161,32,0,134,164,0,0,116,101,3,0,0,161,36,11,150,0,0,0,120,11,4,0,1,12,0,0,1,155,91,0,119,0,27,0,82,29,138,0,1,33,0,0,82,125,29,0,120,125,4,0,0,12,11,0,1,155,91,0,119,0,20,0,134,126,0,0,240,175,3,0,147,125,0,0,3,33,126,33,47,164,11,33,252,211,0,0,0,12,11,0,1,155,91,0,119,0,11,0,134,164,0,0,152,176,3,0,0,147,126,0,50,164,11,33,28,212,0,0,0,12,11,0,1,155,91,0,119,0,3,0,25,29,29,4,119,0,233,255,32,164,155,73,121,164,38,0,1,155,0,0,33,164,113,0,33,161,114,0,20,164,164,161,0,115,164,0,33,164,43,0,20,164,164,115,0,148,164,0,4,164,66,6,40,161,115,1,38,161,161,1,3,116,164,161,125,39,148,6,63,0,0,0,0,40,30,0,0,41,32,0,121,148,6,0,15,162,116,43,125,164,162,43,116,0,0,0,0,161,164,0,119,0,3,0,1,164,0,0,0,161,164,0,0,51,161,0,1,164,255,255,47,164,164,43,176,212,0,0,2,164,0,0,255,255,254,255,19,164,50,164,0,161,164,0,119,0,2,0,0,161,50,0,0,52,161,0,0,54,66,0,119,0,15,0,32,161,155,91,121,161,13,0,1,155,0,0,1,164,32,0,1,162,0,32,21,162,150,162,134,161,0,0,116,101,3,0,0,164,36,12,162,0,0,0,15,161,12,36,125,16,161,36,12,0,0,0,119,0,42,0,4,127,54,39,15,161,51,127,125,151,161,127,51,0,0,0,3,128,151,40,15,161,36,128,125,44,161,128,36,0,0,0,1,162,32,0,134,161,0,0,116,101,3,0,0,162,44,128,52,0,0,0,134,161,0,0,152,176,3,0,0,41,40,0,1,162,48,0,2,164,0,0,0,0,1,0,21,164,52,164,134,161,0,0,116,101,3,0,0,162,44,128,164,0,0,0,1,164,48,0,1,162,0,0,134,161,0,0,116,101,3,0,0,164,151,127,162,0,0,0,134,161,0,0,152,176,3,0,0,39,127,0,1,162,32,0,1,164,0,32,21,164,52,164,134,161,0,0,116,101,3,0,0,162,44,128,164,0,0,0,0,16,44,0,0,15,16,0,0,18,34,0,0,27,47,0,119,0,93,252,32,161,155,94,121,161,36,0,120,0,34,0,120,27,3,0,1,5,0,0,119,0,32,0,1,42,1,0,41,161,42,2,94,129,4,161,120,129,2,0,119,0,13,0,41,164,42,3,3,164,3,164,134,161,0,0,36,101,2,0,164,129,2,0,25,130,42,1,35,161,130,10,121,161,3,0,0,42,130,0,119,0,243,255,1,5,1,0,119,0,15,0,0,48,42,0,41,161,48,2,94,161,4,161,121,161,3,0,1,5,255,255,119,0,9,0,25,48,48,1,1,161,10,0,50,161,161,48,56,214,0,0,1,5,1,0,119,0,3,0,119,0,245,255,0,5,34,0,137,156,0,0,139,5,0,0,140,2,88,0,0,0,0,0,2,79,0,0,255,255,0,0,2,80,0,0,255,0,0,0,136,81,0,0,0,68,81,0,136,81,0,0,25,81,81,112,137,81,0,0,130,81,0,0,136,82,0,0,49,81,81,82,144,214,0,0,1,82,112,0,135,81,208,2,82,0,0,0,25,2,68,76,25,19,68,72,25,35,68,68,25,39,68,64,25,45,68,60,25,54,68,56,25,62,68,52,25,64,68,106,25,66,68,105,25,3,68,104,25,4,68,48,25,6,68,44,25,8,68,40,25,10,68,103,25,12,68,102,25,14,68,101,25,15,68,100,25,17,68,36,25,18,68,99,25,20,68,98,25,21,68,97,25,22,68,96,25,23,68,32,25,25,68,28,25,26,68,24,25,28,68,20,25,30,68,16,25,32,68,12,25,33,68,8,25,36,68,4,85,19,0,0,85,35,1,0,82,81,35,0,120,81,3,0,137,68,0,0,139,0,0,0,82,81,19,0,106,81,81,16,82,82,35,0,45,81,81,82,60,215,0,0,137,68,0,0,139,0,0,0,82,82,35,0,34,82,82,11,121,82,6,0,82,82,19,0,106,82,82,16,34,82,82,11,0,81,82,0,119,0,3,0,1,82,0,0,0,81,82,0,120,81,8,0,1,82,2,0,1,83,99,73,134,81,0,0,104,5,3,0,82,83,68,0,137,68,0,0,139,0,0,0,82,40,19,0,116,2,40,0,106,83,40,4,109,2,4,83,106,81,40,8,109,2,8,81,106,83,40,12,109,2,12,83,106,81,40,16,109,2,16,81,134,81,0,0,112,107,1,0,2,0,0,0,85,39,81,0,82,83,19,0,82,83,83,0,135,81,214,2,83,0,0,0,82,81,19,0,1,83,0,0,85,81,83,0,82,83,19,0,82,81,35,0,109,83,16,81,1,81,0,0,85,45,81,0,82,81,19,0,106,81,81,16,1,83,1,0,1,85,10,0,138,81,83,85,44,216,0,0,76,217,0,0,200,218,0,0,40,220,0,0,108,221,0,0,36,223,0,0,216,224,0,0,100,226,0,0,112,227,0,0,112,228,0,0,119,0,94,3,82,69,19,0,106,82,69,4,106,84,69,8,5,83,82,84,135,57,1,0,83,0,0,0,82,83,19,0,85,83,57,0,1,83,0,0,85,54,83,0,82,84,19,0,106,84,84,4,82,82,19,0,106,82,82,8,5,83,84,82,82,82,54,0,56,83,83,82,160,229,0,0,82,82,39,0,82,84,54,0,41,84,84,4,100,83,82,84,145,83,83,0,62,82,0,0,209,221,1,224,208,34,211,63,145,82,82,0,65,63,83,82,145,63,63,0,82,84,39,0,82,85,54,0,41,85,85,4,3,84,84,85,112,83,84,4,145,83,83,0,62,84,0,0,217,84,201,63,180,200,226,63,145,84,84,0,65,82,83,84,145,82,82,0,63,65,63,82,145,65,65,0,82,86,39,0,82,87,54,0,41,87,87,4,3,86,86,87,112,85,86,8,145,85,85,0,62,86,0,0,201,118,190,159,26,47,189,63,145,86,86,0,65,83,85,86,145,83,83,0,63,84,65,83,145,84,84,0,59,83,255,0,145,83,83,0,65,82,84,83,145,82,82,0,75,82,82,0,19,82,82,80,0,67,82,0,82,82,19,0,82,82,82,0,82,83,54,0,95,82,83,67,82,83,54,0,25,83,83,1,85,54,83,0,119,0,195,255,82,70,19,0,106,82,70,4,106,84,70,8,5,83,82,84,41,83,83,1,135,5,1,0,83,0,0,0,82,83,19,0,85,83,5,0,1,83,0,0,85,62,83,0,82,84,19,0,106,84,84,4,82,82,19,0,106,82,82,8,5,83,84,82,41,83,83,1,82,82,62,0,56,83,83,82,160,229,0,0,82,82,39,0,82,84,45,0,41,84,84,4,100,83,82,84,145,83,83,0,62,82,0,0,209,221,1,224,208,34,211,63,145,82,82,0,65,7,83,82,145,7,7,0,82,84,39,0,82,86,45,0,41,86,86,4,3,84,84,86,112,83,84,4,145,83,83,0,62,84,0,0,217,84,201,63,180,200,226,63,145,84,84,0,65,82,83,84,145,82,82,0,63,9,7,82,145,9,9,0,82,85,39,0,82,87,45,0,41,87,87,4,3,85,85,87,112,86,85,8,145,86,86,0,62,85,0,0,201,118,190,159,26,47,189,63,145,85,85,0,65,83,86,85,145,83,83,0,63,84,9,83,145,84,84,0,59,83,255,0,145,83,83,0,65,82,84,83,145,82,82,0,75,82,82,0,19,82,82,80,0,11,82,0,82,82,19,0,82,82,82,0,82,83,62,0,95,82,83,11,82,84,39,0,82,85,45,0,41,85,85,4,3,84,84,85,112,82,84,12,145,82,82,0,59,84,255,0,145,84,84,0,65,83,82,84,145,83,83,0,75,83,83,0,19,83,83,80,0,13,83,0,82,83,19,0,82,83,83,0,82,84,62,0,25,84,84,1,95,83,84,13,82,84,62,0,25,84,84,2,85,62,84,0,82,84,45,0,25,84,84,1,85,45,84,0,119,0,173,255,82,71,19,0,106,83,71,4,106,82,71,8,5,84,83,82,41,84,84,1,135,16,1,0,84,0,0,0,82,84,19,0,85,84,16,0,1,84,0,0,83,64,84,0,1,84,0,0,83,66,84,0,1,84,0,0,83,3,84,0,1,84,0,0,85,4,84,0,82,82,19,0,106,82,82,4,82,83,19,0,106,83,83,8,5,84,82,83,82,83,4,0,56,84,84,83,160,229,0,0,82,85,39,0,82,86,4,0,41,86,86,4,100,82,85,86,145,82,82,0,59,85,31,0,145,85,85,0,65,83,82,85,145,83,83,0,134,84,0,0,96,181,3,0,83,0,0,0,75,84,84,0,83,64,84,0,82,82,39,0,82,86,4,0,41,86,86,4,3,82,82,86,112,85,82,4,145,85,85,0,59,82,63,0,145,82,82,0,65,83,85,82,145,83,83,0,134,84,0,0,96,181,3,0,83,0,0,0,75,84,84,0,83,66,84,0,82,85,39,0,82,86,4,0,41,86,86,4,3,85,85,86,112,82,85,8,145,82,82,0,59,85,31,0,145,85,85,0,65,83,82,85,145,83,83,0,134,84,0,0,96,181,3,0,83,0,0,0,75,84,84,0,83,3,84,0,82,84,19,0,82,84,84,0,82,83,4,0,41,83,83,1,79,85,64,0,19,85,85,79,41,85,85,11,79,82,66,0,19,82,82,79,41,82,82,5,20,85,85,82,79,82,3,0,19,82,82,79,20,85,85,82,96,84,83,85,82,85,4,0,25,85,85,1,85,4,85,0,119,0,186,255,82,72,19,0,106,83,72,4,106,84,72,8,5,85,83,84,27,85,85,3,135,24,1,0,85,0,0,0,82,85,19,0,85,85,24,0,1,85,0,0,85,6,85,0,1,85,0,0,85,8,85,0,82,84,19,0,106,84,84,4,82,83,19,0,106,83,83,8,5,85,84,83,27,85,85,3,82,83,6,0,56,85,85,83,160,229,0,0,82,84,39,0,82,82,8,0,41,82,82,4,100,83,84,82,145,83,83,0,59,84,255,0,145,84,84,0,65,85,83,84,145,85,85,0,75,85,85,0,19,85,85,80,0,27,85,0,82,85,19,0,82,85,85,0,82,84,6,0,95,85,84,27,82,83,39,0,82,82,8,0,41,82,82,4,3,83,83,82,112,85,83,4,145,85,85,0,59,83,255,0,145,83,83,0,65,84,85,83,145,84,84,0,75,84,84,0,19,84,84,80,0,29,84,0,82,84,19,0,82,84,84,0,82,83,6,0,25,83,83,1,95,84,83,29,82,85,39,0,82,82,8,0,41,82,82,4,3,85,85,82,112,84,85,8,145,84,84,0,59,85,255,0,145,85,85,0,65,83,84,85,145,83,83,0,75,83,83,0,19,83,83,80,0,31,83,0,82,83,19,0,82,83,83,0,82,85,6,0,25,85,85,2,95,83,85,31,82,85,6,0,25,85,85,3,85,6,85,0,82,85,8,0,25,85,85,1,85,8,85,0,119,0,189,255,82,73,19,0,106,83,73,4,106,84,73,8,5,85,83,84,41,85,85,1,135,34,1,0,85,0,0,0,82,85,19,0,85,85,34,0,1,85,0,0,83,10,85,0,1,85,0,0,83,12,85,0,1,85,0,0,83,14,85,0,1,85,0,0,83,15,85,0,1,85,0,0,85,17,85,0,82,84,19,0,106,84,84,4,82,83,19,0,106,83,83,8,5,85,84,83,82,83,17,0,56,85,85,83,160,229,0,0,82,82,39,0,82,86,17,0,41,86,86,4,100,84,82,86,145,84,84,0,59,82,31,0,145,82,82,0,65,83,84,82,145,83,83,0,134,85,0,0,96,181,3,0,83,0,0,0,75,85,85,0,83,10,85,0,82,84,39,0,82,86,17,0,41,86,86,4,3,84,84,86,112,82,84,4,145,82,82,0,59,84,31,0,145,84,84,0,65,83,82,84,145,83,83,0,134,85,0,0,96,181,3,0,83,0,0,0,75,85,85,0,83,12,85,0,82,82,39,0,82,86,17,0,41,86,86,4,3,82,82,86,112,84,82,8,145,84,84,0,59,82,31,0,145,82,82,0,65,83,84,82,145,83,83,0,134,85,0,0,96,181,3,0,83,0,0,0,75,85,85,0,83,14,85,0,82,83,39,0,82,82,17,0,41,82,82,4,3,83,83,82,112,85,83,12,145,85,85,0,62,83,0,0,112,79,227,32,25,25,201,63,145,83,83,0,73,37,85,83,1,85,1,0,1,82,0,0,125,83,37,85,82,0,0,0,83,15,83,0,82,83,19,0,82,83,83,0,82,82,17,0,41,82,82,1,79,85,10,0,19,85,85,79,41,85,85,11,79,84,12,0,19,84,84,79,41,84,84,6,20,85,85,84,79,84,14,0,19,84,84,79,41,84,84,1,20,85,85,84,79,84,15,0,19,84,84,79,20,85,85,84,96,83,82,85,82,85,17,0,25,85,85,1,85,17,85,0,119,0,166,255,82,74,19,0,106,82,74,4,106,83,74,8,5,85,82,83,41,85,85,1,135,38,1,0,85,0,0,0,82,85,19,0,85,85,38,0,1,85,0,0,83,18,85,0,1,85,0,0,83,20,85,0,1,85,0,0,83,21,85,0,1,85,0,0,83,22,85,0,1,85,0,0,85,23,85,0,82,83,19,0,106,83,83,4,82,82,19,0,106,82,82,8,5,85,83,82,82,82,23,0,56,85,85,82,160,229,0,0,82,84,39,0,82,86,23,0,41,86,86,4,100,83,84,86,145,83,83,0,59,84,15,0,145,84,84,0,65,82,83,84,145,82,82,0,134,85,0,0,96,181,3,0,82,0,0,0,75,85,85,0,83,18,85,0,82,83,39,0,82,86,23,0,41,86,86,4,3,83,83,86,112,84,83,4,145,84,84,0,59,83,15,0,145,83,83,0,65,82,84,83,145,82,82,0,134,85,0,0,96,181,3,0,82,0,0,0,75,85,85,0,83,20,85,0,82,84,39,0,82,86,23,0,41,86,86,4,3,84,84,86,112,83,84,8,145,83,83,0,59,84,15,0,145,84,84,0,65,82,83,84,145,82,82,0,134,85,0,0,96,181,3,0,82,0,0,0,75,85,85,0,83,21,85,0,82,83,39,0,82,86,23,0,41,86,86,4,3,83,83,86,112,84,83,12,145,84,84,0,59,83,15,0,145,83,83,0,65,82,84,83,145,82,82,0,134,85,0,0,96,181,3,0,82,0,0,0,75,85,85,0,83,22,85,0,82,85,19,0,82,85,85,0,82,82,23,0,41,82,82,1,79,83,18,0,19,83,83,79,41,83,83,12,79,84,20,0,19,84,84,79,41,84,84,8,20,83,83,84,79,84,21,0,19,84,84,79,41,84,84,4,20,83,83,84,79,84,22,0,19,84,84,79,20,83,83,84,96,85,82,83,82,83,23,0,25,83,83,1,85,23,83,0,119,0,167,255,82,75,19,0,106,82,75,4,106,85,75,8,5,83,82,85,41,83,83,2,135,41,1,0,83,0,0,0,82,83,19,0,85,83,41,0,1,83,0,0,85,25,83,0,1,83,0,0,85,26,83,0,82,85,19,0,106,85,85,4,82,82,19,0,106,82,82,8,5,83,85,82,41,83,83,2,82,82,25,0,56,83,83,82,160,229,0,0,82,85,39,0,82,84,26,0,41,84,84,4,100,82,85,84,145,82,82,0,59,85,255,0,145,85,85,0,65,83,82,85,145,83,83,0,75,83,83,0,19,83,83,80,0,42,83,0,82,83,19,0,82,83,83,0,82,85,25,0,95,83,85,42,82,82,39,0,82,84,26,0,41,84,84,4,3,82,82,84,112,83,82,4,145,83,83,0,59,82,255,0,145,82,82,0,65,85,83,82,145,85,85,0,75,85,85,0,19,85,85,80,0,43,85,0,82,85,19,0,82,85,85,0,82,82,25,0,25,82,82,1,95,85,82,43,82,83,39,0,82,84,26,0,41,84,84,4,3,83,83,84,112,85,83,8,145,85,85,0,59,83,255,0,145,83,83,0,65,82,85,83,145,82,82,0,75,82,82,0,19,82,82,80,0,44,82,0,82,82,19,0,82,82,82,0,82,83,25,0,25,83,83,2,95,82,83,44,82,85,39,0,82,84,26,0,41,84,84,4,3,85,85,84,112,82,85,12,145,82,82,0,59,85,255,0,145,85,85,0,65,83,82,85,145,83,83,0,75,83,83,0,19,83,83,80,0,46,83,0,82,83,19,0,82,83,83,0,82,85,25,0,25,85,85,3,95,83,85,46,82,85,25,0,25,85,85,4,85,25,85,0,82,85,26,0,25,85,85,1,85,26,85,0,119,0,171,255,82,76,19,0,106,83,76,4,106,82,76,8,5,85,83,82,41,85,85,2,135,47,1,0,85,0,0,0,82,85,19,0,85,85,47,0,1,85,0,0,85,28,85,0,82,82,19,0,106,82,82,4,82,83,19,0,106,83,83,8,5,85,82,83,82,83,28,0,56,85,85,83,160,229,0,0,82,83,39,0,82,82,28,0,41,82,82,4,100,85,83,82,145,85,85,0,62,83,0,0,209,221,1,224,208,34,211,63,145,83,83,0,65,48,85,83,145,48,48,0,82,82,39,0,82,84,28,0,41,84,84,4,3,82,82,84,112,85,82,4,145,85,85,0,62,82,0,0,217,84,201,63,180,200,226,63,145,82,82,0,65,83,85,82,145,83,83,0,63,49,48,83,145,49,49,0,82,85,39,0,82,84,28,0,41,84,84,4,3,85,85,84,112,82,85,8,145,82,82,0,62,85,0,0,201,118,190,159,26,47,189,63,145,85,85,0,65,83,82,85,145,83,83,0,63,50,49,83,145,50,50,0,82,83,19,0,82,83,83,0,82,85,28,0,41,85,85,2,101,83,85,50,82,85,28,0,25,85,85,1,85,28,85,0,119,0,201,255,82,77,19,0,106,83,77,4,106,82,77,8,5,85,83,82,27,85,85,3,41,85,85,2,135,51,1,0,85,0,0,0,82,85,19,0,85,85,51,0,1,85,0,0,85,30,85,0,1,85,0,0,85,32,85,0,82,82,19,0,106,82,82,4,82,83,19,0,106,83,83,8,5,85,82,83,27,85,85,3,82,83,30,0,56,85,85,83,160,229,0,0,82,85,39,0,82,83,32,0,41,83,83,4,100,52,85,83,145,52,52,0,82,85,19,0,82,85,85,0,82,83,30,0,41,83,83,2,101,85,83,52,82,83,39,0,82,85,32,0,41,85,85,4,3,83,83,85,112,53,83,4,145,53,53,0,82,83,19,0,82,83,83,0,82,85,30,0,25,85,85,1,41,85,85,2,101,83,85,53,82,85,39,0,82,83,32,0,41,83,83,4,3,85,85,83,112,55,85,8,145,55,55,0,82,85,19,0,82,85,85,0,82,83,30,0,25,83,83,2,41,83,83,2,101,85,83,55,82,83,30,0,25,83,83,3,85,30,83,0,82,83,32,0,25,83,83,1,85,32,83,0,119,0,207,255,82,78,19,0,106,85,78,4,106,82,78,8,5,83,85,82,41,83,83,2,41,83,83,2,135,56,1,0,83,0,0,0,82,83,19,0,85,83,56,0,1,83,0,0,85,33,83,0,1,83,0,0,85,36,83,0,82,82,19,0,106,82,82,4,82,85,19,0,106,85,85,8,5,83,82,85,41,83,83,2,82,85,33,0,56,83,83,85,160,229,0,0,82,83,39,0,82,85,36,0,41,85,85,4,100,58,83,85,145,58,58,0,82,83,19,0,82,83,83,0,82,85,33,0,41,85,85,2,101,83,85,58,82,85,39,0,82,83,36,0,41,83,83,4,3,85,85,83,112,59,85,4,145,59,59,0,82,85,19,0,82,85,85,0,82,83,33,0,25,83,83,1,41,83,83,2,101,85,83,59,82,83,39,0,82,85,36,0,41,85,85,4,3,83,83,85,112,60,83,8,145,60,60,0,82,83,19,0,82,83,83,0,82,85,33,0,25,85,85,2,41,85,85,2,101,83,85,60,82,85,39,0,82,83,36,0,41,83,83,4,3,85,85,83,112,61,85,12,145,61,61,0,82,85,19,0,82,85,85,0,82,83,33,0,25,83,83,3,41,83,83,2,101,85,83,61,82,83,33,0,25,83,83,4,85,33,83,0,82,83,36,0,25,83,83,1,85,36,83,0,119,0,195,255,82,83,39,0,135,81,214,2,83,0,0,0,1,81,0,0,85,39,81,0,82,81,19,0,106,81,81,12,36,81,81,1,121,81,3,0,137,68,0,0,139,0,0,0,82,81,19,0,1,83,1,0,109,81,12,83,82,83,19,0,82,83,83,0,120,83,3,0,137,68,0,0,139,0,0,0,82,81,19,0,134,83,0,0,160,254,1,0,81,0,0,0,137,68,0,0,139,0,0,0,140,2,73,0,0,0,0,0,2,65,0,0,96,23,0,0,2,66,0,0,144,0,0,0,136,67,0,0,0,64,67,0,136,67,0,0,3,67,67,66,137,67,0,0,130,67,0,0,136,68,0,0,49,67,67,68,72,230,0,0,135,67,208,2,66,0,0,0,1,67,136,0,3,18,64,67,1,67,132,0,3,35,64,67,1,67,128,0,3,49,64,67,25,56,64,124,25,59,64,120,25,61,64,116,25,62,64,112,25,63,64,108,25,2,64,104,25,4,64,100,25,5,64,96,25,7,64,92,25,9,64,88,25,10,64,84,25,12,64,80,25,13,64,76,25,15,64,72,25,16,64,68,25,19,64,64,25,21,64,60,25,22,64,56,25,24,64,52,25,26,64,48,25,27,64,44,25,29,64,40,25,30,64,36,25,32,64,32,25,33,64,28,25,36,64,24,25,38,64,20,25,39,64,16,25,41,64,12,25,43,64,8,25,44,64,4,0,46,64,0,85,18,0,0,85,35,1,0,82,67,18,0,25,67,67,64,116,56,67,0,82,67,18,0,25,67,67,68,116,59,67,0,82,67,18,0,25,67,67,76,116,61,67,0,82,67,18,0,25,67,67,96,116,62,67,0,82,67,18,0,25,67,67,4,116,63,67,0,82,67,18,0,25,67,67,12,116,2,67,0,82,68,18,0,134,67,0,0,20,147,3,0,68,0,0,0,85,4,67,0,82,67,18,0,25,67,67,88,116,5,67,0,82,67,18,0,25,67,67,92,116,7,67,0,82,67,7,0,82,68,35,0,82,69,18,0,106,69,69,8,134,60,0,0,80,98,3,0,67,68,69,0,82,68,2,0,5,69,60,68,85,9,69,0,82,69,18,0,82,69,69,0,82,68,9,0,3,69,69,68,85,10,69,0,82,69,63,0,82,68,18,0,94,68,68,66,3,69,69,68,85,12,69,0,82,69,61,0,41,69,69,1,82,68,62,0,3,69,69,68,85,13,69,0,1,69,0,0,82,68,18,0,94,68,68,66,4,69,69,68,85,15,69,0,82,69,7,0,32,69,69,4,121,69,40,0,1,69,0,0,82,68,35,0,49,69,69,68,4,232,0,0,82,69,35,0,82,68,18,0,106,68,68,8,54,69,69,68,124,232,0,0,82,69,12,0,82,68,15,0,56,69,69,68,116,232,0,0,1,69,0,0,85,49,69,0,82,69,56,0,82,68,49,0,56,69,69,68,100,232,0,0,82,69,15,0,82,68,56,0,5,3,69,68,82,68,4,0,82,69,49,0,3,69,3,69,41,69,69,2,59,67,0,0,145,67,67,0,101,68,69,67,82,67,49,0,25,67,67,1,85,49,67,0,119,0,239,255,82,67,15,0,25,67,67,1,85,15,67,0,119,0,229,255,137,64,0,0,139,0,0,0,82,67,13,0,1,69,0,0,1,72,8,0,138,67,69,72,200,232,0,0,136,233,0,0,144,234,0,0,88,235,0,0,140,236,0,0,80,237,0,0,124,238,0,0,44,239,0,0,1,68,201,64,1,70,138,59,1,71,86,5,1,72,250,64,135,69,209,2,68,70,71,72,119,0,219,1,82,69,12,0,82,68,15,0,56,69,69,68,48,240,0,0,82,68,15,0,82,70,56,0,5,69,68,70,85,16,69,0,82,69,5,0,82,70,15,0,82,68,63,0,134,6,0,0,80,98,3,0,69,70,68,0,82,70,56,0,5,68,6,70,85,19,68,0,1,68,0,0,85,49,68,0,82,68,56,0,82,70,49,0,56,68,68,70,120,233,0,0,82,70,10,0,82,69,19,0,82,71,49,0,3,69,69,71,91,68,70,69,76,68,68,0,145,68,68,0,59,70,255,0,145,70,70,0,66,8,68,70,145,8,8,0,82,70,4,0,82,68,16,0,82,69,49,0,3,68,68,69,41,68,68,2,101,70,68,8,82,68,49,0,25,68,68,1,85,49,68,0,119,0,232,255,82,68,15,0,25,68,68,1,85,15,68,0,119,0,209,255,82,68,12,0,82,70,15,0,56,68,68,70,48,240,0,0,82,70,15,0,82,69,56,0,5,68,70,69,85,21,68,0,82,68,5,0,82,69,15,0,82,70,63,0,134,11,0,0,80,98,3,0,68,69,70,0,82,69,56,0,5,70,11,69,85,22,70,0,1,70,0,0,85,49,70,0,82,70,56,0,82,69,49,0,56,70,70,69,44,234,0,0,82,70,10,0,82,69,22,0,82,68,49,0,3,69,69,68,91,70,70,69,41,70,70,2,100,14,65,70,145,14,14,0,82,70,4,0,82,69,21,0,82,68,49,0,3,69,69,68,41,69,69,2,101,70,69,14,82,69,49,0,25,69,69,1,85,49,69,0,119,0,235,255,82,69,18,0,106,69,69,72,38,69,69,2,120,69,18,0,82,70,10,0,82,68,22,0,82,71,59,0,3,68,68,71,91,69,70,68,76,69,69,0,145,69,69,0,59,70,255,0,145,70,70,0,66,17,69,70,145,17,17,0,82,70,4,0,82,69,21,0,82,68,59,0,3,69,69,68,41,69,69,2,101,70,69,17,82,69,15,0,25,69,69,1,85,15,69,0,119,0,191,255,82,69,12,0,82,70,15,0,56,69,69,70,48,240,0,0,82,70,15,0,82,68,56,0,5,69,70,68,85,24,69,0,82,69,5,0,82,68,15,0,82,70,63,0,134,20,0,0,80,98,3,0,69,68,70,0,82,68,56,0,5,70,20,68,85,26,70,0,1,70,0,0,85,49,70,0,82,70,56,0,82,68,49,0,56,70,70,68,72,235,0,0,82,68,10,0,82,69,26,0,82,71,49,0,3,69,69,71,41,69,69,1,93,70,68,69,76,70,70,0,145,70,70,0,60,68,0,0,255,255,0,0,145,68,68,0,66,23,70,68,145,23,23,0,82,68,4,0,82,70,24,0,82,69,49,0,3,70,70,69,41,70,70,2,101,68,70,23,82,70,49,0,25,70,70,1,85,49,70,0,119,0,230,255,82,70,15,0,25,70,70,1,85,15,70,0,119,0,207,255,82,70,12,0,82,68,15,0,56,70,70,68,48,240,0,0,82,68,15,0,82,69,56,0,5,70,68,69,85,27,70,0,82,70,5,0,82,69,15,0,82,68,63,0,134,25,0,0,80,98,3,0,70,69,68,0,82,69,56,0,5,68,25,69,85,29,68,0,1,68,0,0,85,49,68,0,82,68,56,0,82,69,49,0,56,68,68,69,32,236,0,0,82,70,10,0,82,71,29,0,82,72,49,0,3,71,71,72,41,71,71,1,93,69,70,71,76,69,69,0,145,69,69,0,60,70,0,0,255,255,0,0,145,70,70,0,66,68,69,70,145,68,68,0,134,28,0,0,180,85,3,0,68,0,0,0,145,28,28,0,82,68,4,0,82,70,27,0,82,69,49,0,3,70,70,69,41,70,70,2,101,68,70,28,82,70,49,0,25,70,70,1,85,49,70,0,119,0,226,255,82,70,18,0,106,70,70,72,38,70,70,2,120,70,20,0,82,68,10,0,82,69,29,0,82,71,59,0,3,69,69,71,41,69,69,1,93,70,68,69,76,70,70,0,145,70,70,0,60,68,0,0,255,255,0,0,145,68,68,0,66,31,70,68,145,31,31,0,82,68,4,0,82,70,27,0,82,69,59,0,3,70,70,69,41,70,70,2,101,68,70,31,82,70,15,0,25,70,70,1,85,15,70,0,119,0,180,255,82,70,12,0,82,68,15,0,56,70,70,68,48,240,0,0,82,68,15,0,82,69,56,0,5,70,68,69,85,30,70,0,82,70,5,0,82,69,15,0,82,68,63,0,134,34,0,0,80,98,3,0,70,69,68,0,82,69,56,0,5,68,34,69,85,32,68,0,1,68,0,0,85,49,68,0,82,68,56,0,82,69,49,0,56,68,68,69,64,237,0,0,82,68,10,0,82,69,32,0,82,70,49,0,3,69,69,70,41,69,69,2,94,68,68,69,77,68,68,0,62,69,0,0,0,0,224,255,255,255,239,65,66,37,68,69,145,37,37,0,82,69,4,0,82,68,30,0,82,70,49,0,3,68,68,70,41,68,68,2,101,69,68,37,82,68,49,0,25,68,68,1,85,49,68,0,119,0,231,255,82,68,15,0,25,68,68,1,85,15,68,0,119,0,208,255,82,68,12,0,82,69,15,0,56,68,68,69,48,240,0,0,82,69,15,0,82,70,56,0,5,68,69,70,85,33,68,0,82,68,5,0,82,70,15,0,82,69,63,0,134,40,0,0,80,98,3,0,68,70,69,0,82,70,56,0,5,69,40,70,85,36,69,0,1,69,0,0,85,49,69,0,82,69,56,0,82,70,49,0,56,69,69,70,20,238,0,0,82,70,10,0,82,68,36,0,82,71,49,0,3,68,68,71,41,68,68,2,94,70,70,68,77,70,70,0,62,68,0,0,0,0,224,255,255,255,239,65,66,69,70,68,145,69,69,0,134,42,0,0,180,85,3,0,69,0,0,0,145,42,42,0,82,69,4,0,82,68,33,0,82,70,49,0,3,68,68,70,41,68,68,2,101,69,68,42,82,68,49,0,25,68,68,1,85,49,68,0,119,0,227,255,82,68,18,0,106,68,68,72,38,68,68,2,120,68,19,0,82,68,10,0,82,69,36,0,82,70,59,0,3,69,69,70,41,69,69,2,94,68,68,69,77,68,68,0,62,69,0,0,0,0,224,255,255,255,239,65,66,45,68,69,145,45,45,0,82,69,4,0,82,68,33,0,82,70,59,0,3,68,68,70,41,68,68,2,101,69,68,45,82,68,15,0,25,68,68,1,85,15,68,0,119,0,182,255,82,68,12,0,82,69,15,0,56,68,68,69,48,240,0,0,82,69,15,0,82,70,56,0,5,68,69,70,85,38,68,0,82,68,5,0,82,70,15,0,82,69,63,0,134,47,0,0,80,98,3,0,68,70,69,0,82,70,56,0,5,69,47,70,85,39,69,0,1,69,0,0,85,49,69,0,82,69,56,0,82,70,49,0,56,69,69,70,28,239,0,0,82,69,10,0,82,70,39,0,82,68,49,0,3,70,70,68,41,70,70,2,100,48,69,70,145,48,48,0,82,69,4,0,82,70,38,0,82,68,49,0,3,70,70,68,41,70,70,2,101,69,70,48,82,70,49,0,25,70,70,1,85,49,70,0,119,0,236,255,82,70,15,0,25,70,70,1,85,15,70,0,119,0,213,255,82,70,12,0,82,69,15,0,56,70,70,69,48,240,0,0,82,69,15,0,82,68,56,0,5,70,69,68,85,41,70,0,82,70,5,0,82,68,15,0,82,69,63,0,134,50,0,0,80,98,3,0,70,68,69,0,82,68,56,0,5,69,50,68,85,43,69,0,1,69,0,0,85,49,69,0,82,69,56,0,82,68,49,0,56,69,69,68,220,239,0,0,82,68,10,0,82,70,43,0,82,71,49,0,3,70,70,71,41,70,70,2,100,69,68,70,145,69,69,0,134,51,0,0,180,85,3,0,69,0,0,0,145,51,51,0,82,69,4,0,82,68,41,0,82,70,49,0,3,68,68,70,41,68,68,2,101,69,68,51,82,68,49,0,25,68,68,1,85,49,68,0,119,0,232,255,82,68,18,0,106,68,68,72,38,68,68,2,120,68,14,0,82,68,10,0,82,69,43,0,82,70,59,0,3,69,69,70,41,69,69,2], eb + 51200);
  HEAPU8.set([100,52,68,69,145,52,52,0,82,68,4,0,82,69,41,0,82,70,59,0,3,69,69,70,41,69,69,2,101,68,69,52,82,69,15,0,25,69,69,1,85,15,69,0,119,0,192,255,82,67,18,0,106,67,67,72,38,67,67,1,120,67,74,0,1,67,0,0,82,69,18,0,94,69,69,66,4,67,67,69,85,15,67,0,82,67,12,0,82,69,15,0,56,67,67,69,100,241,0,0,82,69,15,0,82,72,56,0,5,67,69,72,85,44,67,0,82,72,4,0,82,69,44,0,82,71,59,0,3,69,69,71,41,69,69,2,100,67,72,69,145,67,67,0,89,46,67,0,82,67,18,0,106,67,67,76,33,67,67,3,121,67,18,0,88,72,46,0,145,72,72,0,62,69,0,0,13,34,37,0,0,0,240,58,145,69,69,0,63,67,72,69,145,67,67,0,89,46,67,0,88,53,46,0,145,53,53,0,82,67,4,0,82,69,44,0,82,72,59,0,3,69,69,72,41,69,69,2,101,67,69,53,1,69,0,0,85,49,69,0,82,69,56,0,82,67,49,0,56,69,69,67,84,241,0,0,82,69,49,0,82,67,59,0,46,69,69,67,68,241,0,0,88,54,46,0,145,54,54,0,82,69,4,0,82,67,44,0,82,72,49,0,3,67,67,72,41,67,67,2,3,55,69,67,88,69,55,0,145,69,69,0,65,67,69,54,145,67,67,0,89,55,67,0,82,67,49,0,25,67,67,1,85,49,67,0,119,0,232,255,82,67,15,0,25,67,67,1,85,15,67,0,119,0,189,255,82,67,5,0,33,67,67,4,121,67,3,0,137,64,0,0,139,0,0,0,1,67,0,0,82,69,18,0,94,69,69,66,4,67,67,69,85,15,67,0,1,67,0,0,82,69,15,0,56,67,67,69,252,241,0,0,1,67,0,0,85,49,67,0,82,67,56,0,82,69,49,0,56,67,67,69,236,241,0,0,82,67,15,0,82,69,56,0,5,57,67,69,82,69,4,0,82,67,49,0,3,67,57,67,41,67,67,2,59,72,0,0,145,72,72,0,101,69,67,72,82,72,49,0,25,72,72,1,85,49,72,0,119,0,239,255,82,72,15,0,25,72,72,1,85,15,72,0,119,0,229,255,116,15,63,0,82,72,12,0,82,67,15,0,56,72,72,67,112,242,0,0,1,72,0,0,85,49,72,0,82,72,56,0,82,67,49,0,56,72,72,67,96,242,0,0,82,72,15,0,82,67,56,0,5,58,72,67,82,67,4,0,82,72,49,0,3,72,58,72,41,72,72,2,59,69,0,0,145,69,69,0,101,67,72,69,82,69,49,0,25,69,69,1,85,49,69,0,119,0,239,255,82,69,15,0,25,69,69,1,85,15,69,0,119,0,229,255,137,64,0,0,139,0,0,0,140,2,105,0,0,0,0,0,136,97,0,0,0,96,97,0,136,97,0,0,1,98,192,0,3,97,97,98,137,97,0,0,130,97,0,0,136,98,0,0,49,97,97,98,180,242,0,0,1,98,192,0,135,97,208,2,98,0,0,0,1,97,184,0,3,19,96,97,1,97,180,0,3,45,96,97,1,97,176,0,3,69,96,97,1,97,172,0,3,91,96,97,1,97,168,0,3,92,96,97,1,97,164,0,3,93,96,97,1,97,160,0,3,94,96,97,1,97,156,0,3,95,96,97,1,97,152,0,3,2,96,97,1,97,148,0,3,3,96,97,1,97,144,0,3,4,96,97,1,97,140,0,3,5,96,97,1,97,136,0,3,7,96,97,1,97,132,0,3,8,96,97,1,97,128,0,3,11,96,97,25,13,96,124,25,15,96,120,25,16,96,116,25,20,96,112,25,23,96,108,25,26,96,104,25,28,96,100,25,29,96,96,25,31,96,92,25,34,96,88,25,38,96,84,25,41,96,80,25,43,96,76,25,46,96,72,25,47,96,68,25,50,96,64,25,53,96,60,25,56,96,56,25,60,96,52,25,63,96,48,25,65,96,44,25,67,96,40,25,68,96,36,25,70,96,32,25,74,96,28,25,78,96,24,25,85,96,20,25,86,96,16,25,87,96,12,25,88,96,8,25,89,96,4,0,90,96,0,85,19,0,0,85,45,1,0,82,97,19,0,25,97,97,20,116,92,97,0,82,97,19,0,25,97,97,108,116,93,97,0,82,97,19,0,25,97,97,112,116,94,97,0,82,97,19,0,25,97,97,64,116,95,97,0,82,97,19,0,25,97,97,68,116,2,97,0,82,97,19,0,25,97,97,76,116,3,97,0,82,97,19,0,25,97,97,96,116,4,97,0,82,97,19,0,1,98,164,0,3,97,97,98,116,5,97,0,82,97,19,0,25,97,97,16,116,7,97,0,82,97,19,0,1,98,184,0,3,97,97,98,116,8,97,0,82,97,3,0,41,97,97,1,82,98,4,0,3,97,97,98,85,11,97,0,82,97,19,0,1,98,132,0,3,97,97,98,116,13,97,0,116,16,45,0,82,97,19,0,1,98,180,0,3,97,97,98,116,20,97,0,82,97,19,0,1,98,176,0,3,97,97,98,116,23,97,0,82,97,19,0,1,98,168,0,3,97,97,98,116,26,97,0,82,97,19,0,1,98,160,0,94,97,97,98,29,97,97,4,85,28,97,0,82,98,13,0,82,99,16,0,5,97,98,99,85,38,97,0,82,97,93,0,82,99,16,0,41,99,99,3,3,97,97,99,116,29,97,0,82,97,93,0,82,99,16,0,41,99,99,3,3,97,97,99,25,97,97,4,116,31,97,0,82,99,45,0,82,98,19,0,106,98,98,28,5,97,99,98,85,34,97,0,82,98,19,0,134,97,0,0,108,157,3,0,98,0,0,0,120,97,7,0,1,98,149,65,1,99,138,59,1,100,103,7,1,101,42,66,135,97,209,2,98,99,100,101,82,101,8,0,1,100,0,0,82,98,92,0,41,98,98,2,82,102,95,0,5,99,98,102,135,97,213,2,101,100,99,0,1,97,0,0,85,15,97,0,82,97,95,0,1,103,1,0,1,99,4,0,138,97,103,99,220,246,0,0,24,248,0,0,172,249,0,0,144,251,0,0,116,91,29,0,82,99,31,0,82,100,91,0,54,99,99,100,156,246,0,0,82,66,15,0,25,99,66,1,85,15,99,0,85,86,66,0,82,100,91,0,82,101,20,0,82,102,23,0,82,98,26,0,82,103,5,0,82,104,28,0,134,99,0,0,148,40,3,0,100,101,102,98,103,104,0,0,85,87,99,0,82,104,94,0,82,103,38,0,82,98,86,0,3,103,103,98,41,103,103,2,100,99,104,103,145,99,99,0,89,88,99,0,1,99,0,0,85,69,99,0,82,99,92,0,82,104,69,0,56,99,99,104,140,246,0,0,82,104,69,0,82,103,95,0,5,99,104,103,85,89,99,0,1,99,0,0,85,90,99,0,82,99,95,0,82,103,90,0,56,99,99,103,124,246,0,0,82,99,87,0,82,103,89,0,82,104,90,0,3,103,103,104,41,103,103,2,100,71,99,103,145,71,71,0,88,99,88,0,145,99,99,0,65,72,71,99,145,72,72,0,82,99,8,0,82,103,89,0,82,104,90,0,3,103,103,104,41,103,103,2,3,73,99,103,88,99,73,0,145,99,99,0,63,103,99,72,145,103,103,0,89,73,103,0,82,103,90,0,25,103,103,1,85,90,103,0,119,0,227,255,82,103,69,0,25,103,103,1,85,69,103,0,119,0,213,255,82,103,91,0,25,103,103,1,85,91,103,0,119,0,180,255,82,75,19,0,82,76,92,0,82,77,7,0,82,79,34,0,3,80,77,79,82,81,8,0,82,82,95,0,82,83,2,0,82,84,11,0,134,103,0,0,172,50,1,0,75,76,80,81,82,83,84,0,137,96,0,0,139,0,0,0,119,0,187,1,116,91,29,0,82,99,31,0,82,100,91,0,54,99,99,100,216,247,0,0,82,6,15,0,25,99,6,1,85,15,99,0,85,41,6,0,82,100,91,0,82,101,20,0,82,102,23,0,82,98,26,0,82,103,5,0,82,104,28,0,134,99,0,0,148,40,3,0,100,101,102,98,103,104,0,0,85,43,99,0,82,104,94,0,82,103,38,0,82,98,41,0,3,103,103,98,41,103,103,2,100,99,104,103,145,99,99,0,89,46,99,0,1,99,0,0,85,69,99,0,82,99,92,0,82,104,69,0,56,99,99,104,200,247,0,0,116,47,69,0,82,99,43,0,82,104,47,0,25,104,104,0,41,104,104,2,100,9,99,104,145,9,9,0,88,99,46,0,145,99,99,0,65,10,9,99,145,10,10,0,82,99,8,0,82,104,47,0,25,104,104,0,41,104,104,2,3,12,99,104,88,99,12,0,145,99,99,0,63,104,99,10,145,104,104,0,89,12,104,0,82,104,69,0,25,104,104,1,85,69,104,0,119,0,228,255,82,104,91,0,25,104,104,1,85,91,104,0,119,0,195,255,82,75,19,0,82,76,92,0,82,77,7,0,82,79,34,0,3,80,77,79,82,81,8,0,82,82,95,0,82,83,2,0,82,84,11,0,134,104,0,0,172,50,1,0,75,76,80,81,82,83,84,0,137,96,0,0,139,0,0,0,119,0,1,0,116,91,29,0,82,104,31,0,82,99,91,0,54,104,104,99,108,249,0,0,82,14,15,0,25,104,14,1,85,15,104,0,85,50,14,0,82,99,91,0,82,103,20,0,82,98,23,0,82,102,26,0,82,101,5,0,82,100,28,0,134,104,0,0,148,40,3,0,99,103,98,102,101,100,0,0,85,53,104,0,82,100,94,0,82,101,38,0,82,102,50,0,3,101,101,102,41,101,101,2,100,104,100,101,145,104,104,0,89,56,104,0,1,104,0,0,85,69,104,0,82,104,92,0,82,100,69,0,56,104,104,100,92,249,0,0,82,104,69,0,41,104,104,1,85,60,104,0,82,104,53,0,82,100,60,0,25,100,100,0,41,100,100,2,100,17,104,100,145,17,17,0,88,104,56,0,145,104,104,0,65,18,17,104,145,18,18,0,82,104,8,0,82,100,60,0,25,100,100,0,41,100,100,2,3,21,104,100,88,104,21,0,145,104,104,0,63,100,104,18,145,100,100,0,89,21,100,0,82,100,53,0,82,104,60,0,25,104,104,1,41,104,104,2,100,22,100,104,145,22,22,0,88,100,56,0,145,100,100,0,65,24,22,100,145,24,24,0,82,100,8,0,82,104,60,0,25,104,104,1,41,104,104,2,3,25,100,104,88,100,25,0,145,100,100,0,63,104,100,24,145,104,104,0,89,25,104,0,82,104,69,0,25,104,104,1,85,69,104,0,119,0,206,255,82,104,91,0,25,104,104,1,85,91,104,0,119,0,173,255,82,75,19,0,82,76,92,0,82,77,7,0,82,79,34,0,3,80,77,79,82,81,8,0,82,82,95,0,82,83,2,0,82,84,11,0,134,104,0,0,172,50,1,0,75,76,80,81,82,83,84,0,137,96,0,0,139,0,0,0,119,0,1,0,116,91,29,0,82,104,31,0,82,100,91,0,54,104,104,100,80,251,0,0,82,27,15,0,25,104,27,1,85,15,104,0,85,63,27,0,82,100,91,0,82,101,20,0,82,102,23,0,82,98,26,0,82,103,5,0,82,99,28,0,134,104,0,0,148,40,3,0,100,101,102,98,103,99,0,0,85,65,104,0,82,99,94,0,82,103,38,0,82,98,63,0,3,103,103,98,41,103,103,2,100,104,99,103,145,104,104,0,89,67,104,0,1,104,0,0,85,69,104,0,82,104,92,0,82,99,69,0,56,104,104,99,64,251,0,0,82,104,69,0,27,104,104,3,85,68,104,0,82,104,65,0,82,99,68,0,25,99,99,0,41,99,99,2,100,30,104,99,145,30,30,0,88,104,67,0,145,104,104,0,65,32,30,104,145,32,32,0,82,104,8,0,82,99,68,0,25,99,99,0,41,99,99,2,3,33,104,99,88,104,33,0,145,104,104,0,63,99,104,32,145,99,99,0,89,33,99,0,82,99,65,0,82,104,68,0,25,104,104,1,41,104,104,2,100,35,99,104,145,35,35,0,88,99,67,0,145,99,99,0,65,36,35,99,145,36,36,0,82,99,8,0,82,104,68,0,25,104,104,1,41,104,104,2,3,37,99,104,88,99,37,0,145,99,99,0,63,104,99,36,145,104,104,0,89,37,104,0,82,104,65,0,82,99,68,0,25,99,99,2,41,99,99,2,100,39,104,99,145,39,39,0,88,104,67,0,145,104,104,0,65,40,39,104,145,40,40,0,82,104,8,0,82,99,68,0,25,99,99,2,41,99,99,2,3,42,104,99,88,104,42,0,145,104,104,0,63,99,104,40,145,99,99,0,89,42,99,0,82,99,69,0,25,99,99,1,85,69,99,0,119,0,186,255,82,99,91,0,25,99,99,1,85,91,99,0,119,0,153,255,82,75,19,0,82,76,92,0,82,77,7,0,82,79,34,0,3,80,77,79,82,81,8,0,82,82,95,0,82,83,2,0,82,84,11,0,134,99,0,0,172,50,1,0,75,76,80,81,82,83,84,0,137,96,0,0,139,0,0,0,119,0,1,0,116,91,29,0,82,99,31,0,82,104,91,0,54,99,99,104,132,253,0,0,82,44,15,0,25,99,44,1,85,15,99,0,85,70,44,0,82,104,91,0,82,103,20,0,82,98,23,0,82,102,26,0,82,101,5,0,82,100,28,0,134,99,0,0,148,40,3,0,104,103,98,102,101,100,0,0,85,74,99,0,82,100,94,0,82,101,38,0,82,102,70,0,3,101,101,102,41,101,101,2,100,99,100,101,145,99,99,0,89,78,99,0,1,99,0,0,85,69,99,0,82,99,92,0,82,100,69,0,56,99,99,100,116,253,0,0,82,99,69,0,41,99,99,2,85,85,99,0,82,99,74,0,82,100,85,0,25,100,100,0,41,100,100,2,100,48,99,100,145,48,48,0,88,99,78,0,145,99,99,0,65,49,48,99,145,49,49,0,82,99,8,0,82,100,85,0,25,100,100,0,41,100,100,2,3,51,99,100,88,99,51,0,145,99,99,0,63,100,99,49,145,100,100,0,89,51,100,0,82,100,74,0,82,99,85,0,25,99,99,1,41,99,99,2,100,52,100,99,145,52,52,0,88,100,78,0,145,100,100,0,65,54,52,100,145,54,54,0,82,100,8,0,82,99,85,0,25,99,99,1,41,99,99,2,3,55,100,99,88,100,55,0,145,100,100,0,63,99,100,54,145,99,99,0,89,55,99,0,82,99,74,0,82,100,85,0,25,100,100,2,41,100,100,2,100,57,99,100,145,57,57,0,88,99,78,0,145,99,99,0,65,58,57,99,145,58,58,0,82,99,8,0,82,100,85,0,25,100,100,2,41,100,100,2,3,59,99,100,88,99,59,0,145,99,99,0,63,100,99,58,145,100,100,0,89,59,100,0,82,100,74,0,82,99,85,0,25,99,99,3,41,99,99,2,100,61,100,99,145,61,61,0,88,100,78,0,145,100,100,0,65,62,61,100,145,62,62,0,82,100,8,0,82,99,85,0,25,99,99,3,41,99,99,2,3,64,100,99,88,100,64,0,145,100,100,0,63,99,100,62,145,99,99,0,89,64,99,0,82,99,69,0,25,99,99,1,85,69,99,0,119,0,166,255,82,99,91,0,25,99,99,1,85,91,99,0,119,0,133,255,82,75,19,0,82,76,92,0,82,77,7,0,82,79,34,0,3,80,77,79,82,81,8,0,82,82,95,0,82,83,2,0,82,84,11,0,134,99,0,0,172,50,1,0,75,76,80,81,82,83,84,0,137,96,0,0,139,0,0,0,119,0,233,253,139,0,0,0,140,2,96,0,0,0,0,0,1,88,0,0,136,90,0,0,0,89,90,0,136,90,0,0,1,91,224,0,3,90,90,91,137,90,0,0,130,90,0,0,136,91,0,0,49,90,90,91,8,254,0,0,1,91,224,0,135,90,208,2,91,0,0,0,1,90,208,0,3,21,89,90,1,90,204,0,3,41,89,90,1,90,200,0,3,64,89,90,1,90,196,0,3,78,89,90,1,90,192,0,3,84,89,90,1,90,188,0,3,85,89,90,1,90,184,0,3,86,89,90,1,90,180,0,3,87,89,90,1,90,176,0,3,2,89,90,1,90,172,0,3,3,89,90,1,90,168,0,3,4,89,90,1,90,164,0,3,7,89,90,1,90,160,0,3,9,89,90,1,90,156,0,3,10,89,90,1,90,152,0,3,11,89,90,1,90,148,0,3,12,89,90,1,90,144,0,3,14,89,90,1,90,140,0,3,17,89,90,1,90,136,0,3,22,89,90,1,90,132,0,3,23,89,90,1,90,128,0,3,24,89,90,25,25,89,124,25,26,89,120,25,29,89,116,25,32,89,112,25,35,89,108,25,39,89,104,25,40,89,100,25,42,89,96,25,43,89,92,25,44,89,88,25,47,89,84,25,50,89,80,25,53,89,76,25,57,89,72,25,60,89,68,25,62,89,64,25,63,89,60,25,65,89,56,25,66,89,52,25,67,89,48,25,70,89,44,25,72,89,40,25,73,89,36,25,74,89,32,25,75,89,28,25,76,89,24,25,77,89,20,25,79,89,16,25,80,89,12,25,81,89,8,25,82,89,4,0,83,89,0,85,21,0,0,85,41,1,0,82,90,21,0,25,90,90,4,116,84,90,0,82,90,21,0,25,90,90,64,116,85,90,0,82,91,21,0,134,90,0,0,20,147,3,0,91,0,0,0,85,86,90,0,82,90,21,0,25,90,90,100,116,87,90,0,82,90,21,0,25,90,90,104,116,2,90,0,82,90,21,0,1,91,128,0,3,90,90,91,116,3,90,0,82,90,21,0,1,91,144,0,3,90,90,91,116,4,90,0,82,90,84,0,82,91,4,0,41,91,91,1,3,90,90,91,85,7,90,0,82,91,21,0,134,90,0,0,204,157,3,0,91,0,0,0,121,90,7,0,1,91,76,63,1,92,138,59,1,93,254,5,1,94,117,63,135,90,209,2,91,92,93,94,82,90,85,0,1,94,1,0,1,95,4,0,138,90,94,95,192,1,1,0,60,3,1,0,24,5,1,0,68,7,1,0,1,93,0,0,85,64,93,0,82,93,7,0,82,92,64,0,49,93,93,92,28,0,1,0,1,88,47,0,119,0,92,0,82,93,87,0,82,92,64,0,41,92,92,3,3,93,93,92,116,74,93,0,82,93,87,0,82,92,64,0,41,92,92,3,3,93,93,92,25,93,93,4,116,75,93,0,82,93,64,0,82,92,4,0,4,93,93,92,85,76,93,0,82,92,76,0,82,94,85,0,5,93,92,94,85,77,93,0,116,79,75,0,82,94,3,0,82,92,64,0,5,93,94,92,85,80,93,0,116,78,74,0,82,93,79,0,82,92,78,0,54,93,93,92,120,1,1,0,82,92,78,0,82,94,85,0,5,93,92,94,85,82,93,0,82,94,2,0,82,92,80,0,82,91,78,0,3,92,92,91,82,91,74,0,4,92,92,91,41,92,92,2,100,93,94,92,145,93,93,0,89,83,93,0,88,93,83,0,145,93,93,0,59,94,0,0,145,94,94,0,70,93,93,94,120,93,3,0,1,88,41,0,119,0,41,0,1,93,0,0,85,81,93,0,82,93,85,0,82,94,81,0,56,93,93,94,104,1,1,0,82,93,86,0,82,94,77,0,82,92,81,0,3,94,94,92,41,94,94,2,100,68,93,94,145,68,68,0,88,93,83,0,145,93,93,0,65,69,68,93,145,69,69,0,82,93,41,0,82,94,82,0,82,92,81,0,3,94,94,92,41,94,94,2,3,71,93,94,88,93,71,0,145,93,93,0,63,94,93,69,145,94,94,0,89,71,94,0,82,94,81,0,25,94,94,1,85,81,94,0,119,0,227,255,82,94,78,0,25,94,94,1,85,78,94,0,119,0,195,255,82,94,64,0,25,94,94,1,85,64,94,0,119,0,160,255,32,94,88,41,121,94,8,0,1,93,155,63,1,92,138,59,1,91,107,6,1,95,117,63,135,94,209,2,93,92,91,95,119,0,6,2,32,94,88,47,121,94,4,2,137,89,0,0,139,0,0,0,119,0,1,2,1,94,0,0,85,64,94,0,82,94,7,0,82,93,64,0,49,94,94,93,224,1,1,0,1,88,47,0,119,0,74,0,82,94,87,0,82,93,64,0,41,93,93,3,3,94,94,93,116,9,94,0,82,94,87,0,82,93,64,0,41,93,93,3,3,94,94,93,25,94,94,4,116,10,94,0,82,94,64,0,82,93,4,0,4,94,94,93,85,11,94,0,116,12,11,0,116,14,10,0,82,93,3,0,82,92,64,0,5,94,93,92,85,17,94,0,116,78,9,0,82,94,14,0,82,92,78,0,54,94,94,92,244,2,1,0,116,22,78,0,82,92,2,0,82,93,17,0,82,91,78,0,3,93,93,91,82,91,9,0,4,93,93,91,41,93,93,2,100,94,92,93,145,94,94,0,89,23,94,0,88,94,23,0,145,94,94,0,59,92,0,0,145,92,92,0,70,94,94,92,120,94,3,0,1,88,9,0,119,0,29,0,82,94,86,0,82,92,12,0,25,92,92,0,41,92,92,2,100,5,94,92,145,5,5,0,88,94,23,0,145,94,94,0,65,6,5,94,145,6,6,0,82,94,41,0,82,92,22,0,25,92,92,0,41,92,92,2,3,8,94,92,88,94,8,0,145,94,94,0,63,92,94,6,145,92,92,0,89,8,92,0,82,92,78,0,25,92,92,1,85,78,92,0,119,0,210,255,82,92,64,0,25,92,92,1,85,64,92,0,119,0,178,255,32,92,88,9,121,92,8,0,1,94,155,63,1,93,138,59,1,91,16,6,1,95,117,63,135,92,209,2,94,93,91,95,119,0,167,1,32,92,88,47,121,92,165,1,137,89,0,0,139,0,0,0,119,0,162,1,1,92,0,0,85,64,92,0,82,92,7,0,82,95,64,0,49,92,92,95,92,3,1,0,1,88,47,0,119,0,98,0,82,92,87,0,82,95,64,0,41,95,95,3,3,92,92,95,116,24,92,0,82,92,87,0,82,95,64,0,41,95,95,3,3,92,92,95,25,92,92,4,116,25,92,0,82,92,64,0,82,95,4,0,4,92,92,95,85,26,92,0,82,92,26,0,41,92,92,1,85,29,92,0,116,32,25,0,82,95,3,0,82,91,64,0,5,92,95,91,85,35,92,0,116,78,24,0,82,92,32,0,82,91,78,0,54,92,92,91,208,4,1,0,82,92,78,0,41,92,92,1,85,39,92,0,82,91,2,0,82,95,35,0,82,93,78,0,3,95,95,93,82,93,24,0,4,95,95,93,41,95,95,2,100,92,91,95,145,92,92,0,89,40,92,0,88,92,40,0,145,92,92,0,59,91,0,0,145,91,91,0,70,92,92,91,120,92,3,0,1,88,17,0,119,0,49,0,82,92,86,0,82,91,29,0,25,91,91,0,41,91,91,2,100,13,92,91,145,13,13,0,88,92,40,0,145,92,92,0,65,15,13,92,145,15,15,0,82,92,41,0,82,91,39,0,25,91,91,0,41,91,91,2,3,16,92,91,88,92,16,0,145,92,92,0,63,91,92,15,145,91,91,0,89,16,91,0,82,91,86,0,82,92,29,0,25,92,92,1,41,92,92,2,100,18,91,92,145,18,18,0,88,91,40,0,145,91,91,0,65,19,18,91,145,19,19,0,82,91,41,0,82,92,39,0,25,92,92,1,41,92,92,2,3,20,91,92,88,91,20,0,145,91,91,0,63,92,91,19,145,92,92,0,89,20,92,0,82,92,78,0,25,92,92,1,85,78,92,0,119,0,188,255,82,92,64,0,25,92,92,1,85,64,92,0,119,0,154,255,32,92,88,17,121,92,8,0,1,91,155,63,1,95,138,59,1,93,37,6,1,94,117,63,135,92,209,2,91,95,93,94,119,0,48,1,32,92,88,47,121,92,46,1,137,89,0,0,139,0,0,0,119,0,43,1,1,92,0,0,85,64,92,0,82,92,7,0,82,94,64,0,49,92,92,94,56,5,1,0,1,88,47,0,119,0,118,0,82,92,87,0,82,94,64,0,41,94,94,3,3,92,92,94,116,42,92,0,82,92,87,0,82,94,64,0,41,94,94,3,3,92,92,94,25,92,92,4,116,43,92,0,82,92,64,0,82,94,4,0,4,92,92,94,85,44,92,0,82,92,44,0,27,92,92,3,85,47,92,0,116,50,43,0,82,94,3,0,82,93,64,0,5,92,94,93,85,53,92,0,116,78,42,0,82,92,50,0,82,93,78,0,54,92,92,93,252,6,1,0,82,92,78,0,27,92,92,3,85,57,92,0,82,93,2,0,82,94,53,0,82,95,78,0,3,94,94,95,82,95,42,0,4,94,94,95,41,94,94,2,100,92,93,94,145,92,92,0,89,60,92,0,88,92,60,0,145,92,92,0,59,93,0,0,145,93,93,0,70,92,92,93,120,92,3,0,1,88,25,0,119,0,69,0,82,92,86,0,82,93,47,0,25,93,93,0,41,93,93,2,100,27,92,93,145,27,27,0,88,92,60,0,145,92,92,0,65,28,27,92,145,28,28,0,82,92,41,0,82,93,57,0,25,93,93,0,41,93,93,2,3,30,92,93,88,92,30,0,145,92,92,0,63,93,92,28,145,93,93,0,89,30,93,0,82,93,86,0,82,92,47,0,25,92,92,1,41,92,92,2,100,31,93,92,145,31,31,0,88,93,60,0,145,93,93,0,65,33,31,93,145,33,33,0,82,93,41,0,82,92,57,0,25,92,92,1,41,92,92,2,3,34,93,92,88,93,34,0,145,93,93,0,63,92,93,33,145,92,92,0,89,34,92,0,82,92,86,0,82,93,47,0,25,93,93,2,41,93,93,2,100,36,92,93,145,36,36,0,88,92,60,0,145,92,92,0,65,37,36,92,145,37,37,0,82,92,41,0,82,93,57,0,25,93,93,2,41,93,93,2,3,38,92,93,88,92,38,0,145,92,92,0,63,93,92,37,145,93,93,0,89,38,93,0,82,93,78,0,25,93,93,1,85,78,93,0,119,0,168,255,82,93,64,0,25,93,93,1,85,64,93,0,119,0,134,255,32,93,88,25,121,93,8,0,1,92,155,63,1,94,138,59,1,95,59,6,1,91,117,63,135,93,209,2,92,94,95,91,119,0,165,0,32,93,88,47,121,93,163,0,137,89,0,0,139,0,0,0,119,0,160,0,1,93,0,0,85,64,93,0,82,93,7,0,82,91,64,0,49,93,93,91,100,7,1,0,1,88,47,0,119,0,138,0,82,93,87,0,82,91,64,0,41,91,91,3,3,93,93,91,116,62,93,0,82,93,87,0,82,91,64,0,41,91,91,3,3,93,93,91,25,93,93,4,116,63,93,0,82,93,64,0,82,91,4,0,4,93,93,91,85,65,93,0,82,93,65,0,41,93,93,2,85,66,93,0,116,67,63,0,82,91,3,0,82,95,64,0,5,93,91,95,85,70,93,0,116,78,62,0,82,93,67,0,82,95,78,0,54,93,93,95,120,9,1,0,82,93,78,0,41,93,93,2,85,72,93,0,82,95,2,0,82,91,70,0,82,94,78,0,3,91,91,94,82,94,62,0,4,91,91,94,41,91,91,2,100,93,95,91,145,93,93,0,89,73,93,0,88,93,73,0,145,93,93,0,59,95,0,0,145,95,95,0,70,93,93,95,120,93,3,0,1,88,33,0,119,0,89,0,82,93,86,0,82,95,66,0,25,95,95,0,41,95,95,2,100,45,93,95,145,45,45,0,88,93,73,0,145,93,93,0,65,46,45,93,145,46,46,0,82,93,41,0,82,95,72,0,25,95,95,0,41,95,95,2,3,48,93,95,88,93,48,0,145,93,93,0,63,95,93,46,145,95,95,0,89,48,95,0,82,95,86,0,82,93,66,0,25,93,93,1,41,93,93,2,100,49,95,93,145,49,49,0,88,95,73,0,145,95,95,0,65,51,49,95,145,51,51,0,82,95,41,0,82,93,72,0,25,93,93,1,41,93,93,2,3,52,95,93,88,95,52,0,145,95,95,0,63,93,95,51,145,93,93,0,89,52,93,0,82,93,86,0,82,95,66,0,25,95,95,2,41,95,95,2,100,54,93,95,145,54,54,0,88,93,73,0,145,93,93,0,65,55,54,93,145,55,55,0,82,93,41,0,82,95,72,0,25,95,95,2,41,95,95,2,3,56,93,95,88,93,56,0,145,93,93,0,63,95,93,55,145,95,95,0,89,56,95,0,82,95,86,0,82,93,66,0,25,93,93,3,41,93,93,2,100,58,95,93,145,58,58,0,88,95,73,0,145,95,95,0,65,59,58,95,145,59,59,0,82,95,41,0,82,93,72,0,25,93,93,3,41,93,93,2,3,61,95,93,88,95,61,0,145,95,95,0,63,93,95,59,145,93,93,0,89,61,93,0,82,93,78,0,25,93,93,1,85,78,93,0,119,0,148,255,82,93,64,0,25,93,93,1,85,64,93,0,119,0,114,255,32,93,88,33,121,93,8,0,1,95,155,63,1,91,138,59,1,94,82,6,1,92,117,63,135,93,209,2,95,91,94,92,119,0,6,0,32,93,88,47,121,93,4,0,137,89,0,0,139,0,0,0,119,0,1,0,139,0,0,0,140,3,114,0,0,0,0,0,2,107,0,0,176,119,0,0,2,108,0,0,0,1,0,0,1,103,0,0,136,109,0,0,0,104,109,0,136,109,0,0,1,110,160,0,3,109,109,110,137,109,0,0,130,109,0,0,136,110,0,0,49,109,109,110,20,10,1,0,1,110,160,0,135,109,208,2,110,0,0,0,25,10,104,120,25,102,104,112,25,66,104,96,25,67,104,80,25,70,104,56,0,78,104,0,1,109,144,0,3,83,104,109,1,109,128,0,3,88,104,109,25,94,104,72,25,13,104,48,25,17,104,40,25,21,104,32,1,109,136,0,3,25,104,109,2,109,0,0,112,156,0,0,78,109,109,0,120,109,12,0,2,110,0,0,112,156,0,0,134,109,0,0,172,173,3,0,110,0,0,0,121,109,6,0,2,109,0,0,92,157,0,0,59,110,224,46,145,110,110,0,89,109,110,0,2,110,0,0,120,156,0,0,78,110,110,0,120,110,12,0,2,109,0,0,120,156,0,0,134,110,0,0,172,173,3,0,109,0,0,0,121,110,6,0,2,110,0,0,96,157,0,0,59,109,196,9,145,109,109,0,89,110,109,0,2,109,0,0,128,156,0,0,78,109,109,0,120,109,12,0,2,110,0,0,128,156,0,0,134,109,0,0,172,173,3,0,110,0,0,0,121,109,6,0,2,109,0,0,100,157,0,0,59,110,136,19,145,110,110,0,89,109,110,0,2,110,0,0,136,156,0,0,78,110,110,0,120,110,13,0,2,109,0,0,136,156,0,0,134,110,0,0,172,173,3,0,109,0,0,0,121,110,7,0,2,110,0,0,104,157,0,0,2,109,0,0,100,157,0,0,82,109,109,0,85,110,109,0,2,109,0,0,144,156,0,0,78,109,109,0,120,109,12,0,2,110,0,0,144,156,0,0,134,109,0,0,172,173,3,0,110,0,0,0,121,109,6,0,2,109,0,0,108,157,0,0,59,110,220,5,145,110,110,0,89,109,110,0,2,110,0,0,152,156,0,0,78,110,110,0,120,110,12,0,2,109,0,0,152,156,0,0,134,110,0,0,172,173,3,0,109,0,0,0,121,110,6,0,2,110,0,0,112,157,0,0,59,109,1,0,145,109,109,0,89,110,109,0,2,109,0,0,160,156,0,0,78,109,109,0,120,109,12,0,2,110,0,0,160,156,0,0,134,109,0,0,172,173,3,0,110,0,0,0,121,109,6,0,2,109,0,0,116,157,0,0,59,110,20,0,145,110,110,0,89,109,110,0,2,110,0,0,168,156,0,0,78,110,110,0,120,110,12,0,2,109,0,0,168,156,0,0,134,110,0,0,172,173,3,0,109,0,0,0,121,110,6,0,2,110,0,0,120,157,0,0,59,109,160,15,145,109,109,0,89,110,109,0,25,68,0,24,78,109,68,0,32,69,109,0,2,109,0,0,116,157,0,0,88,71,109,0,145,71,71,0,2,109,0,0,112,157,0,0,88,72,109,0,145,72,72,0,126,73,69,72,71,0,0,0,25,74,0,8,88,75,74,0,145,75,75,0,65,111,75,73,145,111,111,0,65,110,111,1,145,110,110,0,64,109,75,110,145,109,109,0,89,74,109,0,25,76,0,12,88,77,76,0,145,77,77,0,65,111,73,77,145,111,111,0,65,110,111,1,145,110,110,0,64,109,77,110,145,109,109,0,89,76,109,0,2,109,0,0,92,157,0,0,88,79,109,0,145,79,79,0,2,109,0,0,96,157,0,0,88,80,109,0,145,80,80,0,126,81,69,80,79,0,0,0,1,110,65,0,134,109,0,0,36,153,3,0,110,0,0,0,121,109,9,0,65,82,81,1,145,82,82,0,88,109,74,0,145,109,109,0,64,12,109,82,145,12,12,0,1,103,29,0,119,0,13,0,1,110,68,0,134,109,0,0,36,153,3,0,110,0,0,0,121,109,8,0,65,84,81,1,145,84,84,0,88,109,74,0,145,109,109,0,63,12,84,109,145,12,12,0,1,103,29,0,32,109,103,29,121,109,2,0,89,74,12,0,121,2,195,0,1,110,32,0,134,109,0,0,4,112,3,0,110,0,0,0,121,109,6,0,25,85,0,25,78,109,85,0,121,109,3,0,1,109,0,0,83,85,109,0,134,109,0,0,132,169,3,0,10,0,0,0,2,110,0,0,32,157,0,0,134,109,0,0,108,158,3,0,66,10,110,0,1,109,0,0,85,67,109,0,1,110,0,0,109,67,4,110,1,109,0,0,109,67,8,109,134,109,0,0,188,176,3,0,67,0,0,0,2,110,0,0,20,157,0,0,134,109,0,0,104,168,3,0,67,110,108,0,25,86,70,8,25,87,83,4,1,3,0,0,27,109,3,20,3,109,107,109,102,109,109,16,121,109,78,0,1,109,0,0,85,70,109,0,1,110,0,0,109,70,4,110,1,109,0,0,109,70,8,109,1,110,0,0,109,70,12,110,27,110,3,20,3,105,107,110,25,91,105,8,0,92,105,0,134,110,0,0,176,158,3,0,70,91,92,0,134,110,0,0,108,158,3,0,10,91,92,0,0,93,10,0,106,95,93,4,0,96,86,0,116,96,93,0,109,96,4,95,134,110,0,0,252,110,3,0,70,78,0,0,1,8,0,0,41,110,8,3,3,97,78,110,25,8,8,1,38,110,8,3,41,110,110,3,3,14,78,110,134,110,0,0,168,9,3,0,83,97,14,0,66,0,0,0,88,15,83,0,145,15,15,0,88,110,87,0,145,110,110,0,59,109,0,0,145,109,109,0,73,110,110,109,120,110,31,0,59,110,1,0,145,110,110,0,72,110,15,110,59,109,0,0,145,109,109,0,74,109,15,109,19,110,110,109,121,110,23,0,0,16,97,0,106,18,16,4,0,19,94,0,116,19,16,0,109,19,4,18,0,20,14,0,106,22,20,4,0,23,13,0,116,23,20,0,109,23,4,22,116,102,94,0,106,109,94,4,109,102,4,109,116,10,13,0,106,110,13,4,109,10,4,110,134,110,0,0,244,142,3,0,88,102,10,15,134,110,0,0,120,137,3,0,67,88,0,0,33,110,8,4,120,110,207,255,25,3,3,1,53,110,3,108,228,13,1,0,25,89,67,4,1,110,0,0,82,109,89,0,47,110,110,109,96,16,1,0,25,90,67,8,1,4,0,0,59,5,0,0,145,5,5,0,1,6,0,0,1,7,1,0,0,24,0,0,106,26,24,4,0,27,17,0,116,27,24,0,109,27,4,26,82,110,90,0,41,109,4,3,3,28,110,109,106,29,28,4,0,30,21,0,116,30,28,0,109,30,4,29,116,102,17,0,106,110,17,4,109,102,4,110,116,10,21,0,106,109,21,4,109,10,4,109,134,31,0,0,116,148,3,0,102,10,0,0,145,31,31,0,73,109,5,31,20,109,7,109,0,100,109,0,125,6,100,4,6,0,0,0,25,4,4,1,82,109,89,0,56,109,109,4,236,15,1,0,126,5,100,31,5,0,0,0,1,7,0,0,119,0,222,255,106,109,67,8,41,110,6,3,3,32,109,110,82,33,32,0,106,34,32,4,25,35,0,26,1,110,1,0,83,35,110,0,25,36,0,36,85,36,33,0,109,36,4,34,1,109,1,0,134,110,0,0,32,151,3,0,109,0,0,0,121,110,14,0,1,110,0,0,83,68,110,0,1,109,1,0,107,0,25,109,1,109,0,0,83,35,109,0,25,37,0,28,85,37,33,0,109,37,4,34,61,110,0,0,0,0,0,63,145,110,110,0,113,0,44,110,25,38,0,25,78,110,38,0,121,110,51,0,25,39,0,44,88,110,39,0,145,110,110,0,64,40,110,1,145,40,40,0,89,39,40,0,59,110,0,0,145,110,110,0,72,110,40,110,120,110,38,0,25,109,0,28,134,110,0,0,176,158,3,0,25,109,0,0,116,10,25,0,106,109,25,4,109,10,4,109,134,109,0,0,228,28,3,0,102,10,0,0,88,41,102,0,145,41,41,0,2,109,0,0,120,157,0,0,88,42,109,0,145,42,42,0,65,109,41,42,145,109,109,0,65,43,109,1,145,43,43,0,88,110,74,0,145,110,110,0,63,109,110,43,145,109,109,0,89,74,109,0,112,110,102,4,145,110,110,0,65,109,42,110,145,109,109,0,65,44,109,1,145,44,44,0,88,110,76,0,145,110,110,0,63,109,110,44,145,109,109,0,89,76,109,0,119,0,4,0,1,109,0,0,83,38,109,0,119,0,1,0,78,109,68,0,120,109,3,0,1,103,65,0,119,0,93,0,78,109,38,0,120,109,90,0,1,109,0,0,83,68,109,0,2,109,0,0,176,156,0,0,78,109,109,0,120,109,17,0,2,110,0,0,176,156,0,0,134,109,0,0,172,173,3,0,110,0,0,0,121,109,11,0,2,109,0,0,124,157,0,0,1,110,136,39,82,110,110,0,85,109,110,0,2,110,0,0,128,157,0,0,59,109,2,0,145,109,109,0,89,110,109,0,116,10,0,0,112,45,0,4,145,45,45,0,112,109,0,20,145,109,109,0,63,46,45,109,145,46,46,0,2,113,0,0,128,157,0,0,88,112,113,0,145,112,112,0,61,113,0,0,0,0,0,63,145,113,113,0,65,111,112,113,145,111,111,0,63,110,46,111,145,110,110,0,113,10,4,110,25,47,66,8,1,9,0,0,27,110,9,20,3,110,107,110,102,110,110,16,121,110,34,0,27,110,9,20,3,106,107,110,2,109,0,0,124,157,0,0,134,110,0,0,108,158,3,0,102,106,109,0,1,110,0,0,85,66,110,0,1,109,0,0,109,66,4,109,1,110,0,0,109,66,8,110,1,109,0,0,109,66,12,109,25,48,106,8,134,109,0,0,176,158,3,0,66,48,102,0,134,109,0,0,108,158,3,0,67,48,102,0,0,49,67,0,106,50,49,4,0,51,47,0,116,51,49,0,109,51,4,50,134,109,0,0,12,142,3,0,10,66,0,0,121,109,3,0,1,109,1,0,83,68,109,0,25,9,9,1,53,109,9,108,248,17,1,0,78,109,68,0,120,109,3,0,1,103,65,0,119,0,4,0,1,103,67,0,119,0,2,0,1,103,67,0,32,109,103,65,121,109,34,0,78,109,38,0,120,109,32,0,1,109,32,0,134,52,0,0,36,153,3,0,109,0,0,0,88,11,76,0,145,11,11,0,59,109,0,0,145,109,109,0,72,109,11,109,12,109,109,0,40,110,52,1,19,109,109,110,0,101,109,0,2,109,0,0,104,157,0,0,88,99,109,0,145,99,99,0,2,109,0,0,100,157,0,0,88,98,109,0,145,98,98,0,126,111,101,99,98,0,0,0,65,110,111,1,145,110,110,0,63,109,11,110,145,109,109,0,89,76,109,0,78,109,68,0,121,109,2,0,1,103,67,0,32,109,103,67,121,109,17,0,1,110,32,0,134,109,0,0,36,153,3,0,110,0,0,0,121,109,12,0,2,109,0,0,108,157,0,0,88,53,109,0,145,53,53,0,88,110,76,0,145,110,110,0,64,109,110,53,145,109,109,0,89,76,109,0,1,109,0,0,83,68,109,0,88,110,74,0,145,110,110,0,65,109,110,1,145,109,109,0,59,110,0,0,145,110,110,0,63,54,109,110,145,54,54,0,88,109,76,0,145,109,109,0,65,110,109,1,145,110,110,0,59,109,0,0,145,109,109,0,63,55,110,109,145,55,55,0,0,56,0,0,82,57,56,0,106,58,56,4,0,59,10,0,85,59,57,0,109,59,4,58,0,60,102,0,85,60,57,0,109,60,4,58,127,110,0,0,85,110,57,0,127,111,0,0,88,110,111,0,145,110,110,0,63,109,54,110,145,109,109,0,89,10,109,0,134,109,0,0,56,195,1,0,0,10,0,0,25,61,102,4,127,110,0,0,85,110,58,0,127,111,0,0,88,110,111,0,145,110,110,0,63,109,55,110,145,109,109,0,89,61,109,0,134,109,0,0,56,195,1,0,0,102,0,0,116,0,10,0,82,110,61,0,109,0,4,110,0,62,0,0,106,63,62,4,59,110,0,5,145,110,110,0,61,109,0,0,0,0,0,63,145,109,109,0,65,64,110,109,145,64,64,0,2,109,0,0,32,157,0,0,88,111,62,0,145,111,111,0,64,110,111,64,145,110,110,0,89,109,110,0,59,110,208,2,145,110,110,0,61,109,0,0,0,0,0,63,145,109,109,0,65,65,110,109,145,65,65,0,2,109,0,0,36,157,0,0,127,111,0,0,85,111,63,0,127,113,0,0,88,111,113,0,145,111,111,0,64,110,111,65,145,110,110,0,89,109,110,0,137,104,0,0,139,0,0,0,140,2,123,0,0,0,0,0,2,113,0,0,173,40,0,0,2,114,0,0,176,40,0,0,2,115,0,0,172,40,0,0,2,116,0,0,0,1,0,0,2,117,0,0,224,163,0,0,2,118,0,0,216,162,0,0,2,119,0,0,177,40,0,0,3,61,0,1,106,91,0,4,38,120,91,1,120,120,228,0,82,105,0,0,38,120,91,3,120,120,2,0,139,0,0,0,1,120,0,0,4,120,120,105,3,30,0,120,3,34,105,1,2,120,0,0,192,162,0,0,82,36,120,0,48,120,30,36,104,21,1,0,135,120,215,2,2,120,0,0,196,162,0,0,82,120,120,0,45,120,120,30,192,21,1,0,25,27,61,4,82,28,27,0,38,120,28,3,33,120,120,3,121,120,4,0,0,7,30,0,0,8,34,0,119,0,203,0,2,120,0,0,184,162,0,0,85,120,34,0,38,120,28,254,85,27,120,0,39,121,34,1,109,30,4,121,85,61,34,0,139,0,0,0,43,121,105,3,0,49,121,0,48,121,105,116,144,22,1,0,106,62,30,8,106,66,30,12,41,121,49,1,41,121,121,2,3,73,118,121,46,121,62,73,8,22,1,0,48,121,62,36,248,21,1,0,135,121,215,2,106,121,62,12,46,121,121,30,8,22,1,0,135,121,215,2,45,121,66,62,68,22,1,0,2,121,0,0,176,162,0,0,2,120,0,0,176,162,0,0,82,120,120,0,1,122,1,0,22,122,122,49,11,122,122,0,19,120,120,122,85,121,120,0,0,7,30,0,0,8,34,0,119,0,161,0,45,120,66,73,84,22,1,0,25,25,66,8,119,0,11,0,48,120,66,36,96,22,1,0,135,120,215,2,25,90,66,8,82,120,90,0,45,120,120,30,120,22,1,0,0,25,90,0,119,0,2,0,135,120,215,2,109,62,12,66,85,25,62,0,0,7,30,0,0,8,34,0,119,0,142,0,106,92,30,24,106,93,30,12,45,120,93,30,56,23,1,0,25,97,30,16,25,98,97,4,82,99,98,0,120,99,8,0,82,100,97,0,120,100,3,0,1,22,0,0,119,0,49,0,0,11,100,0,0,14,97,0,119,0,3,0,0,11,99,0,0,14,98,0,0,9,11,0,0,12,14,0,25,101,9,20,82,102,101,0,120,102,8,0,25,103,9,16,82,104,103,0,120,104,2,0,119,0,9,0,0,10,104,0,0,13,103,0,119,0,3,0,0,10,102,0,0,13,101,0,0,9,10,0,0,12,13,0,119,0,242,255,48,120,12,36,40,23,1,0,135,120,215,2,119,0,23,0,1,120,0,0,85,12,120,0,0,22,9,0,119,0,19,0,106,94,30,8,48,120,94,36,72,23,1,0,135,120,215,2,25,95,94,12,82,120,95,0,46,120,120,30,92,23,1,0,135,120,215,2,25,96,93,8,82,120,96,0,45,120,120,30,124,23,1,0,85,95,93,0,85,96,94,0,0,22,93,0,119,0,2,0,135,120,215,2,120,92,4,0,0,7,30,0,0,8,34,0,119,0,78,0,106,106,30,28,41,120,106,2,3,107,117,120,82,120,107,0,45,120,120,30,228,23,1,0,85,107,22,0,120,22,34,0,2,120,0,0,180,162,0,0,2,121,0,0,180,162,0,0,82,121,121,0,1,122,1,0,22,122,122,106,11,122,122,0,19,121,121,122,85,120,121,0,0,7,30,0,0,8,34,0,119,0,57,0,2,121,0,0,192,162,0,0,82,121,121,0,48,121,92,121,0,24,1,0,135,121,215,2,119,0,14,0], eb + 61440);
  HEAPU8.set([25,108,92,16,82,120,108,0,45,120,120,30,24,24,1,0,0,121,108,0,119,0,3,0,25,120,92,20,0,121,120,0,85,121,22,0,120,22,4,0,0,7,30,0,0,8,34,0,119,0,37,0,2,121,0,0,192,162,0,0,82,109,121,0,48,121,22,109,76,24,1,0,135,121,215,2,109,22,24,92,25,110,30,16,82,111,110,0,121,111,8,0,48,121,111,109,108,24,1,0,135,121,215,2,119,0,4,0,109,22,16,111,109,111,24,22,119,0,1,0,106,112,110,4,120,112,4,0,0,7,30,0,0,8,34,0,119,0,15,0,2,121,0,0,192,162,0,0,82,121,121,0,48,121,112,121,168,24,1,0,135,121,215,2,119,0,8,0,109,22,20,112,109,112,24,22,0,7,30,0,0,8,34,0,119,0,3,0,0,7,0,0,0,8,1,0,2,121,0,0,192,162,0,0,82,29,121,0,48,121,61,29,220,24,1,0,135,121,215,2,25,31,61,4,82,32,31,0,38,121,32,2,120,121,244,0,2,121,0,0,200,162,0,0,82,121,121,0,45,121,121,61,108,25,1,0,2,121,0,0,188,162,0,0,82,121,121,0,3,33,121,8,2,121,0,0,188,162,0,0,85,121,33,0,2,121,0,0,200,162,0,0,85,121,7,0,39,120,33,1,109,7,4,120,2,120,0,0,196,162,0,0,82,120,120,0,46,120,7,120,72,25,1,0,139,0,0,0,2,120,0,0,196,162,0,0,1,121,0,0,85,120,121,0,2,121,0,0,184,162,0,0,1,120,0,0,85,121,120,0,139,0,0,0,2,120,0,0,196,162,0,0,82,120,120,0,45,120,120,61,184,25,1,0,2,120,0,0,184,162,0,0,82,120,120,0,3,35,120,8,2,120,0,0,184,162,0,0,85,120,35,0,2,120,0,0,196,162,0,0,85,120,7,0,39,121,35,1,109,7,4,121,97,7,35,35,139,0,0,0,38,121,32,248,3,37,121,8,43,121,32,3,0,38,121,0,48,121,32,116,128,26,1,0,106,39,61,8,106,40,61,12,41,121,38,1,41,121,121,2,3,41,118,121,46,121,39,41,8,26,1,0,48,121,39,29,248,25,1,0,135,121,215,2,106,121,39,12,46,121,121,61,8,26,1,0,135,121,215,2,45,121,40,39,60,26,1,0,2,121,0,0,176,162,0,0,2,120,0,0,176,162,0,0,82,120,120,0,1,122,1,0,22,122,122,38,11,122,122,0,19,120,120,122,85,121,120,0,119,0,145,0,45,120,40,41,76,26,1,0,25,24,40,8,119,0,11,0,48,120,40,29,88,26,1,0,135,120,215,2,25,42,40,8,82,120,42,0,45,120,120,61,112,26,1,0,0,24,42,0,119,0,2,0,135,120,215,2,109,39,12,40,85,24,39,0,119,0,128,0,106,43,61,24,106,44,61,12,45,120,44,61,40,27,1,0,25,48,61,16,25,50,48,4,82,51,50,0,120,51,8,0,82,52,48,0,120,52,3,0,1,23,0,0,119,0,49,0,0,17,52,0,0,20,48,0,119,0,3,0,0,17,51,0,0,20,50,0,0,15,17,0,0,18,20,0,25,53,15,20,82,54,53,0,120,54,8,0,25,55,15,16,82,56,55,0,120,56,2,0,119,0,9,0,0,16,56,0,0,19,55,0,119,0,3,0,0,16,54,0,0,19,53,0,0,15,16,0,0,18,19,0,119,0,242,255,48,120,18,29,24,27,1,0,135,120,215,2,119,0,23,0,1,120,0,0,85,18,120,0,0,23,15,0,119,0,19,0,106,45,61,8,48,120,45,29,56,27,1,0,135,120,215,2,25,46,45,12,82,120,46,0,46,120,120,61,76,27,1,0,135,120,215,2,25,47,44,8,82,120,47,0,45,120,120,61,108,27,1,0,85,46,44,0,85,47,45,0,0,23,44,0,119,0,2,0,135,120,215,2,121,43,67,0,106,57,61,28,41,120,57,2,3,58,117,120,82,120,58,0,45,120,120,61,192,27,1,0,85,58,23,0,120,23,30,0,2,120,0,0,180,162,0,0,2,121,0,0,180,162,0,0,82,121,121,0,1,122,1,0,22,122,122,57,11,122,122,0,19,121,121,122,85,120,121,0,119,0,48,0,2,121,0,0,192,162,0,0,82,121,121,0,48,121,43,121,220,27,1,0,135,121,215,2,119,0,12,0,25,59,43,16,82,120,59,0,45,120,120,61,244,27,1,0,0,121,59,0,119,0,3,0,25,120,43,20,0,121,120,0,85,121,23,0,120,23,2,0,119,0,30,0,2,121,0,0,192,162,0,0,82,60,121,0,48,121,23,60,32,28,1,0,135,121,215,2,109,23,24,43,25,63,61,16,82,64,63,0,121,64,8,0,48,121,64,60,64,28,1,0,135,121,215,2,119,0,4,0,109,23,16,64,109,64,24,23,119,0,1,0,106,65,63,4,121,65,11,0,2,121,0,0,192,162,0,0,82,121,121,0,48,121,65,121,112,28,1,0,135,121,215,2,119,0,4,0,109,23,20,65,109,65,24,23,119,0,1,0,39,120,37,1,109,7,4,120,97,7,37,37,2,120,0,0,196,162,0,0,82,120,120,0,45,120,7,120,176,28,1,0,2,120,0,0,184,162,0,0,85,120,37,0,139,0,0,0,119,0,9,0,0,21,37,0,119,0,7,0,38,120,32,254,85,31,120,0,39,121,8,1,109,7,4,121,97,7,8,8,0,21,8,0,43,121,21,3,0,67,121,0,48,121,21,116,104,29,1,0,41,121,67,1,41,121,121,2,3,68,118,121,2,121,0,0,176,162,0,0,82,69,121,0,1,121,1,0,22,121,121,67,0,70,121,0,19,121,69,70,120,121,8,0,2,121,0,0,176,162,0,0,20,120,69,70,85,121,120,0,0,6,68,0,25,26,68,8,119,0,12,0,25,71,68,8,82,72,71,0,2,120,0,0,192,162,0,0,82,120,120,0,48,120,72,120,76,29,1,0,135,120,215,2,119,0,3,0,0,6,72,0,0,26,71,0,85,26,7,0,109,6,12,7,109,7,8,6,109,7,12,68,139,0,0,0,43,120,21,8,0,74,120,0,120,74,3,0,1,5,0,0,119,0,42,0,2,120,0,0,255,255,255,0,48,120,120,21,148,29,1,0,1,5,31,0,119,0,36,0,2,120,0,0,0,255,15,0,3,120,74,120,43,120,120,16,38,120,120,8,0,75,120,0,22,120,74,75,0,76,120,0,2,120,0,0,0,240,7,0,3,120,76,120,43,120,120,16,38,120,120,4,0,77,120,0,22,120,76,77,0,78,120,0,2,120,0,0,0,192,3,0,3,120,78,120,43,120,120,16,38,120,120,2,0,79,120,0,1,120,14,0,20,121,77,75,20,121,121,79,4,120,120,121,22,121,78,79,43,121,121,15,3,80,120,121,25,121,80,7,24,121,21,121,38,121,121,1,41,120,80,1,20,121,121,120,0,5,121,0,41,121,5,2,3,81,117,121,109,7,28,5,1,120,0,0,109,7,20,120,1,121,0,0,109,7,16,121,2,121,0,0,180,162,0,0,82,82,121,0,1,121,1,0,22,121,121,5,0,83,121,0,19,121,82,83,120,121,10,0,2,121,0,0,180,162,0,0,20,120,82,83,85,121,120,0,85,81,7,0,109,7,24,81,109,7,12,7,109,7,8,7,139,0,0,0,82,84,81,0,106,120,84,4,38,120,120,248,45,120,120,21,156,30,1,0,0,3,84,0,119,0,41,0,32,121,5,31,121,121,4,0,1,121,0,0,0,120,121,0,119,0,5,0,1,121,25,0,43,122,5,1,4,121,121,122,0,120,121,0,22,120,21,120,0,2,120,0,0,4,84,0,25,120,4,16,43,121,2,31,41,121,121,2,3,86,120,121,82,85,86,0,120,85,2,0,119,0,11,0,106,121,85,4,38,121,121,248,45,121,121,21,0,31,1,0,0,3,85,0,119,0,16,0,41,121,2,1,0,2,121,0,0,4,85,0,119,0,240,255,2,121,0,0,192,162,0,0,82,121,121,0,48,121,86,121,40,31,1,0,135,121,215,2,85,86,7,0,109,7,24,4,109,7,12,7,109,7,8,7,139,0,0,0,25,87,3,8,82,88,87,0,2,121,0,0,192,162,0,0,82,89,121,0,18,121,89,88,18,120,89,3,19,121,121,120,120,121,2,0,135,121,215,2,109,88,12,7,85,87,7,0,109,7,8,88,109,7,12,3,1,120,0,0,109,7,24,120,139,0,0,0,140,9,114,0,0,0,0,0,136,105,0,0,0,100,105,0,136,105,0,0,1,106,160,0,3,105,105,106,137,105,0,0,130,105,0,0,136,106,0,0,49,105,105,106,188,31,1,0,1,106,160,0,135,105,208,2,106,0,0,0,1,105,152,0,3,98,100,105,1,105,148,0,3,9,100,105,1,105,144,0,3,10,100,105,1,105,140,0,3,12,100,105,1,105,136,0,3,13,100,105,1,105,132,0,3,14,100,105,1,105,128,0,3,16,100,105,1,105,156,0,3,17,100,105,25,19,100,124,25,20,100,120,25,22,100,116,25,24,100,112,25,25,100,108,25,27,100,104,25,30,100,100,25,31,100,96,25,36,100,92,25,38,100,16,25,42,100,8,0,44,100,0,25,48,100,88,25,51,100,84,25,56,100,80,25,60,100,76,25,64,100,72,25,68,100,68,25,72,100,64,25,77,100,60,25,81,100,56,25,85,100,52,25,88,100,48,25,89,100,44,25,90,100,40,25,91,100,36,25,92,100,32,25,93,100,28,25,94,100,24,85,98,0,0,85,9,1,0,85,10,2,0,85,12,3,0,85,13,4,0,85,14,5,0,85,16,6,0,38,105,7,1,83,17,105,0,85,19,8,0,82,106,9,0,32,106,106,0,121,106,4,0,1,106,1,0,0,105,106,0,119,0,5,0,82,106,12,0,82,107,10,0,17,106,106,107,0,105,106,0,121,105,3,0,137,100,0,0,139,0,0,0,82,105,12,0,82,106,10,0,25,106,106,1,46,105,105,106,184,35,1,0,1,105,255,0,85,51,105,0,1,105,0,0,85,56,105,0,1,105,255,0,85,60,105,0,1,105,0,0,85,64,105,0,1,105,255,0,85,68,105,0,1,105,0,0,85,72,105,0,1,105,0,0,85,77,105,0,82,105,9,0,82,106,77,0,56,105,105,106,248,33,1,0,82,105,98,0,82,106,77,0,41,106,106,2,25,106,106,0,91,105,105,106,85,81,105,0,82,105,98,0,82,106,77,0,41,106,106,2,25,106,106,1,91,105,105,106,85,85,105,0,82,105,98,0,82,106,77,0,41,106,106,2,25,106,106,2,91,105,105,106,85,88,105,0,82,105,56,0,82,106,81,0,47,105,105,106,132,33,1,0,116,56,81,0,82,105,81,0,82,106,51,0,47,105,105,106,152,33,1,0,116,51,81,0,82,105,64,0,82,106,85,0,47,105,105,106,172,33,1,0,116,64,85,0,82,105,85,0,82,106,60,0,47,105,105,106,192,33,1,0,116,60,85,0,82,105,72,0,82,106,88,0,47,105,105,106,212,33,1,0,116,72,88,0,82,105,88,0,82,106,68,0,47,105,105,106,232,33,1,0,116,68,88,0,82,105,77,0,25,105,105,1,85,77,105,0,119,0,201,255,82,105,56,0,82,106,51,0,4,105,105,106,85,89,105,0,82,105,64,0,82,106,60,0,4,105,105,106,85,90,105,0,82,105,72,0,82,106,68,0,4,105,105,106,85,91,105,0,1,105,1,0,85,92,105,0,82,106,90,0,82,107,91,0,15,106,106,107,1,107,2,0,1,108,1,0,125,105,106,107,108,0,0,0,85,92,105,0,82,105,91,0,82,108,89,0,47,105,105,108,120,34,1,0,82,105,90,0,82,108,89,0,47,105,105,108,120,34,1,0,1,105,0,0,85,92,105,0,82,105,9,0,82,108,13,0,82,107,10,0,4,108,108,107,5,95,105,108,82,108,12,0,82,105,10,0,4,108,108,105,6,108,95,108,85,93,108,0,82,108,9,0,82,105,93,0,4,108,108,105,85,94,108,0,82,105,98,0,1,107,0,0,82,106,9,0,82,109,92,0,82,110,93,0,134,108,0,0,248,238,2,0,105,107,106,109,110,0,0,0,82,108,19,0,1,110,4,3,3,108,108,110,82,110,16,0,82,109,92,0,95,108,110,109,82,109,19,0,1,110,3,4,3,109,109,110,82,110,16,0,82,108,98,0,82,106,93,0,41,106,106,2,82,107,92,0,3,106,106,107,90,108,108,106,95,109,110,108,82,101,13,0,82,102,14,0,82,110,98,0,82,109,93,0,82,106,10,0,4,107,101,102,28,105,102,2,82,111,16,0,41,111,111,1,78,112,17,0,38,112,112,1,82,113,19,0,134,108,0,0,128,31,1,0,110,109,106,101,107,105,111,112,113,0,0,0,82,103,13,0,82,104,14,0,82,113,98,0,82,112,93,0,41,112,112,2,3,113,113,112,82,112,94,0,82,111,12,0,3,105,103,104,28,107,104,2,82,106,16,0,41,106,106,1,25,106,106,1,78,109,17,0,38,109,109,1,82,110,19,0,134,108,0,0,128,31,1,0,113,112,103,111,105,107,106,109,110,0,0,0,137,100,0,0,139,0,0,0,78,108,17,0,38,108,108,1,121,108,176,0,82,108,10,0,32,108,108,1,121,108,83,0,1,108,255,0,85,20,108,0,1,108,255,0,85,22,108,0,1,108,255,0,85,24,108,0,1,108,0,0,85,25,108,0,82,96,20,0,82,108,9,0,82,110,25,0,56,108,108,110,208,36,1,0,82,108,98,0,82,110,25,0,41,110,110,2,25,110,110,0,91,108,108,110,48,108,96,108,40,36,1,0,82,97,20,0,119,0,6,0,82,108,98,0,82,110,25,0,41,110,110,2,25,110,110,0,91,97,108,110,85,20,97,0,82,108,22,0,82,110,98,0,82,109,25,0,41,109,109,2,25,109,109,1,91,110,110,109,48,108,108,110,104,36,1,0,82,99,22,0,119,0,6,0,82,108,98,0,82,110,25,0,41,110,110,2,25,110,110,1,91,99,108,110,85,22,99,0,82,108,24,0,82,110,98,0,82,109,25,0,41,109,109,2,25,109,109,2,91,110,110,109,48,108,108,110,168,36,1,0,82,11,24,0,119,0,6,0,82,108,98,0,82,110,25,0,41,110,110,2,25,110,110,2,91,11,108,110,85,24,11,0,82,108,25,0,25,108,108,1,85,25,108,0,119,0,201,255,82,108,19,0,25,108,108,4,82,110,10,0,95,108,110,96,82,110,19,0,1,108,4,1,3,110,110,108,82,108,10,0,82,109,22,0,95,110,108,109,82,109,19,0,1,108,4,2,3,109,109,108,82,108,10,0,82,110,24,0,95,109,108,110,137,100,0,0,139,0,0,0,82,110,10,0,1,108,1,0,82,109,19,0,82,109,109,0,22,108,108,109,26,108,108,1,45,110,110,108,128,38,1,0,1,110,0,0,85,27,110,0,1,110,0,0,85,30,110,0,1,110,0,0,85,31,110,0,1,110,0,0,85,36,110,0,82,15,27,0,82,110,9,0,82,108,36,0,56,110,110,108,56,38,1,0,82,110,98,0,82,108,36,0,41,108,108,2,25,108,108,0,91,110,110,108,48,110,110,15,144,37,1,0,82,18,27,0,119,0,6,0,82,110,98,0,82,108,36,0,41,108,108,2,25,108,108,0,91,18,110,108,85,27,18,0,82,110,98,0,82,108,36,0,41,108,108,2,25,108,108,1,91,110,110,108,82,108,30,0,48,110,110,108,208,37,1,0,82,21,30,0,119,0,6,0,82,110,98,0,82,108,36,0,41,108,108,2,25,108,108,1,91,21,110,108,85,30,21,0,82,110,98,0,82,108,36,0,41,108,108,2,25,108,108,2,91,110,110,108,82,108,31,0,48,110,110,108,16,38,1,0,82,23,31,0,119,0,6,0,82,110,98,0,82,108,36,0,41,108,108,2,25,108,108,2,91,23,110,108,85,31,23,0,82,110,36,0,25,110,110,1,85,36,110,0,119,0,201,255,82,110,19,0,25,110,110,4,82,108,10,0,95,110,108,15,82,108,19,0,1,110,4,1,3,108,108,110,82,110,10,0,82,109,30,0,95,108,110,109,82,109,19,0,1,110,4,2,3,109,109,110,82,110,10,0,82,108,31,0,95,109,110,108,137,100,0,0,139,0,0,0,0,26,38,0,1,108,0,0,85,26,108,0,1,110,0,0,109,26,4,110,0,28,42,0,1,110,0,0,85,28,110,0,1,108,0,0,109,28,4,108,0,29,44,0,1,108,0,0,85,29,108,0,1,110,0,0,109,29,4,110,1,110,0,0,85,48,110,0,82,110,9,0,82,108,48,0,56,110,110,108,164,39,1,0,0,32,38,0,82,110,32,0,106,108,32,4,82,109,98,0,82,106,48,0,41,106,106,2,25,106,106,0,91,109,109,106,1,106,0,0,134,33,0,0,40,171,3,0,110,108,109,106,135,34,211,2,0,35,38,0,85,35,33,0,109,35,4,34,0,37,42,0,82,106,37,0,106,109,37,4,82,108,98,0,82,110,48,0,41,110,110,2,25,110,110,1,91,108,108,110,1,110,0,0,134,39,0,0,40,171,3,0,106,109,108,110,135,40,211,2,0,41,42,0,85,41,39,0,109,41,4,40,0,43,44,0,82,110,43,0,106,108,43,4,82,109,98,0,82,106,48,0,41,106,106,2,25,106,106,2,91,109,109,106,1,106,0,0,134,45,0,0,40,171,3,0,110,108,109,106,135,46,211,2,0,47,44,0,85,47,45,0,109,47,4,46,82,106,48,0,25,106,106,1,85,48,106,0,119,0,201,255,82,106,9,0,28,49,106,2,0,50,38,0,82,106,50,0,106,109,50,4,34,108,49,0,41,108,108,31,42,108,108,31,134,52,0,0,40,171,3,0,106,109,49,108,135,53,211,2,0,54,38,0,85,54,52,0,109,54,4,53,82,108,9,0,28,55,108,2,0,57,42,0,82,108,57,0,106,109,57,4,34,106,55,0,41,106,106,31,42,106,106,31,134,58,0,0,40,171,3,0,108,109,55,106,135,59,211,2,0,61,42,0,85,61,58,0,109,61,4,59,82,106,9,0,28,62,106,2,0,63,44,0,82,106,63,0,106,109,63,4,34,108,62,0,41,108,108,31,42,108,108,31,134,65,0,0,40,171,3,0,106,109,62,108,135,66,211,2,0,67,44,0,85,67,65,0,109,67,4,66,82,69,9,0,0,70,38,0,82,108,70,0,106,109,70,4,34,106,69,0,41,106,106,31,42,106,106,31,134,71,0,0,228,172,3,0,108,109,69,106,135,73,211,2,0,74,38,0,85,74,71,0,109,74,4,73,82,75,9,0,0,76,42,0,82,106,76,0,106,109,76,4,34,108,75,0,41,108,108,31,42,108,108,31,134,78,0,0,228,172,3,0,106,109,75,108,135,79,211,2,0,80,42,0,85,80,78,0,109,80,4,79,82,82,9,0,0,83,44,0,82,108,83,0,106,109,83,4,34,106,82,0,41,106,106,31,42,106,106,31,134,84,0,0,228,172,3,0,108,109,82,106,135,86,211,2,0,87,44,0,85,87,84,0,109,87,4,86,82,106,19,0,25,106,106,4,82,109,10,0,82,108,38,0,95,106,109,108,82,108,19,0,1,109,4,1,3,108,108,109,82,109,10,0,82,106,42,0,95,108,109,106,82,106,19,0,1,109,4,2,3,106,106,109,82,109,10,0,82,108,44,0,95,106,109,108,137,100,0,0,139,0,0,0,140,5,114,0,0,0,0,0,2,102,0,0,255,0,0,0,2,103,0,0,81,38,0,0,2,104,0,0,153,153,153,25,2,105,0,0,0,0,0,8,2,106,0,0,154,153,153,153,2,107,0,0,199,113,28,7,2,108,0,0,255,255,255,255,2,109,0,0,72,75,0,0,1,101,0,0,1,110,36,0,48,110,110,1,192,41,1,0,134,110,0,0,96,186,3,0,1,111,22,0,85,110,111,0,1,73,0,0,1,74,0,0,119,0,57,2,25,86,0,4,25,90,0,100,82,94,86,0,82,111,90,0,48,111,94,111,232,41,1,0,25,111,94,1,85,86,111,0,79,36,94,0,119,0,4,0,134,36,0,0,168,228,2,0,0,0,0,0,134,111,0,0,32,182,3,0,36,0,0,0,33,111,111,0,120,111,241,255,1,111,43,0,1,110,3,0,138,36,111,110,44,42,1,0,32,42,1,0,48,42,1,0,1,6,0,0,0,7,36,0,119,0,20,0,119,0,1,0,32,111,36,45,41,111,111,31,42,111,111,31,0,50,111,0,82,55,86,0,82,111,90,0,48,111,55,111,100,42,1,0,25,111,55,1,85,86,111,0,0,6,50,0,79,7,55,0,119,0,6,0,0,6,50,0,134,7,0,0,168,228,2,0,0,0,0,0,119,0,1,0,32,70,1,0,39,111,1,16,32,111,111,16,32,110,7,48,19,111,111,110,121,111,67,0,82,81,86,0,82,111,90,0,48,111,81,111,176,42,1,0,25,111,81,1,85,86,111,0,79,82,81,0,119,0,4,0,134,82,0,0,168,228,2,0,0,0,0,0,39,111,82,32,33,111,111,120,121,111,10,0,121,70,5,0,0,11,82,0,1,13,8,0,1,101,47,0,119,0,74,0,0,10,82,0,0,12,1,0,1,101,32,0,119,0,70,0,82,83,86,0,82,111,90,0,48,111,83,111,12,43,1,0,25,111,83,1,85,86,111,0,79,84,83,0,119,0,4,0,134,84,0,0,168,228,2,0,0,0,0,0,1,111,15,0,91,110,103,84,47,111,111,110,136,43,1,0,82,111,90,0,32,85,111,0,120,85,4,0,82,111,86,0,26,111,111,1,85,86,111,0,120,2,8,0,1,110,0,0,134,111,0,0,44,158,3,0,0,110,0,0,1,73,0,0,1,74,0,0,119,0,209,1,121,85,4,0,1,73,0,0,1,74,0,0,119,0,205,1,82,111,86,0,26,111,111,1,85,86,111,0,1,73,0,0,1,74,0,0,119,0,199,1,0,11,84,0,1,13,16,0,1,101,47,0,119,0,27,0,1,111,10,0,125,100,70,111,1,0,0,0,91,111,103,7,48,111,111,100,192,43,1,0,0,10,7,0,0,12,100,0,1,101,32,0,119,0,17,0,82,111,90,0,121,111,4,0,82,111,86,0,26,111,111,1,85,86,111,0,1,110,0,0,134,111,0,0,44,158,3,0,0,110,0,0,134,111,0,0,96,186,3,0,1,110,22,0,85,111,110,0,1,73,0,0,1,74,0,0,119,0,169,1,32,110,101,32,121,110,107,0,32,110,12,10,121,110,102,0,26,87,10,48,35,110,87,10,121,110,95,0,1,5,0,0,0,88,87,0,27,110,5,10,3,5,110,88,82,89,86,0,82,110,90,0,48,110,89,110,76,44,1,0,25,110,89,1,85,86,110,0,79,91,89,0,119,0,4,0,134,91,0,0,168,228,2,0,0,0,0,0,26,88,91,48,35,110,88,10,16,111,5,104,19,110,110,111,120,110,239,255,35,110,88,10,121,110,69,0,0,16,91,0,0,92,5,0,1,93,0,0,0,97,88,0,1,110,10,0,1,111,0,0,134,95,0,0,12,128,3,0,92,93,110,111,135,96,211,2,34,111,97,0,41,111,111,31,42,111,111,31,0,98,111,0,11,99,98,0,16,111,99,96,13,110,96,99,11,112,97,0,16,112,112,95,19,110,110,112,20,111,111,110,121,111,7,0,1,14,10,0,0,20,16,0,0,75,92,0,0,76,93,0,1,101,76,0,119,0,52,0,134,92,0,0,40,171,3,0,95,96,97,98,135,93,211,2,82,23,86,0,82,111,90,0,48,111,23,111,20,45,1,0,25,111,23,1,85,86,111,0,79,24,23,0,119,0,4,0,134,24,0,0,168,228,2,0,0,0,0,0,26,97,24,48,35,111,97,10,16,110,93,104,13,112,93,104,16,113,92,106,19,112,112,113,20,110,110,112,19,111,111,110,120,111,2,0,119,0,3,0,0,16,24,0,119,0,206,255,1,111,9,0,48,111,111,97,108,45,1,0,0,9,6,0,0,67,93,0,0,68,92,0,119,0,18,0,1,14,10,0,0,20,24,0,0,75,92,0,0,76,93,0,1,101,76,0,119,0,12,0,0,9,6,0,1,67,0,0,0,68,5,0,119,0,8,0,0,9,6,0,1,67,0,0,1,68,0,0,119,0,4,0,0,11,10,0,0,13,12,0,1,101,47,0,32,111,101,47,121,111,223,0,26,111,13,1,19,111,111,13,120,111,102,0,27,111,13,23,43,111,111,5,38,111,111,7,90,25,109,111,90,26,103,11,19,111,26,102,0,27,111,0,48,111,27,13,92,46,1,0,1,8,0,0,0,28,27,0,22,111,8,25,20,111,28,111,0,8,111,0,82,29,86,0,82,111,90,0,48,111,29,111,28,46,1,0,25,111,29,1,85,86,111,0,79,30,29,0,119,0,4,0,134,30,0,0,168,228,2,0,0,0,0,0,90,31,103,30,19,111,31,102,0,28,111,0,16,111,8,105,16,110,28,13,19,111,111,110,120,111,236,255,0,17,30,0,0,21,28,0,1,34,0,0,0,35,8,0,0,77,31,0,119,0,6,0,0,17,11,0,0,21,27,0,1,34,0,0,1,35,0,0,0,77,26,0,1,111,255,255,1,110,255,255,135,32,216,2,111,110,25,0,135,33,211,2,18,110,13,21,16,111,33,34,13,112,33,34,16,113,32,35,19,112,112,113,20,111,111,112,20,110,110,111,121,110,7,0,0,14,13,0,0,20,17,0,0,75,35,0,0,76,34,0,1,101,76,0,119,0,158,0,0,37,35,0,0,38,34,0,0,41,77,0,135,39,212,2,37,38,25,0,135,40,211,2,19,110,41,102,20,110,39,110,0,42,110,0,82,43,86,0,82,110,90,0,48,110,43,110,0,47,1,0,25,110,43,1,85,86,110,0,79,44,43,0,119,0,4,0,134,44,0,0,168,228,2,0,0,0,0,0,90,41,103,44,19,110,41,102,18,110,13,110,16,111,33,40,13,112,40,33,16,113,32,42,19,112,112,113,20,111,111,112,20,110,110,111,121,110,7,0,0,14,13,0,0,20,44,0,0,75,42,0,0,76,40,0,1,101,76,0,119,0,122,0,0,37,42,0,0,38,40,0,119,0,221,255,90,45,103,11,19,110,45,102,0,46,110,0,48,110,46,13,220,47,1,0,1,15,0,0,0,47,46,0,5,110,15,13,3,15,47,110,82,48,86,0,82,110,90,0,48,110,48,110,156,47,1,0,25,110,48,1,85,86,110,0,79,49,48,0,119,0,4,0,134,49,0,0,168,228,2,0,0,0,0,0,90,51,103,49,19,110,51,102,0,47,110,0,16,110,15,107,16,111,47,13,19,110,110,111,120,110,237,255,0,18,49,0,0,22,47,0,0,78,51,0,0,79,15,0,1,80,0,0,119,0,6,0,0,18,11,0,0,22,46,0,0,78,45,0,1,79,0,0,1,80,0,0,48,110,22,13,28,49,1,0,1,110,255,255,1,111,255,255,1,112,0,0,134,52,0,0,228,172,3,0,110,111,13,112,135,53,211,2,0,19,18,0,0,54,80,0,0,56,79,0,0,60,78,0,16,112,53,54,13,111,54,53,16,110,52,56,19,111,111,110,20,112,112,111,121,112,7,0,0,14,13,0,0,20,19,0,0,75,56,0,0,76,54,0,1,101,76,0,119,0,56,0,1,112,0,0,134,57,0,0,12,128,3,0,56,54,13,112,135,58,211,2,19,112,60,102,0,59,112,0,16,112,108,58,32,111,58,255,11,110,59,0,16,110,110,57,19,111,111,110,20,112,112,111,121,112,7,0,0,14,13,0,0,20,19,0,0,75,56,0,0,76,54,0,1,101,76,0,119,0,36,0,1,112,0,0,134,61,0,0,40,171,3,0,57,58,59,112,135,62,211,2,82,63,86,0,82,112,90,0,48,112,63,112,216,48,1,0,25,112,63,1,85,86,112,0,79,64,63,0,119,0,4,0,134,64,0,0,168,228,2,0,0,0,0,0,90,60,103,64,19,112,60,102,50,112,13,112,12,49,1,0,0,14,13,0,0,20,64,0,0,75,61,0,0,76,62,0,1,101,76,0,119,0,10,0,0,19,64,0,0,54,62,0,0,56,61,0,119,0,195,255,0,14,13,0,0,20,18,0,0,75,79,0,0,76,80,0,1,101,76,0,32,112,101,76,121,112,36,0,91,112,103,20,48,112,112,14,184,49,1,0,82,65,86,0,82,112,90,0,48,112,65,112,100,49,1,0,25,112,65,1,85,86,112,0,79,66,65,0,119,0,4,0,134,66,0,0,168,228,2,0,0,0,0,0,91,112,103,66,55,112,112,14,68,49,1,0,134,112,0,0,96,186,3,0,1,111,34,0,85,112,111,0,38,111,3,1,32,111,111,0,1,112,0,0,32,112,112,0,19,111,111,112,1,112,0,0,125,9,111,6,112,0,0,0,0,67,4,0,0,68,3,0,119,0,4,0,0,9,6,0,0,67,76,0,0,68,75,0,82,112,90,0,121,112,4,0,82,112,86,0,26,112,112,1,85,86,112,0,16,112,67,4,13,111,67,4,16,110,68,3,19,111,111,110,20,112,112,111,120,112,34,0,38,112,3,1,33,112,112,0,1,111,0,0,33,111,111,0,20,112,112,111,33,111,9,0,20,112,112,111,120,112,13,0,134,112,0,0,96,186,3,0,1,111,34,0,85,112,111,0,1,111,255,255,1,112,255,255,134,69,0,0,40,171,3,0,3,4,111,112,135,73,211,2,0,74,69,0,119,0,25,0,16,112,4,67,13,111,67,4,16,110,3,68,19,111,111,110,20,112,112,111,121,112,8,0,134,112,0,0,96,186,3,0,1,111,34,0,85,112,111,0,0,73,4,0,0,74,3,0,119,0,12,0,34,111,9,0,41,111,111,31,42,111,111,31,0,71,111,0,21,111,68,9,21,112,67,71,134,72,0,0,16,167,3,0,111,112,9,71,135,73,211,2,0,74,72,0,135,112,217,2,73,0,0,0,139,74,0,0,140,7,65,0,0,0,0,0,2,56,0,0,255,255,0,0,2,57,0,0,255,0,0,0,1,54,0,0,136,58,0,0,0,55,58,0,136,58,0,0,1,59,0,1,3,58,58,59,137,58,0,0,130,58,0,0,136,59,0,0,49,58,58,59,252,50,1,0,1,59,0,1,135,58,208,2,59,0,0,0,1,58,240,0,3,48,55,58,1,58,236,0,3,50,55,58,1,58,232,0,3,52,55,58,1,58,228,0,3,7,55,58,1,58,224,0,3,8,55,58,1,58,220,0,3,10,55,58,1,58,216,0,3,11,55,58,1,58,212,0,3,12,55,58,1,58,208,0,3,14,55,58,1,58,204,0,3,15,55,58,0,17,55,0,1,58,200,0,3,18,55,58,1,58,196,0,3,19,55,58,1,58,192,0,3,21,55,58,1,58,188,0,3,22,55,58,1,58,184,0,3,23,55,58,1,58,180,0,3,25,55,58,1,58,176,0,3,26,55,58,1,58,172,0,3,27,55,58,1,58,168,0,3,29,55,58,1,58,164,0,3,30,55,58,1,58,160,0,3,32,55,58,1,58,156,0,3,33,55,58,1,58,152,0,3,34,55,58,1,58,148,0,3,35,55,58,1,58,144,0,3,37,55,58,1,58,140,0,3,38,55,58,1,58,136,0,3,40,55,58,1,58,132,0,3,41,55,58,1,58,128,0,3,43,55,58,85,48,0,0,85,50,1,0,85,52,2,0,85,7,3,0,85,8,4,0,85,10,5,0,85,11,6,0,82,58,48,0,106,58,58,72,38,58,58,1,120,58,66,0,1,58,0,0,85,12,58,0,82,58,50,0,82,59,12,0,56,58,58,59,24,53,1,0,82,59,12,0,82,60,8,0,5,58,59,60,85,18,58,0,82,60,7,0,82,59,18,0,82,61,10,0,3,59,59,61,41,59,59,2,100,58,60,59,145,58,58,0,89,19,58,0,88,58,19,0,145,58,58,0,59,60,0,0,145,60,60,0,70,58,58,60,121,58,8,0,59,58,1,0,145,58,58,0,88,60,19,0,145,60,60,0,66,46,58,60,145,46,46,0,119,0,3,0,59,46,0,0,145,46,46,0,89,21,46,0,1,60,0,0,85,14,60,0,82,60,8,0,82,58,14,0,56,60,60,58,8,53,1,0,82,60,14,0,82,58,10,0,46,60,60,58,248,52,1,0,88,47,21,0,145,47,47,0,82,60,7,0,82,58,18,0,82,59,14,0,3,58,58,59,41,58,58,2,3,49,60,58,88,60,49,0,145,60,60,0,65,58,60,47,145,58,58,0,89,49,58,0,82,58,14,0,25,58,58,1,85,14,58,0,119,0,232,255,82,58,12,0,25,58,58,1,85,12,58,0,119,0,194,255,1,58,0,0,85,12,58,0,1,58,0,0,85,15,58,0,82,58,8,0,82,60,12,0,56,58,58,60,160,53,1,0,82,58,12,0,82,60,10,0,46,58,58,60,80,53,1,0,1,54,16,0,119,0,6,0,82,58,48,0,106,58,58,72,38,58,58,2,121,58,2,0,1,54,16,0,32,58,54,16,121,58,10,0,1,54,0,0,82,58,12,0,19,58,58,56,0,51,58,0,82,53,15,0,25,58,53,1,85,15,58,0,41,58,53,1,96,17,58,51,82,58,12,0,25,58,58,1,85,12,58,0,119,0,227,255,82,58,11,0,1,59,0,0,1,63,8,0,138,58,59,63,236,53,1,0,192,54,1,0,232,55,1,0,196,56,1,0,56,58,1,0,8,59,1,0,100,60,1,0,4,61,1,0,1,60,201,64,1,61,138,59,1,62,67,7,1,63,66,65,135,59,209,2,60,61,62,63,119,0,6,2,1,60,0,0,85,12,60,0,82,60,50,0,82,59,12,0,56,60,60,59,180,54,1,0,82,59,12,0,82,61,8,0,5,60,59,61,85,22,60,0,1,60,0,0,85,14,60,0,82,60,8,0,82,61,14,0,56,60,60,61,164,54,1,0,82,60,22,0,82,61,14,0,3,60,60,61,85,23,60,0,82,62,7,0,82,63,23,0,41,63,63,2,100,59,62,63,145,59,59,0,134,61,0,0,156,115,3,0,59,0,0,0,145,61,61,0,59,59,255,0,145,59,59,0,65,60,61,59,145,60,60,0,61,59,0,0,0,0,0,63,63,60,60,59,75,60,60,0,19,60,60,57,0,9,60,0,82,60,52,0,82,59,23,0,95,60,59,9,82,59,14,0,25,59,59,1,85,14,59,0,119,0,223,255,82,59,12,0,25,59,59,1,85,12,59,0,119,0,209,255,137,55,0,0,139,0,0,0,119,0,1,0,1,59,0,0,85,12,59,0,82,59,50,0,82,60,12,0,56,59,59,60,220,55,1,0,82,60,12,0,82,61,8,0,5,59,60,61,85,25,59,0,1,59,0,0,85,14,59,0,82,59,15,0,82,61,14,0,56,59,59,61,84,55,1,0,82,59,25,0,82,61,14,0,41,61,61,1,93,61,17,61,3,59,59,61,85,26,59,0,82,61,7,0,82,60,26,0,41,60,60,2,100,59,61,60,145,59,59,0,134,13,0,0,172,11,3,0,59,0,0,0,82,59,52,0,82,61,26,0,95,59,61,13,82,61,14,0,25,61,61,1,85,14,61,0,119,0,232,255,82,61,48,0,106,61,61,72,38,61,61,2,120,61,27,0,82,62,7,0,82,63,25,0,82,64,10,0,3,63,63,64,41,63,63,2,100,60,62,63,145,60,60,0,134,59,0,0,156,115,3,0,60,0,0,0,145,59,59,0,59,60,255,0,145,60,60,0,65,61,59,60,145,61,61,0,61,60,0,0,0,0,0,63,63,61,61,60,75,61,61,0,19,61,61,57,0,16,61,0,82,61,52,0,82,60,25,0,82,59,10,0,3,60,60,59,95,61,60,16,82,60,12,0,25,60,60,1,85,12,60,0,119,0,188,255,137,55,0,0,139,0,0,0,119,0,1,0,1,60,0,0,85,12,60,0,82,60,50,0,82,61,12,0,56,60,60,61,184,56,1,0,82,61,12,0,82,59,8,0,5,60,61,59,85,27,60,0,1,60,0,0,85,14,60,0,82,60,8,0,82,59,14,0,56,60,60,59,168,56,1,0,82,60,27,0,82,59,14,0,3,60,60,59,85,29,60,0,82,62,7,0,82,63,29,0,41,63,63,2,100,61,62,63,145,61,61,0,134,59,0,0,156,115,3,0,61,0,0,0,145,59,59,0,60,61,0,0,255,255,0,0,145,61,61,0,65,60,59,61,145,60,60,0,61,61,0,0,0,0,0,63,63,60,60,61,75,60,60,0,19,60,60,56,0,20,60,0,82,60,52,0,82,61,29,0,41,61,61,1,96,60,61,20,82,61,14,0,25,61,61,1,85,14,61,0,119,0,221,255,82,61,12,0,25,61,61,1,85,12,61,0,119,0,207,255,137,55,0,0,139,0,0,0,119,0,1,0,1,61,0,0,85,12,61,0,82,61,50,0,82,60,12,0,56,61,61,60,44,58,1,0,82,60,12,0,82,59,8,0,5,61,60,59,85,30,61,0,1,61,0,0,85,14,61,0,82,61,15,0,82,59,14,0,56,61,61,59,156,57,1,0,82,61,30,0,82,59,14,0,41,59,59,1,93,59,17,59,3,61,61,59,85,32,61,0,82,63,7,0,82,64,32,0,41,64,64,2,100,62,63,64,145,62,62,0,134,60,0,0,156,115,3,0,62,0,0,0,145,60,60,0,134,59,0,0,188,86,3,0,60,0,0,0,145,59,59,0,60,60,0,0,255,255,0,0,145,60,60,0,65,61,59,60,145,61,61,0,61,60,0,0,0,0,0,63,63,61,61,60,75,61,61,0,19,61,61,56,0,24,61,0,82,61,52,0,82,60,32,0,41,60,60,1,96,61,60,24,82,60,14,0,25,60,60,1,85,14,60,0,119,0,215,255,82,60,48,0,106,60,60,72,38,60,60,2,120,60,29,0,82,62,7,0,82,63,30,0,82,64,10,0,3,63,63,64,41,63,63,2,100,59,62,63,145,59,59,0,134,61,0,0,156,115,3,0,59,0,0,0,145,61,61,0,60,59,0,0,255,255,0,0,145,59,59,0,65,60,61,59,145,60,60,0,61,59,0,0,0,0,0,63,63,60,60,59,75,60,60,0,19,60,60,56,0,28,60,0,82,60,52,0,82,59,30,0,82,61,10,0,3,59,59,61,41,59,59,1,96,60,59,28,82,59,12,0,25,59,59,1,85,12,59,0,119,0,169,255,137,55,0,0,139,0,0,0,119,0,1,0,1,59,0,0,85,12,59,0,82,59,50,0,82,60,12,0,56,59,59,60,252,58,1,0,82,60,12,0,82,61,8,0,5,59,60,61,85,33,59,0,1,59,0,0,85,14,59,0,82,59,8,0,82,61,14,0,56,59,59,61,236,58,1,0,82,59,33,0,82,61,14,0,3,59,59,61,85,34,59,0,82,60,7,0,82,62,34,0,41,62,62,2,100,61,60,62,145,61,61,0,134,59,0,0,156,115,3,0,61,0,0,0,145,59,59,0,62,61,0,0,0,0,224,255,255,255,239,65,65,59,59,61,61,61,0,0,0,0,0,63,63,59,59,61,75,31,59,0,82,59,52,0,82,61,34,0,41,61,61,2,97,59,61,31,82,61,14,0,25,61,61,1,85,14,61,0,119,0,224,255,82,61,12,0,25,61,61,1,85,12,61,0,119,0,210,255,137,55,0,0,139,0,0,0,119,0,1,0,1,61,0,0,85,12,61,0,82,61,50,0,82,59,12,0,56,61,61,59,88,60,1,0,82,59,12,0,82,60,8,0,5,61,59,60,85,35,61,0,1,61,0,0,85,14,61,0,82,61,15,0,82,60,14,0,56,61,61,60,212,59,1,0,82,61,35,0,82,60,14,0,41,60,60,1,93,60,17,60,3,61,61,60,85,37,61,0,82,62,7,0,82,63,37,0,41,63,63,2,100,59,62,63,145,59,59,0,134,60,0,0,156,115,3,0,59,0,0,0,145,60,60,0,134,61,0,0,188,86,3,0,60,0,0,0,145,61,61,0,62,60,0,0,0,0,224,255,255,255,239,65,65,61,61,60,61,60,0,0,0,0,0,63,63,61,61,60,75,36,61,0,82,61,52,0,82,60,37,0,41,60,60,2,97,61,60,36,82,60,14,0,25,60,60,1,85,14,60,0,119,0,218,255,82,60,48,0,106,60,60,72,38,60,60,2,120,60,26,0,82,59,7,0,82,62,35,0,82,63,10,0,3,62,62,63,41,62,62,2,100,61,59,62,145,61,61,0,134,60,0,0,156,115,3,0,61,0,0,0,145,60,60,0,62,61,0,0,0,0,224,255,255,255,239,65,65,60,60,61,61,61,0,0,0,0,0,63,63,60,60,61,75,39,60,0,82,60,52,0,82,61,35,0,82,59,10,0,3,61,61,59,41,61,61,2,97,60,61,39,82,61,12,0,25,61,61,1,85,12,61,0,119,0,175,255,137,55,0,0,139,0,0,0,119,0,1,0,1,61,0,0,85,12,61,0,82,61,50,0,82,60,12,0,56,61,61,60,248,60,1,0,82,60,12,0,82,59,8,0,5,61,60,59,85,38,61,0,1,61,0,0,85,14,61,0,82,61,8,0,82,59,14,0,56,61,61,59,232,60,1,0,82,61,38,0,82,59,14,0,3,61,61,59,85,40,61,0,82,61,7,0,82,59,40,0,41,59,59,2,100,42,61,59,145,42,42,0,82,61,52,0,82,59,40,0,41,59,59,2,101,61,59,42,82,59,14,0,25,59,59,1,85,14,59,0,119,0,236,255,82,59,12,0,25,59,59,1,85,12,59,0,119,0,222,255,137,55,0,0,139,0,0,0,119,0,1,0,1,59,0,0,85,12,59,0,82,59,50,0,82,61,12,0,56,59,59,61,244,61,1,0,82,61,12,0,82,60,8,0,5,59,61,60,85,41,59,0,1,59,0,0,85,14,59,0,82,59,15,0,82,60,14,0,56,59,59,60,160,61,1,0,82,59,41,0,82,60,14,0,41,60,60,1,93,60,17,60,3,59,59,60,85,43,59,0,82,60,7,0,82,61,43,0,41,61,61,2,100,59,60,61,145,59,59,0,134,44,0,0,188,86,3,0,59,0,0,0,145,44,44,0,82,59,52,0,82,60,43,0,41,60,60,2,101,59,60,44,82,60,14,0,25,60,60,1,85,14,60,0,119,0,230,255,82,60,48,0,106,60,60,72,38,60,60,2,120,60,14,0,82,60,7,0,82,59,41,0,82,61,10,0,3,59,59,61,41,59,59,2,100,45,60,59,145,45,45,0,82,60,52,0,82,59,41,0,82,61,10,0,3,59,59,61,41,59,59,2,101,60,59,45,82,59,12,0,25,59,59,1,85,12,59,0,119,0,199,255,137,55,0,0,139,0,0,0,119,0,245,253,139,0,0,0,140,2,85,0,0,0,0,0,2,78,0,0,144,0,0,0,2,79,0,0,138,59,0,0,2,80,0,0,181,63,0,0,1,76,0,0,136,81,0,0,0,77,81,0,136,81,0,0,25,81,81,112,137,81,0,0,130,81,0,0,136,82,0,0,49,81,81,82,88,62,1,0,1,82,112,0,135,81,208,2,82,0,0,0,25,33,77,100,25,63,77,96,25,70,77,92,25,71,77,88,25,72,77,84,25,73,77,80,25,74,77,76,25,75,77,72,25,2,77,68,25,6,77,64,25,9,77,60,25,11,77,56,25,15,77,52,25,18,77,48,25,21,77,44,25,24,77,40,25,28,77,36,25,30,77,32,25,34,77,28,25,38,77,24,25,41,77,20,25,43,77,16,25,47,77,12,25,50,77,8,25,53,77,4,0,56,77,0,85,33,0,0,85,63,1,0,82,81,33,0,25,81,81,20,116,72,81,0,82,81,33,0,25,81,81,64,116,73,81,0,82,82,33,0,134,81,0,0,20,147,3,0,82,0,0,0,85,74,81,0,82,81,33,0,25,81,81,100,116,75,81,0,82,81,33,0,25,81,81,104,116,2,81,0,82,81,33,0,1,82,128,0,3,81,81,82,116,6,81,0,1,81,0,0,85,70,81,0,82,81,72,0,82,82,70,0,49,81,81,82,60,63,1,0,1,76,43,0,119,0,203,1,82,81,75,0,82,82,70,0,41,82,82,3,3,81,81,82,116,9,81,0,82,81,75,0,82,82,70,0,41,82,82,3,3,81,81,82,25,81,81,4,116,11,81,0,82,82,70,0,82,83,73,0,5,81,82,83,85,15,81,0,82,83,6,0,82,82,70,0,5,81,83,82,85,18,81,0,1,81,0,0,85,21,81,0,82,81,11,0,82,82,9,0,47,81,81,82,168,63,1,0,1,76,4,0,119,0,176,1,82,81,9,0,1,82,0,0,82,83,33,0,94,83,83,78,4,82,82,83,47,81,81,82,204,63,1,0,1,76,6,0,119,0,167,1,82,81,11,0,1,82,0,0,82,83,33,0,94,83,83,78,4,82,82,83,47,81,81,82,240,63,1,0,1,76,8,0,119,0,158,1,82,81,33,0,106,81,81,4,82,82,33,0,94,82,82,78], eb + 71680);
  HEAPU8.set([3,81,81,82,82,82,9,0,49,81,81,82,24,64,1,0,1,76,10,0,119,0,148,1,82,81,33,0,106,81,81,4,82,82,33,0,94,82,82,78,3,81,81,82,82,82,11,0,49,81,81,82,64,64,1,0,1,76,12,0,119,0,138,1,82,81,73,0,1,84,1,0,1,82,4,0,138,81,84,82,92,65,1,0,28,66,1,0,52,67,1,0,156,68,1,0,116,71,9,0,82,82,11,0,82,83,71,0,54,82,82,83,84,70,1,0,82,83,71,0,82,84,73,0,5,82,83,84,85,50,82,0,82,64,2,0,82,65,18,0,82,66,21,0,25,82,66,1,85,21,82,0,3,84,65,66,41,84,84,2,100,82,64,84,145,82,82,0,89,53,82,0,88,82,53,0,145,82,82,0,59,84,0,0,145,84,84,0,70,82,82,84,120,82,3,0,1,76,37,0,119,0,103,1,1,82,0,0,85,56,82,0,82,82,73,0,82,84,56,0,56,82,82,84,76,65,1,0,82,82,74,0,82,84,50,0,82,83,56,0,3,84,84,83,41,84,84,2,100,67,82,84,145,67,67,0,88,82,53,0,145,82,82,0,65,68,67,82,145,68,68,0,82,82,63,0,82,84,15,0,82,83,56,0,3,84,84,83,41,84,84,2,3,69,82,84,88,82,69,0,145,82,82,0,63,84,82,68,145,84,84,0,89,69,84,0,82,84,56,0,25,84,84,1,85,56,84,0,119,0,227,255,82,84,71,0,25,84,84,1,85,71,84,0,119,0,195,255,116,71,9,0,82,82,11,0,82,83,71,0,54,82,82,83,84,70,1,0,116,24,71,0,82,3,2,0,82,4,18,0,82,5,21,0,25,82,5,1,85,21,82,0,3,83,4,5,41,83,83,2,100,82,3,83,145,82,82,0,89,28,82,0,88,82,28,0,145,82,82,0,59,83,0,0,145,83,83,0,70,82,82,83,120,82,3,0,1,76,17,0,119,0,43,1,82,82,74,0,82,83,24,0,25,83,83,0,41,83,83,2,100,7,82,83,145,7,7,0,88,82,28,0,145,82,82,0,65,8,7,82,145,8,8,0,82,82,63,0,82,83,15,0,25,83,83,0,41,83,83,2,3,10,82,83,88,82,10,0,145,82,82,0,63,83,82,8,145,83,83,0,89,10,83,0,82,83,71,0,25,83,83,1,85,71,83,0,119,0,210,255,116,71,9,0,82,83,11,0,82,82,71,0,54,83,83,82,84,70,1,0,82,83,71,0,41,83,83,1,85,30,83,0,82,12,2,0,82,13,18,0,82,14,21,0,25,83,14,1,85,21,83,0,3,82,13,14,41,82,82,2,100,83,12,82,145,83,83,0,89,34,83,0,88,83,34,0,145,83,83,0,59,82,0,0,145,82,82,0,70,83,83,82,120,83,3,0,1,76,22,0,119,0,249,0,82,83,74,0,82,82,30,0,25,82,82,0,41,82,82,2,100,16,83,82,145,16,16,0,88,83,34,0,145,83,83,0,65,17,16,83,145,17,17,0,82,83,63,0,82,82,15,0,25,82,82,0,41,82,82,2,3,19,83,82,88,83,19,0,145,83,83,0,63,82,83,17,145,82,82,0,89,19,82,0,82,82,74,0,82,83,30,0,25,83,83,1,41,83,83,2,100,20,82,83,145,20,20,0,88,82,34,0,145,82,82,0,65,22,20,82,145,22,22,0,82,82,63,0,82,83,15,0,25,83,83,1,41,83,83,2,3,23,82,83,88,82,23,0,145,82,82,0,63,83,82,22,145,83,83,0,89,23,83,0,82,83,71,0,25,83,83,1,85,71,83,0,119,0,188,255,116,71,9,0,82,83,11,0,82,82,71,0,54,83,83,82,84,70,1,0,82,83,71,0,27,83,83,3,85,38,83,0,82,25,2,0,82,26,18,0,82,27,21,0,25,83,27,1,85,21,83,0,3,82,26,27,41,82,82,2,100,83,25,82,145,83,83,0,89,41,83,0,88,83,41,0,145,83,83,0,59,82,0,0,145,82,82,0,70,83,83,82,120,83,3,0,1,76,27,0,119,0,179,0,82,83,74,0,82,82,38,0,25,82,82,0,41,82,82,2,100,29,83,82,145,29,29,0,88,83,41,0,145,83,83,0,65,31,29,83,145,31,31,0,82,83,63,0,82,82,15,0,25,82,82,0,41,82,82,2,3,32,83,82,88,83,32,0,145,83,83,0,63,82,83,31,145,82,82,0,89,32,82,0,82,82,74,0,82,83,38,0,25,83,83,1,41,83,83,2,100,35,82,83,145,35,35,0,88,82,41,0,145,82,82,0,65,36,35,82,145,36,36,0,82,82,63,0,82,83,15,0,25,83,83,1,41,83,83,2,3,37,82,83,88,82,37,0,145,82,82,0,63,83,82,36,145,83,83,0,89,37,83,0,82,83,74,0,82,82,38,0,25,82,82,2,41,82,82,2,100,39,83,82,145,39,39,0,88,83,41,0,145,83,83,0,65,40,39,83,145,40,40,0,82,83,63,0,82,82,15,0,25,82,82,2,41,82,82,2,3,42,83,82,88,83,42,0,145,83,83,0,63,82,83,40,145,82,82,0,89,42,82,0,82,82,71,0,25,82,82,1,85,71,82,0,119,0,168,255,116,71,9,0,82,82,11,0,82,83,71,0,54,82,82,83,84,70,1,0,82,82,71,0,41,82,82,2,85,43,82,0,82,44,2,0,82,45,18,0,82,46,21,0,25,82,46,1,85,21,82,0,3,83,45,46,41,83,83,2,100,82,44,83,145,82,82,0,89,47,82,0,88,82,47,0,145,82,82,0,59,83,0,0,145,83,83,0,70,82,82,83,120,82,3,0,1,76,32,0,119,0,89,0,82,82,74,0,82,83,43,0,25,83,83,0,41,83,83,2,100,48,82,83,145,48,48,0,88,82,47,0,145,82,82,0,65,49,48,82,145,49,49,0,82,82,63,0,82,83,15,0,25,83,83,0,41,83,83,2,3,51,82,83,88,82,51,0,145,82,82,0,63,83,82,49,145,83,83,0,89,51,83,0,82,83,74,0,82,82,43,0,25,82,82,1,41,82,82,2,100,52,83,82,145,52,52,0,88,83,47,0,145,83,83,0,65,54,52,83,145,54,54,0,82,83,63,0,82,82,15,0,25,82,82,1,41,82,82,2,3,55,83,82,88,83,55,0,145,83,83,0,63,82,83,54,145,82,82,0,89,55,82,0,82,82,74,0,82,83,43,0,25,83,83,2,41,83,83,2,100,57,82,83,145,57,57,0,88,82,47,0,145,82,82,0,65,58,57,82,145,58,58,0,82,82,63,0,82,83,15,0,25,83,83,2,41,83,83,2,3,59,82,83,88,82,59,0,145,82,82,0,63,83,82,58,145,83,83,0,89,59,83,0,82,83,74,0,82,82,43,0,25,82,82,3,41,82,82,2,100,60,83,82,145,60,60,0,88,83,47,0,145,83,83,0,65,61,60,83,145,61,61,0,82,83,63,0,82,82,15,0,25,82,82,3,41,82,82,2,3,62,83,82,88,83,62,0,145,83,83,0,63,82,83,61,145,82,82,0,89,62,82,0,82,82,71,0,25,82,82,1,85,71,82,0,119,0,148,255,82,81,70,0,25,81,81,1,85,70,81,0,119,0,49,254,1,81,4,0,1,84,40,0,138,76,81,84,20,71,1,0,16,71,1,0,40,71,1,0,16,71,1,0,60,71,1,0,16,71,1,0,80,71,1,0,16,71,1,0,100,71,1,0,16,71,1,0,16,71,1,0,16,71,1,0,16,71,1,0,120,71,1,0,16,71,1,0,16,71,1,0,16,71,1,0,16,71,1,0,140,71,1,0,16,71,1,0,16,71,1,0,16,71,1,0,16,71,1,0,160,71,1,0,16,71,1,0,16,71,1,0,16,71,1,0,16,71,1,0,180,71,1,0,16,71,1,0,16,71,1,0,16,71,1,0,16,71,1,0,200,71,1,0,16,71,1,0,16,71,1,0,16,71,1,0,16,71,1,0,16,71,1,0,220,71,1,0,119,0,54,0,1,84,172,63,1,82,178,5,135,81,209,2,84,79,82,80,119,0,49,0,1,82,217,63,1,84,179,5,135,81,209,2,82,79,84,80,119,0,44,0,1,84,11,64,1,82,180,5,135,81,209,2,84,79,82,80,119,0,39,0,1,82,61,64,1,84,181,5,135,81,209,2,82,79,84,80,119,0,34,0,1,84,131,64,1,82,182,5,135,81,209,2,84,79,82,80,119,0,29,0,1,82,155,63,1,84,190,5,135,81,209,2,82,79,84,80,119,0,24,0,1,84,155,63,1,82,199,5,135,81,209,2,84,79,82,80,119,0,19,0,1,82,155,63,1,84,209,5,135,81,209,2,82,79,84,80,119,0,14,0,1,84,155,63,1,82,220,5,135,81,209,2,84,79,82,80,119,0,9,0,1,82,155,63,1,84,233,5,135,81,209,2,82,79,84,80,119,0,4,0,137,77,0,0,139,0,0,0,119,0,1,0,139,0,0,0,140,6,82,0,0,0,0,0,2,72,0,0,0,1,0,0,2,73,0,0,4,2,0,0,2,74,0,0,4,1,0,0,2,75,0,0,64,66,15,0,1,70,0,0,136,76,0,0,0,71,76,0,136,76,0,0,1,77,128,0,3,76,76,77,137,76,0,0,130,76,0,0,136,77,0,0,49,76,76,77,76,72,1,0,1,77,128,0,135,76,208,2,77,0,0,0,25,63,71,120,25,64,71,116,25,66,71,112,25,69,71,108,25,6,71,104,25,7,71,100,25,8,71,96,25,9,71,92,25,10,71,88,25,11,71,124,25,12,71,84,25,13,71,80,25,14,71,76,25,15,71,72,25,17,71,68,25,20,71,64,25,22,71,60,25,23,71,56,25,24,71,52,25,27,71,48,25,28,71,44,25,31,71,40,25,32,71,36,25,35,71,32,25,36,71,28,25,39,71,24,25,40,71,20,25,43,71,16,25,44,71,12,25,47,71,8,25,48,71,4,0,50,71,0,85,63,0,0,85,64,1,0,85,66,2,0,85,69,3,0,85,6,4,0,85,7,5,0,82,77,69,0,82,78,6,0,5,76,77,78,85,8,76,0,82,78,8,0,41,78,78,2,41,78,78,2,135,76,1,0,78,0,0,0,85,9,76,0,1,76,0,0,85,10,76,0,82,76,8,0,41,76,76,2,82,78,10,0,56,76,76,78,104,73,1,0,82,76,64,0,82,78,10,0,90,76,76,78,83,11,76,0,79,76,11,0,41,76,76,8,85,12,76,0,82,76,9,0,82,78,10,0,41,78,78,2,82,77,12,0,97,76,78,77,82,77,10,0,25,77,77,1,85,10,77,0,119,0,236,255,1,77,0,0,85,13,77,0,82,77,6,0,82,78,13,0,57,77,77,78,248,80,1,0,1,77,0,0,85,14,77,0,82,77,69,0,82,78,14,0,57,77,77,78,232,80,1,0,82,77,13,0,82,78,69,0,5,65,77,78,82,78,9,0,82,77,14,0,3,77,65,77,41,77,77,2,41,77,77,2,3,78,78,77,85,15,78,0,82,78,63,0,121,78,10,0,82,78,13,0,82,77,69,0,5,67,78,77,82,77,63,0,82,78,14,0,3,78,67,78,41,78,78,2,3,68,77,78,119,0,2,0,1,68,0,0,85,17,68,0,82,78,15,0,82,78,78,0,25,78,78,127,6,78,78,72,85,20,78,0,82,78,15,0,106,78,78,4,25,78,78,127,6,78,78,72,85,22,78,0,82,78,15,0,106,78,78,8,25,78,78,127,6,78,78,72,85,23,78,0,82,78,63,0,121,78,34,0,82,78,17,0,79,78,78,0,82,77,20,0,45,78,78,77,180,74,1,0,82,78,17,0,103,78,78,1,82,77,22,0,45,78,78,77,172,74,1,0,82,78,17,0,103,78,78,2,82,77,23,0,45,78,78,77,164,74,1,0,82,78,15,0,116,78,20,0,82,78,15,0,82,77,22,0,109,78,4,77,82,77,15,0,82,78,23,0,109,77,8,78,82,78,15,0,1,77,0,0,109,78,12,77,119,0,8,0,1,70,15,0,119,0,6,0,1,70,15,0,119,0,4,0,1,70,15,0,119,0,2,0,1,70,15,0,32,77,70,15,121,77,133,1,1,70,0,0,85,24,75,0,1,77,0,0,85,27,77,0,82,78,7,0,82,76,20,0,82,79,22,0,82,80,23,0,1,81,1,0,134,77,0,0,196,60,2,0,78,76,79,80,27,24,81,0,82,77,15,0,82,77,77,0,82,81,7,0,25,81,81,4,82,80,27,0,91,81,81,80,41,81,81,8,4,77,77,81,85,28,77,0,82,77,15,0,106,77,77,4,82,81,7,0,3,81,81,74,82,80,27,0,91,81,81,80,41,81,81,8,4,77,77,81,85,31,77,0,82,77,15,0,106,77,77,8,82,81,7,0,3,81,81,73,82,80,27,0,91,81,81,80,41,81,81,8,4,77,77,81,85,32,77,0,82,77,15,0,82,81,7,0,25,81,81,4,82,80,27,0,91,81,81,80,85,77,81,0,82,81,15,0,82,77,7,0,3,77,77,74,82,80,27,0,91,77,77,80,109,81,4,77,82,77,15,0,82,81,7,0,3,81,81,73,82,80,27,0,91,81,81,80,109,77,8,81,82,81,15,0,82,77,27,0,109,81,12,77,82,77,13,0,82,81,69,0,5,16,77,81,82,81,14,0,3,81,16,81,25,81,81,1,85,35,81,0,82,81,13,0,82,77,69,0,5,18,81,77,82,77,69,0,3,77,18,77,82,81,14,0,3,77,77,81,26,77,77,1,85,36,77,0,82,77,13,0,82,81,69,0,5,19,77,81,82,81,69,0,3,81,19,81,82,77,14,0,3,81,81,77,85,39,81,0,82,81,13,0,82,77,69,0,5,21,81,77,82,77,69,0,3,77,21,77,82,81,14,0,3,77,77,81,25,77,77,1,85,40,77,0,82,77,35,0,82,81,8,0,47,77,77,81,108,77,1,0,82,77,9,0,82,81,35,0,41,81,81,2,41,81,81,2,3,77,77,81,85,43,77,0,82,77,28,0,27,77,77,7,28,77,77,16,1,81,0,0,82,80,43,0,82,80,80,0,4,81,81,80,47,77,77,81,160,76,1,0,1,77,0,0,82,81,43,0,82,81,81,0,4,26,77,81,119,0,4,0,82,81,28,0,27,81,81,7,28,26,81,16,82,25,43,0,82,81,25,0,3,81,81,26,85,25,81,0,82,81,31,0,27,81,81,7,28,81,81,16,1,77,0,0,82,80,43,0,106,80,80,4,4,77,77,80,47,81,81,77,244,76,1,0,1,81,0,0,82,77,43,0,106,77,77,4,4,30,81,77,119,0,4,0,82,77,31,0,27,77,77,7,28,30,77,16,82,77,43,0,25,29,77,4,82,77,29,0,3,77,77,30,85,29,77,0,82,77,32,0,27,77,77,7,28,77,77,16,1,81,0,0,82,80,43,0,106,80,80,8,4,81,81,80,47,77,77,81,76,77,1,0,1,77,0,0,82,81,43,0,106,81,81,8,4,34,77,81,119,0,4,0,82,81,32,0,27,81,81,7,28,34,81,16,82,81,43,0,25,33,81,8,82,81,33,0,3,81,81,34,85,33,81,0,82,81,36,0,82,77,8,0,47,81,81,77,152,78,1,0,82,81,9,0,82,77,36,0,41,77,77,2,41,77,77,2,3,81,81,77,85,44,81,0,82,81,28,0,27,81,81,3,28,81,81,16,1,77,0,0,82,80,44,0,82,80,80,0,4,77,77,80,47,81,81,77,204,77,1,0,1,81,0,0,82,77,44,0,82,77,77,0,4,38,81,77,119,0,4,0,82,77,28,0,27,77,77,3,28,38,77,16,82,37,44,0,82,77,37,0,3,77,77,38,85,37,77,0,82,77,31,0,27,77,77,3,28,77,77,16,1,81,0,0,82,80,44,0,106,80,80,4,4,81,81,80,47,77,77,81,32,78,1,0,1,77,0,0,82,81,44,0,106,81,81,4,4,42,77,81,119,0,4,0,82,81,31,0,27,81,81,3,28,42,81,16,82,81,44,0,25,41,81,4,82,81,41,0,3,81,81,42,85,41,81,0,82,81,32,0,27,81,81,3,28,81,81,16,1,77,0,0,82,80,44,0,106,80,80,8,4,77,77,80,47,81,81,77,120,78,1,0,1,81,0,0,82,77,44,0,106,77,77,8,4,46,81,77,119,0,4,0,82,77,32,0,27,77,77,3,28,46,77,16,82,77,44,0,25,45,77,8,82,77,45,0,3,77,77,46,85,45,77,0,82,77,39,0,82,81,8,0,47,77,77,81,196,79,1,0,82,77,9,0,82,81,39,0,41,81,81,2,41,81,81,2,3,77,77,81,85,47,77,0,82,77,28,0,27,77,77,5,28,77,77,16,1,81,0,0,82,80,47,0,82,80,80,0,4,81,81,80,47,77,77,81,248,78,1,0,1,77,0,0,82,81,47,0,82,81,81,0,4,51,77,81,119,0,4,0,82,81,28,0,27,81,81,5,28,51,81,16,82,49,47,0,82,81,49,0,3,81,81,51,85,49,81,0,82,81,31,0,27,81,81,5,28,81,81,16,1,77,0,0,82,80,47,0,106,80,80,4,4,77,77,80,47,81,81,77,76,79,1,0,1,81,0,0,82,77,47,0,106,77,77,4,4,53,81,77,119,0,4,0,82,77,31,0,27,77,77,5,28,53,77,16,82,77,47,0,25,52,77,4,82,77,52,0,3,77,77,53,85,52,77,0,82,77,32,0,27,77,77,5,28,77,77,16,1,81,0,0,82,80,47,0,106,80,80,8,4,81,81,80,47,77,77,81,164,79,1,0,1,77,0,0,82,81,47,0,106,81,81,8,4,55,77,81,119,0,4,0,82,81,32,0,27,81,81,5,28,55,81,16,82,81,47,0,25,54,81,8,82,81,54,0,3,81,81,55,85,54,81,0,82,81,40,0,82,77,8,0,47,81,81,77,216,80,1,0,82,81,9,0,82,77,40,0,41,77,77,2,41,77,77,2,3,81,81,77,85,48,81,0,82,81,28,0,28,81,81,16,1,77,0,0,82,80,48,0,82,80,80,0,4,77,77,80,47,81,81,77,32,80,1,0,1,81,0,0,82,77,48,0,82,77,77,0,4,57,81,77,119,0,3,0,82,77,28,0,28,57,77,16,82,56,48,0,82,77,56,0,3,77,77,57,85,56,77,0,82,77,31,0,28,77,77,16,1,81,0,0,82,80,48,0,106,80,80,4,4,81,81,80,47,77,77,81,108,80,1,0,1,77,0,0,82,81,48,0,106,81,81,4,4,59,77,81,119,0,3,0,82,81,31,0,28,59,81,16,82,81,48,0,25,58,81,4,82,81,58,0,3,81,81,59,85,58,81,0,82,81,32,0,28,81,81,16,1,77,0,0,82,80,48,0,106,80,80,8,4,77,77,80,47,81,81,77,188,80,1,0,1,81,0,0,82,77,48,0,106,77,77,8,4,61,81,77,119,0,3,0,82,77,32,0,28,61,77,16,82,77,48,0,25,60,77,8,82,77,60,0,3,77,77,61,85,60,77,0,82,77,14,0,25,77,77,1,85,14,77,0,119,0,41,254,82,77,13,0,25,77,77,1,85,13,77,0,119,0,31,254,1,77,0,0,85,50,77,0,82,62,9,0,82,77,8,0,41,77,77,2,82,81,50,0,56,77,77,81,64,81,1,0,82,77,66,0,82,81,50,0,82,80,50,0,41,80,80,2,94,80,62,80,95,77,81,80,82,80,50,0,25,80,80,1,85,50,80,0,119,0,241,255,135,80,214,2,62,0,0,0,137,71,0,0,139,0,0,0,140,3,125,0,0,0,0,0,136,120,0,0,0,117,120,0,136,120,0,0,25,120,120,64,137,120,0,0,130,120,0,0,136,121,0,0,49,120,120,121,136,81,1,0,1,121,64,0,135,120,208,2,121,0,0,0,0,68,117,0,0,116,68,0,25,119,116,64,1,120,0,0,85,116,120,0,25,116,116,4,54,120,116,119,148,81,1,0,88,94,1,0,145,94,94,0,88,120,2,0,145,120,120,0,65,102,94,120,145,102,102,0,112,108,1,16,145,108,108,0,112,121,2,4,145,121,121,0,65,120,108,121,145,120,120,0,63,8,102,120,145,8,8,0,112,15,1,32,145,15,15,0,112,121,2,8,145,121,121,0,65,120,15,121,145,120,120,0,63,28,8,120,145,28,28,0,112,35,1,48,145,35,35,0,112,122,2,12,145,122,122,0,65,121,35,122,145,121,121,0,63,120,28,121,145,120,120,0,89,68,120,0,88,51,1,0,145,51,51,0,112,120,2,16,145,120,120,0,65,61,51,120,145,61,61,0,112,69,1,16,145,69,69,0,112,121,2,20,145,121,121,0,65,120,69,121,145,120,120,0,63,81,61,120,145,81,81,0,112,88,1,32,145,88,88,0,112,121,2,24,145,121,121,0,65,120,88,121,145,120,120,0,63,95,81,120,145,95,95,0,112,96,1,48,145,96,96,0,112,123,2,28,145,123,123,0,65,122,96,123,145,122,122,0,63,121,95,122,145,121,121,0,113,68,16,121,88,97,1,0,145,97,97,0,112,121,2,32,145,121,121,0,65,98,97,121,145,98,98,0,112,99,1,16,145,99,99,0,112,120,2,36,145,120,120,0,65,121,99,120,145,121,121,0,63,100,98,121,145,100,100,0,112,101,1,32,145,101,101,0,112,120,2,40,145,120,120,0,65,121,101,120,145,121,121,0,63,103,100,121,145,103,103,0,112,104,1,48,145,104,104,0,112,123,2,44,145,123,123,0,65,122,104,123,145,122,122,0,63,120,103,122,145,120,120,0,113,68,32,120,88,105,1,0,145,105,105,0,112,120,2,48,145,120,120,0,65,106,105,120,145,106,106,0,112,107,1,16,145,107,107,0,112,121,2,52,145,121,121,0,65,120,107,121,145,120,120,0,63,109,106,120,145,109,109,0,112,110,1,32,145,110,110,0,112,121,2,56,145,121,121,0,65,120,110,121,145,120,120,0,63,111,109,120,145,111,111,0,112,112,1,48,145,112,112,0,112,123,2,60,145,123,123,0,65,122,112,123,145,122,122,0,63,121,111,122,145,121,121,0,113,68,48,121,112,113,1,4,145,113,113,0,88,121,2,0,145,121,121,0,65,114,113,121,145,114,114,0,112,115,1,20,145,115,115,0,112,120,2,4,145,120,120,0,65,121,115,120,145,121,121,0,63,3,114,121,145,3,3,0,112,4,1,36,145,4,4,0,112,120,2,8,145,120,120,0,65,121,4,120,145,121,121,0,63,5,3,121,145,5,5,0,112,6,1,52,145,6,6,0,112,123,2,12,145,123,123,0,65,122,6,123,145,122,122,0,63,120,5,122,145,120,120,0,113,68,4,120,112,7,1,4,145,7,7,0,112,120,2,16,145,120,120,0,65,9,7,120,145,9,9,0,112,10,1,20,145,10,10,0,112,121,2,20,145,121,121,0,65,120,10,121,145,120,120,0,63,11,9,120,145,11,11,0,112,12,1,36,145,12,12,0,112,121,2,24,145,121,121,0,65,120,12,121,145,120,120,0,63,13,11,120,145,13,13,0,112,14,1,52,145,14,14,0,112,123,2,28,145,123,123,0,65,122,14,123,145,122,122,0,63,121,13,122,145,121,121,0,113,68,20,121,112,16,1,4,145,16,16,0,112,121,2,32,145,121,121,0,65,17,16,121,145,17,17,0,112,18,1,20,145,18,18,0,112,120,2,36,145,120,120,0,65,121,18,120,145,121,121,0,63,19,17,121,145,19,19,0,112,20,1,36,145,20,20,0,112,120,2,40,145,120,120,0,65,121,20,120,145,121,121,0,63,21,19,121,145,21,21,0,112,22,1,52,145,22,22,0,112,123,2,44,145,123,123,0,65,122,22,123,145,122,122,0,63,120,21,122,145,120,120,0,113,68,36,120,112,23,1,4,145,23,23,0,112,120,2,48,145,120,120,0,65,24,23,120,145,24,24,0,112,25,1,20,145,25,25,0,112,121,2,52,145,121,121,0,65,120,25,121,145,120,120,0,63,26,24,120,145,26,26,0,112,27,1,36,145,27,27,0,112,121,2,56,145,121,121,0,65,120,27,121,145,120,120,0,63,29,26,120,145,29,29,0,112,30,1,52,145,30,30,0,112,123,2,60,145,123,123,0,65,122,30,123,145,122,122,0,63,121,29,122,145,121,121,0,113,68,52,121,112,31,1,8,145,31,31,0,88,121,2,0,145,121,121,0,65,32,31,121,145,32,32,0,112,33,1,24,145,33,33,0,112,120,2,4,145,120,120,0,65,121,33,120,145,121,121,0,63,34,32,121,145,34,34,0,112,36,1,40,145,36,36,0,112,120,2,8,145,120,120,0,65,121,36,120,145,121,121,0,63,37,34,121,145,37,37,0,112,38,1,56,145,38,38,0,112,123,2,12,145,123,123,0,65,122,38,123,145,122,122,0,63,120,37,122,145,120,120,0,113,68,8,120,112,39,1,8,145,39,39,0,112,120,2,16,145,120,120,0,65,40,39,120,145,40,40,0,112,41,1,24,145,41,41,0,112,121,2,20,145,121,121,0,65,120,41,121,145,120,120,0,63,42,40,120,145,42,42,0,112,43,1,40,145,43,43,0,112,121,2,24,145,121,121,0,65,120,43,121,145,120,120,0,63,44,42,120,145,44,44,0,112,45,1,56,145,45,45,0,112,123,2,28,145,123,123,0,65,122,45,123,145,122,122,0,63,121,44,122,145,121,121,0,113,68,24,121,112,46,1,8,145,46,46,0,112,121,2,32,145,121,121,0,65,47,46,121,145,47,47,0,112,48,1,24,145,48,48,0,112,120,2,36,145,120,120,0,65,121,48,120,145,121,121,0,63,49,47,121,145,49,49,0,112,50,1,40,145,50,50,0,112,120,2,40,145,120,120,0,65,121,50,120,145,121,121,0,63,52,49,121,145,52,52,0,112,53,1,56,145,53,53,0,112,123,2,44,145,123,123,0,65,122,53,123,145,122,122,0,63,120,52,122,145,120,120,0,113,68,40,120,112,54,1,8,145,54,54,0,112,120,2,48,145,120,120,0,65,55,54,120,145,55,55,0,112,56,1,24,145,56,56,0,112,121,2,52,145,121,121,0,65,120,56,121,145,120,120,0,63,57,55,120,145,57,57,0,112,58,1,40,145,58,58,0,112,121,2,56,145,121,121,0,65,120,58,121,145,120,120,0,63,59,57,120,145,59,59,0,112,60,1,56,145,60,60,0,112,123,2,60,145,123,123,0,65,122,60,123,145,122,122,0,63,121,59,122,145,121,121,0,113,68,56,121,112,62,1,12,145,62,62,0,88,121,2,0,145,121,121,0,65,63,62,121,145,63,63,0,112,64,1,28,145,64,64,0,112,120,2,4,145,120,120,0,65,121,64,120,145,121,121,0,63,65,63,121,145,65,65,0,112,66,1,44,145,66,66,0,112,120,2,8,145,120,120,0,65,121,66,120,145,121,121,0,63,67,65,121,145,67,67,0,112,70,1,60,145,70,70,0,112,123,2,12,145,123,123,0,65,122,70,123,145,122,122,0,63,120,67,122,145,120,120,0,113,68,12,120,112,71,1,12,145,71,71,0,112,120,2,16,145,120,120,0,65,72,71,120,145,72,72,0,112,73,1,28,145,73,73,0,112,121,2,20,145,121,121,0,65,120,73,121,145,120,120,0,63,74,72,120,145,74,74,0,112,75,1,44,145,75,75,0,112,121,2,24,145,121,121,0,65,120,75,121,145,120,120,0,63,76,74,120,145,76,76,0,112,77,1,60,145,77,77,0,112,123,2,28,145,123,123,0,65,122,77,123,145,122,122,0,63,121,76,122,145,121,121,0,113,68,28,121,112,78,1,12,145,78,78,0,112,121,2,32,145,121,121,0,65,79,78,121,145,79,79,0,112,80,1,28,145,80,80,0,112,120,2,36,145,120,120,0,65,121,80,120,145,121,121,0,63,82,79,121,145,82,82,0,112,83,1,44,145,83,83,0,112,120,2,40,145,120,120,0,65,121,83,120,145,121,121,0,63,84,82,121,145,84,84,0,112,85,1,60,145,85,85,0,112,123,2,44,145,123,123,0,65,122,85,123,145,122,122,0,63,120,84,122,145,120,120,0,113,68,44,120,112,86,1,12,145,86,86,0,112,120,2,48,145,120,120,0,65,87,86,120,145,87,87,0,112,89,1,28,145,89,89,0,112,121,2,52,145,121,121,0,65,120,89,121,145,120,120,0,63,90,87,120,145,90,90,0,112,91,1,44,145,91,91,0,112,121,2,56,145,121,121,0,65,120,91,121,145,120,120,0,63,92,90,120,145,92,92,0,112,93,1,60,145,93,93,0,112,123,2,60,145,123,123,0,65,122,93,123,145,122,122,0,63,121,92,122,145,121,121,0,113,68,60,121,0,116,0,0,0,118,68,0,25,119,116,64,116,116,118,0,25,116,116,4,25,118,118,4,54,121,116,119,116,89,1,0,137,117,0,0,139,0,0,0,140,6,69,0,0,0,0,0,2,60,0,0,128,0,0,0,2,61,0,0,255,0,0,0,2,62,0,0,117,55,0,0,1,58,0,0,136,63,0,0,0,59,63,0,136,63,0,0,1,64,112,4,3,63,63,64,137,63,0,0,130,63,0,0,136,64,0,0,49,63,63,64,232,89,1,0,1,64,112,4,135,63,208,2,64,0,0,0,1,63,84,4,3,51,59,63,1,63,80,4,3,53,59,63,1,63,76,4,3,54,59,63,1,63,72,4,3,57,59,63,1,63,68,4,3,6,59,63,1,63,64,4,3,8,59,63,0,10,59,0,1,63,56,4,3,12,59,63,1,63,52,4,3,15,59,63,1,63,48,4,3,16,59,63,1,63,44,4,3,17,59,63,1,63,40,4,3,18,59,63,1,63,36,4,3,20,59,63,1,63,32,4,3,22,59,63,1,63,97,4,3,24,59,63,1,63,96,4,3,27,59,63,1,63,28,4,3,28,59,63,1,63,24,4,3,30,59,63,1,63,20,4,3,34,59,63,1,63,16,4,3,35,59,63,1,63,12,4,3,37,59,63,1,63,8,4,3,41,59,63,1,63,4,4,3,43,59,63,1,63,92,4,3,45,59,63,1,63,88,4,3,47,59,63,1,63,0,4,3,48,59,63,85,53,0,0,85,54,1,0,85,57,2,0,85,6,3,0,85,8,4,0,1,63,60,4,97,59,63,5,1,63,0,0,85,15,63,0,82,64,53,0,134,63,0,0,48,253,2,0,64,10,0,0,85,43,63,0,82,64,43,0,1,65,231,54,134,63,0,0,4,118,3,0,64,65,0,0,121,63,20,0,82,65,43,0,1,64,242,54,134,63,0,0,4,118,3,0,65,64,0,0,121,63,14,0,1,64,249,54,134,63,0,0,176,165,3,0,64,0,0,0,33,49,63,0,1,64,0,0,1,65,0,0,125,63,49,64,65,0,0,0,85,51,63,0,82,46,51,0,137,59,0,0,139,46,0,0,82,65,53,0,134,63,0,0,48,253,2,0,65,10,0,0,85,12,63,0,82,63,12,0,78,63,63,0,120,63,2,0,119,0,10,0,82,65,12,0,1,64,1,55,134,63,0,0,4,118,3,0,65,64,0,0,120,63,242,255,1,63,1,0,85,15,63,0,119,0,239,255,82,63,15,0,120,63,14,0,1,64,24,55,134,63,0,0,176,165,3,0,64,0,0,0,33,50,63,0,1,64,0,0,1,65,0,0,125,63,50,64,65,0,0,0,85,51,63,0,82,46,51,0,137,59,0,0,139,46,0,0,82,65,53,0,134,63,0,0,48,253,2,0,65,10,0,0,85,12,63,0,82,65,12,0,1,64,43,55,1,66,3,0,134,63,0,0,32,28,3,0,65,64,66,0,121,63,14,0,1,66,47,55,134,63,0,0,176,165,3,0,66,0,0,0,33,52,63,0,1,66,0,0,1,64,0,0,125,63,52,66,64,0,0,0,85,51,63,0,82,46,51,0,137,59,0,0,139,46,0,0,82,63,12,0,25,63,63,3,85,12,63,0,82,64,12,0,1,66,10,0,134,63,0,0,64,173,3,0,64,12,66,0,85,17,63,0,82,55,12,0,82,63,12,0,78,63,63,0,33,63,63,32,120,63,4,0,25,63,55,1,85,12,63,0,119,0,249,255,1,66,71,55,1,64,3,0,134,63,0,0,32,28,3,0,55,66,64,0,121,63,14,0,1,64,47,55,134,63,0,0,176,165,3,0,64,0,0,0,33,56,63,0,1,64,0,0,1,66,0,0,125,63,56,64,66,0,0,0,85,51,63,0,82,46,51,0,137,59,0,0,139,46,0,0,82,63,12,0,25,63,63,3,85,12,63,0,82,66,12,0,1,64,0,0,1,65,10,0,134,63,0,0,64,173,3,0,66,64,65,0,85,16,63,0,82,63,54,0,116,63,16,0,82,63,57,0,116,63,17,0,82,63,6,0,121,63,4,0,82,63,6,0,1,65,3,0,85,63,65,0,82,65,8,0,120,65,3,0,1,65,3,0,85,8,65,0,82,63,16,0,82,64,17,0,82,66,8,0,1,67,4,0,1,68,0,0,134,65,0,0,108,227,2,0,63,64,66,67,68,0,0,0,120,65,14,0,1,68,75,55,134,65,0,0,176,165,3,0,68,0,0,0,33,7,65,0,1,68,0,0,1,67,0,0,125,65,7,68,67,0,0,0,85,51,65,0,82,46,51,0,137,59,0,0,139,46,0,0,82,67,16,0,82,68,17,0,82,66,8,0,1,64,4,0,1,63,0,0,134,65,0,0,192,10,3,0,67,68,66,64,63,0,0,0,85,20,65,0,82,65,20,0,120,65,14,0,1,63,203,54,134,65,0,0,176,165,3,0,63,0,0,0,33,9,65,0,1,63,0,0,1,64,0,0,125,65,9,63,64,0,0,0,85,51,65,0,82,46,51,0,137,59,0,0,139,46,0,0,82,65,16,0,34,65,65,8,2,64,0,0,0,128,0,0,82,63,16,0,17,64,64,63,20,65,65,64,121,65,5,0,1,65,0,0,85,30,65,0,1,58,28,0,119,0,55,1,1,65,0,0,85,18,65,0,1,65,0,0,85,30,65,0,82,65,17,0,82,64,30,0,49,65,65,64,60,94,1,0,1,58,64,0,119,0,180,0,82,64,53,0,134,65,0,0,204,19,3,0,64,0,0,0,19,65,65,61,85,35,65,0,82,64,53,0,134,65,0,0,204,19,3,0,64,0,0,0,19,65,65,61,85,37,65,0,82,64,53,0,134,65,0,0,204,19,3,0,64,0,0,0,19,65,65,61,85,22,65,0,82,65,35,0,33,65,65,2,82,64,37,0,33,64,64,2,20,65,65,64,121,65,3,0,1,58,37,0,119,0,154,0,82,65,22,0,19,65,65,60,121,65,3,0,1,58,37,0,119,0,149,0,82,65,22,0,41,65,65,8,85,22,65,0,82,64,53,0,134,65,0,0,204,19,3,0,64,0,0,0,19,65,65,61,0,19,65,0,82,65,22,0,20,65,65,19,85,22,65,0,82,65,22,0,82,64,16,0,46,65,65,64,0,95,1,0,1,58,39,0,119,0,131,0,82,65,18,0,120,65,12,0,82,64,16,0,1,63,4,0,1,66,0,0,134,65,0,0,64,89,3,0,64,63,66,0,85,18,65,0,82,65,18,0,120,65,3,0,1,58,42,0,119,0,118,0,1,65,0,0,85,34,65,0,82,65,34,0,34,25,65,4,1,65,0,0,85,28,65,0,120,25,2,0,119,0,80,0,82,65,16,0,82,66,28,0,4,26,65,66,85,48,26,0,36,66,26,0,120,66,70,0,82,65,53,0,134,66,0,0,204,19,3,0,65,0,0,0,83,24,66,0,79,66,24,0,47,66,60,66,16,96,1,0,82,65,53,0,134,66,0,0,204,19,3,0,65,0,0,0,83,27,66,0,79,66,24,0,4,66,66,60,83,24,66,0,82,66,48,0,79,65,24,0,47,66,66,65,196,95,1,0,1,58,49,0,119,0,82,0,1,66,0,0,85,41,66,0,79,66,24,0,82,65,41,0,56,66,66,65,84,95,1,0,78,31,27,0,82,32,18,0,82,33,28,0,25,66,33,1,85,28,66,0,41,66,33,2,82,65,34,0,3,66,66,65,95,32,66,31,82,66,41,0,25,66,66,1,85,41,66,0,119,0,240,255,82,66,48,0,79,65,24,0,47,66,66,65,40,96,1,0,1,58,54,0,119,0,57,0,1,66,0,0,85,41,66,0,79,66,24,0,82,65,41,0,56,66,66,65,84,95,1,0,82,66,53,0,134,38,0,0,204,19,3,0,66,0,0,0,82,39,18,0,82,40,28,0,25,66,40,1,85,28,66,0,41,66,40,2,82,65,34,0,3,66,66,65,95,39,66,38,82,66,41,0,25,66,66,1,85,41,66,0,119,0,237,255,82,66,34,0,25,66,66,1,85,34,66,0,119,0,172,255,82,66,16,0,82,65,28,0,56,66,66,65,248,96,1,0,82,66,30,0,82,65,16,0,5,42,66,65,82,65,20,0,82,63,28,0,3,63,42,63,82,64,8,0,5,66,63,64,41,66,66,2,3,44,65,66,82,65,18,0,82,64,28,0,41,64,64,2,3,65,65,64,82,64,8,0,134,66,0,0,236,125,2,0,44,65,64,0,82,66,28,0,25,66,66,1,85,28,66,0,119,0,231,255,82,66,30,0,25,66,66,1,85,30,66,0,119,0,72,255,32,66,58,37,121,66,26,0,82,66,35,0,83,47,66,0,82,64,37,0,107,47,1,64,82,66,22,0,107,47,2,66,82,65,53,0,134,64,0,0,204,19,3,0,65,0,0,0,107,47,3,64,82,66,20,0,82,65,8,0,134,64,0,0,236,125,2,0,66,47,65,0,1,64,1,0,85,28,64,0,1,64,0,0,85,30,64,0,82,65,18,0,135,64,214,2,65,0,0,0,1,58,31,0,119,0,95,0,32,64,58,39,121,64,21,0,82,65,20,0,135,64,214,2,65,0,0,0,82,65,18,0,135,64,214,2,65,0,0,0,1,65,85,55,134,64,0,0,176,165,3,0,65,0,0,0,33,21,64,0,1,65,0,0,1,66,0,0,125,64,21,65,66,0,0,0,85,51,64,0,82,46,51,0,137,59,0,0,139,46,0,0,119,0,73,0,32,64,58,42,121,64,18,0,82,66,20,0,135,64,214,2,66,0,0,0,1,66,203,54,134,64,0,0,176,165,3,0,66,0,0,0,33,23,64,0,1,66,0,0,1,65,0,0,125,64,23,66,65,0,0,0,85,51,64,0,82,46,51,0,137,59,0,0,139,46,0,0,119,0,54,0,32,64,58,49,121,64,20,0,82,65,20,0,135,64,214,2,65,0,0,0,82,65,18,0,135,64,214,2,65,0,0,0,134,64,0,0,176,165,3,0,62,0,0,0,33,29,64,0,1,65,0,0,1,66,0,0,125,64,29,65,66,0,0,0,85,51,64,0,82,46,51,0,137,59,0,0,139,46,0,0,119,0,33,0,32,64,58,54,121,64,20,0,82,66,20,0,135,64,214,2,66,0,0,0,82,66,18,0,135,64,214,2,66,0,0,0,134,64,0,0,176,165,3,0,62,0,0,0,33,36,64,0,1,66,0,0,1,65,0,0,125,64,36,66,65,0,0,0,85,51,64,0,82,46,51,0,137,59,0,0,139,46,0,0,119,0,12,0,32,64,58,64,121,64,10,0,82,64,18,0,120,64,3,0,1,58,66,0,119,0,6,0,82,65,18,0,135,64,214,2,65,0,0,0,1,58,66,0,119,0,1,0,32,64,58,28,121,64,11,0,1,58,0,0,82,64,17,0,82,65,30,0,49,64,64,65,16,99,1,0,1,58,66,0,119,0,248,255,1,64,0,0,85,28,64,0,119,0,35,0,32,64,58,31,121,64,28,0,1,58,0,0,82,65,53,0,1,66,4,0,134,64,0,0,156,172,2,0,65,45,66,0,82,64,30,0,82,66,16,0,5,11,64,66,82,66,20,0,82,65,8,0,5,64,11,65,41,64,64,2,3,13,66,64,82,66,28,0,82,65,8,0,5,64,66,65,41,64,64,2,3,14,13,64,82,65,8,0,134,64,0,0,236,125,2,0,14,45,65,0,82,64,28,0,25,64,64,1,85,28,64,0,119,0,6,0,32,64,58,66,121,64,4,0,1,58,0,0,116,51,20,0,119,0,12,0,82,64,28,0,82,65,16,0,47,64,64,65,188,99,1,0,1,58,31,0,119,0,205,255,82,64,30,0,25,64,64,1,85,30,64,0,1,58,28,0,119,0,200,255,82,46,51,0,137,59,0,0,139,46,0,0,140,13,86,0,0,0,0,0,2,72,0,0,207,59,0,0,2,73,0,0,138,59,0,0,2,74,0,0,180,0,0,0,2,75,0,0,184,0,0,0,2,76,0,0,196,60,0,0,2,77,0,0,204,0,0,0,2,78,0,0,212,0,0,0,2,79,0,0,24,9,0,0,1,50,0,0,136,80,0,0,0,51,80,0,136,80,0,0,25,80,80,80,137,80,0,0,130,80,0,0,136,81,0,0,49,80,80,81,88,100,1,0,1,81,80,0,135,80,208,2,81,0,0,0,25,13,51,64,25,14,51,60,25,15,51,56,25,16,51,52,25,18,51,48,25,20,51,44,25,22,51,40,25,24,51,36,25,26,51,32,25,28,51,28,25,30,51,24,25,31,51,20,25,32,51,16,25,33,51,12,25,34,51,8,25,37,51,4,0,38,51,0,85,14,0,0,85,15,1,0,85,16,2,0,85,18,3,0,85,20,4,0,85,22,5,0,85,24,6,0,85,26,7,0,85,28,8,0,85,30,9,0,85,31,10,0,85,32,11,0,85,33,12,0,82,81,14,0,134,80,0,0,64,240,1,0,81,0,0,0,85,34,80,0,82,80,16,0,121,80,3,0,82,47,16,0,119,0,9,0,82,52,14,0,106,80,52,64,106,81,52,4,5,46,80,81,1,81,114,59,82,80,26,0,91,81,81,80,5,47,46,81,85,37,47,0,82,81,20,0,121,81,3,0,82,49,20,0,119,0,9,0,82,53,14,0,106,81,53,64,106,80,53,20,5,48,81,80,1,80,114,59,82,81,26,0,91,80,80,81,5,49,48,80,85,38,49,0,82,80,14,0,106,80,80,64,34,80,80,0,121,80,5,0,1,81,118,59,1,82,6,9,135,80,209,2,81,73,82,72,1,80,64,0,82,82,14,0,106,82,82,64,47,80,80,82,144,101,1,0,1,82,231,59,1,81,7,9,135,80,209,2,82,73,81,72,1,80,0,0,82,81,14,0,106,81,81,64,49,80,80,81,92,107,1,0,82,80,14,0,106,80,80,64,36,80,80,64,121,80,107,1,1,80,6,0,82,81,14,0,106,81,81,80,50,80,80,81,216,101,1,0,1,81,252,59,1,82,12,9,135,80,209,2,81,73,82,72,1,80,6,0,82,82,14,0,106,82,82,84,50,80,80,82,252,101,1,0,1,82,97,60,1,81,13,9,135,80,209,2,82,73,81,72,1,80,6,0,82,81,14,0,106,81,81,80,50,80,80,81,36,102,1,0,1,80,0,0,85,13,80,0,82,45,13,0,137,51,0,0,139,45,0,0,1,80,6,0,82,81,14,0,106,81,81,84,50,80,80,81,76,102,1,0,1,80,0,0,85,13,80,0,82,45,13,0,137,51,0,0,139,45,0,0,82,80,22,0,34,80,80,0,121,80,4,0,82,80,24,0,39,80,80,3,85,24,80,0,82,80,24,0,38,80,80,2,121,80,6,0,82,80,24,0,38,80,80,1,120,80,4,0,1,50,26,0,119,0,2,0,1,50,26,0,32,80,50,26,121,80,13,0,82,80,22,0,34,80,80,0,121,80,3,0,135,80,209,2,76,73,79,72,82,80,22,0,82,81,14,0,106,81,81,64,54,80,80,81,192,102,1,0,135,80,209,2,76,73,79,72,82,80,14,0,106,80,80,64,82,81,22,0,49,80,80,81,232,102,1,0,1,80,0,0,85,13,80,0,82,45,13,0,137,51,0,0,139,45,0,0,82,80,32,0,120,80,5,0,1,81,249,60,1,82,29,9,135,80,209,2,81,73,82,72,82,80,32,0,120,80,6,0,1,80,0,0,85,13,80,0,82,45,13,0,137,51,0,0,139,45,0,0,82,80,33,0,82,82,34,0,48,80,80,82,60,103,1,0,1,82,1,61,1,81,34,9,135,80,209,2,82,73,81,72,82,80,33,0,82,81,34,0,48,80,80,81,96,103,1,0,1,80,0,0,85,13,80,0,82,45,13,0,137,51,0,0,139,45,0,0,82,81,32,0,1,82,0,0,82,83,33,0,135,80,213,2,81,82,83,0,82,80,14,0,116,80,15,0,82,80,14,0,82,83,37,0,109,80,12,83,82,83,14,0,82,80,18,0,109,83,16,80,82,80,14,0,82,83,38,0,109,80,28,83,82,83,14,0,82,80,22,0,109,83,68,80,82,80,14,0,82,83,24,0,109,80,72,83,82,83,14,0,82,80,26,0,109,83,76,80,82,80,14,0,82,83,28,0,109,80,88,83,82,83,14,0,82,80,30,0,109,83,92,80,82,80,14,0,82,83,31,0,109,80,96,83,82,54,14,0,106,83,54,80,112,80,54,56,145,80,80,0,134,17,0,0,164,22,3,0], eb + 81920);
  HEAPU8.set([83,80,0,0,82,80,14,0,1,83,128,0,97,80,83,17,82,55,14,0,106,83,55,84,112,80,55,60,145,80,80,0,134,19,0,0,164,22,3,0,83,80,0,0,82,80,14,0,1,83,132,0,97,80,83,19,82,56,14,0,106,83,56,80,112,80,56,56,145,80,80,0,134,21,0,0,88,248,2,0,83,80,0,0,82,80,14,0,1,83,136,0,97,80,83,21,82,57,14,0,106,83,57,84,112,80,57,60,145,80,80,0,134,23,0,0,88,248,2,0,83,80,0,0,82,80,14,0,1,83,140,0,97,80,83,23,82,58,14,0,106,83,58,80,112,80,58,56,145,80,80,0,134,25,0,0,252,143,3,0,83,80,0,0,82,80,14,0,1,83,144,0,97,80,83,25,82,59,14,0,106,83,59,84,112,80,59,60,145,80,80,0,134,27,0,0,252,143,3,0,83,80,0,0,82,80,14,0,1,83,148,0,97,80,83,27,82,60,14,0,106,80,60,20,106,82,60,64,5,83,80,82,41,83,83,2,0,29,83,0,82,83,14,0,1,82,160,0,97,83,82,29,82,61,14,0,106,83,61,4,1,80,144,0,94,80,61,80,41,80,80,1,3,83,83,80,109,61,116,83,82,83,14,0,82,82,32,0,109,83,100,82,82,62,14,0,106,83,62,100,1,80,188,0,94,80,62,80,3,83,83,80,109,62,104,83,82,63,14,0,106,82,63,104,1,80,192,0,94,80,63,80,3,82,82,80,109,63,108,82,82,64,14,0,106,83,64,108,1,80,196,0,94,80,64,80,3,83,83,80,109,64,112,83,82,65,14,0,106,82,65,112,1,80,200,0,94,80,65,80,3,82,82,80,109,65,120,82,82,83,14,0,134,82,0,0,108,157,3,0,83,0,0,0,33,35,82,0,82,36,14,0,121,35,29,0,1,83,0,0,109,36,124,83,82,68,14,0,106,82,68,120,94,80,68,77,3,82,82,80,97,68,74,82,82,69,14,0,94,83,69,74,94,80,69,78,3,83,83,80,97,69,75,83,82,83,14,0,94,83,83,75,82,82,14,0,1,80,216,0,94,82,82,80,3,83,83,82,82,82,32,0,82,80,33,0,3,82,82,80,52,83,83,82,128,106,1,0,1,82,42,61,1,80,78,9,135,83,209,2,82,73,80,72,119,0,29,0,82,70,14,0,106,80,36,120,94,82,70,77,3,80,80,82,109,70,124,80,82,71,14,0,106,83,71,124,1,82,208,0,94,82,71,82,3,83,83,82,97,71,74,83,82,83,14,0,1,80,0,0,97,83,75,80,82,80,14,0,94,80,80,74,82,83,14,0,94,83,83,78,3,80,80,83,82,83,32,0,82,82,33,0,3,83,83,82,52,80,80,83,128,106,1,0,1,83,176,61,1,82,86,9,135,80,209,2,83,73,82,72,82,80,14,0,1,82,176,0,1,83,255,255,97,80,82,83,82,83,14,0,112,39,83,56,145,39,39,0,82,83,14,0,112,40,83,48,145,40,40,0,82,66,14,0,106,82,66,100,106,80,66,104,106,81,66,80,106,84,66,4,106,85,66,20,134,83,0,0,224,47,2,0,82,80,81,39,40,84,85,0,82,83,14,0,112,41,83,60,145,41,41,0,82,83,14,0,112,42,83,52,145,42,42,0,82,67,14,0,106,85,67,108,106,84,67,112,106,81,67,84,106,80,67,8,106,82,67,24,134,83,0,0,224,47,2,0,85,84,81,41,42,80,82,0,82,82,14,0,134,83,0,0,108,157,3,0,82,0,0,0,33,43,83,0,82,44,14,0,121,43,5,0,134,83,0,0,160,95,2,0,44,0,0,0,119,0,4,0,134,83,0,0,144,111,2,0,44,0,0,0,1,83,1,0,85,13,83,0,82,45,13,0,137,51,0,0,139,45,0,0,1,83,0,0,85,13,83,0,82,45,13,0,137,51,0,0,139,45,0,0,140,1,48,0,0,0,0,0,2,43,0,0,0,248,0,0,1,41,0,0,136,44,0,0,0,42,44,0,136,44,0,0,25,44,44,32,137,44,0,0,130,44,0,0,136,45,0,0,49,44,44,45,180,107,1,0,1,45,32,0,135,44,208,2,45,0,0,0,25,1,42,12,25,11,42,8,25,21,42,4,25,32,42,20,25,34,42,18,25,36,42,16,106,46,0,4,106,47,0,8,5,45,46,47,41,45,45,4,135,44,1,0,45,0,0,0,85,1,44,0,1,44,11,0,106,45,0,16,49,44,44,45,24,108,1,0,1,45,2,0,1,47,242,72,134,44,0,0,104,5,3,0,45,47,42,0,82,31,1,0,137,42,0,0,139,31,0,0,1,44,0,0,85,11,44,0,1,44,0,0,85,21,44,0,106,47,0,4,106,45,0,8,5,44,47,45,82,45,11,0,56,44,44,45,44,117,1,0,106,44,0,16,1,45,1,0,1,47,10,0,138,44,45,47,124,108,1,0,64,109,1,0,48,110,1,0,32,111,1,0,248,111,1,0,20,113,1,0,52,114,1,0,44,115,1,0,168,115,1,0,84,116,1,0,119,0,249,1,82,47,0,0,82,46,11,0,91,45,47,46,76,45,45,0,145,45,45,0,59,47,255,0,145,47,47,0,66,23,45,47,145,23,23,0,82,47,1,0,82,45,11,0,41,45,45,4,101,47,45,23,82,47,0,0,82,46,11,0,91,45,47,46,76,45,45,0,145,45,45,0,59,47,255,0,145,47,47,0,66,33,45,47,145,33,33,0,82,47,1,0,82,45,11,0,41,45,45,4,3,47,47,45,113,47,4,33,82,45,0,0,82,46,11,0,91,47,45,46,76,47,47,0,145,47,47,0,59,45,255,0,145,45,45,0,66,35,47,45,145,35,35,0,82,45,1,0,82,47,11,0,41,47,47,4,3,45,45,47,113,45,8,35,82,45,1,0,82,47,11,0,41,47,47,4,3,45,45,47,59,47,1,0,145,47,47,0,113,45,12,47,119,0,200,1,82,45,0,0,82,46,21,0,91,47,45,46,76,47,47,0,145,47,47,0,59,45,255,0,145,45,45,0,66,37,47,45,145,37,37,0,82,45,1,0,82,47,11,0,41,47,47,4,101,45,47,37,82,45,0,0,82,46,21,0,91,47,45,46,76,47,47,0,145,47,47,0,59,45,255,0,145,45,45,0,66,38,47,45,145,38,38,0,82,45,1,0,82,47,11,0,41,47,47,4,3,45,45,47,113,45,4,38,82,47,0,0,82,46,21,0,91,45,47,46,76,45,45,0,145,45,45,0,59,47,255,0,145,47,47,0,66,39,45,47,145,39,39,0,82,47,1,0,82,45,11,0,41,45,45,4,3,47,47,45,113,47,8,39,82,45,0,0,82,46,21,0,25,46,46,1,91,47,45,46,76,47,47,0,145,47,47,0,59,45,255,0,145,45,45,0,66,40,47,45,145,40,40,0,82,45,1,0,82,47,11,0,41,47,47,4,3,45,45,47,113,45,12,40,82,45,21,0,25,45,45,2,85,21,45,0,119,0,140,1,82,45,0,0,82,47,11,0,41,47,47,1,92,45,45,47,84,34,45,0,81,47,34,0,19,47,47,43,42,47,47,11,76,47,47,0,145,45,47,0,62,47,0,0,184,121,99,0,33,132,160,63,145,47,47,0,65,6,45,47,145,6,6,0,82,47,1,0,82,45,11,0,41,45,45,4,101,47,45,6,81,47,34,0,1,46,224,7,19,47,47,46,42,47,47,5,76,47,47,0,145,45,47,0,62,47,0,0,104,239,45,32,4,65,144,63,145,47,47,0,65,7,45,47,145,7,7,0,82,47,1,0,82,45,11,0,41,45,45,4,3,47,47,45,113,47,4,7,81,45,34,0,38,45,45,31,76,45,45,0,145,47,45,0,62,45,0,0,184,121,99,0,33,132,160,63,145,45,45,0,65,8,47,45,145,8,8,0,82,45,1,0,82,47,11,0,41,47,47,4,3,45,45,47,113,45,8,8,82,45,1,0,82,47,11,0,41,47,47,4,3,45,45,47,59,47,1,0,145,47,47,0,113,45,12,47,119,0,80,1,82,45,0,0,82,46,21,0,91,47,45,46,76,47,47,0,145,47,47,0,59,45,255,0,145,45,45,0,66,18,47,45,145,18,18,0,82,45,1,0,82,47,11,0,41,47,47,4,101,45,47,18,82,45,0,0,82,46,21,0,25,46,46,1,91,47,45,46,76,47,47,0,145,47,47,0,59,45,255,0,145,45,45,0,66,19,47,45,145,19,19,0,82,45,1,0,82,47,11,0,41,47,47,4,3,45,45,47,113,45,4,19,82,47,0,0,82,46,21,0,25,46,46,2,91,45,47,46,76,45,45,0,145,45,45,0,59,47,255,0,145,47,47,0,66,20,45,47,145,20,20,0,82,47,1,0,82,45,11,0,41,45,45,4,3,47,47,45,113,47,8,20,82,47,1,0,82,45,11,0,41,45,45,4,3,47,47,45,59,45,1,0,145,45,45,0,113,47,12,45,82,45,21,0,25,45,45,3,85,21,45,0,119,0,26,1,82,45,0,0,82,47,11,0,41,47,47,1,92,45,45,47,84,32,45,0,81,47,32,0,19,47,47,43,42,47,47,11,76,47,47,0,145,45,47,0,62,47,0,0,184,121,99,0,33,132,160,63,145,47,47,0,65,2,45,47,145,2,2,0,82,47,1,0,82,45,11,0,41,45,45,4,101,47,45,2,81,47,32,0,1,46,192,7,19,47,47,46,42,47,47,6,76,47,47,0,145,45,47,0,62,47,0,0,184,121,99,0,33,132,160,63,145,47,47,0,65,3,45,47,145,3,3,0,82,47,1,0,82,45,11,0,41,45,45,4,3,47,47,45,113,47,4,3,81,45,32,0,38,45,45,62,42,45,45,1,76,45,45,0,145,47,45,0,62,45,0,0,184,121,99,0,33,132,160,63,145,45,45,0,65,4,47,45,145,4,4,0,82,45,1,0,82,47,11,0,41,47,47,4,3,45,45,47,113,45,8,4,81,47,32,0,38,47,47,1,32,47,47,0,121,47,5,0,59,47,0,0,145,47,47,0,58,45,47,0,119,0,4,0,59,47,1,0,145,47,47,0,58,45,47,0,58,5,45,0,82,45,1,0,82,47,11,0,41,47,47,4,3,45,45,47,113,45,12,5,119,0,211,0,82,47,0,0,82,45,11,0,41,45,45,1,92,47,47,45,84,36,47,0,81,45,36,0,2,46,0,0,0,240,0,0,19,45,45,46,42,45,45,12,76,45,45,0,145,47,45,0,62,45,0,0,125,14,208,31,17,17,177,63,145,45,45,0,65,9,47,45,145,9,9,0,82,45,1,0,82,47,11,0,41,47,47,4,101,45,47,9,81,45,36,0,1,46,0,15,19,45,45,46,42,45,45,8,76,45,45,0,145,47,45,0,62,45,0,0,125,14,208,31,17,17,177,63,145,45,45,0,65,10,47,45,145,10,10,0,82,45,1,0,82,47,11,0,41,47,47,4,3,45,45,47,113,45,4,10,81,47,36,0,1,46,240,0,19,47,47,46,42,47,47,4,76,47,47,0,145,45,47,0,62,47,0,0,125,14,208,31,17,17,177,63,145,47,47,0,65,12,45,47,145,12,12,0,82,47,1,0,82,45,11,0,41,45,45,4,3,47,47,45,113,47,8,12,81,45,36,0,38,45,45,15,76,45,45,0,145,47,45,0,62,45,0,0,125,14,208,31,17,17,177,63,145,45,45,0,65,13,47,45,145,13,13,0,82,45,1,0,82,47,11,0,41,47,47,4,3,45,45,47,113,45,12,13,119,0,139,0,82,47,0,0,82,46,21,0,91,45,47,46,76,45,45,0,145,45,45,0,59,47,255,0,145,47,47,0,66,14,45,47,145,14,14,0,82,47,1,0,82,45,11,0,41,45,45,4,101,47,45,14,82,47,0,0,82,46,21,0,25,46,46,1,91,45,47,46,76,45,45,0,145,45,45,0,59,47,255,0,145,47,47,0,66,15,45,47,145,15,15,0,82,47,1,0,82,45,11,0,41,45,45,4,3,47,47,45,113,47,4,15,82,45,0,0,82,46,21,0,25,46,46,2,91,47,45,46,76,47,47,0,145,47,47,0,59,45,255,0,145,45,45,0,66,16,47,45,145,16,16,0,82,45,1,0,82,47,11,0,41,47,47,4,3,45,45,47,113,45,8,16,82,47,0,0,82,46,21,0,25,46,46,3,91,45,47,46,76,45,45,0,145,45,45,0,59,47,255,0,145,47,47,0,66,17,45,47,145,17,17,0,82,47,1,0,82,45,11,0,41,45,45,4,3,47,47,45,113,47,12,17,82,47,21,0,25,47,47,4,85,21,47,0,119,0,77,0,82,45,0,0,82,47,21,0,41,47,47,2,100,22,45,47,145,22,22,0,82,45,1,0,82,47,11,0,41,47,47,4,101,45,47,22,82,47,1,0,82,45,11,0,41,45,45,4,3,47,47,45,59,45,0,0,145,45,45,0,113,47,4,45,82,45,1,0,82,47,11,0,41,47,47,4,3,45,45,47,59,47,0,0,145,47,47,0,113,45,8,47,82,47,1,0,82,45,11,0,41,45,45,4,3,47,47,45,59,45,1,0,145,45,45,0,113,47,12,45,119,0,46,0,82,45,0,0,82,47,21,0,41,47,47,2,100,24,45,47,145,24,24,0,82,45,1,0,82,47,11,0,41,47,47,4,101,45,47,24,82,47,0,0,82,45,21,0,25,45,45,1,41,45,45,2,100,25,47,45,145,25,25,0,82,47,1,0,82,45,11,0,41,45,45,4,3,47,47,45,113,47,4,25,82,47,0,0,82,45,21,0,25,45,45,2,41,45,45,2,100,26,47,45,145,26,26,0,82,47,1,0,82,45,11,0,41,45,45,4,3,47,47,45,113,47,8,26,82,47,1,0,82,45,11,0,41,45,45,4,3,47,47,45,59,45,1,0,145,45,45,0,113,47,12,45,82,45,21,0,25,45,45,3,85,21,45,0,1,41,15,0,119,0,3,0,1,41,15,0,119,0,1,0,32,44,41,15,121,44,47,0,1,41,0,0,82,44,0,0,82,45,21,0,41,45,45,2,100,27,44,45,145,27,27,0,82,44,1,0,82,45,11,0,41,45,45,4,101,44,45,27,82,45,0,0,82,44,21,0,25,44,44,1,41,44,44,2,100,28,45,44,145,28,28,0,82,45,1,0,82,44,11,0,41,44,44,4,3,45,45,44,113,45,4,28,82,45,0,0,82,44,21,0,25,44,44,2,41,44,44,2,100,29,45,44,145,29,29,0,82,45,1,0,82,44,11,0,41,44,44,4,3,45,45,44,113,45,8,29,82,45,0,0,82,44,21,0,25,44,44,3,41,44,44,2,100,30,45,44,145,30,30,0,82,45,1,0,82,44,11,0,41,44,44,4,3,45,45,44,113,45,12,30,82,45,21,0,25,45,45,4,85,21,45,0,82,45,11,0,25,45,45,1,85,11,45,0,119,0,192,253,82,31,1,0,137,42,0,0,139,31,0,0,140,5,41,0,0,0,0,0,1,30,0,0,136,36,0,0,0,31,36,0,136,36,0,0,25,36,36,48,137,36,0,0,130,36,0,0,136,37,0,0,49,36,36,37,116,117,1,0,1,37,48,0,135,36,208,2,37,0,0,0,25,22,31,40,25,24,31,36,25,25,31,32,25,26,31,28,25,28,31,24,25,5,31,20,25,6,31,16,25,7,31,12,25,9,31,8,25,10,31,4,0,12,31,0,85,24,0,0,85,25,1,0,85,26,2,0,85,28,3,0,85,5,4,0,82,36,26,0,82,37,25,0,45,36,36,37,212,117,1,0,116,22,24,0,82,18,22,0,137,31,0,0,139,18,0,0,1,36,1,0,82,37,26,0,17,36,36,37,82,37,26,0,36,37,37,4,19,36,36,37,120,36,7,0,1,37,158,55,1,38,109,54,1,39,38,6,1,40,189,55,135,36,209,2,37,38,39,40,82,36,26,0,82,40,28,0,5,16,36,40,82,39,5,0,5,36,16,39,41,36,36,1,134,40,0,0,128,163,3,0,36,0,0,0,85,9,40,0,82,40,9,0,120,40,17,0,82,36,24,0,135,40,214,2,36,0,0,0,1,36,203,54,134,40,0,0,176,165,3,0,36,0,0,0,33,19,40,0,1,36,0,0,1,39,0,0,125,40,19,36,39,0,0,0,85,22,40,0,82,18,22,0,137,31,0,0,139,18,0,0,1,40,0,0,85,7,40,0,82,20,24,0,82,40,5,0,82,39,7,0,56,40,40,39,100,124,1,0,82,40,7,0,82,39,28,0,5,21,40,39,82,40,25,0,5,39,21,40,41,39,39,1,3,39,20,39,85,10,39,0,82,39,7,0,82,40,28,0,5,23,39,40,82,40,9,0,82,36,26,0,5,39,23,36,41,39,39,1,3,40,40,39,85,12,40,0,82,40,25,0,41,40,40,3,82,39,26,0,3,40,40,39,1,39,10,0,1,36,26,0,138,40,39,36,100,119,1,0,192,119,1,0,32,120,1,0,92,119,1,0,92,119,1,0,92,119,1,0,92,119,1,0,140,120,1,0,92,119,1,0,220,120,1,0,60,121,1,0,92,119,1,0,92,119,1,0,92,119,1,0,92,119,1,0,172,121,1,0,20,122,1,0,92,119,1,0,136,122,1,0,92,119,1,0,92,119,1,0,92,119,1,0,92,119,1,0,4,123,1,0,108,123,1,0,228,123,1,0,1,30,46,0,119,0,65,1,82,39,28,0,26,39,39,1,85,6,39,0,82,39,6,0,34,39,39,0,120,39,55,1,82,39,12,0,82,36,10,0,80,36,36,0,84,39,36,0,82,36,12,0,1,39,255,255,108,36,2,39,82,39,6,0,26,39,39,1,85,6,39,0,82,39,10,0,25,39,39,2,85,10,39,0,82,39,12,0,25,39,39,4,85,12,39,0,119,0,237,255,82,39,28,0,26,39,39,1,85,6,39,0,82,39,6,0,34,39,39,0,120,39,32,1,82,39,10,0,80,27,39,0,82,39,12,0,108,39,4,27,82,39,12,0,108,39,2,27,82,39,12,0,84,39,27,0,82,39,6,0,26,39,39,1,85,6,39,0,82,39,10,0,25,39,39,2,85,10,39,0,82,39,12,0,25,39,39,6,85,12,39,0,119,0,236,255,82,39,28,0,26,39,39,1,85,6,39,0,82,39,6,0,34,39,39,0,120,39,8,1,82,39,10,0,80,29,39,0,82,39,12,0,108,39,4,29,82,39,12,0,108,39,2,29,82,39,12,0,84,39,29,0,82,39,12,0,1,36,255,255,108,39,6,36,82,36,6,0,26,36,36,1,85,6,36,0,82,36,10,0,25,36,36,2,85,10,36,0,82,36,12,0,25,36,36,8,85,12,36,0,119,0,233,255,82,36,28,0,26,36,36,1,85,6,36,0,82,36,6,0,34,36,36,0,120,36,237,0,82,36,12,0,82,39,10,0,80,39,39,0,84,36,39,0,82,39,6,0,26,39,39,1,85,6,39,0,82,39,10,0,25,39,39,4,85,10,39,0,82,39,12,0,25,39,39,2,85,12,39,0,119,0,240,255,82,39,28,0,26,39,39,1,85,6,39,0,82,39,6,0,34,39,39,0,120,39,217,0,82,39,10,0,80,8,39,0,82,39,12,0,108,39,4,8,82,39,12,0,108,39,2,8,82,39,12,0,84,39,8,0,82,39,6,0,26,39,39,1,85,6,39,0,82,39,10,0,25,39,39,4,85,10,39,0,82,39,12,0,25,39,39,6,85,12,39,0,119,0,236,255,82,39,28,0,26,39,39,1,85,6,39,0,82,39,6,0,34,39,39,0,120,39,193,0,82,39,10,0,80,11,39,0,82,39,12,0,108,39,4,11,82,39,12,0,108,39,2,11,82,39,12,0,84,39,11,0,82,39,12,0,82,36,10,0,104,36,36,2,108,39,6,36,82,36,6,0,26,36,36,1,85,6,36,0,82,36,10,0,25,36,36,4,85,10,36,0,82,36,12,0,25,36,36,8,85,12,36,0,119,0,232,255,82,36,28,0,26,36,36,1,85,6,36,0,82,36,6,0,34,36,36,0,120,36,165,0,82,32,10,0,82,36,10,0,81,36,36,0,105,39,32,2,105,38,32,4,134,13,0,0,236,136,3,0,36,39,38,0,82,38,12,0,84,38,13,0,82,38,6,0,26,38,38,1,85,6,38,0,82,38,10,0,25,38,38,6,85,10,38,0,82,38,12,0,25,38,38,2,85,12,38,0,119,0,234,255,82,38,28,0,26,38,38,1,85,6,38,0,82,38,6,0,34,38,38,0,120,38,139,0,82,33,10,0,82,38,10,0,81,38,38,0,105,39,33,2,105,36,33,4,134,14,0,0,236,136,3,0,38,39,36,0,82,36,12,0,84,36,14,0,82,36,12,0,1,39,255,255,108,36,2,39,82,39,6,0,26,39,39,1,85,6,39,0,82,39,10,0,25,39,39,6,85,10,39,0,82,39,12,0,25,39,39,4,85,12,39,0,119,0,231,255,82,36,28,0,26,36,36,1,85,6,36,0,82,36,6,0,34,36,36,0,120,36,110,0,82,36,12,0,82,39,10,0,80,39,39,0,84,36,39,0,82,39,12,0,82,36,10,0,104,36,36,2,108,39,2,36,82,36,12,0,82,39,10,0,104,39,39,4,108,36,4,39,82,39,12,0,1,36,255,255,108,39,6,36,82,36,6,0,26,36,36,1,85,6,36,0,82,36,10,0,25,36,36,6,85,10,36,0,82,36,12,0,25,36,36,8,85,12,36,0,119,0,229,255,82,39,28,0,26,39,39,1,85,6,39,0,82,39,6,0,34,39,39,0,120,39,79,0,82,34,10,0,82,39,10,0,81,39,39,0,105,36,34,2,105,38,34,4,134,15,0,0,236,136,3,0,39,36,38,0,82,38,12,0,84,38,15,0,82,38,6,0,26,38,38,1,85,6,38,0,82,38,10,0,25,38,38,8,85,10,38,0,82,38,12,0,25,38,38,2,85,12,38,0,119,0,234,255,82,38,28,0,26,38,38,1,85,6,38,0,82,38,6,0,34,38,38,0,120,38,53,0,82,35,10,0,82,38,10,0,81,38,38,0,105,36,35,2,105,39,35,4,134,17,0,0,236,136,3,0,38,36,39,0,82,39,12,0,84,39,17,0,82,39,12,0,82,36,10,0,104,36,36,6,108,39,2,36,82,36,6,0,26,36,36,1,85,6,36,0,82,36,10,0,25,36,36,8,85,10,36,0,82,36,12,0,25,36,36,4,85,12,36,0,119,0,230,255,82,36,28,0,26,36,36,1,85,6,36,0,82,36,6,0,34,36,36,0,120,36,23,0,82,36,12,0,82,39,10,0,80,39,39,0,84,36,39,0,82,39,12,0,82,36,10,0,104,36,36,2,108,39,2,36,82,36,12,0,82,39,10,0,104,39,39,4,108,36,4,39,82,39,6,0,26,39,39,1,85,6,39,0,82,39,10,0,25,39,39,8,85,10,39,0,82,39,12,0,25,39,39,6,85,12,39,0,119,0,232,255,82,40,7,0,25,40,40,1,85,7,40,0,119,0,136,254,32,40,30,46,121,40,7,0,1,39,212,55,1,36,109,54,1,38,67,6,1,37,189,55,135,40,209,2,39,36,38,37,135,40,214,2,20,0,0,0,116,22,9,0,82,18,22,0,137,31,0,0,139,18,0,0,140,5,40,0,0,0,0,0,1,29,0,0,136,35,0,0,0,30,35,0,136,35,0,0,25,35,35,48,137,35,0,0,130,35,0,0,136,36,0,0,49,35,35,36,216,124,1,0,1,36,48,0,135,35,208,2,36,0,0,0,25,22,30,40,25,23,30,36,25,24,30,32,25,26,30,28,25,27,30,24,25,5,30,20,25,6,30,16,25,7,30,12,25,9,30,8,25,10,30,4,0,12,30,0,85,23,0,0,85,24,1,0,85,26,2,0,85,27,3,0,85,5,4,0,82,35,26,0,82,36,24,0,45,35,35,36,56,125,1,0,116,22,23,0,82,17,22,0,137,30,0,0,139,17,0,0,1,35,1,0,82,36,26,0,17,35,35,36,82,36,26,0,36,36,36,4,19,35,35,36,120,35,7,0,1,36,158,55,1,37,109,54,1,38,245,5,1,39,214,55,135,35,209,2,36,37,38,39,82,39,26,0,82,38,27,0,82,37,5,0,1,36,0,0,134,35,0,0,84,25,3,0,39,38,37,36,85,9,35,0,82,35,9,0,120,35,17,0,82,36,23,0,135,35,214,2,36,0,0,0,1,36,203,54,134,35,0,0,176,165,3,0,36,0,0,0,33,18,35,0,1,36,0,0,1,37,0,0,125,35,18,36,37,0,0,0,85,22,35,0,82,17,22,0,137,30,0,0,139,17,0,0,1,35,0,0,85,7,35,0,82,19,23,0,82,35,5,0,82,37,7,0,56,35,35,37,184,131,1,0,82,35,7,0,82,37,27,0,5,20,35,37,82,35,24,0,5,37,20,35,3,37,19,37,85,10,37,0,82,37,7,0,82,35,27,0,5,21,37,35,82,35,9,0,82,36,26,0,5,37,21,36,3,35,35,37,85,12,35,0,82,35,24,0,41,35,35,3,82,37,26,0,3,35,35,37,1,37,10,0,1,36,26,0,138,35,37,36,184,126,1,0,20,127,1,0,116,127,1,0,176,126,1,0,176,126,1,0,176,126,1,0,176,126,1,0,224,127,1,0,176,126,1,0,48,128,1,0,144,128,1,0,176,126,1,0,176,126,1,0,176,126,1,0,176,126,1,0,0,129,1,0,104,129,1,0,176,126,1,0,220,129,1,0,176,126,1,0,176,126,1,0,176,126,1,0,176,126,1,0,88,130,1,0,192,130,1,0,56,131,1,0,1,29,46,0,119,0,65,1,82,37,27,0,26,37,37,1,85,6,37,0,82,37,6,0,34,37,37,0,120,37,55,1,82,37,12,0,82,36,10,0,78,36,36,0,83,37,36,0,82,36,12,0,1,37,255,255,107,36,1,37,82,37,6,0,26,37,37,1,85,6,37,0,82,37,10,0,25,37,37,1,85,10,37,0,82,37,12,0,25,37,37,2,85,12,37,0,119,0,237,255,82,37,27,0,26,37,37,1,85,6,37,0,82,37,6,0,34,37,37,0,120,37,32,1,82,37,10,0,78,25,37,0,82,37,12,0,107,37,2,25,82,37,12,0,107,37,1,25,82,37,12,0,83,37,25,0,82,37,6,0,26,37,37,1,85,6,37,0,82,37,10,0,25,37,37,1,85,10,37,0,82,37,12,0,25,37,37,3,85,12,37,0,119,0,236,255,82,37,27,0,26,37,37,1,85,6,37,0,82,37,6,0,34,37,37,0,120,37,8,1,82,37,10,0,78,28,37,0,82,37,12,0,107,37,2,28,82,37,12,0,107,37,1,28,82,37,12,0,83,37,28,0,82,37,12,0,1,36,255,255,107,37,3,36,82,36,6,0,26,36,36,1,85,6,36,0,82,36,10,0,25,36,36,1,85,10,36,0,82,36,12,0,25,36,36,4,85,12,36,0,119,0,233,255,82,36,27,0,26,36,36,1,85,6,36,0,82,36,6,0,34,36,36,0,120,36,237,0,82,36,12,0,82,37,10,0,78,37,37,0,83,36,37,0,82,37,6,0,26,37,37,1,85,6,37,0,82,37,10,0,25,37,37,2,85,10,37,0,82,37,12,0,25,37,37,1,85,12,37,0,119,0,240,255,82,37,27,0,26,37,37,1,85,6,37,0,82,37,6,0,34,37,37,0,120,37,217,0,82,37,10,0,78,8,37,0,82,37,12,0,107,37,2,8,82,37,12,0,107,37,1,8,82,37,12,0,83,37,8,0,82,37,6,0,26,37,37,1,85,6,37,0,82,37,10,0,25,37,37,2,85,10,37,0,82,37,12,0,25,37,37,3,85,12,37,0,119,0,236,255,82,37,27,0,26,37,37,1,85,6,37,0,82,37,6,0,34,37,37,0,120,37,193,0,82,37,10,0,78,11,37,0,82,37,12,0,107,37,2,11,82,37,12,0,107,37,1,11,82,37,12,0,83,37,11,0,82,37,12,0,82,36,10,0,102,36,36,1,107,37,3,36,82,36,6,0,26,36,36,1,85,6,36,0,82,36,10,0,25,36,36,2,85,10,36,0,82,36,12,0,25,36,36,4,85,12,36,0,119,0,232,255,82,36,27,0,26,36,36,1,85,6,36,0,82,36,6,0,34,36,36,0,120,36,165,0,82,31,10,0,82,36,10,0,79,36,36,0,103,37,31,1,103,38,31,2,134,13,0,0,164,139,3,0,36,37,38,0,82,38,12,0,83,38,13,0,82,38,6,0,26,38,38,1,85,6,38,0,82,38,10,0,25,38,38,3,85,10,38,0,82,38,12,0,25,38,38,1,85,12,38,0,119,0,234,255,82,38,27,0,26,38,38,1,85,6,38,0,82,38,6,0,34,38,38,0,120,38,139,0,82,32,10,0,82,38,10,0,79,38,38,0,103,37,32,1,103,36,32,2,134,14,0,0,164,139,3,0,38,37,36,0,82,36,12,0,83,36,14,0,82,36,12,0,1,37,255,255,107,36,1,37,82,37,6,0,26,37,37,1,85,6,37,0,82,37,10,0,25,37,37,3,85,10,37,0,82,37,12,0,25,37,37,2,85,12,37,0,119,0,231,255,82,36,27,0,26,36,36,1,85,6,36,0,82,36,6,0,34,36,36,0,120,36,110,0,82,36,12,0,82,37,10,0,78,37,37,0,83,36,37,0,82,37,12,0,82,36,10,0,102,36,36,1,107,37,1,36,82,36,12,0,82,37,10,0,102,37,37,2,107,36,2,37,82,37,12,0,1,36,255,255,107,37,3,36,82,36,6,0,26,36,36,1,85,6,36,0,82,36,10,0,25,36,36,3,85,10,36,0,82,36,12,0,25,36,36,4,85,12,36,0,119,0,229,255,82,37,27,0,26,37,37,1,85,6,37,0,82,37,6,0,34,37,37,0,120,37,79,0,82,33,10,0,82,37,10,0,79,37,37,0,103,36,33,1,103,38,33,2,134,15,0,0,164,139,3,0,37,36,38,0,82,38,12,0,83,38,15,0,82,38,6,0,26,38,38,1,85,6,38,0,82,38,10,0,25,38,38,4,85,10,38,0,82,38,12,0,25,38,38,1,85,12,38,0,119,0,234,255,82,38,27,0,26,38,38,1,85,6,38,0,82,38,6,0,34,38,38,0,120,38,53,0,82,34,10,0,82,38,10,0,79,38,38,0,103,36,34,1,103,37,34,2,134,16,0,0,164,139,3,0,38,36,37,0,82,37,12,0,83,37,16,0,82,37,12,0,82,36,10,0,102,36,36,3,107,37,1,36,82,36,6,0,26,36,36,1,85,6,36,0,82,36,10,0,25,36,36,4,85,10,36,0,82,36,12,0,25,36,36,2,85,12,36,0,119,0,230,255,82,36,27,0,26,36,36,1,85,6,36,0,82,36,6,0,34,36,36,0,120,36,23,0,82,36,12,0,82,37,10,0,78,37,37,0,83,36,37,0,82,37,12,0,82,36,10,0,102,36,36,1,107,37,1,36,82,36,12,0,82,37,10,0,102,37,37,2,107,36,2,37,82,37,6,0,26,37,37,1,85,6,37,0,82,37,10,0,25,37,37,4,85,10,37,0,82,37,12,0,25,37,37,3,85,12,37,0,119,0,232,255,82,35,7,0,25,35,35,1,85,7,35,0,119,0,138,254,32,35,29,46,121,35,7,0,1,37,212,55,1,36,109,54,1,38,18,6,1,39,214,55,135,35,209,2,37,36,38,39,135,35,214,2,19,0,0,0,116,22,9,0,82,17,22,0,137,30,0,0,139,17,0,0,140,5,65,0,0,0,0,0,0,5,0,0,0,6,1,0,0,7,6,0,0,8,2,0,0,9,3,0,0,10,9,0,120,7,28,0,33,11,4,0,120,10,12,0,121,11,5,0,9,60,5,8,85,4,60,0,1,61,0,0,109,4,4,61,1,57,0,0,7,56,5,8,135,61,217,2,57,0,0,0,139,56,0,0,119,0,15,0,120,11,6,0,1,57,0,0,1,56,0,0,135,61,217,2,57,0,0,0,139,56,0,0,85,4,0,0,38,60,1,0,109,4,4,60,1,57,0,0,1,56,0,0,135,60,217,2,57,0,0,0,139,56,0,0,32,12,10,0,120,8,77,0,121,12,11,0,121,4,5,0,9,60,7,8,85,4,60,0,1,61,0,0,109,4,4,61,1,57,0,0,7,56,7,8,135,61,217,2,57,0,0,0,139,56,0,0,120,5,11,0,121,4,5,0,1,61,0,0,85,4,61,0,9,60,7,10,109,4,4,60,1,57,0,0,7,56,7,10,135,60,217,2,57,0,0,0,139,56,0,0,26,13,10,1,19,60,13,10,120,60,15,0,121,4,6,0,85,4,0,0,19,61,13,7,38,62,1,0,20,61,61,62,109,4,4,61,1,57,0,0,135,61,218,2,10,0,0,0,24,61,7,61,0,56,61,0,135,61,217,2,57,0,0,0,139,56,0,0,135,61,219,2,10,0,0,0,135,60,219,2,7,0,0,0,4,14,61,60,37,60,14,30,121,60,15,0,25,15,14,1,1,60,31,0,4,16,60,14,0,33,15,0,22,60,7,16,24,61,5,15,20,60,60,61,0,32,60,0,24,60,7,15,0,31,60,0,1,30,0,0,22,60,5,16,0,29,60,0,119,0,133,0,120,4,6,0,1,57,0,0,1,56,0,0,135,60,217,2,57,0,0,0,139,56,0,0,85,4,0,0,38,61,1,0,20,61,6,61,109,4,4,61,1,57,0,0,1,56,0,0,135,61,217,2,57,0,0,0,139,56,0,0,119,0,117,0,120,12,42,0,135,61,219,2,10,0,0,0,135,60,219,2,7,0,0,0,4,25,61,60,37,60,25,31,121,60,20,0,25,26,25,1,1,60,31,0,4,27,60,25,26,60,25,31,42,60,60,31,0,28,60,0,0,33,26,0,24,60,5,26,19,60,60,28,22,61,7,27,20,60,60,61,0,32,60,0,24,60,7,26,19,60,60,28,0,31,60,0,1,30,0,0,22,60,5,27,0,29,60,0,119,0,90,0,120,4,6,0,1,57,0,0,1,56,0,0,135,60,217,2,57,0,0,0,139,56,0,0,85,4,0,0,38,61,1,0,20,61,6,61,109,4,4,61,1,57,0,0,1,56,0,0,135,61,217,2,57,0,0,0,139,56,0,0,26,17,8,1,19,61,17,8,121,61,44,0,135,61,219,2,8,0,0,0,25,61,61,33,135,60,219,2,7,0,0,0,4,19,61,60,1,60,64,0,4,20,60,19,1,60,32,0,4,21,60,19,42,60,21,31,0,22,60,0,26,23,19,32,42,60,23,31,0,24,60,0,0,33,19,0,26,60,21,1,42,60,60,31,24,61,7,23,19,60,60,61,22,61,7,21,24,62,5,19,20,61,61,62,19,61,61,24,20,60,60,61,0,32,60,0,24,60,7,19,19,60,24,60,0,31,60,0,22,60,5,20,19,60,60,22,0,30,60,0,22,60,7,20,24,61,5,23,20,60,60,61,19,60,60,22,22,61,5,21,26,62,19,33,42,62,62,31,19,61,61,62,20,60,60,61,0,29,60,0,119,0,29,0,121,4,5,0,19,60,17,5,85,4,60,0,1,61,0,0,109,4,4,61,32,61,8,1,121,61,9,0,38,61,1,0,20,61,6,61,0,57,61,0,0,56,0,0,135,61,217,2,57,0,0,0,139,56,0,0,119,0,14,0,135,18,218,2,8,0,0,0,24,61,7,18,0,57,61,0,1,61,32,0,4,61,61,18,22,61,7,61,24,60,5,18,20,61,61,60,0,56,61,0,135,61,217,2,57,0,0,0,139,56,0,0,120,33,8,0,0,53,29,0,0,52,30,0,0,51,31,0,0,50,32,0,1,49,0,0,1,48,0,0,119,0,71,0,0,34,2,0,38,61,3,0,20,61,9,61,0,35,61,0,1,61,255,255,1,60,255,255,134,36,0,0,40,171,3,0,34,35,61,60,135,37,211,2,0,43,29,0,0,42,30,0,0,41,31,0,0,40,32,0,0,39,33,0,1,38,0,0,0,58,43,0,43,60,42,31,41,61,43,1,20,60,60,61,0,43,60,0,41,60,42,1,20,60,38,60,0,42,60,0,41,60,40,1,43,61,58,31,20,60,60,61,0,44,60,0,43,60,40,31,41,61,41,1,20,60,60,61,0,45,60,0,134,60,0,0,16,167,3,0,36,37,44,45,135,46,211,2,34,61,46,0,1,62,255,255,1,63,0,0,125,60,61,62,63,0,0,0,41,60,60,1,0,59,60,0,42,60,46,31,20,60,60,59,0,47,60,0,38,60,47,1,0,38,60,0,19,60,47,34,34,62,46,0,1,61,255,255,1,64,0,0,125,63,62,61,64,0,0,0,42,63,63,31,20,63,63,59,19,63,63,35,134,40,0,0,16,167,3,0,44,45,60,63,135,41,211,2,26,39,39,1,33,63,39,0,120,63,209,255,0,53,43,0,0,52,42,0,0,51,41,0,0,50,40,0,1,49,0,0,0,48,38,0,0,54,52,0,1,55,0,0,121,4,3,0,85,4,50,0,109,4,4,51,43,63,54,31,20,60,53,55,41,60,60,1,20,63,63,60,41,60,55,1,43,64,54,31,20,60,60,64,38,60,60,0,20,63,63,60,20,63,63,49,0,57,63,0,41,63,54,1,1,60,0,0,43,60,60,31,20,63,63,60,38,63,63,254,20,63,63,48,0,56,63,0,135,63,217,2,57,0,0,0,139,56,0,0,140,1,34,0,0,0,0,0,2,27,0,0,85,40,0,0,2,28,0,0,96,40,0,0,2,29,0,0,89,40,0,0,1,25,0,0,136,30,0,0,0,26,30,0,136,30,0,0,25,30,30,48,137,30,0,0,130,30,0,0,136,31,0,0,49,30,30,31,124,137,1,0,1,31,48,0,135,30,208,2,31,0,0,0,25,24,26,32,25,23,26,24,25,1,26,16,25,3,26,8,0,7,26,0,2,30,0,0,88,161,0,0,106,31,0,4,85,30,31,0,82,31,0,0,32,20,31,1,1,31,2,0,2,30,0,0,88,161,0,0,82,30,30,0,49,31,31,30,160,141,1,0,121,20,28,0,25,17,0,24,2,31,0,0,96,161,0,0,82,30,17,0,85,31,30,0,2,30,0,0,100,161,0,0,106,31,17,4,85,30,31,0,25,31,0,24,25,18,31,8,2,31,0,0,140,161,0,0,82,30,18,0,85,31,30,0,2,30,0,0,144,161,0,0,106,31,18,4,85,30,31,0,2,31,0,0,84,161,0,0,1,30,4,0,85,31,30,0,134,30,0,0,4,169,3,0,137,26,0,0,139,0,0,0,82,30,0,0,33,30,30,2,121,30,26,0,82,30,0,0,121,30,3,0,137,26,0,0,139,0,0,0,2,30,0,0,156,161,0,0,59,31,0,0,145,31,31,0,89,30,31,0,59,31,0,0,145,31,31,0,89,7,31,0,59,30,0,0,145,30,30,0,113,7,4,30,2,30,0,0,88,161,0,0,1,31,0,0,85,30,31,0,2,31,0,0,84,161,0,0,1,30,0,0,85,31,30,0,137,26,0,0,139,0,0,0,2,30,0,0,132,161,0,0,82,30,30,0,85,23,30,0,2,31,0,0,136,161,0,0,82,31,31,0,109,23,4,31,2,31,0,0,148,161,0,0,82,31,31,0,85,24,31,0,2,30,0,0,152,161,0,0,82,30,30,0,109,24,4,30,2,30,0,0,156,161,0,0,134,31,0,0,44,78,3,0,23,24,0,0,145,31,31,0,89,30,31,0,2,31,0,0,96,161,0,0,2,30,0,0,132,161,0,0,82,30,30,0,85,31,30,0,2,30,0,0,100,161,0,0,2,31,0,0,136,161,0,0,82,31,31,0,85,30,31,0,2,31,0,0,140,161,0,0,2,30,0,0,148,161,0,0,82,30,30,0,85,31,30,0,2,30,0,0,144,161,0,0,2,31,0,0,152,161,0,0,82,31,31,0,85,30,31,0,25,19,0,24,2,31,0,0,132,161,0,0,82,30,19,0,85,31,30,0,2,30,0,0,136,161,0,0,106,31,19,4,85,30,31,0,25,31,0,24,25,21,31,8,2,31,0,0,148,161,0,0,82,30,21,0,85,31,30,0,2,30,0,0,152,161,0,0,106,31,21,4,85,30,31,0,2,31,0,0,96,161,0,0,82,31,31,0,85,23,31,0,2,30,0,0,100,161,0,0,82,30,30,0,109,23,4,30,2,30,0,0,132,161,0,0,82,30,30,0,85,24,30,0,2,31,0,0,136,161,0,0,82,31,31,0,109,24,4,31,134,31,0,0,44,78,3,0,23,24,0,0,145,31,31,0,62,30,0,0,133,240,30,64,225,122,116,63,145,30,30,0,74,31,31,30,121,31,3,0,1,25,41,0,119,0,35,0,2,31,0,0,140,161,0,0,82,31,31,0,85,23,31,0,2,30,0,0,144,161,0,0,82,30,30,0,109,23,4,30,2,30,0,0,148,161,0,0,82,30,30,0,85,24,30,0,2,31,0,0,152,161,0,0,82,31,31,0,109,24,4,31,134,31,0,0,44,78,3,0,23,24,0,0,145,31,31,0,62,30,0,0,133,240,30,64,225,122,116,63,145,30,30,0,74,31,31,30,121,31,3,0,1,25,41,0,119,0,7,0,2,31,0,0,84,161,0,0,1,30,4,0,85,31,30,0,134,30,0,0,4,169,3,0,32,30,25,41,121,30,41,0,2,30,0,0,132,161,0,0,82,30,30,0,85,23,30,0,2,31,0,0,136,161,0,0,82,31,31,0,109,23,4,31,2,31,0,0,148,161,0,0,82,31,31,0,85,24,31,0,2,30,0,0,152,161,0,0,82,30,30,0,109,24,4,30,134,22,0,0,44,78,3,0,23,24,0,0,145,22,22,0,2,32,0,0,156,161,0,0,88,31,32,0,145,31,31,0,64,30,22,31,145,30,30,0,59,31,0,0,145,31,31,0,71,30,30,31,121,30,6,0,2,30,0,0,84,161,0,0,1,31,0,1,85,30,31,0,119,0,6,0,2,31,0,0,84,161,0,0,1,30,0,2,85,31,30,0,119,0,1,0,2,30,0,0,132,161,0,0,82,30,30,0,85,23,30,0,2,31,0,0,136,161,0,0,82,31,31,0,109,23,4,31,2,31,0,0,148,161,0,0,82,31,31,0,85,24,31,0,2,30,0,0,152,161,0,0,82,30,30,0,109,24,4,30,134,30,0,0,192,84,3,0,23,24,0,0,145,30,30,0,137,26,0,0,139,0,0,0,121,20,120,0,2,30,0,0,92,161,0,0,2,31,0,0,92,161,0,0,82,31,31,0,25,31,31,1,85,30,31,0,2,31,0,0,84,161,0,0,82,31,31,0,32,31,31,0,1,30,2,0,2,32,0,0,92,161,0,0,82,32,32,0,17,30,30,32,19,31,31,30,121,31,45,0,134,2,0,0,4,169,3,0,2,31,0,0,184,156,0,0,86,31,31,0,64,31,2,31,59,30,44,1,71,31,31,30,121,31,34,0,25,4,0,24,2,31,0,0,96,161,0,0,82,31,31,0,85,23,31,0,2,30,0,0,100,161,0,0,82,30,30,0,109,23,4,30,116,24,4,0,106,31,4,4,109,24,4,31,134,31,0,0,44,78,3,0,23,24,0,0,145,31,31,0,62,30,0,0,201,124,126,223,81,184,158,63,145,30,30,0,71,31,31,30,121,31,10,0,2,31,0,0,84,161,0,0,1,30,2,0,85,31,30,0,2,30,0,0,92,161,0,0,1,31,0,0,85,30,31,0,119,0,6,0,1,25,7,0,119,0,4,0,1,25,7,0,119,0,2,0,1,25,7,0,32,31,25,7,121,31,9,0,2,31,0,0,92,161,0,0,1,30,1,0,85,31,30,0,2,30,0,0,84,161,0,0,1,31,1,0,85,30,31,0,25,5,0,24,2,31,0,0,96,161,0,0,82,30,5,0,85,31,30,0,2,30,0,0,100,161,0,0,106,31,5,4,85,30,31,0,25,6,0,24,2,31,0,0,104,161,0,0,82,30,6,0,85,31,30,0,2,30,0,0,108,161,0,0,106,31,6,4,85,30,31,0,2,31,0,0,112,161,0,0,2,30,0,0,96,161,0,0,82,30,30,0,85,31,30,0,2,30,0,0,116,161,0,0,2,31,0,0,100,161,0,0,82,31,31,0,85,30,31,0,2,31,0,0,184,156,0,0,134,30,0,0,4,169,3,0,87,31,30,0,1,30,180,39,106,31,0,8,85,30,31,0,59,31,0,0,145,31,31,0,89,1,31,0,59,30,0,0,145,30,30,0,113,1,4,30,137,26,0,0,139,0,0,0,82,30,0,0,121,30,99,0,82,30,0,0,33,30,30,2,121,30,3,0,137,26,0,0,139,0,0,0,2,30,0,0,84,161,0,0,82,30,30,0,32,30,30,8,121,30,6,0,2,30,0,0,184,156,0,0,134,31,0,0,4,169,3,0,87,30,31,0,2,31,0,0,180,164,0,0,78,31,31,0,38,31,31,1,120,31,10,0,2,31,0,0,192,156,0,0,134,30,0,0,4,169,3,0,87,31,30,0,2,30,0,0,180,164,0,0,1,31,1,0,83,30,31,0,25,15,0,24], eb + 92160);
  HEAPU8.set([2,31,0,0,132,161,0,0,82,30,15,0,85,31,30,0,2,30,0,0,136,161,0,0,106,31,15,4,85,30,31,0,2,31,0,0,84,161,0,0,82,31,31,0,32,31,31,4,121,31,54,0,2,31,0,0,181,164,0,0,78,31,31,0,38,31,31,1,121,31,10,0,25,16,0,24,2,31,0,0,96,161,0,0,82,30,16,0,85,31,30,0,2,30,0,0,100,161,0,0,106,31,16,4,85,30,31,0,2,31,0,0,181,164,0,0,1,30,0,0,83,31,30,0,2,30,0,0,96,161,0,0,82,30,30,0,85,23,30,0,2,31,0,0,100,161,0,0,82,31,31,0,109,23,4,31,2,31,0,0,132,161,0,0,82,31,31,0,85,24,31,0,2,30,0,0,136,161,0,0,82,30,30,0,109,24,4,30,134,30,0,0,44,78,3,0,23,24,0,0,145,30,30,0,62,31,0,0,199,74,54,225,81,184,142,63,145,31,31,0,74,30,30,31,121,30,10,0,2,30,0,0,184,156,0,0,134,31,0,0,4,169,3,0,87,30,31,0,2,31,0,0,84,161,0,0,1,30,8,0,85,31,30,0,137,26,0,0,139,0,0,0,2,30,0,0,84,161,0,0,82,30,30,0,32,30,30,8,121,30,10,0,25,8,0,24,2,30,0,0,112,161,0,0,82,31,8,0,85,30,31,0,2,31,0,0,116,161,0,0,106,30,8,4,85,31,30,0,2,30,0,0,96,161,0,0,82,30,30,0,85,23,30,0,2,31,0,0,100,161,0,0,82,31,31,0,109,23,4,31,2,31,0,0,112,161,0,0,82,31,31,0,85,24,31,0,2,30,0,0,116,161,0,0,82,30,30,0,109,24,4,30,2,30,0,0,120,161,0,0,134,31,0,0,44,78,3,0,23,24,0,0,145,31,31,0,89,30,31,0,2,31,0,0,120,161,0,0,88,9,31,0,145,9,9,0,134,10,0,0,4,169,3,0,2,31,0,0,124,161,0,0,2,33,0,0,192,156,0,0,86,33,33,0,64,32,10,33,145,32,32,0,66,30,9,32,145,30,30,0,89,31,30,0,2,30,0,0,180,164,0,0,1,31,0,0,83,30,31,0,2,30,0,0,124,161,0,0,88,31,30,0,145,31,31,0,62,30,0,0,29,93,35,224,77,98,64,63,145,30,30,0,73,31,31,30,121,31,124,0,1,31,180,39,82,31,31,0,106,30,0,8,45,31,31,30,0,148,1,0,2,31,0,0,96,161,0,0,82,31,31,0,85,23,31,0,2,30,0,0,100,161,0,0,82,30,30,0,109,23,4,30,2,30,0,0,112,161,0,0,82,30,30,0,85,24,30,0,2,31,0,0,116,161,0,0,82,31,31,0,109,24,4,31,2,31,0,0,128,161,0,0,59,32,104,1,145,32,32,0,134,33,0,0,192,84,3,0,23,24,0,0,145,33,33,0,64,30,32,33,145,30,30,0,89,31,30,0,2,31,0,0,128,161,0,0,88,30,31,0,145,30,30,0,59,31,30,0,145,31,31,0,71,11,30,31,2,30,0,0,128,161,0,0,88,31,30,0,145,31,31,0,59,30,74,1,145,30,30,0,73,31,31,30,20,31,11,31,121,31,6,0,2,31,0,0,84,161,0,0,1,30,16,0,85,31,30,0,119,0,72,0,2,31,0,0,128,161,0,0,88,30,31,0,145,30,30,0,59,31,30,0,145,31,31,0,73,12,30,31,2,30,0,0,128,161,0,0,88,31,30,0,145,31,31,0,59,30,120,0,145,30,30,0,71,31,31,30,19,31,12,31,121,31,6,0,2,31,0,0,84,161,0,0,1,30,64,0,85,31,30,0,119,0,51,0,2,31,0,0,128,161,0,0,88,30,31,0,145,30,30,0,59,31,120,0,145,31,31,0,73,13,30,31,2,30,0,0,128,161,0,0,88,31,30,0,145,31,31,0,59,30,210,0,145,30,30,0,71,31,31,30,19,31,13,31,121,31,6,0,2,31,0,0,84,161,0,0,1,30,32,0,85,31,30,0,119,0,30,0,2,31,0,0,128,161,0,0,88,30,31,0,145,30,30,0,59,31,210,0,145,31,31,0,73,14,30,31,2,30,0,0,128,161,0,0,88,31,30,0,145,31,31,0,59,30,44,1,145,30,30,0,71,31,31,30,19,31,14,31,121,31,6,0,2,31,0,0,84,161,0,0,1,30,128,0,85,31,30,0,119,0,9,0,2,30,0,0,84,161,0,0,1,31,0,0,85,30,31,0,119,0,4,0,1,25,23,0,119,0,2,0,1,25,23,0,32,31,25,23,121,31,20,0,2,31,0,0,120,161,0,0,59,30,0,0,145,30,30,0,89,31,30,0,2,30,0,0,124,161,0,0,59,31,0,0,145,31,31,0,89,30,31,0,2,31,0,0,128,161,0,0,59,30,0,0,145,30,30,0,89,31,30,0,2,30,0,0,84,161,0,0,1,31,0,0,85,30,31,0,59,31,0,0,145,31,31,0,89,3,31,0,59,30,0,0,145,30,30,0,113,3,4,30,2,30,0,0,104,161,0,0,82,31,3,0,85,30,31,0,2,31,0,0,108,161,0,0,106,30,3,4,85,31,30,0,2,30,0,0,88,161,0,0,1,31,0,0,85,30,31,0,137,26,0,0,139,0,0,0,140,2,51,0,0,0,0,0,2,42,0,0,0,240,0,0,2,43,0,0,0,128,0,0,2,44,0,0,68,88,84,51,2,45,0,0,68,88,84,53,1,36,0,0,136,46,0,0,0,37,46,0,136,46,0,0,1,47,240,0,3,46,46,47,137,46,0,0,130,46,0,0,136,47,0,0,49,46,46,47,16,149,1,0,1,47,240,0,135,46,208,2,47,0,0,0,25,33,37,56,25,32,37,48,25,31,37,40,25,30,37,32,25,35,37,24,25,34,37,16,25,29,37,8,0,28,37,0,1,46,224,0,3,10,37,46,1,46,204,0,3,14,37,46,1,46,200,0,3,17,37,46,1,46,232,0,3,21,37,46,25,23,37,76,1,46,230,0,3,24,37,46,25,25,37,72,1,46,229,0,3,27,37,46,25,2,37,68,1,46,228,0,3,3,37,46,25,5,37,64,25,6,37,60,85,10,1,0,1,46,0,0,85,14,46,0,1,47,0,0,109,14,4,47,1,46,0,0,109,14,8,46,1,47,0,0,109,14,12,47,1,46,0,0,109,14,16,46,82,47,10,0,1,48,80,54,134,46,0,0,132,255,2,0,47,48,0,0,85,17,46,0,82,46,17,0,120,46,18,0,116,28,10,0,1,48,2,0,1,47,150,71,134,46,0,0,104,5,3,0,48,47,28,0,116,0,14,0,106,47,14,4,109,0,4,47,106,46,14,8,109,0,8,46,106,47,14,12,109,0,12,47,106,46,14,16,109,0,16,46,137,37,0,0,139,0,0,0,1,47,4,0,1,48,1,0,82,49,17,0,134,46,0,0,8,219,2,0,21,47,48,49,78,46,21,0,33,46,46,68,121,46,3,0,1,36,7,0,119,0,142,1,102,46,21,1,33,46,46,68,121,46,3,0,1,36,7,0,119,0,137,1,102,46,21,2,33,46,46,83,121,46,3,0,1,36,7,0,119,0,132,1,102,46,21,3,33,46,46,32,121,46,3,0,1,36,7,0,119,0,127,1,1,49,124,0,1,48,1,0,82,47,17,0,134,46,0,0,8,219,2,0,23,49,48,47,116,34,10,0,1,47,124,0,109,34,4,47,1,46,8,0,1,48,232,71,134,47,0,0,104,5,3,0,46,48,34,0,106,18,23,72,116,35,10,0,109,35,4,18,1,48,8,0,1,46,6,72,134,47,0,0,104,5,3,0,48,46,35,0,25,47,23,72,106,19,47,4,116,30,10,0,109,30,4,19,1,46,8,0,1,48,42,72,134,47,0,0,104,5,3,0,46,48,30,0,25,47,23,72,106,20,47,8,116,31,10,0,109,31,4,20,1,48,8,0,1,46,81,72,134,47,0,0,104,5,3,0,48,46,31,0,25,47,23,72,106,22,47,12,116,32,10,0,109,32,4,22,1,46,8,0,1,48,108,72,134,47,0,0,104,5,3,0,46,48,32,0,106,48,23,12,109,14,4,48,106,47,23,8,109,14,8,47,106,47,23,24,120,47,4,0,1,48,1,0,109,14,12,48,119,0,3,0,106,47,23,24,109,14,12,47,25,47,23,72,106,47,47,12,32,47,47,16,121,47,149,0,25,47,23,72,106,47,47,4,32,47,47,64,121,47,22,0,106,46,14,4,106,49,14,8,5,48,46,49,41,48,48,1,135,47,1,0,48,0,0,0,85,14,47,0,106,48,14,4,106,49,14,8,5,47,48,49,41,47,47,1,0,26,47,0,82,49,14,0,1,48,1,0,82,46,17,0,134,47,0,0,8,219,2,0,49,26,48,46,1,46,3,0,109,14,16,46,119,0,124,0,25,46,23,72,106,46,46,4,32,46,46,65,121,46,120,0,25,46,23,72,106,46,46,28,45,46,46,43,216,152,1,0,106,48,14,4,106,49,14,8,5,47,48,49,41,47,47,1,135,46,1,0,47,0,0,0,85,14,46,0,106,47,14,4,106,49,14,8,5,46,47,49,41,46,46,1,0,4,46,0,82,49,14,0,1,47,1,0,82,48,17,0,134,46,0,0,8,219,2,0,49,4,47,48,1,46,0,0,83,24,46,0,1,46,0,0,85,25,46,0,106,48,14,4,106,47,14,8,5,46,48,47,82,47,25,0,56,46,46,47,204,152,1,0,82,46,14,0,82,47,25,0,41,47,47,1,93,46,46,47,42,46,46,15,83,24,46,0,82,46,14,0,82,47,25,0,41,47,47,1,3,38,46,47,81,47,38,0,41,47,47,1,84,38,47,0,82,47,14,0,82,46,25,0,41,46,46,1,3,7,47,46,81,46,7,0,79,47,24,0,3,46,46,47,84,7,46,0,82,46,25,0,25,46,46,1,85,25,46,0,119,0,226,255,1,47,5,0,109,14,16,47,119,0,60,0,25,47,23,72,106,47,47,28,45,47,47,42,196,153,1,0,106,48,14,4,106,49,14,8,5,46,48,49,41,46,46,1,135,47,1,0,46,0,0,0,85,14,47,0,106,46,14,4,106,49,14,8,5,47,46,49,41,47,47,1,0,8,47,0,82,49,14,0,1,46,1,0,82,48,17,0,134,47,0,0,8,219,2,0,49,8,46,48,1,47,0,0,83,27,47,0,1,47,0,0,85,2,47,0,106,48,14,4,106,46,14,8,5,47,48,46,82,46,2,0,56,47,47,46,188,153,1,0,82,47,14,0,82,46,2,0,41,46,46,1,93,47,47,46,42,47,47,12,83,27,47,0,82,47,14,0,82,46,2,0,41,46,46,1,3,39,47,46,81,46,39,0,41,46,46,4,84,39,46,0,82,46,14,0,82,47,2,0,41,47,47,1,3,9,46,47,81,47,9,0,79,46,27,0,3,47,47,46,84,9,47,0,82,47,2,0,25,47,47,1,85,2,47,0,119,0,226,255,1,46,6,0,109,14,16,46,25,46,23,72,106,46,46,4,32,46,46,64,121,46,25,0,25,46,23,72,106,46,46,12,32,46,46,24,121,46,21,0,106,48,14,4,106,49,14,8,5,47,48,49,27,47,47,3,135,46,1,0,47,0,0,0,85,14,46,0,106,47,14,4,106,49,14,8,5,46,47,49,27,11,46,3,82,49,14,0,1,47,1,0,82,48,17,0,134,46,0,0,8,219,2,0,49,11,47,48,1,48,4,0,109,14,16,48,119,0,143,0,25,48,23,72,106,48,48,4,32,48,48,65,121,48,55,0,25,48,23,72,106,48,48,12,32,48,48,32,121,48,51,0,106,47,14,4,106,49,14,8,5,46,47,49,41,46,46,2,135,48,1,0,46,0,0,0,85,14,48,0,106,46,14,4,106,49,14,8,5,48,46,49,41,48,48,2,0,12,48,0,82,49,14,0,1,46,1,0,82,47,17,0,134,48,0,0,8,219,2,0,49,12,46,47,1,48,0,0,83,3,48,0,1,48,0,0,85,5,48,0,106,47,14,4,106,46,14,8,5,48,47,46,41,48,48,2,82,46,5,0,56,48,48,46,16,155,1,0,82,48,14,0,82,46,5,0,90,48,48,46,83,3,48,0,82,40,14,0,82,41,5,0,25,46,41,2,90,46,40,46,95,40,41,46,82,46,14,0,82,48,5,0,25,48,48,2,78,47,3,0,95,46,48,47,82,47,5,0,25,47,47,4,85,5,47,0,119,0,232,255,1,48,7,0,109,14,16,48,119,0,85,0,25,48,23,72,106,48,48,4,33,48,48,4,121,48,5,0,25,48,23,72,106,48,48,4,33,48,48,5,120,48,77,0,1,48,0,0,25,47,23,72,106,47,47,8,48,48,48,47,108,156,1,0,106,13,23,16,1,48,1,0,106,47,23,24,48,48,48,47,112,155,1,0,41,48,13,1,85,6,48,0,119,0,2,0,85,6,13,0,25,48,23,16,116,33,48,0,1,47,8,0,1,46,138,72,134,48,0,0,104,5,3,0,47,46,33,0,82,46,6,0,135,48,1,0,46,0,0,0,85,14,48,0,82,46,14,0,82,47,6,0,1,49,1,0,82,50,17,0,134,48,0,0,8,219,2,0,46,47,49,50,25,48,23,72,106,15,48,8,47,48,15,44,20,156,1,0,2,48,0,0,68,88,84,49,1,50,1,0,138,15,48,50,228,155,1,0,119,0,35,0,119,0,1,0,25,16,14,16,25,48,23,72,106,48,48,4,32,48,48,4,121,48,4,0,1,48,11,0,85,16,48,0,119,0,26,0,1,48,12,0,85,16,48,0,119,0,23,0,47,48,15,45,68,156,1,0,2,48,0,0,68,88,84,51,1,50,1,0,138,15,48,50,52,156,1,0,119,0,15,0,119,0,1,0,1,50,13,0,109,14,16,50,119,0,11,0,2,50,0,0,68,88,84,53,1,48,1,0,138,15,50,48,92,156,1,0,119,0,5,0,119,0,1,0,1,48,14,0,109,14,16,48,119,0,1,0,32,48,36,7,121,48,7,0,116,29,10,0,1,50,2,0,1,49,184,71,134,48,0,0,104,5,3,0,50,49,29,0,82,49,17,0,134,48,0,0,196,87,3,0,49,0,0,0,116,0,14,0,106,49,14,4,109,0,4,49,106,48,14,8,109,0,8,48,106,49,14,12,109,0,12,49,106,48,14,16,109,0,16,48,137,37,0,0,139,0,0,0,140,1,36,0,0,0,0,0,2,29,0,0,255,0,0,0,2,30,0,0,0,248,0,0,1,27,0,0,136,31,0,0,0,28,31,0,136,31,0,0,25,31,31,32,137,31,0,0,130,31,0,0,136,32,0,0,49,31,31,32,20,157,1,0,1,32,32,0,135,31,208,2,32,0,0,0,25,26,28,8,25,1,28,20,25,9,28,16,25,14,28,12,25,23,28,28,25,24,28,26,25,25,28,24,106,33,0,4,106,34,0,8,5,32,33,34,41,32,32,2,135,31,1,0,32,0,0,0,85,1,31,0,1,31,11,0,106,32,0,16,49,31,31,32,124,157,1,0,1,32,2,0,1,34,242,72,134,31,0,0,104,5,3,0,32,34,28,0,82,22,1,0,137,28,0,0,139,22,0,0,106,31,0,16,32,31,31,8,121,31,3,0,1,27,6,0,119,0,10,0,106,31,0,16,32,31,31,9,121,31,3,0,1,27,6,0,119,0,5,0,106,31,0,16,32,31,31,10,121,31,2,0,1,27,6,0,32,31,27,6,121,31,6,0,1,34,2,0,1,32,50,73,134,31,0,0,104,5,3,0,34,32,26,0,1,31,0,0,85,9,31,0,1,31,0,0,85,14,31,0,106,32,0,4,106,34,0,8,5,31,32,34,82,34,9,0,56,31,31,34,80,166,1,0,106,31,0,16,1,33,1,0,1,32,10,0,138,31,33,32,52,158,1,0,172,158,1,0,60,159,1,0,52,160,1,0,192,160,1,0,196,161,1,0,244,162,1,0,140,163,1,0,24,164,1,0,20,165,1,0,119,0,187,1,82,34,1,0,82,32,9,0,41,32,32,2,82,33,0,0,82,35,9,0,90,33,33,35,95,34,32,33,82,33,1,0,82,32,9,0,41,32,32,2,3,33,33,32,82,32,0,0,82,34,9,0,90,32,32,34,107,33,1,32,82,32,1,0,82,33,9,0,41,33,33,2,3,32,32,33,82,33,0,0,82,34,9,0,90,33,33,34,107,32,2,33,82,33,1,0,82,32,9,0,41,32,32,2,3,33,33,32,1,32,255,255,107,33,3,32,119,0,157,1,82,32,1,0,82,33,9,0,41,33,33,2,82,34,0,0,82,35,14,0,90,34,34,35,95,32,33,34,82,34,1,0,82,33,9,0,41,33,33,2,3,34,34,33,82,33,0,0,82,32,14,0,90,33,33,32,107,34,1,33,82,33,1,0,82,34,9,0,41,34,34,2,3,33,33,34,82,34,0,0,82,32,14,0,90,34,34,32,107,33,2,34,82,34,1,0,82,33,9,0,41,33,33,2,3,34,34,33,82,33,0,0,82,32,14,0,25,32,32,1,90,33,33,32,107,34,3,33,82,33,14,0,25,33,33,2,85,14,33,0,119,0,121,1,82,33,0,0,82,32,9,0,41,32,32,1,92,33,33,32,84,24,33,0,81,34,24,0,19,34,34,30,42,34,34,11,76,34,34,0,145,32,34,0,59,34,8,0,145,34,34,0,65,33,32,34,145,33,33,0,75,33,33,0,19,33,33,29,0,5,33,0,82,33,1,0,82,34,9,0,41,34,34,2,95,33,34,5,81,32,24,0,1,35,224,7,19,32,32,35,42,32,32,5,76,32,32,0,145,33,32,0,59,32,4,0,145,32,32,0,65,34,33,32,145,34,34,0,75,34,34,0,19,34,34,29,0,6,34,0,82,34,1,0,82,32,9,0,41,32,32,2,3,34,34,32,107,34,1,6,81,33,24,0,38,33,33,31,76,33,33,0,145,32,33,0,59,33,8,0,145,33,33,0,65,34,32,33,145,34,34,0,75,34,34,0,19,34,34,29,0,7,34,0,82,34,1,0,82,33,9,0,41,33,33,2,3,34,34,33,107,34,2,7,82,34,1,0,82,33,9,0,41,33,33,2,3,34,34,33,1,33,255,255,107,34,3,33,119,0,59,1,82,34,1,0,82,33,9,0,41,33,33,2,82,32,0,0,82,35,14,0,90,32,32,35,95,34,33,32,82,32,1,0,82,33,9,0,41,33,33,2,3,32,32,33,82,33,0,0,82,34,14,0,25,34,34,1,90,33,33,34,107,32,1,33,82,33,1,0,82,32,9,0,41,32,32,2,3,33,33,32,82,32,0,0,82,34,14,0,25,34,34,2,90,32,32,34,107,33,2,32,82,32,1,0,82,33,9,0,41,33,33,2,3,32,32,33,1,33,255,255,107,32,3,33,82,33,14,0,25,33,33,3,85,14,33,0,119,0,24,1,82,33,0,0,82,34,9,0,41,34,34,1,92,33,33,34,84,23,33,0,81,32,23,0,19,32,32,30,42,32,32,11,76,32,32,0,145,34,32,0,59,32,8,0,145,32,32,0,65,33,34,32,145,33,33,0,75,33,33,0,19,33,33,29,0,2,33,0,82,33,1,0,82,32,9,0,41,32,32,2,95,33,32,2,81,34,23,0,1,35,192,7,19,34,34,35,42,34,34,6,76,34,34,0,145,33,34,0,59,34,8,0,145,34,34,0,65,32,33,34,145,32,32,0,75,32,32,0,19,32,32,29,0,3,32,0,82,32,1,0,82,34,9,0,41,34,34,2,3,32,32,34,107,32,1,3,81,33,23,0,38,33,33,62,42,33,33,1,76,33,33,0,145,34,33,0,59,33,8,0,145,33,33,0,65,32,34,33,145,32,32,0,75,32,32,0,19,32,32,29,0,4,32,0,82,32,1,0,82,33,9,0,41,33,33,2,3,32,32,33,107,32,2,4,82,32,1,0,82,33,9,0,41,33,33,2,3,32,32,33,81,33,23,0,38,33,33,1,5,33,33,29,107,32,3,33,119,0,215,0,82,33,0,0,82,34,9,0,41,34,34,1,92,33,33,34,84,25,33,0,81,32,25,0,2,35,0,0,0,240,0,0,19,32,32,35,42,32,32,12,76,32,32,0,145,34,32,0,59,32,17,0,145,32,32,0,65,33,34,32,145,33,33,0,75,33,33,0,19,33,33,29,0,8,33,0,82,33,1,0,82,32,9,0,41,32,32,2,95,33,32,8,81,34,25,0,1,35,0,15,19,34,34,35,42,34,34,8,76,34,34,0,145,33,34,0,59,34,17,0,145,34,34,0,65,32,33,34,145,32,32,0,75,32,32,0,19,32,32,29,0,10,32,0,82,32,1,0,82,34,9,0,41,34,34,2,3,32,32,34,107,32,1,10,81,33,25,0,1,35,240,0,19,33,33,35,42,33,33,4,76,33,33,0,145,34,33,0,59,33,17,0,145,33,33,0,65,32,34,33,145,32,32,0,75,32,32,0,19,32,32,29,0,11,32,0,82,32,1,0,82,33,9,0,41,33,33,2,3,32,32,33,107,32,2,11,81,34,25,0,38,34,34,15,76,34,34,0,145,33,34,0,59,34,17,0,145,34,34,0,65,32,33,34,145,32,32,0,75,32,32,0,19,32,32,29,0,12,32,0,82,32,1,0,82,34,9,0,41,34,34,2,3,32,32,34,107,32,3,12,119,0,139,0,82,32,1,0,82,34,9,0,41,34,34,2,82,33,0,0,82,35,14,0,90,33,33,35,95,32,34,33,82,33,1,0,82,34,9,0,41,34,34,2,3,33,33,34,82,34,0,0,82,32,14,0,25,32,32,1,90,34,34,32,107,33,1,34,82,34,1,0,82,33,9,0,41,33,33,2,3,34,34,33,82,33,0,0,82,32,14,0,25,32,32,2,90,33,33,32,107,34,2,33,82,33,1,0,82,34,9,0,41,34,34,2,3,33,33,34,82,34,0,0,82,32,14,0,25,32,32,3,90,34,34,32,107,33,3,34,82,34,14,0,25,34,34,4,85,14,34,0,119,0,101,0,82,34,0,0,82,35,14,0,41,35,35,2,100,32,34,35,145,32,32,0,59,34,255,0,145,34,34,0,65,33,32,34,145,33,33,0,75,33,33,0,19,33,33,29,0,13,33,0,82,33,1,0,82,34,9,0,41,34,34,2,95,33,34,13,82,34,1,0,82,33,9,0,41,33,33,2,3,34,34,33,1,33,0,0,107,34,1,33,82,33,1,0,82,34,9,0,41,34,34,2,3,33,33,34,1,34,0,0,107,33,2,34,82,34,1,0,82,33,9,0,41,33,33,2,3,34,34,33,1,33,255,255,107,34,3,33,119,0,66,0,82,32,0,0,82,35,14,0,41,35,35,2,100,34,32,35,145,34,34,0,59,32,255,0,145,32,32,0,65,33,34,32,145,33,33,0,75,33,33,0,19,33,33,29,0,15,33,0,82,33,1,0,82,32,9,0,41,32,32,2,95,33,32,15,82,34,0,0,82,35,14,0,25,35,35,1,41,35,35,2,100,33,34,35,145,33,33,0,59,34,255,0,145,34,34,0,65,32,33,34,145,32,32,0,75,32,32,0,19,32,32,29,0,16,32,0,82,32,1,0,82,34,9,0,41,34,34,2,3,32,32,34,107,32,1,16,82,33,0,0,82,35,14,0,25,35,35,2,41,35,35,2,100,34,33,35,145,34,34,0,59,33,255,0,145,33,33,0,65,32,34,33,145,32,32,0,75,32,32,0,19,32,32,29,0,17,32,0,82,32,1,0,82,33,9,0,41,33,33,2,3,32,32,33,107,32,2,17,82,32,1,0,82,33,9,0,41,33,33,2,3,32,32,33,1,33,255,255,107,32,3,33,82,33,14,0,25,33,33,3,85,14,33,0,1,27,19,0,119,0,3,0,1,27,19,0,119,0,1,0,32,31,27,19,121,31,72,0,1,27,0,0,82,32,0,0,82,34,14,0,41,34,34,2,100,33,32,34,145,33,33,0,59,32,255,0,145,32,32,0,65,31,33,32,145,31,31,0,75,31,31,0,19,31,31,29,0,18,31,0,82,31,1,0,82,32,9,0,41,32,32,2,95,31,32,18,82,33,0,0,82,34,14,0,41,34,34,2,100,31,33,34,145,31,31,0,59,33,255,0,145,33,33,0,65,32,31,33,145,32,32,0,75,32,32,0,19,32,32,29,0,19,32,0,82,32,1,0,82,33,9,0,41,33,33,2,3,32,32,33,107,32,1,19,82,31,0,0,82,34,14,0,41,34,34,2,100,33,31,34,145,33,33,0,59,31,255,0,145,31,31,0,65,32,33,31,145,32,32,0,75,32,32,0,19,32,32,29,0,20,32,0,82,32,1,0,82,31,9,0,41,31,31,2,3,32,32,31,107,32,2,20,82,33,0,0,82,34,14,0,41,34,34,2,100,31,33,34,145,31,31,0,59,33,255,0,145,33,33,0,65,32,31,33,145,32,32,0,75,32,32,0,19,32,32,29,0,21,32,0,82,32,1,0,82,33,9,0,41,33,33,2,3,32,32,33,107,32,3,21,82,32,14,0,25,32,32,4,85,14,32,0,82,32,9,0,25,32,32,1,85,9,32,0,119,0,229,253,82,22,1,0,137,28,0,0,139,22,0,0,140,2,71,0,0,0,0,0,136,64,0,0,0,63,64,0,136,64,0,0,25,64,64,112,137,64,0,0,130,64,0,0,136,65,0,0,49,64,64,65,148,166,1,0,1,65,112,0,135,64,208,2,65,0,0,0,25,30,63,108,25,56,63,104,25,57,63,100,25,58,63,96,25,59,63,92,25,60,63,88,25,61,63,84,25,62,63,80,25,2,63,76,25,3,63,72,25,6,63,68,25,8,63,64,25,11,63,60,25,15,63,56,25,17,63,52,25,20,63,48,25,22,63,44,25,26,63,40,25,31,63,36,25,32,63,32,25,36,63,28,25,39,63,24,25,42,63,20,25,45,63,16,25,49,63,12,25,50,63,8,25,53,63,4,0,55,63,0,85,30,0,0,85,56,1,0,82,64,30,0,25,64,64,20,116,59,64,0,82,64,30,0,25,64,64,108,116,60,64,0,82,64,30,0,25,64,64,112,116,61,64,0,82,64,30,0,25,64,64,64,116,62,64,0,82,64,30,0,1,65,164,0,3,64,64,65,116,2,64,0,82,64,30,0,25,64,64,124,116,3,64,0,82,64,30,0,1,65,132,0,3,64,64,65,116,6,64,0,82,64,56,0,82,65,30,0,1,66,148,0,94,65,65,66,3,64,64,65,85,8,64,0,82,64,30,0,1,65,180,0,3,64,64,65,116,11,64,0,82,64,30,0,1,65,176,0,3,64,64,65,116,15,64,0,82,64,30,0,1,65,168,0,3,64,64,65,116,17,64,0,82,64,30,0,1,65,160,0,94,64,64,65,29,64,64,4,85,20,64,0,82,64,60,0,82,65,8,0,41,65,65,3,3,64,64,65,116,22,64,0,82,64,60,0,82,65,8,0,41,65,65,3,3,64,64,65,25,64,64,4,116,26,64,0,82,65,30,0,134,64,0,0,108,157,3,0,65,0,0,0,121,64,7,0,1,65,50,62,1,66,138,59,1,67,210,7,1,68,204,62,135,64,209,2,65,66,67,68,116,58,22,0,82,64,26,0,82,68,58,0,54,64,64,68,108,173,1,0,82,64,58,0,82,68,22,0,4,64,64,68,85,31,64,0,82,68,6,0,82,67,8,0,5,64,68,67,85,32,64,0,82,67,61,0,82,68,32,0,82,66,31,0,3,68,68,66,41,68,68,2,100,64,67,68,145,64,64,0,89,36,64,0,82,67,58,0,82,68,11,0,82,66,15,0,82,65,17,0,82,69,2,0,82,70,20,0,134,64,0,0,148,40,3,0,67,68,66,65,69,70,0,0,85,39,64,0,82,64,62,0,1,65,1,0,1,70,4,0,138,64,65,70,116,169,1,0,240,169,1,0,196,170,1,0,232,171,1,0,1,70,0,0,85,57,70,0,82,70,59,0,82,69,57,0,56,70,70,69,92,173,1,0,82,69,57,0,82,65,62,0,5,70,69,65,85,53,70,0,1,70,0,0,85,55,70,0,82,70,62,0,82,65,55,0,56,70,70,65,100,169,1,0,82,70,3,0,82,65,53,0,82,69,55,0,3,65,65,69,41,65,65,2,100,51,70,65,145,51,51,0,88,70,36,0,145,70,70,0,65,52,51,70,145,52,52,0,82,70,39,0,82,65,53,0,82,69,55,0,3,65,65,69,41,65,65,2,3,54,70,65,88,70,54,0,145,70,70,0,63,65,70,52,145,65,65,0,89,54,65,0,82,65,55,0,25,65,65,1,85,55,65,0,119,0,227,255,82,65,57,0,25,65,65,1,85,57,65,0,119,0,213,255,1,70,0,0,85,57,70,0,82,70,59,0,82,69,57,0,56,70,70,69,92,173,1,0,116,42,57,0,82,70,3,0,82,69,42,0,25,69,69,0,41,69,69,2,100,4,70,69,145,4,4,0,88,70,36,0,145,70,70,0,65,5,4,70,145,5,5,0,82,70,39,0,82,69,42,0,25,69,69,0,41,69,69,2,3,7,70,69,88,70,7,0,145,70,70,0,63,69,70,5,145,69,69,0,89,7,69,0,82,69,57,0,25,69,69,1,85,57,69,0,119,0,228,255,1,69,0,0,85,57,69,0,82,69,59,0,82,70,57,0,56,69,69,70,92,173,1,0,82,69,57,0,41,69,69,1,85,45,69,0,82,69,3,0,82,70,45,0,25,70,70,0,41,70,70,2,100,9,69,70,145,9,9,0,88,69,36,0,145,69,69,0,65,10,9,69,145,10,10,0,82,69,39,0,82,70,45,0,25,70,70,0,41,70,70,2,3,12,69,70,88,69,12,0,145,69,69,0,63,70,69,10,145,70,70,0,89,12,70,0,82,70,3,0,82,69,45,0,25,69,69,1,41,69,69,2,100,13,70,69,145,13,13,0,88,70,36,0,145,70,70,0,65,14,13,70,145,14,14,0,82,70,39,0,82,69,45,0,25,69,69,1,41,69,69,2,3,16,70,69,88,70,16,0,145,70,70,0,63,69,70,14,145,69,69,0,89,16,69,0,82,69,57,0,25,69,69,1,85,57,69,0,119,0,206,255,1,69,0,0,85,57,69,0,82,69,59,0,82,70,57,0,56,69,69,70,92,173,1,0,82,69,57,0,27,69,69,3,85,49,69,0,82,69,3,0,82,70,49,0,25,70,70,0,41,70,70,2,100,18,69,70,145,18,18,0,88,69,36,0,145,69,69,0,65,19,18,69,145,19,19,0,82,69,39,0,82,70,49,0,25,70,70,0,41,70,70,2,3,21,69,70,88,69,21,0,145,69,69,0,63,70,69,19,145,70,70,0,89,21,70,0,82,70,3,0,82,69,49,0,25,69,69,1,41,69,69,2,100,23,70,69,145,23,23,0,88,70,36,0,145,70,70,0,65,24,23,70,145,24,24,0,82,70,39,0,82,69,49,0,25,69,69,1,41,69,69,2,3,25,70,69,88,70,25,0,145,70,70,0,63,69,70,24,145,69,69,0,89,25,69,0,82,69,3,0,82,70,49,0,25,70,70,2,41,70,70,2,100,27,69,70,145,27,27,0,88,69,36,0,145,69,69,0,65,28,27,69,145,28,28,0,82,69,39,0,82,70,49,0,25,70,70,2,41,70,70,2,3,29,69,70,88,69,29,0,145,69,69,0,63,70,69,28,145,70,70,0,89,29,70,0,82,70,57,0,25,70,70,1,85,57,70,0,119,0,186,255,1,70,0,0,85,57,70,0,82,70,59,0,82,69,57,0,56,70,70,69,92,173,1,0,82,70,57,0,41,70,70,2,85,50,70,0,82,70,3,0,82,69,50,0,25,69,69,0,41,69,69,2,100,33,70,69,145,33,33,0,88,70,36,0,145,70,70,0,65,34,33,70,145,34,34,0,82,70,39,0,82,69,50,0,25,69,69,0,41,69,69,2,3,35,70,69,88,70,35,0,145,70,70,0,63,69,70,34,145,69,69,0,89,35,69,0,82,69,3,0,82,70,50,0,25,70,70,1,41,70,70,2,100,37,69,70,145,37,37,0,88,69,36,0,145,69,69,0,65,38,37,69,145,38,38,0,82,69,39,0,82,70,50,0,25,70,70,1,41,70,70,2,3,40,69,70,88,69,40,0,145,69,69,0,63,70,69,38,145,70,70,0,89,40,70,0,82,70,3,0,82,69,50,0,25,69,69,2,41,69,69,2,100,41,70,69,145,41,41,0,88,70,36,0,145,70,70,0,65,43,41,70,145,43,43,0,82,70,39,0,82,69,50,0,25,69,69,2,41,69,69,2,3,44,70,69,88,70,44,0,145,70,70,0,63,69,70,43,145,69,69,0,89,44,69,0,82,69,3,0,82,70,50,0,25,70,70,3,41,70,70,2,100,46,69,70,145,46,46,0,88,69,36,0,145,69,69,0,65,47,46,69,145,47,47,0,82,69,39,0,82,70,50,0,25,70,70,3,41,70,70,2,3,48,69,70,88,69,48,0,145,69,69,0,63,70,69,47,145,70,70,0,89,48,70,0,82,70,57,0,25,70,70,1,85,57,70,0,119,0,166,255,82,64,58,0,25,64,64,1,85,58,64,0,119,0,174,254,137,63,0,0,139,0,0,0,140,2,53,0,0,0,0,0,2,46,0,0,147,39,0,0,1,42,0,0,136,47,0,0,0,43,47,0,136,47,0,0,1,48,80,10,3,47,47,48,137,47,0,0,130,47,0,0,136,48,0,0,49,47,47,48,188,173,1,0,1,48,80,10,135,47,208,2,48,0,0,0,1,47,152,8,3,39,43,47,1,47,144,8,3,38,43,47,1,47,136,8,3,36,43,47,1,47,128,8,3,35,43,47,1,47,120,8,3,34,43,47,1,47,112,8,3,33,43,47,1,47,104,8,3,32,43,47,1,47,96,8,3,31,43,47,1,47,88,8,3,30,43,47,1,47,80,8,3,29,43,47,1,47,72,8,3,28,43,47,1,47,64,8,3,27,43,47,1,47,56,8,3,26,43,47,1,47,48,8,3,25,43,47,1,47,40,8,3,24,43,47,1,47,32,8,3,23,43,47,1,47,24,8,3,40,43,47,1,47,16,8,3,37,43,47,1,47,8,8,3,22,43,47,1,47,0,8,3,21,43,47,1,47,68,10,3,11,43,47,1,47,64,10,3,12,43,47,1,47,60,10,3,14,43,47,1,47,56,10,3,16,43,47,1,47,52,10,3,17,43,47,1,47,48,10,3,18,43,47,0,19,43,0,1,47,44,10,3,20,43,47,1,47,72,10,3,2,43,47,1,47,168,9,3,3,43,47,1,47,104,9,3,4,43,47,1,47,100,9,3,5,43,47,1,47,96,9,3,6,43,47,1,47,32,9,3,7,43,47,1,47,224,8,3,8,43,47,1,47,160,8,3,9,43,47,85,11,0,0,85,12,1,0,1,48,0,31,135,47,220,2,48,0,0,0,85,21,47,0,1,48,1,0,1,49,242,41,134,47,0,0,104,5,3,0,48,49,21,0,1,49,1,31,135,47,220,2,49,0,0,0,85,22,47,0,1,49,1,0,1,48,4,42,134,47,0,0,104,5,3,0,49,48,22,0,1,48,2,31,135,47,220,2,48,0,0,0,85,37,47,0,1,48,1,0,1,49,22,42,134,47,0,0,104,5,3,0,48,49,37,0,2,49,0,0,140,139,0,0,135,47,220,2,49,0,0,0,85,40,47,0,1,49,1,0,1,48,40,42,134,47,0,0,104,5,3,0,49,48,40,0,1,47,0,0,85,14,47,0,1,48,3,31,135,47,220,2,48,0,0,0,85,16,47,0,82,48,16,0,135,47,0,0,48,0,0,0,25,47,47,1,85,17,47,0,82,48,17,0,135,47,1,0,48,0,0,0,85,18,47,0,82,48,18,0,82,49,16,0,135,47,2,0,48,49,0,0,82,47,18,0,1,49,58,42,134,13,0,0,168,106,3,0,47,49,0,0,82,49,14,0,41,49,49,2,97,19,49,13,82,49,14,0,41,49,49,2,94,49,19,49,120,49,2,0,119,0,13,0,82,49,14,0,25,49,49,1,85,14,49,0,1,49,0,0,1,47,58,42,134,15,0,0,168,106,3,0,49,47,0,0,82,47,14,0,41,47,47,2,97,19,47,15,119,0,240,255,82,49,18,0,135,47,214,2,49,0,0,0,82,47,14,0,26,47,47,1,85,14,47,0,116,23,14,0,1,49,1,0,1,48,60,42,134,47,0,0,104,5,3,0,49,48,23,0,1,47,0,0,85,20,47,0,82,47,14,0,82,48,20,0,56,47,47,48,132,179,1,0,82,48,20,0,41,48,48,2,94,48,19,48,1,49,95,42,134,47,0,0,4,118,3,0,48,49,0,0,120,47,23,0,2,47,0,0,169,164,0,0,1,49,1,0,83,47,49,0,2,49,0,0,196,160,0,0,1,48,122,42,135,47,221,2,48,0,0,0,85,49,47,0,2,47,0,0,224,158,0,0,1,48,143,42,135,49,221,2,48,0,0,0,85,47,49,0,2,49,0,0,192,160,0,0,1,48,164,42,135,47,221,2,48,0,0,0,85,49,47,0,82,49,20,0,41,49,49,2,94,49,19,49,1,48,188,42,134,47,0,0,4,118,3,0,49,48,0,0,120,47,5,0,2,47,0,0,171,164,0,0,1,48,1,0,83,47,48,0,82,47,20,0,41,47,47,2,94,47,19,47,1,49,208,42,134,48,0,0,4,118,3,0,47,49,0,0,120,48,5,0,2,48,0,0,172,164,0,0,1,49,1,0,83,48,49,0,82,48,20,0,41,48,48,2,94,48,19,48,1,47,229,42,134,49,0,0,4,118,3,0,48,47,0,0,120,49,3,0,1,42,15,0,119,0,20,0,82,47,20,0,41,47,47,2,94,47,19,47,1,48,5,43,134,49,0,0,4,118,3,0,47,48,0,0,120,49,3,0,1,42,15,0,119,0,10,0,82,48,20,0,41,48,48,2,94,48,19,48,1,47,38,43,134,49,0,0,4,118,3,0,48,47,0,0,120,49,2,0,1,42,15,0,32,49,42,15,121,49,6,0,1,42,0,0,2,49,0,0,173,164,0,0,1,47,1,0,83,49,47,0,82,49,20,0,41,49,49,2,94,49,19,49,1,48,78,43,134,47,0,0,4,118,3,0,49,48,0,0,120,47,3,0,1,42,18,0,119,0,10,0,82,48,20,0,41,48,48,2,94,48,19,48,1,49,114,43,134,47,0,0,4,118,3,0,48,49,0,0,120,47,2,0,1,42,18,0,32,47,42,18,121,47,6,0,1,42,0,0,2,47,0,0,174,164,0,0,1,49,1,0,83,47,49,0,82,47,20,0,41,47,47,2,94,47,19,47,1,48,147,43,134,49,0,0,4,118,3,0,47,48,0,0,120,49,5,0,2,49,0,0,175,164,0,0,1,48,1,0,83,49,48,0,82,49,20,0,41,49,49,2,94,49,19,49,1,47,172,43,134,48,0,0,4,118,3,0,49,47,0,0,120,48,5,0,2,48,0,0,176,164,0,0,1,47,1,0,83,48,47,0,82,48,20,0,41,48,48,2,94,48,19,48,1,49,205,43,134,47,0,0,4,118,3,0,48,49,0,0,120,47,5,0,2,47,0,0,177,164,0,0,1,49,1,0,83,47,49,0,82,47,20,0,41,47,47,2,94,47,19,47,1,48,241,43,134,49,0,0,4,118,3,0,47,48,0,0,120,49,11,0,2,49,0,0,178,164,0,0,1,48,1,0,83,49,48,0,2,49,0,0,255,132,0,0,2,47,0,0,188,160,0,0,135,48,222,2,49,47,0,0,82,47,20,0,41,47,47,2,94,47,19,47,1,49,19,44,134,48,0,0,4,118,3,0,47,49,0,0,120,48,5,0,2,48,0,0,170,164,0,0,1,49,1,0,83,48,49,0,82,48,20,0,41,48,48,2,94,48,19,48,1,47,47,44,134,49,0,0,4,118,3,0,48,47,0,0,120,49,5,0,2,49,0,0,179,164,0,0,1,47,1,0,83,49,47,0,82,47,20,0,25,47,47,1,85,20,47,0,119,0,55,255,2,47,0,0,169,164,0,0,78,47,47,0,38,47,47,1,121,47,7,0,1,49,1,0,1,48,67,44,134,47,0,0,104,5,3,0,49,48,24,0,119,0,6,0,1,48,2,0,1,49,142,44,134,47,0,0,104,5,3,0,48,49,25,0,2,47,0,0,171,164,0,0,78,47,47,0,38,47,47,1,121,47,7,0,1,49,1,0,1,48,203,44,134,47,0,0,104,5,3,0,49,48,26,0,119,0,6,0,1,48,2,0,1,49,22,45,134,47,0,0,104,5,3,0,48,49,27,0,2,47,0,0,173,164,0,0,78,47,47,0,38,47,47,1,121,47,6,0,1,49,1,0,1,48,114,45,134,47,0,0,104,5,3,0,49,48,28,0,2,47,0,0,174,164,0,0,78,47,47,0,38,47,47,1,121,47,6,0,1,48,1,0,1,49,160,45,134,47,0,0,104,5,3,0,48,49,29,0,2,47,0,0,175,164,0,0,78,47,47,0,38,47,47,1,121,47,6,0,1,49,1,0,1,48,207,45,134,47,0,0,104,5,3,0,49,48,30,0,2,47,0,0,176,164,0,0,78,47,47,0,38,47,47,1,121,47,6,0,1,48,1,0,1,49,2,46,134,47,0,0,104,5,3,0,48,49,31,0,2,47,0,0,177,164,0,0,78,47,47,0,38,47,47,1,121,47,6,0,1,49,1,0,1,48,49,46,134,47,0,0,104,5,3,0,49,48,32,0,2,47,0,0,178,164,0,0,78,47,47,0,38,47,47,1,121,47,11,0,2,48,0,0,188,160,0,0,88,47,48,0,145,47,47,0,87,33,47,0,1,48,1,0,1,49,96,46,134,47,0,0,104,5,3,0,48,49,33,0,2,47,0,0,170,164,0,0,78,47,47,0,38,47,47,1,121,47,6,0,1,49,1,0,1,48,162,46,134,47,0,0,104,5,3,0,49,48,34,0,2,47,0,0,179,164,0,0,78,47,47,0,38,47,47,1,121,47,6,0,1,48,1,0,1,49,215,46,134,47,0,0,104,5,3,0,48,49,35,0,1,47,250,46,78,47,47,0,83,2,47,0,1,49,251,46,78,49,49,0,107,2,1,49,1,47,252,46,78,47,47,0,107,2,2,47,1,49,253,46,78,49,49,0,107,2,3,49,2,49,0,0,84,158,0,0,1,48,1,0,1,50,1,0,1,51,7,0,1,52,1,0,134,47,0,0,152,244,1,0,2,48,50,51,52,0,0,0,85,49,47,0,2,47,0,0,84,158,0,0,82,47,47,0,121,47,11,0,2,47,0,0,84,158,0,0,82,47,47,0,85,36,47,0,1,49,1,0,1,52,254,46,134,47,0,0,104,5,3,0,49,52,36,0,119,0,6,0,1,52,2,0,1,49,49,47,134,47,0,0,104,5,3,0,52,49,38,0,134,47,0,0,72,195,2,0,3,0,0,0,2,49,0,0,200,160,0,0,1,52,132,0,135,47,210,2,49,3,52,0,2,52,0,0,92,158,0,0,2,49,0,0,200,160,0,0,1,51,132,0,135,47,210,2,52,49,51,0,134,47,0,0,44,3,2,0,134,47,0,0,4,103,3,0,4,0,0,0,2,41,0,0,12,158,0,0,0,44,4,0,25,45,41,64,116,41,44,0,25,41,41,4,25,44,44,4,54,47,41,45,96,182,1,0,2,47,0,0,76,158,0,0,1,49,0,12,135,51,1,0,49,0,0,0,85,47,51,0,1,51,0,0,85,5,51,0,1,51,0,1,82,47,5,0,56,51,51,47,24,183,1,0,2,51,0,0,76,158,0,0,82,51,51,0,82,47,5,0,27,47,47,12,1,49,7,0,97,51,47,49,2,49,0,0,76,158,0,0,82,49,49,0,82,47,5,0,27,47,47,12,3,49,49,47,1,47,0,0,109,49,4,47,2,47,0,0,76,158,0,0,82,47,47,0,82,49,5,0,27,49,49,12,3,47,47,49,2,49,0,0,84,158,0,0,82,49,49,0,109,47,8,49,82,49,5,0,25,49,49,1,85,5,49,0,119,0,224,255,2,49,0,0,80,158,0,0,1,47,1,0,85,49,47,0,1,47,0,0,85,6,47,0,1,47,32,0,82,49,6,0,56,47,47,49,144,183,1,0,2,47,0,0,176,139,0,0,82,49,6,0,41,49,49,6,3,10,47,49,134,49,0,0,4,103,3,0,7,0,0,0,0,41,10,0,0,44,7,0,25,45,41,64,116,41,44,0,25,41,41,4,25,44,44,4,54,49,41,45,108,183,1,0,82,49,6,0,25,49,49,1,85,6,49,0,119,0,233,255,134,49,0,0,4,103,3,0,8,0,0,0,2,41,0,0,132,157,0,0,0,44,8,0,25,45,41,64,116,41,44,0,25,41,41,4,25,44,44,4,54,49,41,45,172,183,1,0,134,49,0,0,4,103,3,0,9,0,0,0,2,41,0,0,200,157,0,0,0,44,9,0,25,45,41,64,116,41,44,0,25,41,41,4,25,44,44,4,54,49,41,45,220,183,1,0,2,49,0,0,196,157,0,0,2,47,0,0,200,157,0,0], eb + 102400);
  HEAPU8.set([85,49,47,0,1,49,3,2,135,47,223,2,49,0,0,0,1,49,113,11,135,47,224,2,49,0,0,0,1,49,2,3,1,51,3,3,135,47,225,2,49,51,0,0,1,51,226,11,135,47,226,2,51,0,0,0,1,51,5,4,135,47,227,2,51,0,0,0,1,51,1,9,135,47,228,2,51,0,0,0,1,51,68,11,135,47,226,2,51,0,0,0,59,51,0,0,59,49,0,0,59,52,0,0,59,50,1,0,135,47,229,2,51,49,52,50,59,50,1,0,135,47,230,2,50,0,0,0,1,50,0,65,135,47,231,2,50,0,0,0,2,47,0,0,228,158,0,0,82,50,11,0,85,47,50,0,2,50,0,0,232,158,0,0,82,47,12,0,85,50,47,0,1,50,1,0,1,52,88,47,134,47,0,0,104,5,3,0,50,52,39,0,137,43,0,0,139,0,0,0,140,6,57,0,0,0,0,0,2,51,0,0,194,0,0,0,2,52,0,0,195,0,0,0,136,53,0,0,0,49,53,0,136,53,0,0,1,54,160,0,3,53,53,54,137,53,0,0,130,53,0,0,136,54,0,0,49,53,53,54,20,185,1,0,1,54,160,0,135,53,208,2,54,0,0,0,25,10,49,120,25,9,49,112,25,8,49,96,25,7,49,80,25,6,49,60,25,38,49,56,25,41,49,52,25,44,49,48,25,45,49,44,25,11,49,40,25,14,49,36,25,17,49,32,1,53,152,0,3,19,49,53,25,21,49,28,25,22,49,24,25,26,49,8,0,30,49,0,85,38,1,0,89,41,3,0,89,44,4,0,82,54,38,0,135,53,0,0,54,0,0,0,85,45,53,0,1,53,0,0,85,11,53,0,1,53,0,0,85,14,53,0,59,53,0,0,145,53,53,0,89,17,53,0,1,53,0,0,83,19,53,0,1,53,0,0,85,21,53,0,88,32,41,0,145,32,32,0,106,54,0,20,76,54,54,0,145,54,54,0,66,53,32,54,145,53,53,0,89,17,53,0,1,53,0,0,85,22,53,0,82,53,45,0,82,54,22,0,56,53,53,54,48,190,1,0,82,53,38,0,82,54,22,0,91,53,53,54,32,53,53,10,121,53,17,0,106,50,0,20,28,53,50,2,3,33,50,53,76,53,33,0,145,33,53,0,88,54,17,0,145,54,54,0,65,53,33,54,145,53,53,0,75,34,53,0,82,53,14,0,3,53,53,34,85,14,53,0,1,53,0,0,85,11,53,0,119,0,253,0,82,35,38,0,82,36,22,0,82,53,38,0,82,54,22,0,91,53,53,54,45,53,53,51,184,186,1,0,25,53,36,1,90,53,35,53,83,19,53,0,79,37,19,0,116,10,0,0,106,54,0,4,109,10,4,54,106,53,0,8,109,10,8,53,106,54,0,12,109,10,12,54,106,53,0,16,109,10,16,53,106,54,0,20,109,10,20,54,106,53,0,24,109,10,24,53,106,54,0,28,109,10,28,54,134,54,0,0,252,83,3,0,10,37,0,0,85,21,54,0,82,54,22,0,25,54,54,1,85,22,54,0,119,0,55,0,82,39,38,0,82,40,22,0,91,54,35,36,45,54,54,52,60,187,1,0,25,54,40,1,90,54,39,54,83,19,54,0,79,54,19,0,25,42,54,64,116,10,0,0,106,53,0,4,109,10,4,53,106,54,0,8,109,10,8,54,106,53,0,12,109,10,12,53,106,54,0,16,109,10,16,54,106,53,0,20,109,10,20,53,106,54,0,24,109,10,24,54,106,53,0,28,109,10,28,53,134,53,0,0,252,83,3,0,10,42,0,0,85,21,53,0,82,53,22,0,25,53,53,1,85,22,53,0,119,0,22,0,91,43,39,40,116,10,0,0,106,54,0,4,109,10,4,54,106,53,0,8,109,10,8,53,106,54,0,12,109,10,12,54,106,53,0,16,109,10,16,53,106,54,0,20,109,10,20,54,106,53,0,24,109,10,24,53,106,54,0,28,109,10,28,54,134,54,0,0,252,83,3,0,10,43,0,0,85,21,54,0,119,0,1,0,82,54,38,0,82,53,22,0,91,54,54,53,33,54,54,32,121,54,118,0,106,54,0,28,82,53,21,0,27,53,53,36,3,54,54,53,25,46,54,4,88,47,2,0,145,47,47,0,82,54,11,0,76,54,54,0,145,54,54,0,63,48,47,54,145,48,48,0,106,54,0,28,82,53,21,0,27,53,53,36,3,54,54,53,106,12,54,20,76,54,12,0,145,12,54,0,88,55,17,0,145,55,55,0,65,53,12,55,145,53,53,0,63,54,48,53,145,54,54,0,89,26,54,0,112,13,2,4,145,13,13,0,82,54,14,0,76,54,54,0,145,54,54,0,63,15,13,54,145,15,15,0,106,54,0,28,82,53,21,0,27,53,53,36,3,54,54,53,106,16,54,24,76,54,16,0,145,16,54,0,88,56,17,0,145,56,56,0,65,55,16,56,145,55,55,0,63,53,15,55,145,53,53,0,113,26,4,53,106,53,0,28,82,54,21,0,27,54,54,36,3,53,53,54,25,53,53,4,112,18,53,8,145,18,18,0,88,55,17,0,145,55,55,0,65,54,18,55,145,54,54,0,113,26,8,54,106,54,0,28,82,53,21,0,27,53,53,36,3,54,54,53,25,54,54,4,112,20,54,12,145,20,20,0,88,55,17,0,145,55,55,0,65,53,20,55,145,53,53,0,113,26,12,53,59,53,0,0,145,53,53,0,89,30,53,0,59,54,0,0,145,54,54,0,113,30,4,54,116,6,0,0,106,53,0,4,109,6,4,53,106,54,0,8,109,6,8,54,106,53,0,12,109,6,12,53,106,54,0,16,109,6,16,54,116,7,46,0,106,53,46,4,109,7,4,53,106,54,46,8,109,7,8,54,106,53,46,12,109,7,12,53,116,8,26,0,106,54,26,4,109,8,4,54,106,53,26,8,109,8,8,53,106,54,26,12,109,8,12,54,116,9,30,0,106,53,30,4,109,9,4,53,78,53,5,0,83,10,53,0,102,54,5,1,107,10,1,54,102,53,5,2,107,10,2,53,102,54,5,3,107,10,3,54,59,53,0,0,145,53,53,0,134,54,0,0,232,77,2,0,6,7,8,9,53,10,0,0,106,54,0,28,82,53,21,0,27,53,53,36,3,23,54,53,106,53,0,28,82,54,21,0,27,54,54,36,3,53,53,54,106,53,53,28,120,53,17,0,25,53,23,4,112,24,53,8,145,24,24,0,88,53,17,0,145,53,53,0,65,25,24,53,145,25,25,0,88,54,44,0,145,54,54,0,63,53,25,54,145,53,53,0,75,27,53,0,82,53,11,0,3,53,53,27,85,11,53,0,119,0,17,0,106,28,23,28,76,53,28,0,145,28,53,0,88,53,17,0,145,53,53,0,65,29,28,53,145,29,29,0,88,54,44,0,145,54,54,0,63,53,29,54,145,53,53,0,75,31,53,0,82,53,11,0,3,53,53,31,85,11,53,0,119,0,1,0,82,53,22,0,25,53,53,1,85,22,53,0,119,0,232,254,137,49,0,0,139,0,0,0,140,2,74,0,0,0,0,0,2,70,0,0,255,0,0,0,1,68,0,0,136,71,0,0,0,69,71,0,136,71,0,0,1,72,32,4,3,71,71,72,137,71,0,0,130,71,0,0,136,72,0,0,49,71,71,72,128,190,1,0,1,72,32,4,135,71,208,2,72,0,0,0,1,71,0,4,3,42,69,71,0,47,69,0,1,71,0,0,85,42,71,0,1,72,0,0,109,42,4,72,1,71,0,0,109,42,8,71,1,72,0,0,109,42,12,72,1,71,0,0,109,42,16,71,1,72,0,0,109,42,20,72,1,71,0,0,109,42,24,71,1,72,0,0,109,42,28,72,78,48,1,0,41,72,48,24,42,72,72,24,120,72,8,0,1,7,1,0,1,11,255,255,1,13,0,0,1,20,1,0,1,25,255,255,1,68,25,0,119,0,146,0,1,14,0,0,0,38,48,0,90,72,0,14,120,72,3,0,1,27,0,0,119,0,140,0,19,72,38,70,0,63,72,0,43,72,63,5,41,72,72,2,3,41,42,72,82,72,41,0,1,71,1,0,38,73,63,31,22,71,71,73,20,72,72,71,85,41,72,0,25,14,14,1,41,72,63,2,97,47,72,14,90,38,1,14,41,72,38,24,42,72,72,24,33,72,72,0,120,72,234,255,1,72,1,0,16,43,72,14,121,43,112,0,1,8,1,0,1,9,1,0,1,10,0,0,1,12,255,255,1,45,1,0,3,72,9,12,90,44,1,72,90,46,1,45,41,72,44,24,42,72,72,24,41,71,46,24,42,71,71,24,45,72,72,71,208,191,1,0,45,72,9,8,188,191,1,0,0,15,8,0,1,16,1,0,3,17,8,10,0,18,12,0,119,0,20,0,0,15,8,0,25,16,9,1,0,17,10,0,0,18,12,0,119,0,15,0,19,72,46,70,19,71,44,70,47,72,72,71,244,191,1,0,4,15,45,12,1,16,1,0,0,17,45,0,0,18,12,0,119,0,6,0,1,15,1,0,1,16,1,0,25,17,10,1,0,18,10,0,119,0,1,0,3,45,16,17,57,72,14,45,40,192,1,0,0,8,15,0,0,9,16,0,0,10,17,0,0,12,18,0,119,0,214,255,121,43,56,0,1,21,1,0,1,22,1,0,1,23,0,0,1,26,255,255,1,50,1,0,3,72,22,26,90,49,1,72,90,51,1,50,41,72,49,24,42,72,72,24,41,71,51,24,42,71,71,24,45,72,72,71,148,192,1,0,45,72,22,21,128,192,1,0,0,29,21,0,1,30,1,0,3,31,21,23,0,32,26,0,119,0,20,0,0,29,21,0,25,30,22,1,0,31,23,0,0,32,26,0,119,0,15,0,19,72,49,70,19,71,51,70,47,72,72,71,184,192,1,0,4,29,50,26,1,30,1,0,0,31,50,0,0,32,26,0,119,0,6,0,1,29,1,0,1,30,1,0,25,31,23,1,0,32,23,0,119,0,1,0,3,50,30,31,50,72,14,50,244,192,1,0,0,7,15,0,0,11,18,0,0,13,14,0,0,20,29,0,0,25,32,0,1,68,25,0,119,0,19,0,0,21,29,0,0,22,30,0,0,23,31,0,0,26,32,0,119,0,207,255,0,7,15,0,0,11,18,0,0,13,14,0,1,20,1,0,1,25,255,255,1,68,25,0,119,0,7,0,1,7,1,0,1,11,255,255,0,13,14,0,1,20,1,0,1,25,255,255,1,68,25,0,32,72,68,25,121,72,124,0,25,72,11,1,25,71,25,1,16,52,72,71,125,19,52,20,7,0,0,0,125,24,52,25,11,0,0,0,25,53,24,1,3,72,1,19,134,71,0,0,100,125,3,0,1,72,53,0,120,71,6,0,4,56,13,19,0,3,56,0,0,34,19,0,0,37,56,0,119,0,10,0,4,71,13,24,26,54,71,1,16,72,54,24,125,71,72,24,54,0,0,0,25,55,71,1,1,3,0,0,0,34,55,0,4,37,13,55,39,71,13,63,0,57,71,0,26,58,13,1,33,59,3,0,0,2,0,0,1,4,0,0,0,6,0,0,0,60,2,0,4,71,6,60,48,71,71,13,20,194,1,0,1,71,0,0,134,61,0,0,52,119,2,0,6,71,57,0,120,61,3,0,3,28,6,57,119,0,9,0,4,71,61,60,48,71,71,13,12,194,1,0,1,27,0,0,119,0,74,0,0,28,61,0,119,0,2,0,0,28,6,0,91,62,2,58,1,71,1,0,38,72,62,31,22,71,71,72,43,72,62,5,41,72,72,2,94,72,42,72,19,71,71,72,120,71,4,0,1,5,0,0,0,33,13,0,119,0,55,0,41,71,62,2,94,71,47,71,4,64,13,71,121,64,9,0,1,5,0,0,33,71,4,0,19,71,59,71,16,72,64,34,19,71,71,72,125,33,71,37,64,0,0,0,119,0,43,0,16,65,4,53,125,66,65,53,4,0,0,0,90,67,1,66,41,71,67,24,42,71,71,24,121,71,19,0,0,35,66,0,0,39,67,0,41,71,39,24,42,71,71,24,90,72,2,35,53,71,71,72,208,194,1,0,25,40,35,1,90,39,1,40,41,71,39,24,42,71,71,24,120,71,2,0,119,0,6,0,0,35,40,0,119,0,244,255,1,5,0,0,4,33,35,24,119,0,18,0,120,65,3,0,0,27,2,0,119,0,19,0,0,36,53,0,26,36,36,1,90,71,1,36,90,72,2,36,46,71,71,72,12,195,1,0,0,5,3,0,0,33,34,0,119,0,6,0,50,71,36,4,28,195,1,0,0,27,2,0,119,0,6,0,119,0,244,255,3,2,2,33,0,4,5,0,0,6,28,0,119,0,168,255,137,69,0,0,139,27,0,0,140,2,88,0,0,0,0,0,2,83,0,0,0,0,128,0,2,84,0,0,0,0,0,127,2,85,0,0,176,119,0,0,1,80,0,0,136,86,0,0,0,81,86,0,136,86,0,0,1,87,176,0,3,86,86,87,137,86,0,0,130,86,0,0,136,87,0,0,49,86,86,87,144,195,1,0,1,87,176,0,135,86,208,2,87,0,0,0,25,79,81,112,1,86,160,0,3,78,81,86,1,86,144,0,3,39,81,86,25,48,81,80,0,53,81,0,25,57,81,64,25,59,81,104,25,63,81,96,1,86,152,0,3,69,81,86,1,86,136,0,3,73,81,86,25,14,81,40,1,86,128,0,3,18,81,86,25,22,81,120,25,26,81,72,25,29,81,56,25,32,81,48,25,35,81,32,25,36,0,16,25,37,48,8,25,38,79,4,25,40,57,4,25,41,0,4,25,42,0,8,25,43,57,4,25,44,0,25,25,45,0,24,25,46,39,4,25,47,1,4,1,2,0,0,27,86,2,20,3,86,85,86,102,86,86,16,121,86,227,0,27,86,2,20,3,82,85,86,134,86,0,0,108,158,3,0,39,36,82,0,1,86,0,0,85,48,86,0,1,87,0,0,109,48,4,87,1,86,0,0,109,48,8,86,1,87,0,0,109,48,12,87,25,49,82,8,134,87,0,0,176,158,3,0,48,49,39,0,134,87,0,0,108,158,3,0,79,49,39,0,0,50,79,0,106,51,50,4,0,52,37,0,116,52,50,0,109,52,4,51,134,87,0,0,12,142,3,0,1,48,0,0,121,87,198,0,134,87,0,0,252,110,3,0,48,53,0,0,59,3,0,0,145,3,3,0,59,4,0,0,145,4,4,0,1,5,0,0,1,6,0,0,1,7,0,0,1,8,0,0,41,87,8,3,3,54,53,87,25,8,8,1,38,87,8,3,41,87,87,3,3,55,53,87,134,87,0,0,0,3,3,0,79,54,55,0,1,0,0,0,88,56,38,0,145,56,56,0,59,87,0,0,145,87,87,0,69,87,56,87,134,86,0,0,124,176,3,0,56,0,0,0,3,86,86,83,19,86,86,84,33,86,86,0,20,87,87,86,121,87,52,0,0,58,0,0,106,60,58,4,0,61,59,0,116,61,58,0,109,61,4,60,0,62,1,0,106,64,62,4,0,65,63,0,116,65,62,0,109,65,4,64,116,78,59,0,106,86,59,4,109,78,4,86,116,79,63,0,106,87,63,4,109,79,4,87,134,87,0,0,244,142,3,0,57,78,79,56,88,66,57,0,145,66,66,0,88,87,0,0,145,87,87,0,64,67,66,87,145,67,67,0,88,68,40,0,145,68,68,0,88,87,41,0,145,87,87,0,64,70,68,87,145,70,70,0,65,87,67,67,145,87,87,0,65,86,70,70,145,86,86,0,63,71,87,86,145,71,71,0,73,86,4,71,40,87,5,1,20,86,86,87,0,77,86,0,126,9,77,56,3,0,0,0,126,10,77,71,4,0,0,0,1,11,1,0,125,12,77,54,6,0,0,0,125,13,77,55,7,0,0,0,119,0,6,0,58,9,3,0,58,10,4,0,0,11,5,0,0,12,6,0,0,13,7,0,32,86,8,4,120,86,7,0,58,3,9,0,58,4,10,0,0,5,11,0,0,6,12,0,0,7,13,0,119,0,170,255,121,11,99,0,134,86,0,0,176,158,3,0,73,13,12,0,116,79,73,0,106,87,73,4,109,79,4,87,134,87,0,0,172,171,3,0,69,79,0,0,116,79,69,0,106,86,69,4,109,79,4,86,134,86,0,0,228,28,3,0,57,79,0,0,0,72,42,0,106,74,72,4,0,75,26,0,116,75,72,0,109,75,4,74,0,76,57,0,106,15,76,4,0,16,29,0,116,16,76,0,109,16,4,15,116,78,26,0,106,87,26,4,109,78,4,87,116,79,29,0,106,86,29,4,109,79,4,86,134,86,0,0,204,160,3,0,78,79,0,0,145,86,86,0,89,22,86,0,134,86,0,0,228,178,3,0,18,22,57,0,134,86,0,0,176,158,3,0,14,42,18,0,0,17,14,0,106,19,17,4,0,20,42,0,116,20,17,0,109,20,4,19,0,21,0,0,106,23,21,4,0,24,32,0,116,24,21,0,109,24,4,23,0,25,1,0,106,27,25,4,0,28,35,0,116,28,25,0,109,28,4,27,116,78,32,0,106,87,32,4,109,78,4,87,116,79,35,0,106,86,35,4,109,79,4,86,134,86,0,0,244,142,3,0,14,78,79,9,88,86,43,0,145,86,86,0,59,87,1,0,145,87,87,0,69,86,86,87,121,86,18,0,78,86,44,0,120,86,14,0,1,86,1,0,83,45,86,0,27,86,2,20,3,86,85,86,112,30,86,12,145,30,30,0,88,87,46,0,145,87,87,0,64,86,30,87,145,86,86,0,89,47,86,0,116,1,14,0,119,0,4,0,1,80,13,0,119,0,2,0,1,80,13,0,32,86,80,13,121,86,7,0,1,80,0,0,0,31,14,0,106,33,31,4,0,34,1,0,116,34,31,0,109,34,4,33,25,2,2,1,1,86,0,1,53,86,2,86,24,196,1,0,137,81,0,0,139,0,0,0,140,6,48,0,0,0,0,0,1,38,0,0,136,40,0,0,0,39,40,0,136,40,0,0,25,40,40,80,137,40,0,0,130,40,0,0,136,41,0,0,49,40,40,41,4,200,1,0,1,41,80,0,135,40,208,2,41,0,0,0,25,31,39,64,25,33,39,60,25,34,39,56,25,35,39,52,25,6,39,48,25,8,39,44,25,9,39,40,25,12,39,36,25,15,39,32,25,17,39,28,25,18,39,24,25,19,39,20,25,22,39,16,25,24,39,12,25,25,39,8,25,27,39,4,0,28,39,0,85,31,0,0,85,33,1,0,85,34,2,0,89,35,3,0,85,6,4,0,85,8,5,0,88,29,35,0,145,29,29,0,82,41,34,0,82,42,6,0,82,43,8,0,134,40,0,0,32,38,3,0,29,41,42,43,85,9,40,0,82,43,34,0,88,42,35,0,145,42,42,0,134,40,0,0,164,22,3,0,43,42,0,0,85,12,40,0,1,40,0,0,85,15,40,0,82,40,8,0,82,42,15,0,49,40,40,42,192,200,1,0,1,38,22,0,119,0,160,0,59,40,0,0,145,40,40,0,89,22,40,0,1,40,0,0,85,17,40,0,82,40,9,0,82,42,17,0,56,40,40,42,204,201,1,0,82,40,31,0,82,42,17,0,41,42,42,3,94,40,40,42,82,42,15,0,49,40,40,42,144,201,1,0,82,40,15,0,82,42,31,0,82,43,17,0,41,43,43,3,3,42,42,43,106,42,42,4,49,40,40,42,136,201,1,0,88,30,35,0,145,30,30,0,82,43,33,0,82,41,34,0,82,44,17,0,82,45,15,0,82,46,31,0,82,47,17,0,41,47,47,3,94,46,46,47,4,45,45,46,134,42,0,0,220,90,3,0,43,41,30,44,45,0,0,0,88,40,42,0,145,40,40,0,89,24,40,0,88,32,24,0,145,32,32,0,88,42,22,0,145,42,42,0,63,40,42,32,145,40,40,0,89,22,40,0,119,0,4,0,1,38,8,0,119,0,2,0,1,38,8,0,32,40,38,8,121,40,9,0,1,38,0,0,82,40,15,0,82,42,31,0,82,45,17,0,41,45,45,3,94,42,42,45,54,40,40,42,204,201,1,0,82,40,17,0,25,40,40,1,85,17,40,0,119,0,195,255,88,40,22,0,145,40,40,0,62,42,0,0,223,67,234,191,204,204,236,63,145,42,42,0,73,40,40,42,120,40,3,0,1,38,11,0,119,0,83,0,88,40,22,0,145,40,40,0,62,42,0,0,82,253,247,158,153,153,241,63,145,42,42,0,71,40,40,42,120,40,3,0,1,38,13,0,119,0,73,0,59,42,1,0,145,42,42,0,88,45,22,0,145,45,45,0,66,40,42,45,145,40,40,0,89,19,40,0,1,40,0,0,85,17,40,0,82,40,9,0,82,45,17,0,56,40,40,45,44,203,1,0,82,40,31,0,82,45,17,0,41,45,45,3,94,40,40,45,82,45,15,0,49,40,40,45,240,202,1,0,82,40,15,0,82,45,31,0,82,42,17,0,41,42,42,3,3,45,45,42,106,45,45,4,49,40,40,45,232,202,1,0,88,36,19,0,145,36,36,0,88,37,35,0,145,37,37,0,82,40,33,0,82,45,34,0,82,42,17,0,82,44,15,0,82,41,31,0,82,43,17,0,41,43,43,3,94,41,41,43,4,44,44,41,134,7,0,0,220,90,3,0,40,45,37,42,44,0,0,0,88,42,7,0,145,42,42,0,65,44,42,36,145,44,44,0,89,7,44,0,119,0,4,0,1,38,19,0,119,0,2,0,1,38,19,0,32,44,38,19,121,44,9,0,1,38,0,0,82,44,15,0,82,42,31,0,82,45,17,0,41,45,45,3,94,42,42,45,54,44,44,42,44,203,1,0,82,44,17,0,25,44,44,1,85,17,44,0,119,0,198,255,82,44,15,0,25,44,44,1,85,15,44,0,119,0,92,255,32,44,38,11,121,44,8,0,1,42,76,66,1,45,138,59,1,40,114,4,1,41,89,66,135,44,209,2,42,45,40,41,119,0,159,0,32,44,38,13,121,44,8,0,1,41,130,66,1,40,138,59,1,45,115,4,1,42,89,66,135,44,209,2,41,40,45,42,119,0,150,0,32,44,38,22,121,44,148,0,1,44,0,0,85,17,44,0,82,44,9,0,82,42,17,0,56,44,44,42,108,205,1,0,1,44,0,0,85,18,44,0,88,10,35,0,145,10,10,0,82,45,33,0,82,40,34,0,82,41,17,0,82,43,18,0,134,42,0,0,220,90,3,0,45,40,10,41,43,0,0,0,88,44,42,0,145,44,44,0,59,42,0,0,145,42,42,0,69,11,44,42,82,13,18,0,120,11,2,0,119,0,4,0,25,42,13,1,85,18,42,0,119,0,236,255,82,42,31,0,82,44,17,0,41,44,44,3,3,14,42,44,82,44,14,0,3,44,44,13,85,14,44,0,82,44,31,0,82,42,17,0,41,42,42,3,3,16,44,42,1,42,0,0,82,44,31,0,82,43,17,0,41,43,43,3,94,44,44,43,56,42,42,44,100,204,1,0,82,42,16,0,25,42,42,1,85,16,42,0,82,42,18,0,25,42,42,1,85,18,42,0,119,0,239,255,106,42,16,4,82,44,31,0,82,43,17,0,41,43,43,3,94,44,44,43,4,42,42,44,25,42,42,1,85,25,42,0,82,44,12,0,82,43,25,0,134,42,0,0,140,145,3,0,44,43,0,0,85,27,42,0,82,43,34,0,88,44,35,0,145,44,44,0,134,42,0,0,164,22,3,0,43,44,0,0,85,28,42,0,1,42,0,0,85,15,42,0,82,42,27,0,82,44,15,0,56,42,42,44,92,205,1,0,82,42,28,0,82,44,15,0,82,43,18,0,3,44,44,43,56,42,42,44,92,205,1,0,88,20,35,0,145,20,20,0,82,44,33,0,82,43,34,0,82,41,17,0,82,40,15,0,82,45,18,0,3,40,40,45,134,42,0,0,220,90,3,0,44,43,20,41,40,0,0,0,88,21,42,0,145,21,21,0,88,23,35,0,145,23,23,0,82,40,33,0,82,41,34,0,82,43,17,0,82,44,15,0,134,42,0,0,220,90,3,0,40,41,23,43,44,0,0,0,89,42,21,0,82,42,15,0,25,42,42,1,85,15,42,0,119,0,218,255,82,42,17,0,25,42,42,1,85,17,42,0,119,0,139,255,1,42,0,0,85,15,42,0,82,42,9,0,82,44,15,0,56,42,42,44,208,205,1,0,82,42,31,0,82,44,15,0,41,44,44,3,3,42,42,44,106,42,42,4,82,44,8,0,26,44,44,1,134,26,0,0,140,145,3,0,42,44,0,0,82,44,31,0,82,42,15,0,41,42,42,3,3,44,44,42,109,44,4,26,82,44,15,0,25,44,44,1,85,15,44,0,119,0,234,255,137,39,0,0,139,0,0,0,139,0,0,0,140,2,68,0,0,0,0,0,2,62,0,0,173,40,0,0,2,63,0,0,176,40,0,0,2,64,0,0,172,40,0,0,25,36,0,4,82,39,36,0,38,65,39,248,0,42,65,0,3,45,0,42,2,65,0,0,192,162,0,0,82,49,65,0,38,65,39,3,0,56,65,0,33,65,56,1,18,66,49,0,19,65,65,66,16,66,0,45,19,65,65,66,120,65,2,0,135,65,215,2,25,15,45,4,82,21,15,0,38,65,21,1,120,65,2,0,135,65,215,2,120,56,20,0,1,65,0,1,48,65,1,65,108,206,1,0,1,8,0,0,139,8,0,0,25,65,1,4,50,65,65,42,156,206,1,0,4,65,42,1,2,66,0,0,144,164,0,0,82,66,66,0,41,66,66,1,50,65,65,66,156,206,1,0,0,8,0,0,139,8,0,0,1,8,0,0,139,8,0,0,50,65,1,42,252,206,1,0,4,37,42,1,37,65,37,15,121,65,3,0,0,8,0,0,139,8,0,0,3,38,0,1,38,65,39,1,20,65,65,1,39,65,65,2,85,36,65,0,39,66,37,3,109,38,4,66,82,66,15,0,39,66,66,1,85,15,66,0,134,66,0,0,224,20,1,0,38,37,0,0,0,8,0,0,139,8,0,0,2,66,0,0,200,162,0,0,82,66,66,0,45,66,66,45,112,207,1,0,2,66,0,0,188,162,0,0,82,66,66,0,3,40,66,42,4,41,40,1,3,43,0,1,50,66,40,1,56,207,1,0,1,8,0,0,139,8,0,0,38,66,39,1,20,66,66,1,39,66,66,2,85,36,66,0,39,65,41,1,109,43,4,65,2,65,0,0,200,162,0,0,85,65,43,0,2,65,0,0,188,162,0,0,85,65,41,0,0,8,0,0,139,8,0,0,2,65,0,0,196,162,0,0,82,65,65,0,45,65,65,45,64,208,1,0,2,65,0,0,184,162,0,0,82,65,65,0,3,44,65,42,48,65,44,1,164,207,1,0,1,8,0,0,139,8,0,0,4,46,44,1,1,65,15,0,48,65,65,46,244,207,1,0,3,47,0,1,3,48,0,44,38,65,39,1,20,65,65,1,39,65,65,2,85,36,65,0,39,66,46,1,109,47,4,66,85,48,46,0,25,50,48,4,82,66,50,0,38,66,66,254,85,50,66,0,0,60,47,0,0,61,46,0,119,0,12,0,38,66,39,1,20,66,66,44,39,66,66,2,85,36,66,0,3,66,0,44,25,51,66,4,82,66,51,0,39,66,66,1,85,51,66,0,1,60,0,0,1,61,0,0,2,66,0,0,184,162,0,0,85,66,61,0,2,66,0,0,196,162,0,0,85,66,60,0,0,8,0,0,139,8,0,0,38,66,21,2,121,66,3,0,1,8,0,0,139,8,0,0,38,66,21,248,3,52,66,42,48,66,52,1,104,208,1,0,1,8,0,0,139,8,0,0,4,53,52,1,43,66,21,3,0,54,66,0,1,66,0,1,48,66,21,66,56,209,1,0,106,55,45,8,106,57,45,12,2,66,0,0,216,162,0,0,41,65,54,1,41,65,65,2,3,58,66,65,46,65,55,58,192,208,1,0,48,65,55,49,176,208,1,0,135,65,215,2,106,65,55,12,46,65,65,45,192,208,1,0,135,65,215,2,45,65,57,55,244,208,1,0,2,65,0,0,176,162,0,0,2,66,0,0,176,162,0,0,82,66,66,0,1,67,1,0,22,67,67,54,11,67,67,0,19,66,66,67,85,65,66,0,119,0,147,0,45,66,57,58,4,209,1,0,25,10,57,8,119,0,11,0,48,66,57,49,16,209,1,0,135,66,215,2,25,59,57,8,82,66,59,0,45,66,66,45,40,209,1,0,0,10,59,0,119,0,2,0,135,66,215,2,109,55,12,57,85,10,55,0,119,0,130,0,106,11,45,24,106,12,45,12,45,66,12,45,224,209,1,0,25,17,45,16,25,18,17,4,82,19,18,0,120,19,8,0,82,20,17,0,120,20,3,0,1,9,0,0,119,0,49,0,0,4,20,0,0,7,17,0,119,0,3,0,0,4,19,0,0,7,18,0,0,2,4,0,0,5,7,0,25,22,2,20,82,23,22,0,120,23,8,0,25,24,2,16,82,25,24,0,120,25,2,0,119,0,9,0,0,3,25,0,0,6,24,0,119,0,3,0,0,3,23,0,0,6,22,0,0,2,3,0,0,5,6,0,119,0,242,255,48,66,5,49,208,209,1,0,135,66,215,2,119,0,23,0,1,66,0,0,85,5,66,0,0,9,2,0,119,0,19,0,106,13,45,8,48,66,13,49,240,209,1,0,135,66,215,2,25,14,13,12,82,66,14,0,46,66,66,45,4,210,1,0,135,66,215,2,25,16,12,8,82,66,16,0,45,66,66,45,36,210,1,0,85,14,12,0,85,16,13,0,0,9,12,0,119,0,2,0,135,66,215,2,121,11,69,0,106,26,45,28,2,66,0,0,224,163,0,0,41,65,26,2,3,27,66,65,82,65,27,0,45,65,65,45,128,210,1,0,85,27,9,0,120,9,30,0,2,65,0,0,180,162,0,0,2,66,0,0,180,162,0,0,82,66,66,0,1,67,1,0,22,67,67,26,11,67,67,0,19,66,66,67,85,65,66,0,119,0,48,0,2,66,0,0,192,162,0,0,82,66,66,0,48,66,11,66,156,210,1,0,135,66,215,2,119,0,12,0,25,28,11,16,82,65,28,0,45,65,65,45,180,210,1,0,0,66,28,0,119,0,3,0,25,65,11,20,0,66,65,0,85,66,9,0,120,9,2,0,119,0,30,0,2,66,0,0,192,162,0,0,82,29,66,0,48,66,9,29,224,210,1,0,135,66,215,2,109,9,24,11,25,30,45,16,82,31,30,0,121,31,8,0,48,66,31,29,0,211,1,0,135,66,215,2,119,0,4,0,109,9,16,31,109,31,24,9,119,0,1,0,106,32,30,4,121,32,11,0,2,66,0,0,192,162,0,0,82,66,66,0,48,66,32,66,48,211,1,0,135,66,215,2,119,0,4,0,109,9,20,32,109,32,24,9,119,0,1,0,35,66,53,16,121,66,13,0,38,66,39,1,20,66,66,52,39,66,66,2,85,36,66,0,3,66,0,52,25,33,66,4,82,66,33,0,39,66,66,1,85,33,66,0,0,8,0,0,139,8,0,0,119,0,18,0,3,34,0,1,38,66,39,1,20,66,66,1,39,66,66,2,85,36,66,0,39,65,53,3,109,34,4,65,3,65,0,52,25,35,65,4,82,65,35,0,39,65,65,1,85,35,65,0,134,65,0,0,224,20,1,0,34,53,0,0,0,8,0,0,139,8,0,0,1,65,0,0,139,65,0,0,140,7,57,0,0,0,0,0,1,42,0,0,136,48,0,0,0,43,48,0,136,48,0,0,1,49,208,0,3,48,48,49,137,48,0,0,130,48,0,0,136,49,0,0,49,48,48,49,0,212,1,0,1,49,208,0,135,48,208,2,49,0,0,0,1,48,196,0,3,39,43,48,1,48,192,0,3,40,43,48,1,48,188,0,3,41,43,48,1,48,184,0,3,7,43,48,1,48,180,0,3,10,43,48,1,48,176,0,3,11,43,48,1,48,172,0,3,13,43,48,1,48,168,0,3,15,43,48,1,48,164,0,3,17,43,48,1,48,160,0,3,21,43,48,1,48,156,0,3,23,43,48,1,48,152,0,3,25,43,48,25,27,43,96,25,28,43,64,25,29,43,32,0,30,43,0,1,48,148,0,3,31,43,48,1,48,144,0,3,32,43,48,1,48,140,0,3,33,43,48,1,48,136,0,3,34,43,48,1,48,132,0,3,35,43,48,1,48,128,0,3,36,43,48,25,37,43,124,85,40,0,0,85,41,1,0,85,7,2,0,85,10,3,0,85,11,4,0,85,13,5,0,85,15,6,0,82,49,11,0,32,49,49,16,1,50,2,0,1,51,1,0,125,48,49,50,51,0,0,0,85,17,48,0,82,51,10,0,82,50,17,0,5,48,51,50,85,21,48,0,82,38,40,0,82,48,15,0,120,48,20,0,82,50,41,0,82,51,7,0,82,49,10,0,82,52,40,0,82,52,52,0,82,52,52,0,82,53,40,0,82,53,53,0,106,53,53,4,82,54,11,0,82,55,13,0,134,48,0,0,64,136,0,0,38,50,51,49,52,53,54,55,85,39,48,0,82,26,39,0,137,43,0,0,139,26,0,0,82,55,38,0,82,55,55,0,82,54,40,0,82,54,54,0,106,54,54,4,82,53,21,0,1,52,0,0,134,48,0,0,84,25,3,0,55,54,53,52,85,23,48,0,1,48,0,0,85,25,48,0,1,48,7,0,82,52,25,0,49,48,48,52,144,213,1,0,1,42,16,0,119,0,230,0,1,48,80,19,82,48,48,0,85,27,48,0,1,52,84,19,82,52,52,0,109,27,4,52,1,48,88,19,82,48,48,0,109,27,8,48,1,52,92,19,82,52,52,0,109,27,12,52,1,48,96,19,82,48,48,0,109,27,16,48,1,52,100,19,82,52,52,0,109,27,20,52,1,48,104,19,82,48,48,0,109,27,24,48,1,48,112,19,82,48,48,0,85,28,48,0,1,52,116,19,82,52,52,0,109,28,4,52,1,48,120,19,82,48,48,0,109,28,8,48,1,52,124,19,82,52,52,0,109,28,12,52,1,48,128,19,82,48,48,0,109,28,16,48,1,52,132,19,82,52,52,0,109,28,20,52,1,48,136,19,82,48,48,0,109,28,24,48,1,48,144,19,82,48,48,0,85,29,48,0,1,52,148,19,82,52,52,0,109,29,4,52,1,48,152,19,82,48,48,0,109,29,8,48,1,52,156,19,82,52,52,0,109,29,12,52,1,48,160,19,82,48,48,0,109,29,16,48,1,52,164,19,82,52,52,0,109,29,20,52,1,48,168,19,82,48,48,0,109,29,24,48,1,48,176,19,82,48,48,0,85,30,48,0,1,52,180,19,82,52,52,0,109,30,4,52,1,48,184,19,82,48,48,0,109,30,8,48,1,52,188,19,82,52,52,0,109,30,12,52,1,48,192,19,82,48,48,0,109,30,16,48,1,52,196,19,82,52,52,0,109,30,20,52,1,48,200,19,82,48,48,0,109,30,24,48,82,48,25,0,41,48,48,2,0,44,48,0,82,48,25,0,41,48,48,2,94,45,29,48,82,48,40,0,82,48,48,0,82,48,48,0,94,52,27,44,4,48,48,52,3,48,48,45,26,48,48,1,7,48,48,45,85,33,48,0,82,48,25,0,41,48,48,2,0,46,48,0,82,48,25,0,41,48,48,2,94,47,30,48,82,48,40,0,82,48,48,0,106,48,48,4,94,52,28,46,4,48,48,52,3,48,48,47,26,48,48,1,7,48,48,47,85,34,48,0,82,48,33,0,33,48,48,0,82,52,34,0,33,52,52,0,19,48,48,52,121,48,106,0,82,48,40,0,82,48,48,0,106,48,48,8,82,52,33,0,5,8,48,52,82,48,11,0,5,52,8,48,25,52,52,7,42,52,52,3,25,9,52,1,82,48,34,0,5,52,9,48,85,35,52,0,82,48,40,0,82,53,41,0,82,54,7,0,82,55,10,0,82,49,33,0,82,51,34,0,82,50,11,0,82,56,13,0,134,52,0,0,64,136,0,0,48,53,54,55,49,51,50,56,120,52,3,0,1,42,7,0,119,0,82,0,1,52,0,0,85,32,52,0,82,52,34,0,82,56,32,0,56,52,52,56,228,216,1,0,1,52,0,0,85,31,52,0,82,12,32,0,82,52,33,0,82,56,31,0,56,52,52,56,216,216,1,0,82,52,25,0,41,52,52,2,94,52,30,52,5,14,12,52,82,52,25,0,41,52,52,2,94,52,28,52,3,52,14,52,85,36,52,0,82,52,31,0,82,56,25,0,41,56,56,2,94,56,29,56,5,16,52,56,82,56,25,0,41,56,56,2,94,56,27,56,3,56,16,56,85,37,56,0,82,56,36,0,82,52,40,0,82,52,52,0,82,52,52,0,5,18,56,52,82,52,23,0,82,50,21,0,5,56,18,50,3,19,52,56,82,52,37,0,82,50,21,0,5,56,52,50,3,20,19,56,82,56,32,0,82,50,33,0,5,22,56,50,82,50,40,0,106,50,50,12,82,52,31,0,3,52,22,52,82,51,21,0,5,56,52,51,3,24,50,56,82,50,21,0,135,56,210,2,20,24,50,0,82,56,31,0,25,56,56,1,85,31,56,0,119,0,203,255,25,56,12,1,85,32,56,0,119,0,194,255,82,50,40,0,106,50,50,12,135,56,214,2,50,0,0,0,82,56,41,0,82,50,35,0,3,56,56,50,85,41,56,0,82,56,7,0,82,50,35,0,4,56,56,50,85,7,56,0,82,56,25,0,25,56,56,1,85,25,56,0,119,0,22,255,32,56,42,7,121,56,10,0,82,50,23,0,135,56,214,2,50,0,0,0,1,56,0,0,85,39,56,0,82,26,39,0,137,43,0,0,139,26,0,0,119,0,11,0,32,56,42,16,121,56,9,0,82,56,40,0,82,50,23,0,109,56,12,50,1,50,1,0,85,39,50,0,82,26,39,0,137,43,0,0,139,26,0,0,1,50,0,0,139,50,0,0,140,0,42,0,0,0,0,0,2,37,0,0,148,40,0,0,136,38,0,0,0,33,38,0,136,38,0,0,1,39,0,12,3,38,38,39,137,38,0,0,130,38,0,0,136,39,0,0,49,38,38,39,196,217,1,0,1,39,0,12,135,38,208,2,39,0,0,0,1,38,224,11,3,0,33,38,1,38,128,11,3,32,33,38,1,38,128,3,3,1,33,38,1,38,220,11,3,2,33,38,1,38,216,11,3,18,33,38,0,19,33,0,1,38,212,11,3,21,33,38,1,38,208,11,3,23,33,38,1,38,204,11,3,25,33,38,1,38,200,11,3,27,33,38,1,38,248,11,3,28,33,38,1,38,196,11,3,30,33,38,1,38,192,11,3,3,33,38,1,38,188,11,3,5,33,38,1,38,244,11,3,7,33,38,1,38,168,11,3,10,33,38,1,38,148,11,3,11,33,38,1,38,144,11,3,13,33,38,1,38,140,11,3,15,33,38,1,38,136,11,3,16,33,38,1,38,132,11,3,17,33,38,2,38,0,0,76,162,0,0,1,39,224,0,85,38,39,0,1,38,176,7,1,40,0,8,135,39,210,2,1,38,40,0,1,39,10,0,85,2,39,0,1,39,1,0,85,18,39,0,1,40,176,15,1,38,128,3,135,39,210,2,19,40,38,0,1,39,128,0,85,21,39,0,1,39,128,0,85,23,39,0,82,40,21,0,82,41,23,0,5,38,40,41,41,38,38,2,135,39,1,0,38,0,0,0,85,25,39,0,1,39,0,0,85,27,39,0,82,38,21,0,82,41,23,0,5,39,38,41,82,41,27,0,56,39,39,41,84,219,1,0,82,39,25,0,82,41,27,0,41,41,41,2,3,20,39,41,1,41,0,0,83,28,41,0,1,39,0,0,107,28,1,39,1,41,0,0,107,28,2,41,1,39,0,0,107,28,3,39,78,39,28,0,83,20,39,0,102,41,28,1,107,20,1,41,102,39,28,2,107,20,2,39,102,41,28,3,107,20,3,41,82,41,27,0,25,41,41,1,85,27,41,0,119,0,227,255,1,41,0,0,85,30,41,0,1,41,0,0,85,3,41,0,82,39,21,0,82,38,23,0,5,41,39,38,82,38,3,0,56,41,41,38,76,220,1,0,1,41,31,0,85,5,41,0,82,22,30,0,82,41,5,0,34,41,41,0,120,41,34,0,41,41,22,2,94,41,1,41,1,38,1,0,82,39,5,0,22,38,38,39,19,41,41,38,121,41,23,0,82,41,25,0,82,38,3,0,82,39,5,0,3,38,38,39,41,38,38,2,3,24,41,38,1,38,255,255,83,7,38,0,1,41,255,255,107,7,1,41,1,38,255,255,107,7,2,38,1,41,255,255,107,7,3,41,78,41,7,0,83,24,41,0,102,38,7,1,107,24,1,38,102,41,7,2,107,24,2,41,102,38,7,3,107,24,3,38,82,38,5,0,26,38,38,1,85,5,38,0,119,0,220,255,25,26,22,1,85,30,26,0,1,41,0,2,82,39,30,0,15,41,41,39,1,39,0,0,125,38,41,39,26,0,0,0,85,30,38,0,82,38,3,0,25,38,38,32,85,3,38,0,119,0,199,255,82,39,25,0,82,41,21,0,82,40,23,0,134,38,0,0,212,189,2,0,10,39,41,40,1,40,2,0,134,38,0,0,72,214,0,0,10,40,0,0,82,40,25,0,135,38,214,2,40,0,0,0,116,0,10,0,106,40,10,4,109,0,4,40,106,38,10,8,109,0,8,38,106,40,10,12,109,0,12,40,106,38,10,16,109,0,16,38,134,38,0,0,180,30,3,0,11,0,0,0,2,38,0,0,52,162,0,0,82,40,11,0,85,38,40,0,2,40,0,0,56,162,0,0,106,38,11,4,85,40,38,0,2,38,0,0,60,162,0,0,106,40,11,8,85,38,40,0,2,40,0,0,64,162,0,0,106,38,11,12,85,40,38,0,2,38,0,0,68,162,0,0,106,40,11,16,85,38,40,0,116,0,10,0,106,38,10,4,109,0,4,38,106,40,10,8,109,0,8,40,106,38,10,12,109,0,12,38,106,40,10,16,109,0,16,40,134,40,0,0,196,179,3,0,0,0,0,0,2,40,0,0,80,162,0,0,2,41,0,0,76,162,0,0,82,41,41,0,27,41,41,36,135,38,1,0,41,0,0,0,85,40,38,0,1,38,0,0,85,13,38,0,116,15,18,0,116,16,18,0,1,38,0,0,85,17,38,0,2,38,0,0,76,162,0,0,82,38,38,0,82,40,17,0,56,38,38,40,212,223,1,0,82,34,17,0,2,38,0,0,80,162,0,0,82,38,38,0,27,40,34,36,25,41,34,32,97,38,40,41,82,29,15,0,76,41,29,0,145,29,41,0,2,41,0,0,80,162,0,0,82,41,41,0,82,40,17,0,27,40,40,36,3,41,41,40,113,41,4,29,82,35,18,0,82,40,13,0,82,38,2,0,3,38,38,35,5,41,40,38,3,31,35,41,76,41,31,0,145,31,41,0,2,41,0,0,80,162,0,0,82,41,41,0,82,38,17,0,27,38,38,36,3,41,41,38,25,41,41,4,113,41,4,31,82,41,17,0,41,41,41,2,94,4,19,41,76,41,4,0,145,4,41,0,2,41,0,0,80,162,0,0,82,41,41,0,82,38,17,0,27,38,38,36,3,41,41,38,25,41,41,4,113,41,8,4,82,6,2,0,76,41,6,0,145,6,41,0,2,41,0,0,80,162,0,0,82,41,41,0,82,38,17,0,27,38,38,36,3,41,41,38,25,41,41,4,113,41,12,6,2,41,0,0,80,162,0,0,82,41,41,0,82,38,17,0,27,38,38,36,3,41,41,38,25,41,41,4,112,8,41,8,145,8,8,0,82,38,18,0,76,38,38,0,145,38,38,0,63,41,8,38,145,41,41,0,75,9,41,0,82,41,16,0,3,41,41,9,85,16,41,0,2,41,0,0,56,162,0,0,82,41,41,0,82,38,16,0,49,41,41,38,96,223,1,0,82,41,13,0,25,41,41,1,85,13,41,0,82,41,18,0,41,41,41,1,82,38,17,0,41,38,38,2,94,38,19,38,3,41,41,38,85,15,41,0,116,16,15,0,82,12,18,0,76,41,12,0,145,12,41,0,2,41,0,0,80,162,0,0,82,41,41,0,82,38,17,0,27,38,38,36,3,41,41,38,113,41,4,12,82,36,18,0,82,38,13,0,82,40,2,0,3,40,40,36,5,41,38,40,3,14,36,41,76,41,14,0,145,14,41,0,2,41,0,0,80,162,0,0,82,41,41,0,82,40,17,0,27,40,40,36,3,41,41,40,25,41,41,4,113,41,4,14,119,0,2,0,116,15,16,0,2,41,0,0,80,162,0,0,82,41,41,0,82,40,17,0,27,40,40,36,3,41,41,40,1,40,0,0,109,41,20,40,2,40,0,0,80,162,0,0,82,40,40,0,82,41,17,0,27,41,41,36,3,40,40,41,1,41,0,0,109,40,24,41,2,41,0,0,80,162,0,0,82,41,41,0,82,40,17,0,27,40,40,36,3,41,41,40,1,40,0,0,109,41,28,40,82,40,17,0,25,40,40,1,85,17,40,0,119,0,103,255,2,40,0,0,72,162,0,0,2,38,0,0,80,162,0,0,82,38,38,0,25,38,38,4,112,41,38,12,145,41,41,0,75,41,41,0,85,40,41,0,2,41,0,0], eb + 112640);
  HEAPU8.set([52,162,0,0,82,41,41,0,85,32,41,0,1,40,1,0,1,38,35,54,134,41,0,0,104,5,3,0,40,38,32,0,137,33,0,0,139,0,0,0,140,0,30,0,0,0,0,0,2,20,0,0,147,39,0,0,2,21,0,0,150,39,0,0,2,22,0,0,176,147,0,0,1,15,0,0,136,23,0,0,0,16,23,0,136,23,0,0,1,24,160,1,3,23,23,24,137,23,0,0,130,23,0,0,136,24,0,0,49,23,23,24,128,224,1,0,1,24,160,1,135,23,208,2,24,0,0,0,1,23,88,1,3,0,16,23,1,23,216,0,3,13,16,23,1,23,24,1,3,1,16,23,1,23,152,0,3,2,16,23,1,23,148,0,3,5,16,23,1,23,144,0,3,7,16,23,25,8,16,80,25,9,16,16,25,10,16,8,25,11,16,4,0,12,16,0,0,14,1,0,2,17,0,0,132,157,0,0,25,18,14,64,116,14,17,0,25,14,14,4,25,17,17,4,54,23,14,18,212,224,1,0,0,14,2,0,2,17,0,0,200,157,0,0,25,18,14,64,116,14,17,0,25,14,14,4,25,17,17,4,54,23,14,18,248,224,1,0,1,23,1,0,85,5,23,0,1,24,0,0,1,25,2,0,1,26,1,0,125,23,24,25,26,0,0,0,85,5,23,0,1,23,0,0,85,7,23,0,82,23,5,0,82,26,7,0,56,23,23,26,104,230,1,0,82,23,5,0,32,23,23,2,121,23,21,0,82,4,7,0,0,14,13,0,0,17,1,0,25,18,14,64,116,14,17,0,25,14,14,4,25,17,17,4,54,23,14,18,96,225,1,0,0,14,0,0,0,17,2,0,25,18,14,64,116,14,17,0,25,14,14,4,25,17,17,4,54,23,14,18,128,225,1,0,134,23,0,0,12,140,2,0,4,13,0,0,1,23,0,0,2,26,0,0,88,158,0,0,82,26,26,0,27,26,26,48,94,26,22,26,47,23,23,26,24,230,1,0,2,26,0,0,92,158,0,0,82,26,26,0,135,23,232,2,26,0,0,0,0,14,13,0,2,17,0,0,200,157,0,0,25,18,14,64,116,14,17,0,25,14,14,4,25,17,17,4,54,23,14,18,228,225,1,0,0,14,0,0,2,17,0,0,132,157,0,0,25,18,14,64,116,14,17,0,25,14,14,4,25,17,17,4,54,23,14,18,8,226,1,0,134,23,0,0,80,81,1,0,8,13,0,0,2,23,0,0,120,158,0,0,82,6,23,0,0,14,0,0,0,17,8,0,25,18,14,64,116,14,17,0,25,14,14,4,25,17,17,4,54,23,14,18,64,226,1,0,134,23,0,0,236,212,2,0,9,0,0,0,1,26,1,0,1,25,0,0,135,23,233,2,6,26,25,9,2,25,0,0,140,158,0,0,82,25,25,0,59,26,1,0,59,24,1,0,59,27,1,0,59,28,1,0,135,23,234,2,25,26,24,27,28,0,0,0,2,28,0,0,152,158,0,0,82,28,28,0,1,27,0,0,135,23,235,2,28,27,0,0,1,23,0,0,85,10,23,0,2,23,0,0,169,164,0,0,78,23,23,0,38,23,23,1,121,23,15,0,2,27,0,0,224,158,0,0,82,27,27,0,1,28,255,0,19,27,27,28,2,28,0,0,88,158,0,0,82,28,28,0,27,28,28,48,3,28,22,28,106,28,28,28,135,23,236,2,27,28,0,0,119,0,92,0,2,27,0,0,146,136,0,0,2,28,0,0,88,158,0,0,82,28,28,0,27,28,28,48,3,28,22,28,106,28,28,32,135,23,237,2,27,28,0,0,2,28,0,0,96,158,0,0,82,28,28,0,1,27,3,0,1,24,6,20,1,26,0,0,1,25,0,0,1,29,0,0,135,23,238,2,28,27,24,26,25,29,0,0,2,29,0,0,96,158,0,0,82,29,29,0,135,23,239,2,29,0,0,0,2,29,0,0,146,136,0,0,2,25,0,0,88,158,0,0,82,25,25,0,27,25,25,48,3,25,22,25,25,25,25,32,106,25,25,4,135,23,237,2,29,25,0,0,2,25,0,0,100,158,0,0,82,25,25,0,1,29,2,0,1,26,6,20,1,24,0,0,1,27,0,0,1,28,0,0,135,23,238,2,25,29,26,24,27,28,0,0,2,28,0,0,100,158,0,0,82,28,28,0,135,23,239,2,28,0,0,0,2,28,0,0,146,136,0,0,2,27,0,0,88,158,0,0,82,27,27,0,27,27,27,48,3,27,22,27,25,27,27,32,106,27,27,8,135,23,237,2,28,27,0,0,2,27,0,0,116,158,0,0,82,27,27,0,1,28,4,0,1,24,1,20,1,26,1,0,1,29,0,0,1,25,0,0,135,23,238,2,27,28,24,26,29,25,0,0,2,25,0,0,116,158,0,0,82,25,25,0,135,23,239,2,25,0,0,0,2,25,0,0,147,136,0,0,2,29,0,0,88,158,0,0,82,29,29,0,27,29,29,48,3,29,22,29,25,29,29,32,106,29,29,12,135,23,237,2,25,29,0,0,2,29,0,0,192,132,0,0,135,23,240,2,29,0,0,0,1,23,0,0,85,11,23,0,2,23,0,0,80,158,0,0,82,23,23,0,82,29,11,0,56,23,23,29,204,229,1,0,1,29,225,13,2,25,0,0,76,158,0,0,82,25,25,0,82,26,11,0,27,26,26,12,3,25,25,26,106,25,25,8,135,23,241,2,29,25,0,0,2,23,0,0,76,158,0,0,82,23,23,0,82,25,11,0,27,25,25,12,94,23,23,25,32,23,23,1,121,23,3,0,1,15,13,0,119,0,28,0,2,23,0,0,76,158,0,0,82,23,23,0,82,25,11,0,27,25,25,12,94,23,23,25,32,23,23,4,121,23,3,0,1,15,13,0,119,0,18,0,1,25,4,0,2,29,0,0,76,158,0,0,82,29,29,0,82,26,11,0,27,26,26,12,3,29,29,26,106,29,29,4,28,29,29,4,27,29,29,6,1,26,3,20,82,24,10,0,41,24,24,1,29,24,24,4,27,24,24,6,135,23,242,2,25,29,26,24,32,23,15,13,121,23,13,0,1,15,0,0,2,23,0,0,76,158,0,0,82,23,23,0,82,24,11,0,27,24,24,12,3,19,23,24,82,23,19,0,82,26,10,0,106,29,19,4,135,24,243,2,23,26,29,0,82,24,10,0,2,29,0,0,76,158,0,0,82,29,29,0,82,26,11,0,27,26,26,12,3,29,29,26,106,29,29,4,3,24,24,29,85,10,24,0,82,24,11,0,25,24,24,1,85,11,24,0,119,0,176,255,2,24,0,0,169,164,0,0,78,24,24,0,38,24,24,1,120,24,11,0,2,29,0,0,146,136,0,0,1,26,0,0,135,24,237,2,29,26,0,0,2,26,0,0,147,136,0,0,1,29,0,0,135,24,237,2,26,29,0,0,1,29,225,13,1,26,0,0,135,24,241,2,29,26,0,0,2,24,0,0,169,164,0,0,78,24,24,0,38,24,24,1,121,24,9,0,2,26,0,0,224,158,0,0,82,26,26,0,1,29,255,0,19,26,26,29,1,29,0,0,135,24,236,2,26,29,0,0,1,26,0,0,135,24,232,2,26,0,0,0,82,24,7,0,25,24,24,1,85,7,24,0,119,0,180,254,2,24,0,0,88,158,0,0,82,24,24,0,27,24,24,48,1,26,0,0,97,22,24,26,2,26,0,0,88,158,0,0,82,26,26,0,27,26,26,48,3,26,22,26,1,24,0,0,109,26,4,24,2,24,0,0,88,158,0,0,82,24,24,0,27,24,24,48,3,24,22,24,1,26,0,0,109,24,8,26,1,26,176,39,59,24,255,255,145,24,24,0,89,26,24,0,2,14,0,0,132,157,0,0,0,17,1,0,25,18,14,64,116,14,17,0,25,14,14,4,25,17,17,4,54,24,14,18,216,230,1,0,2,14,0,0,200,157,0,0,0,17,2,0,25,18,14,64,116,14,17,0,25,14,14,4,25,17,17,4,54,24,14,18,252,230,1,0,1,24,0,0,85,12,24,0,1,24,0,1,82,26,12,0,56,24,24,26,156,231,1,0,2,24,0,0,76,158,0,0,82,24,24,0,82,26,12,0,27,26,26,12,1,29,7,0,97,24,26,29,2,29,0,0,76,158,0,0,82,29,29,0,82,26,12,0,27,26,26,12,3,29,29,26,1,26,0,0,109,29,4,26,2,26,0,0,76,158,0,0,82,26,26,0,82,29,12,0,27,29,29,12,3,26,26,29,2,29,0,0,84,158,0,0,82,29,29,0,109,26,8,29,82,29,12,0,25,29,29,1,85,12,29,0,119,0,224,255,2,29,0,0,80,158,0,0,1,26,1,0,85,29,26,0,2,26,0,0,88,158,0,0,82,26,26,0,25,3,26,1,2,26,0,0,88,158,0,0,85,26,3,0,2,26,0,0,88,158,0,0,1,24,1,0,2,23,0,0,88,158,0,0,82,23,23,0,17,24,24,23,1,23,0,0,125,29,24,23,3,0,0,0,85,26,29,0,137,16,0,0,139,0,0,0,140,2,43,0,0,0,0,0,2,32,0,0,2,32,2,0,2,33,0,0,3,32,2,0,2,34,0,0,104,40,0,0,2,35,0,0,186,39,0,0,1,28,0,0,136,36,0,0,0,29,36,0,136,36,0,0,1,37,160,0,3,36,36,37,137,36,0,0,130,36,0,0,136,37,0,0,49,36,36,37,92,232,1,0,1,37,160,0,135,36,208,2,37,0,0,0,25,2,29,56,25,23,29,48,25,22,29,40,25,26,29,32,25,25,29,24,25,24,29,16,25,21,29,8,0,20,29,0,1,36,156,0,3,5,29,36,1,36,148,0,3,6,29,36,1,36,144,0,3,7,29,36,25,8,29,80,25,9,29,72,25,14,29,68,25,15,29,64,1,36,152,0,3,19,29,36,85,6,0,0,85,7,1,0,2,36,0,0,228,158,0,0,82,37,6,0,85,36,37,0,2,37,0,0,232,158,0,0,82,36,7,0,85,37,36,0,134,36,0,0,4,103,3,0,8,0,0,0,2,27,0,0,168,161,0,0,0,30,8,0,25,31,27,64,116,27,30,0,25,27,27,4,25,30,30,4,54,36,27,31,240,232,1,0,1,37,2,0,135,36,244,2,37,0,0,0,135,36,245,2,120,36,13,0,1,37,2,0,1,38,36,52,134,36,0,0,104,5,3,0,37,38,20,0,1,36,0,0,83,5,36,0,78,3,5,0,38,36,3,1,0,4,36,0,137,29,0,0,139,4,0,0,2,36,0,0,232,161,0,0,2,38,0,0,228,158,0,0,82,38,38,0,85,36,38,0,2,38,0,0,236,161,0,0,2,36,0,0,232,158,0,0,82,36,36,0,85,38,36,0,135,36,246,2,1,36,0,0,121,36,7,0,2,38,0,0,3,0,2,0,1,37,1,0,135,36,247,2,38,37,0,0,119,0,6,0,2,37,0,0,3,0,2,0,1,38,0,0,135,36,247,2,37,38,0,0,1,36,0,0,121,36,7,0,2,38,0,0,5,0,2,0,1,37,0,0,135,36,247,2,38,37,0,0,119,0,6,0,2,37,0,0,5,0,2,0,1,38,1,0,135,36,247,2,37,38,0,0,1,36,0,0,121,36,6,0,2,38,0,0,13,16,2,0,1,37,4,0,135,36,247,2,38,37,0,0,134,36,0,0,172,186,3,0,32,36,36,2,121,36,8,0,1,37,2,0,135,36,247,2,32,37,0,0,1,37,1,0,135,36,247,2,33,37,0,0,119,0,45,0,134,36,0,0,172,186,3,0,32,36,36,3,121,36,19,0,1,37,3,0,135,36,247,2,32,37,0,0,1,37,3,0,135,36,247,2,33,37,0,0,2,37,0,0,8,32,2,0,2,38,0,0,1,32,3,0,135,36,247,2,37,38,0,0,2,38,0,0,6,32,2,0,1,37,0,0,135,36,247,2,38,37,0,0,119,0,23,0,134,36,0,0,172,186,3,0,32,36,36,4,121,36,19,0,1,37,2,0,135,36,247,2,32,37,0,0,1,37,0,0,135,36,247,2,33,37,0,0,2,37,0,0,1,32,2,0,2,38,0,0,2,0,3,0,135,36,247,2,37,38,0,0,2,38,0,0,11,32,2,0,2,37,0,0,1,96,3,0,135,36,247,2,38,37,0,0,1,36,0,0,121,36,93,0,135,37,248,2,135,36,249,2,37,9,0,0,85,14,36,0,1,36,0,0,85,15,36,0,82,36,9,0,82,37,15,0,56,36,36,37,112,235,1,0,2,36,0,0,228,158,0,0,82,36,36,0,82,37,14,0,82,38,15,0,27,38,38,24,94,37,37,38,49,36,36,37,96,235,1,0,2,36,0,0,232,158,0,0,82,36,36,0,82,37,14,0,82,38,15,0,27,38,38,24,3,37,37,38,106,37,37,4,49,36,36,37,96,235,1,0,1,28,22,0,119,0,5,0,82,36,15,0,25,36,36,1,85,15,36,0,119,0,228,255,32,36,28,22,121,36,16,0,2,36,0,0,232,161,0,0,82,37,14,0,82,38,15,0,27,38,38,24,94,37,37,38,85,36,37,0,2,37,0,0,236,161,0,0,82,36,14,0,82,38,15,0,27,38,38,24,3,36,36,38,106,36,36,4,85,37,36,0,2,36,0,0,236,161,0,0,82,10,36,0,2,36,0,0,232,161,0,0,82,36,36,0,85,21,36,0,109,21,4,10,1,37,2,0,1,38,62,52,134,36,0,0,104,5,3,0,37,38,21,0,2,38,0,0,232,161,0,0,82,38,38,0,2,37,0,0,236,161,0,0,82,37,37,0,134,36,0,0,132,32,2,0,38,37,0,0,2,36,0,0,232,161,0,0,82,11,36,0,2,36,0,0,236,161,0,0,82,12,36,0,2,36,0,0,164,161,0,0,82,13,36,0,2,36,0,0,160,161,0,0,135,38,248,2,1,39,0,0,135,37,250,2,11,12,13,38,39,0,0,0,85,36,37,0,119,0,34,0,2,37,0,0,160,161,0,0,2,39,0,0,228,158,0,0,82,39,39,0,2,38,0,0,232,158,0,0,82,38,38,0,2,40,0,0,164,161,0,0,82,40,40,0,1,41,0,0,1,42,0,0,135,36,250,2,39,38,40,41,42,0,0,0,85,37,36,0,2,36,0,0,160,161,0,0,82,36,36,0,121,36,13,0,2,36,0,0,240,161,0,0,2,37,0,0,228,158,0,0,82,37,37,0,85,36,37,0,2,37,0,0,244,161,0,0,2,36,0,0,232,158,0,0,82,36,36,0,85,37,36,0,2,36,0,0,160,161,0,0,82,36,36,0,120,36,14,0,135,36,251,2,1,37,2,0,1,42,100,52,134,36,0,0,104,5,3,0,37,42,24,0,1,36,0,0,83,5,36,0,78,3,5,0,38,36,3,1,0,4,36,0,137,29,0,0,139,4,0,0,1,42,1,0,1,37,133,52,134,36,0,0,104,5,3,0,42,37,25,0,2,36,0,0,244,161,0,0,82,16,36,0,2,36,0,0,240,161,0,0,82,36,36,0,85,26,36,0,109,26,4,16,1,37,1,0,1,42,173,52,134,36,0,0,104,5,3,0,37,42,26,0,2,36,0,0,232,158,0,0,82,17,36,0,2,36,0,0,228,158,0,0,82,36,36,0,85,22,36,0,109,22,4,17,1,42,1,0,1,37,194,52,134,36,0,0,104,5,3,0,42,37,22,0,2,36,0,0,252,161,0,0,82,18,36,0,2,36,0,0,248,161,0,0,82,36,36,0,85,2,36,0,109,2,4,18,1,37,1,0,1,42,215,52,134,36,0,0,104,5,3,0,37,42,2,0,2,42,0,0,160,161,0,0,82,42,42,0,1,37,1,0,135,36,252,2,42,37,0,0,2,37,0,0,160,161,0,0,82,37,37,0,1,42,3,0,135,36,253,2,37,42,0,0,2,42,0,0,160,161,0,0,82,42,42,0,1,37,1,0,135,36,254,2,42,37,0,0,2,37,0,0,160,161,0,0,82,37,37,0,1,42,1,0,135,36,255,2,37,42,0,0,2,42,0,0,160,161,0,0,82,42,42,0,1,37,1,0,135,36,0,3,42,37,0,0,2,37,0,0,160,161,0,0,82,37,37,0,1,42,4,0,135,36,1,3,37,42,0,0,2,42,0,0,160,161,0,0,82,42,42,0,1,37,2,0,135,36,2,3,42,37,0,0,2,37,0,0,160,161,0,0,82,37,37,0,1,42,5,0,135,36,3,3,37,42,0,0,2,42,0,0,160,161,0,0,82,42,42,0,1,37,2,0,135,36,4,3,42,37,0,0,2,37,0,0,160,161,0,0,82,37,37,0,135,36,5,3,37,0,0,0,1,37,0,0,135,36,6,3,37,0,0,0,1,36,0,0,121,36,9,0,1,37,1,0,135,36,6,3,37,0,0,0,1,37,1,0,1,42,240,52,134,36,0,0,104,5,3,0,37,42,23,0,2,36,0,0,240,161,0,0,2,42,0,0,228,158,0,0,82,42,42,0,85,36,42,0,2,42,0,0,244,161,0,0,2,36,0,0,232,158,0,0,82,36,36,0,85,42,36,0,2,42,0,0,228,158,0,0,82,42,42,0,2,37,0,0,232,158,0,0,82,37,37,0,134,36,0,0,116,173,1,0,42,37,0,0,134,36,0,0,172,168,3,0,1,37,1,23,134,36,0,0,16,152,3,0,37,0,0,0,134,36,0,0,120,142,3,0,59,37,0,0,2,42,0,0,240,161,0,0,82,42,42,0,2,41,0,0,248,161,0,0,82,41,41,0,4,42,42,41,76,42,42,0,2,41,0,0,244,161,0,0,82,41,41,0,2,40,0,0,252,161,0,0,82,40,40,0,4,41,41,40,76,41,41,0,59,40,0,0,59,38,0,0,59,39,1,0,134,36,0,0,132,208,2,0,37,42,41,40,38,39,0,0,1,39,0,23,134,36,0,0,16,152,3,0,39,0,0,0,134,36,0,0,120,142,3,0,1,36,245,255,83,19,36,0,1,39,245,255,107,19,1,39,1,36,245,255,107,19,2,36,1,39,255,255,107,19,3,39,78,39,19,0,83,2,39,0,102,36,19,1,107,2,1,36,102,39,19,2,107,2,2,39,102,36,19,3,107,2,3,36,134,36,0,0,228,170,3,0,2,0,0,0,1,36,1,0,83,5,36,0,78,3,5,0,38,36,3,1,0,4,36,0,137,29,0,0,139,4,0,0,140,1,66,0,0,0,0,0,136,61,0,0,0,48,61,0,136,61,0,0,25,61,61,16,137,61,0,0,130,61,0,0,136,62,0,0,49,61,61,62,120,240,1,0,1,62,16,0,135,61,208,2,62,0,0,0,25,1,48,8,25,38,48,4,0,40,48,0,85,1,0,0,82,49,1,0,106,62,49,80,112,63,49,56,145,63,63,0,134,61,0,0,252,143,3,0,62,63,0,0,85,38,61,0,82,50,1,0,106,63,50,84,112,62,50,60,145,62,62,0,134,61,0,0,88,248,2,0,63,62,0,0,85,40,61,0,82,61,1,0,112,39,61,56,145,39,39,0,82,51,1,0,106,61,51,80,106,62,51,4,106,63,51,20,134,41,0,0,32,38,3,0,39,61,62,63,82,63,1,0,1,62,152,0,97,63,62,41,82,62,1,0,112,42,62,60,145,42,42,0,82,52,1,0,106,62,52,84,106,63,52,8,106,61,52,24,134,43,0,0,32,38,3,0,42,62,63,61,82,61,1,0,1,63,156,0,97,61,63,43,82,63,1,0,1,61,164,0,82,62,40,0,25,62,62,1,97,63,61,62,82,53,1,0,1,62,188,0,1,61,152,0,94,61,53,61,41,61,61,3,97,53,62,61,82,62,1,0,134,61,0,0,24,134,3,0,62,0,0,0,41,61,61,2,0,44,61,0,82,61,1,0,1,62,192,0,97,61,62,44,82,54,1,0,1,62,196,0,1,61,156,0,94,61,54,61,41,61,61,3,97,54,62,61,82,62,1,0,134,61,0,0,140,134,3,0,62,0,0,0,41,61,61,2,0,45,61,0,82,61,1,0,1,62,200,0,97,61,62,45,82,55,1,0,106,61,55,4,82,63,38,0,41,63,63,1,3,61,61,63,106,63,55,64,5,62,61,63,41,62,62,2,0,46,62,0,82,62,1,0,1,63,204,0,97,62,63,46,82,56,1,0,106,62,56,20,106,61,56,64,5,63,62,61,41,63,63,2,0,47,63,0,82,63,1,0,1,61,208,0,97,63,61,47,82,57,1,0,106,61,57,20,106,63,57,64,5,2,61,63,82,61,1,0,1,62,164,0,94,61,61,62,5,63,2,61,41,63,63,2,0,3,63,0,82,63,1,0,1,61,212,0,97,63,61,3,82,58,1,0,106,63,58,20,106,62,58,64,5,61,63,62,41,61,61,2,0,4,61,0,82,61,1,0,1,62,216,0,97,61,62,4,82,62,1,0,106,62,62,80,120,62,7,0,1,61,80,69,1,63,138,59,1,64,215,8,1,65,109,69,135,62,209,2,61,63,64,65,1,62,6,0,82,65,1,0,106,65,65,80,50,62,62,65,184,242,1,0,1,65,252,59,1,64,138,59,1,63,216,8,1,61,109,69,135,62,209,2,65,64,63,61,82,62,1,0,106,62,62,84,120,62,7,0,1,61,133,69,1,63,138,59,1,64,217,8,1,65,109,69,135,62,209,2,61,63,64,65,1,62,6,0,82,65,1,0,106,65,65,84,50,62,62,65,8,243,1,0,1,65,97,60,1,64,138,59,1,63,218,8,1,61,109,69,135,62,209,2,65,64,63,61,82,61,1,0,134,62,0,0,108,157,3,0,61,0,0,0,33,5,62,0,82,6,1,0,121,5,47,0,1,62,208,0,1,61,0,0,97,6,62,61,82,59,1,0,0,7,59,0,1,61,188,0,3,8,7,61,82,9,8,0,0,10,59,0,1,61,192,0,3,11,10,61,82,12,11,0,3,13,9,12,0,14,59,0,1,61,196,0,3,15,14,61,82,16,15,0,3,17,13,16,0,18,59,0,1,61,200,0,3,19,18,61,82,20,19,0,3,21,17,20,0,22,59,0,1,61,204,0,3,23,22,61,82,24,23,0,3,25,21,24,0,26,59,0,1,61,208,0,3,27,26,61,82,28,27,0,3,29,25,28,0,30,59,0,1,61,212,0,3,31,30,61,82,32,31,0,3,33,29,32,0,34,59,0,1,61,216,0,3,35,34,61,82,36,35,0,3,37,33,36,137,48,0,0,139,37,0,0,119,0,46,0,1,61,216,0,1,62,0,0,97,6,61,62,82,60,1,0,0,7,60,0,1,62,188,0,3,8,7,62,82,9,8,0,0,10,60,0,1,62,192,0,3,11,10,62,82,12,11,0,3,13,9,12,0,14,60,0,1,62,196,0,3,15,14,62,82,16,15,0,3,17,13,16,0,18,60,0,1,62,200,0,3,19,18,62,82,20,19,0,3,21,17,20,0,22,60,0,1,62,204,0,3,23,22,62,82,24,23,0,3,25,21,24,0,26,60,0,1,62,208,0,3,27,26,62,82,28,27,0,3,29,25,28,0,30,60,0,1,62,212,0,3,31,30,62,82,32,31,0,3,33,29,32,0,34,60,0,1,62,216,0,3,35,34,62,82,36,35,0,3,37,33,36,137,48,0,0,139,37,0,0,1,62,0,0,139,62,0,0,140,5,49,0,0,0,0,0,2,42,0,0,225,13,0,0,136,43,0,0,0,41,43,0,136,43,0,0,1,44,160,0,3,43,43,44,137,43,0,0,130,43,0,0,136,44,0,0,49,43,43,44,220,244,1,0,1,44,160,0,135,43,208,2,44,0,0,0,25,40,41,88,25,39,41,72,25,38,41,48,25,37,41,40,25,36,41,32,25,35,41,24,25,34,41,16,25,33,41,8,0,32,41,0,1,43,148,0,3,19,41,43,1,43,144,0,3,20,41,43,1,43,140,0,3,21,41,43,1,43,136,0,3,28,41,43,1,43,132,0,3,31,41,43,1,43,128,0,3,5,41,43,25,7,41,124,25,11,41,120,25,12,41,116,25,13,41,112,25,14,41,108,25,15,41,104,25,16,41,100,25,17,41,96,25,18,41,92,85,20,0,0,85,21,1,0,85,28,2,0,85,31,3,0,85,5,4,0,1,44,0,0,135,43,241,2,42,44,0,0,1,43,0,0,85,7,43,0,2,43,0,0,173,164,0,0,78,43,43,0,38,43,43,1,120,43,22,0,82,43,31,0,32,43,43,11,82,44,31,0,32,44,44,12,20,43,43,44,82,44,31,0,32,44,44,13,20,43,43,44,82,44,31,0,32,44,44,14,20,43,43,44,121,43,10,0,1,44,2,0,1,45,101,49,134,43,0,0,104,5,3,0,44,45,32,0,116,19,7,0,82,10,19,0,137,41,0,0,139,10,0,0,2,43,0,0,174,164,0,0,78,43,43,0,38,43,43,1,40,43,43,1,82,45,31,0,32,45,45,15,19,43,43,45,121,43,10,0,1,45,2,0,1,44,145,49,134,43,0,0,104,5,3,0,45,44,33,0,116,19,7,0,82,10,19,0,137,41,0,0,139,10,0,0,2,43,0,0,175,164,0,0,78,43,43,0,38,43,43,1,120,43,16,0,82,43,31,0,32,43,43,16,82,44,31,0,32,44,44,17,20,43,43,44,121,43,10,0,1,44,2,0,1,45,190,49,134,43,0,0,104,5,3,0,44,45,34,0,116,19,7,0,82,10,19,0,137,41,0,0,139,10,0,0,2,43,0,0,176,164,0,0,78,43,43,0,38,43,43,1,120,43,16,0,82,43,31,0,32,43,43,18,82,45,31,0,32,45,45,19,20,43,43,45,121,43,10,0,1,45,2,0,1,44,235,49,134,43,0,0,104,5,3,0,45,44,35,0,116,19,7,0,82,10,19,0,137,41,0,0,139,10,0,0,2,43,0,0,177,164,0,0,78,43,43,0,38,43,43,1,120,43,16,0,82,43,31,0,32,43,43,20,82,44,31,0,32,44,44,21,20,43,43,44,121,43,10,0,1,44,2,0,1,45,24,50,134,43,0,0,104,5,3,0,44,45,36,0,116,19,7,0,82,10,19,0,137,41,0,0,139,10,0,0,1,45,245,12,1,44,1,0,135,43,7,3,45,44,0,0,1,44,1,0,135,43,8,3,44,7,0,0,82,44,7,0,135,43,241,2,42,44,0,0,116,11,21,0,116,12,28,0,1,43,0,0,85,13,43,0,116,37,20,0,1,44,8,0,1,45,69,50,134,43,0,0,104,5,3,0,44,45,37,0,1,43,0,0,85,14,43,0,82,43,5,0,82,45,14,0,56,43,43,45,192,248,1,0,82,45,11,0,82,44,12,0,82,46,31,0,134,43,0,0,92,237,2,0,45,44,46,0,85,15,43,0,82,46,31,0,134,43,0,0,204,69,2,0,46,16,17,18,82,22,11,0,82,23,12,0,82,24,15,0,82,25,13,0,116,38,14,0,109,38,4,22,109,38,8,23,109,38,12,24,109,38,16,25,1,46,8,0,1,44,113,50,134,43,0,0,104,5,3,0,46,44,38,0,82,43,16,0,33,43,43,255,121,43,28,0,82,26,14,0,82,27,16,0,82,29,11,0,82,30,12,0,82,43,31,0,34,43,43,11,121,43,12,0,1,44,0,0,82,46,17,0,82,45,18,0,82,47,20,0,82,48,13,0,3,47,47,48,135,43,9,3,42,26,27,29,30,44,46,45,47,0,0,0,119,0,10,0,1,47,0,0,82,45,15,0,82,46,20,0,82,44,13,0,3,46,46,44,135,43,10,3,42,26,27,29,30,47,45,46,119,0,1,0,82,43,11,0,28,43,43,2,85,11,43,0,82,43,12,0,28,43,43,2,85,12,43,0,82,43,13,0,82,46,15,0,3,43,43,46,85,13,43,0,82,43,11,0,34,43,43,1,121,43,3,0,1,43,1,0,85,11,43,0,82,43,12,0,34,43,43,1,121,43,3,0,1,43,1,0,85,12,43,0,82,43,14,0,25,43,43,1,85,14,43,0,119,0,174,255,2,43,0,0,171,164,0,0,78,43,43,0,38,43,43,1,121,43,10,0,1,46,2,40,1,45,1,41,135,43,11,3,42,46,45,0,1,45,3,40,1,46,1,41,135,43,11,3,42,45,46,0,119,0,11,0,1,46,2,40,2,45,0,0,47,129,0,0,135,43,11,3,42,46,45,0,1,45,3,40,2,46,0,0,47,129,0,0,135,43,11,3,42,45,46,0,1,46,0,40,1,45,0,38,135,43,11,3,42,46,45,0,1,45,1,40,1,46,0,38,135,43,11,3,42,45,46,0,1,46,0,0,135,43,241,2,42,46,0,0,1,43,0,0,82,46,7,0,48,43,43,46,144,249,1,0,82,6,21,0,82,8,28,0,82,9,5,0,116,39,7,0,109,39,4,6,109,39,8,8,109,39,12,9,1,46,1,0,1,45,166,50,134,43,0,0,104,5,3,0,46,45,39,0,119,0,6,0,1,45,2,0,1,46,163,72,134,43,0,0,104,5,3,0,45,46,40,0,116,19,7,0,82,10,19,0,137,41,0,0,139,10,0,0,140,3,62,0,0,0,0,0,136,58,0,0,0,55,58,0,136,58,0,0,25,58,58,112,137,58,0,0,130,58,0,0,136,59,0,0,49,58,58,59,236,249,1,0,1,59,112,0,135,58,208,2,59,0,0,0,25,23,55,96,25,27,55,32,25,29,55,24,25,35,55,20,25,40,55,16,25,44,55,12,25,49,55,8,25,3,55,4,0,8,55,0,89,23,2,0,0,54,27,0,25,57,54,64,1,58,0,0,85,54,58,0,25,54,54,4,54,58,54,57,28,250,1,0,88,58,1,0,145,58,58,0,89,29,58,0,112,58,1,4,145,58,58,0,89,35,58,0,112,58,1,8,145,58,58,0,89,40,58,0,88,18,29,0,145,18,18,0,88,58,29,0,145,58,58,0,65,19,18,58,145,19,19,0,88,20,35,0,145,20,20,0,88,59,35,0,145,59,59,0,65,58,20,59,145,58,58,0,63,21,19,58,145,21,21,0,88,22,40,0,145,22,22,0,88,61,40,0,145,61,61,0,65,60,22,61,145,60,60,0,63,59,21,60,145,59,59,0,135,58,12,3,59,0,0,0,145,58,58,0,89,44,58,0,88,58,44,0,145,58,58,0,59,59,1,0,145,59,59,0,70,24,58,59,88,59,44,0,145,59,59,0,59,58,0,0,145,58,58,0,70,59,59,58,19,59,24,59,121,59,29,0,59,58,1,0,145,58,58,0,88,60,44,0,145,60,60,0,66,59,58,60,145,59,59,0,89,44,59,0,88,25,44,0,145,25,25,0,88,60,29,0,145,60,60,0,65,59,60,25,145,59,59,0,89,29,59,0,88,26,44,0,145,26,26,0,88,60,35,0,145,60,60,0,65,59,60,26,145,59,59,0,89,35,59,0,88,28,44,0,145,28,28,0,88,60,40,0,145,60,60,0,65,59,60,28,145,59,59,0,89,40,59,0,88,60,23,0,145,60,60,0,135,59,13,3,60,0,0,0,145,59,59,0,89,49,59,0,88,60,23,0,145,60,60,0,135,59,14,3,60,0,0,0,145,59,59,0,89,3,59,0,59,60,1,0,145,60,60,0,88,58,3,0,145,58,58,0,64,59,60,58,145,59,59,0,89,8,59,0,88,30,29,0,145,30,30,0,88,59,29,0,145,59,59,0,65,31,30,59,145,31,31,0,88,59,8,0,145,59,59,0,65,32,31,59,145,32,32,0,88,58,3,0,145,58,58,0,63,59,32,58,145,59,59,0,89,27,59,0,88,33,35,0,145,33,33,0,88,59,29,0,145,59,59,0,65,34,33,59,145,34,34,0,88,59,8,0,145,59,59,0,65,36,34,59,145,36,36,0,88,37,40,0,145,37,37,0,88,61,49,0,145,61,61,0,65,60,37,61,145,60,60,0,63,58,36,60,145,58,58,0,113,27,16,58,88,38,40,0,145,38,38,0,88,58,29,0,145,58,58,0,65,39,38,58,145,39,39,0,88,58,8,0,145,58,58,0,65,41,39,58,145,41,41,0,88,42,35,0,145,42,42,0,88,61,49,0,145,61,61,0,65,60,42,61,145,60,60,0,64,59,41,60,145,59,59,0,113,27,32,59,59,58,0,0,145,58,58,0,113,27,48,58,88,43,29,0,145,43,43,0,88,58,35,0,145,58,58,0,65,45,43,58,145,45,45,0,88,58,8,0,145,58,58,0,65,46,45,58,145,46,46,0,88,47,40,0,145,47,47,0,88,61,49,0,145,61,61,0,65,60,47,61,145,60,60,0,64,59,46,60,145,59,59,0,113,27,4,59,88,48,35,0,145,48,48,0,88,59,35,0,145,59,59,0,65,50,48,59,145,50,50,0,88,59,8,0,145,59,59,0,65,51,50,59,145,51,51,0,88,60,3,0,145,60,60,0,63,58,51,60,145,58,58,0,113,27,20,58,88,52,40,0,145,52,52,0,88,58,35,0,145,58,58,0,65,53,52,58,145,53,53,0,88,58,8,0,145,58,58,0,65,4,53,58,145,4,4,0,88,5,29,0,145,5,5,0,88,61,49,0,145,61,61,0,65,60,5,61,145,60,60,0,63,59,4,60,145,59,59,0,113,27,36,59,59,58,0,0,145,58,58,0,113,27,52,58,88,6,29,0,145,6,6,0,88,58,40,0,145,58,58,0,65,7,6,58,145,7,7,0,88,58,8,0,145,58,58,0,65,9,7,58,145,9,9,0,88,10,35,0,145,10,10,0,88,61,49,0,145,61,61,0,65,60,10,61,145,60,60,0,63,59,9,60,145,59,59,0,113,27,8,59,88,11,35,0,145,11,11,0,88,59,40,0,145,59,59,0,65,12,11,59,145,12,12,0,88,59,8,0,145,59,59,0,65,13,12,59,145,13,13,0,88,14,29,0,145,14,14,0,88,61,49,0,145,61,61,0,65,60,14,61,145,60,60,0,64,58,13,60,145,58,58,0,113,27,24,58,88,15,40,0,145,15,15,0,88,58,40,0,145,58,58,0,65,16,15,58,145,16,16,0,88,58,8,0,145,58,58,0,65,17,16,58,145,17,17,0,88,60,3,0,145,60,60,0,63,59,17,60,145,59,59,0,113,27,40,59,59,58,0,0,145,58,58,0,113,27,56,58,59,59,0,0,145,59,59,0,113,27,12,59,59,58,0,0,145,58,58,0,113,27,28,58,59,59,0,0,145,59,59,0,113,27,44,59,59,58,1,0,145,58,58,0,113,27,60,58,0,54,0,0,0,56,27,0,25,57,54,64,116,54,56,0,25,54,54,4,25,56,56,4,54,58,54,57,132,254,1,0,137,55,0,0,139,0,0,0,140,1,35,0,0,0,0,0,136,31,0,0,0,29,31,0,136,31,0,0,1,32,160,0,3,31,31,32,137,31,0,0,130,31,0,0,136,32,0,0,49,31,31,32,220,254,1,0,1,32,160,0,135,31,208,2,32,0,0,0,25,1,29,80,25,26,29,72,25,25,29,48,25,24,29,40,25,23,29,32,25,28,29,24,25,27,29,16,0,22,29,0,1,31,148,0,3,2,29,31,1,31,144,0,3,9,29,31,1,31,140,0,3,10,29,31,1,31,136,0,3,11,29,31,1,31,132,0,3,15,29,31,1,31,128,0,3,17,29,31,25,18,29,124,25,20,29,104,25,21,29,100,85,2,0,0,1,31,1,0,85,9,31,0,82,31,2,0,25,31,31,4,116,10,31,0,82,31,2,0,25,31,31,8,116,11,31,0,82,32,10,0,82,33,11,0,82,34,2,0,106,34,34,16,134,31,0,0,92,237,2,0,32,33,34,0,85,15,31,0,82,34,10,0,33,34,34,1,121,34,4,0,1,34,1,0,0,31,34,0,119,0,4,0,82,34,11,0,33,34,34,1,0,31,34,0,120,31,2,0,119,0,47,0,82,31,10,0,33,31,31,1,121,31,4,0,82,31,10,0,28,31,31,2,85,10,31,0,82,31,11,0,33,31,31,1,121,31,4,0,82,31,11,0,28,31,31,2,85,11,31,0,82,31,10,0,34,31,31,1,121,31,3,0,1,31,1,0,85,10,31,0,82,31,11,0,34,31,31,1,121,31,3,0,1,31,1,0,85,11,31,0,82,12,11,0,82,13,15,0,116,22,10,0,109,22,4,12,109,22,8,13,1,34,8,0,1,33,153,73,134,31,0,0,104,5,3,0,34,33,22,0,82,31,9,0,25,31,31,1,85,9,31,0,82,31,10,0,82,33,11,0,82,34,2,0,106,34,34,16,134,14,0,0,92,237,2,0,31,33,34,0,82,34,15,0,3,34,34,14,85,15,34,0,119,0,200,255,82,16,9,0,82,34,2,0,25,34,34,12,116,27,34,0,109,27,4,16,1,33,8,0,1,31,198,73,134,34,0,0,104,5,3,0,33,31,27,0,116,28,15,0,1,31,8,0,1,33,243,73,134,34,0,0,104,5,3,0,31,33,28,0,82,34,2,0,116,1,34,0,1,33,8,0,1,31,19,74,134,34,0,0,104,5,3,0,33,31,1,0,82,34,9,0,82,31,2,0,106,31,31,12,49,34,34,31,236,0,2,0,1,31,2,0,1,33,203,74,134,34,0,0,104,5,3,0,31,33,26,0,137,29,0,0,139,0,0,0,82,33,2,0,82,33,33,0,82,31,15,0,134,34,0,0,132,107,3,0,33,31,0,0,85,17,34,0,82,34,17,0,121,34,10,0,82,34,2,0,116,34,17,0,116,23,17,0,1,31,8,0,1,33,57,74,134,34,0,0,104,5,3,0,31,33,23,0,119,0,6,0,1,33,2,0,1,31,99,74,134,34,0,0,104,5,3,0,33,31,24,0,82,34,2,0,82,19,34,0,82,30,2,0,106,31,30,4,106,33,30,8,106,32,30,16,134,34,0,0,92,237,2,0,31,33,32,0,3,34,19,34,85,18,34,0,82,34,2,0,106,34,34,4,28,34,34,2,85,10,34,0,82,34,2,0,106,34,34,8,28,34,34,2,85,11,34,0,82,32,10,0,82,33,11,0,82,31,2,0,106,31,31,16,134,34,0,0,92,237,2,0,32,33,31,0,85,15,34,0,82,3,2,0,116,1,3,0,106,31,3,4,109,1,4,31,106,34,3,8,109,1,8,34,106,31,3,12,109,1,12,31,106,34,3,16,109,1,16,34,134,34,0,0,16,176,2,0,20,1,0,0,1,34,1,0,85,21,34,0,82,34,9,0,82,31,21,0,56,34,34,31,244,2,2,0,82,4,10,0,82,5,11,0,82,6,15,0,82,7,18,0,116,25,21,0,109,25,4,4,109,25,8,5,109,25,12,6,109,25,16,7,1,31,8,0,1,33,146,74,134,34,0,0,104,5,3,0,31,33,25,0,82,33,10,0,82,31,11,0,134,34,0,0,196,158,2,0,20,33,31,0,82,31,18,0,82,33,20,0,82,32,15,0,135,34,210,2,31,33,32,0,82,34,18,0,82,32,15,0,3,34,34,32,85,18,34,0,82,34,2,0,25,8,34,12,82,34,8,0,25,34,34,1,85,8,34,0,82,34,10,0,28,34,34,2,85,10,34,0,82,34,11,0,28,34,34,2,85,11,34,0,82,34,10,0,34,34,34,1,121,34,3,0,1,34,1,0,85,10,34,0,82,34,11,0,34,34,34,1,121,34,3,0,1,34,1,0,85,11,34,0,82,32,10,0,82,33,11,0,82,31,2,0,106,31,31,16,134,34,0,0,92,237,2,0,32,33,31,0,85,15,34,0,82,34,21,0,25,34,34,1,85,21,34,0,119,0,192,255,116,1,20,0,106,31,20,4,109,1,4,31,106,34,20,8,109,1,8,34,106,31,20,12,109,1,12,31,106,34,20,16,109,1,16,34,134,34,0,0,196,179,3,0,1,0,0,0,137,29,0,0,139,0,0,0,140,0,24,0,0,0,0,0,2,14,0,0,176,147,0,0,2,15,0,0,0,128,0,0,2,16,0,0,0,96,0,0,136,17,0,0,0,13,17,0,136,17,0,0,25,17,17,48,137,17,0,0,130,17,0,0,136,18,0,0,49,17,17,18,124,3,2,0,1,18,48,0,135,17,208,2,18,0,0,0,25,12,13,8,0,11,13,0,25,0,13,36,25,1,13,32,25,4,13,28,25,6,13,24,25,7,13,20,25,8,13,16,25,9,13,12,1,17,0,0,85,0,17,0,1,17,1,0,82,18,0,0,56,17,17,18,124,6,2,0,2,17,0,0,0,128,1,0,135,10,1,0,17,0,0,0,82,17,0,0,27,17,17,48,3,17,14,17,109,17,12,10,2,17,0,0,0,0,1,0,135,2,1,0,17,0,0,0,82,17,0,0,27,17,17,48,3,17,14,17,109,17,16,2,135,3,1,0,15,0,0,0,82,17,0,0,27,17,17,48,3,17,14,17,109,17,20,3,135,5,1,0,16,0,0,0,82,17,0,0,27,17,17,48,3,17,14,17,109,17,24,5,1,17,0,0,85,1,17,0,82,17,1,0,56,17,16,17,112,4,2,0,82,17,0,0,27,17,17,48,3,17,14,17,106,17,17,12,82,18,1,0,41,18,18,2,59,19,0,0,145,19,19,0,101,17,18,19,82,19,1,0,25,19,19,1,85,1,19,0,119,0,241,255,1,19,0,0,85,4,19,0,1,19,0,64,82,18,4,0,56,19,19,18,188,4,2,0,82,19,0,0,27,19,19,48,3,19,14,19,106,19,19,16,82,18,4,0,41,18,18,2,59,17,0,0,145,17,17,0,101,19,18,17,82,17,4,0,25,17,17,1,85,4,17,0,119,0,240,255,1,17,0,0,85,6,17,0,82,17,6,0,56,17,15,17,252,4,2,0,82,17,0,0,27,17,17,48,3,17,14,17,106,17,17,20,82,18,6,0,1,19,0,0,95,17,18,19,82,19,6,0,25,19,19,1,85,6,19,0,119,0,243,255,1,19,0,0,85,7,19,0,1,19,0,0,85,8,19,0,1,19,0,48,82,18,8,0,56,19,19,18,52,6,2,0,82,19,0,0,27,19,19,48,3,19,14,19,106,19,19,24,82,18,8,0,41,18,18,1,82,17,7,0,41,17,17,2,96,19,18,17,82,17,0,0,27,17,17,48,3,17,14,17,106,17,17,24,82,18,8,0,25,18,18,1,41,18,18,1,82,19,7,0,41,19,19,2,25,19,19,1,96,17,18,19,82,19,0,0,27,19,19,48,3,19,14,19,106,19,19,24,82,18,8,0,25,18,18,2,41,18,18,1,82,17,7,0,41,17,17,2,25,17,17,2,96,19,18,17,82,17,0,0,27,17,17,48,3,17,14,17,106,17,17,24,82,18,8,0,25,18,18,3,41,18,18,1,82,19,7,0,41,19,19,2,96,17,18,19,82,19,0,0,27,19,19,48,3,19,14,19,106,19,19,24,82,18,8,0,25,18,18,4,41,18,18,1,82,17,7,0,41,17,17,2,25,17,17,2,96,19,18,17,82,17,0,0,27,17,17,48,3,17,14,17,106,17,17,24,82,18,8,0,25,18,18,5,41,18,18,1,82,19,7,0,41,19,19,2,25,19,19,3,96,17,18,19,82,19,7,0,25,19,19,1,85,7,19,0,82,19,8,0,25,19,19,6,85,8,19,0,119,0,183,255,82,19,0,0,27,19,19,48,1,18,0,0,97,14,19,18,82,18,0,0,27,18,18,48,3,18,14,18,1,19,0,0,109,18,4,19,82,19,0,0,27,19,19,48,3,19,14,19,1,18,0,0,109,19,8,18,82,18,0,0,25,18,18,1,85,0,18,0,119,0,76,255,1,19,1,0,1,17,135,47,134,18,0,0,104,5,3,0,19,17,11,0,1,18,0,0,85,9,18,0,1,18,1,0,82,17,9,0,56,18,18,17,160,9,2,0,2,18,0,0,169,164,0,0,78,18,18,0,38,18,18,1,121,18,24,0,2,17,0,0,196,160,0,0,82,17,17,0,1,19,255,0,19,17,17,19,1,19,1,0,82,20,9,0,27,20,20,48,3,20,14,20,25,20,20,28,135,18,15,3,17,19,20,0,2,17,0,0,224,158,0,0,82,17,17,0,1,20,255,0,19,17,17,20,82,20,9,0,27,20,20,48,3,20,14,20,106,20,20,28,135,18,236,2,17,20,0,0,1,17,1,0,82,20,9,0,27,20,20,48,3,20,14,20,25,20,20,32,135,18,16,3,17,20,0,0,2,20,0,0,146,136,0,0,82,17,9,0,27,17,17,48,3,17,14,17,106,17,17,32,135,18,237,2,20,17,0,0,2,17,0,0,146,136,0,0,2,20,0,0,0,128,1,0,82,19,9,0,27,19,19,48,3,19,14,19,106,19,19,12,2,21,0,0,232,136,0,0,135,18,17,3,17,20,19,21,2,21,0,0,96,158,0,0,82,21,21,0,135,18,239,2,21,0,0,0,2,21,0,0,96,158,0,0,82,21,21,0,1,19,3,0,1,20,6,20,1,17,0,0,1,22,0,0,1,23,0,0,135,18,238,2,21,19,20,17,22,23,0,0,1,23,1,0,82,22,9,0,27,22,22,48,3,22,14,22,25,22,22,32,25,22,22,4,135,18,16,3,23,22,0,0,2,22,0,0,146,136,0,0,82,23,9,0,27,23,23,48,3,23,14,23,25,23,23,32,106,23,23,4], eb + 122880);
  HEAPU8.set([135,18,237,2,22,23,0,0,2,23,0,0,146,136,0,0,2,22,0,0,0,0,1,0,82,17,9,0,27,17,17,48,3,17,14,17,106,17,17,16,2,20,0,0,232,136,0,0,135,18,17,3,23,22,17,20,2,20,0,0,100,158,0,0,82,20,20,0,135,18,239,2,20,0,0,0,2,20,0,0,100,158,0,0,82,20,20,0,1,17,2,0,1,22,6,20,1,23,0,0,1,19,0,0,1,21,0,0,135,18,238,2,20,17,22,23,19,21,0,0,1,21,1,0,82,19,9,0,27,19,19,48,3,19,14,19,25,19,19,32,25,19,19,8,135,18,16,3,21,19,0,0,2,19,0,0,146,136,0,0,82,21,9,0,27,21,21,48,3,21,14,21,25,21,21,32,106,21,21,8,135,18,237,2,19,21,0,0,2,21,0,0,146,136,0,0,82,19,9,0,27,19,19,48,3,19,14,19,106,19,19,20,2,23,0,0,232,136,0,0,135,18,17,3,21,15,19,23,2,23,0,0,116,158,0,0,82,23,23,0,135,18,239,2,23,0,0,0,2,23,0,0,116,158,0,0,82,23,23,0,1,19,4,0,1,21,1,20,1,22,1,0,1,17,0,0,1,20,0,0,135,18,238,2,23,19,21,22,17,20,0,0,1,20,1,0,82,17,9,0,27,17,17,48,3,17,14,17,25,17,17,32,25,17,17,12,135,18,16,3,20,17,0,0,2,17,0,0,147,136,0,0,82,20,9,0,27,20,20,48,3,20,14,20,25,20,20,32,106,20,20,12,135,18,237,2,17,20,0,0,2,20,0,0,147,136,0,0,82,17,9,0,27,17,17,48,3,17,14,17,106,17,17,24,2,22,0,0,228,136,0,0,135,18,17,3,20,16,17,22,82,18,9,0,25,18,18,1,85,9,18,0,119,0,63,255,1,22,1,0,1,17,183,47,134,18,0,0,104,5,3,0,22,17,12,0,2,18,0,0,169,164,0,0,78,18,18,0,38,18,18,1,120,18,3,0,137,13,0,0,139,0,0,0,2,17,0,0,224,158,0,0,82,17,17,0,1,22,255,0,19,17,17,22,1,22,0,0,135,18,236,2,17,22,0,0,137,13,0,0,139,0,0,0,140,8,38,0,0,0,0,0,2,31,0,0,0,0,32,0,2,32,0,0,255,15,0,0,2,33,0,0,255,0,0,0,136,34,0,0,0,30,34,0,136,34,0,0,1,35,80,1,3,34,34,35,137,34,0,0,130,34,0,0,136,35,0,0,49,34,34,35,76,10,2,0,1,35,80,1,135,34,208,2,35,0,0,0,1,34,68,1,3,28,30,34,1,34,64,1,3,29,30,34,1,34,60,1,3,8,30,34,1,34,56,1,3,10,30,34,1,34,52,1,3,11,30,34,1,34,48,1,3,12,30,34,1,34,44,1,3,14,30,34,1,34,40,1,3,15,30,34,1,34,36,1,3,16,30,34,1,34,32,1,3,17,30,34,1,34,28,1,3,18,30,34,1,34,24,1,3,21,30,34,1,34,20,1,3,22,30,34,1,34,16,1,3,23,30,34,25,24,30,8,25,25,30,4,0,26,30,0,1,34,72,1,3,27,30,34,85,28,0,0,85,29,1,0,85,8,2,0,85,10,3,0,85,11,4,0,85,12,5,0,85,14,6,0,85,15,7,0,1,35,33,0,82,36,28,0,134,34,0,0,184,15,3,0,35,36,0,0,1,36,249,0,82,35,28,0,134,34,0,0,184,15,3,0,36,35,0,0,1,35,4,0,82,36,28,0,134,34,0,0,184,15,3,0,35,36,0,0,1,36,5,0,82,35,28,0,134,34,0,0,184,15,3,0,36,35,0,0,82,35,14,0,19,35,35,33,82,36,28,0,134,34,0,0,184,15,3,0,35,36,0,0,82,36,14,0,43,36,36,8,19,36,36,33,82,35,28,0,134,34,0,0,184,15,3,0,36,35,0,0,1,35,0,0,82,36,28,0,134,34,0,0,184,15,3,0,35,36,0,0,1,36,0,0,82,35,28,0,134,34,0,0,184,15,3,0,36,35,0,0,1,35,44,0,82,36,28,0,134,34,0,0,184,15,3,0,35,36,0,0,82,36,8,0,19,36,36,33,82,35,28,0,134,34,0,0,184,15,3,0,36,35,0,0,82,35,8,0,43,35,35,8,19,35,35,33,82,36,28,0,134,34,0,0,184,15,3,0,35,36,0,0,82,36,10,0,19,36,36,33,82,35,28,0,134,34,0,0,184,15,3,0,36,35,0,0,82,35,10,0,43,35,35,8,19,35,35,33,82,36,28,0,134,34,0,0,184,15,3,0,35,36,0,0,82,36,11,0,19,36,36,33,82,35,28,0,134,34,0,0,184,15,3,0,36,35,0,0,82,35,11,0,43,35,35,8,19,35,35,33,82,36,28,0,134,34,0,0,184,15,3,0,35,36,0,0,82,36,12,0,19,36,36,33,82,35,28,0,134,34,0,0,184,15,3,0,36,35,0,0,82,35,12,0,43,35,35,8,19,35,35,33,82,36,28,0,134,34,0,0,184,15,3,0,35,36,0,0,1,36,128,0,82,35,15,0,82,35,35,0,3,36,36,35,26,36,36,1,82,35,28,0,134,34,0,0,184,15,3,0,36,35,0,0,82,35,15,0,82,36,28,0,134,34,0,0,24,4,3,0,35,36,0,0,82,34,15,0,116,16,34,0,1,34,1,0,82,36,15,0,82,36,36,0,22,34,34,36,85,17,34,0,82,36,16,0,82,35,28,0,134,34,0,0,184,15,3,0,36,35,0,0,135,34,1,0,31,0,0,0,85,18,34,0,82,35,18,0,1,36,0,0,135,34,213,2,35,36,31,0,1,34,255,255,85,21,34,0,82,34,16,0,25,34,34,1,85,22,34,0,82,34,17,0,25,34,34,1,85,23,34,0,1,36,0,0,107,24,1,36,1,36,0,0,83,24,36,0,1,34,0,0,109,24,4,34,82,36,28,0,82,35,17,0,82,37,22,0,134,34,0,0,4,79,3,0,36,24,35,37,1,34,0,0,85,25,34,0,82,34,12,0,82,37,25,0,57,34,34,37,224,14,2,0,1,34,0,0,85,26,34,0,82,34,11,0,82,37,26,0,57,34,34,37,208,14,2,0,82,34,25,0,82,37,11,0,5,9,34,37,82,37,29,0,82,34,26,0,3,34,9,34,41,34,34,2,25,34,34,3,90,37,37,34,83,27,37,0,82,37,21,0,34,37,37,0,121,37,4,0,79,37,27,0,85,21,37,0,119,0,64,0,82,37,18,0,82,34,21,0,41,34,34,9,3,37,37,34,79,34,27,0,41,34,34,1,92,37,37,34,121,37,10,0,82,37,18,0,82,34,21,0,41,34,34,9,3,37,37,34,79,34,27,0,41,34,34,1,93,37,37,34,85,21,37,0,119,0,47,0,82,34,28,0,82,35,21,0,82,36,22,0,134,37,0,0,4,79,3,0,34,24,35,36,82,37,23,0,25,13,37,1,85,23,13,0,82,37,18,0,82,36,21,0,41,36,36,9,3,37,37,36,79,36,27,0,41,36,36,1,96,37,36,13,1,36,1,0,82,37,22,0,22,36,36,37,82,37,23,0,50,36,36,37,108,14,2,0,82,36,22,0,25,36,36,1,85,22,36,0,82,36,23,0,45,36,36,32,184,14,2,0,82,37,28,0,82,35,17,0,82,34,22,0,134,36,0,0,4,79,3,0,37,24,35,34,82,34,18,0,1,35,0,0,135,36,213,2,34,35,31,0,82,36,16,0,25,36,36,1,85,22,36,0,82,36,17,0,25,36,36,1,85,23,36,0,79,36,27,0,85,21,36,0,82,36,26,0,25,36,36,1,85,26,36,0,119,0,170,255,82,36,25,0,25,36,36,1,85,25,36,0,119,0,160,255,82,35,28,0,82,34,21,0,82,37,22,0,134,36,0,0,4,79,3,0,35,24,34,37,82,37,28,0,82,34,17,0,82,35,22,0,134,36,0,0,4,79,3,0,37,24,34,35,82,35,28,0,82,34,17,0,25,34,34,1,82,37,16,0,25,37,37,1,134,36,0,0,4,79,3,0,35,24,34,37,78,36,24,0,120,36,2,0,119,0,6,0,1,37,0,0,134,36,0,0,180,21,3,0,24,37,0,0,119,0,249,255,106,36,24,4,120,36,11,0,82,19,28,0,1,37,0,0,134,36,0,0,184,15,3,0,37,19,0,0,82,20,18,0,135,36,214,2,20,0,0,0,137,30,0,0,139,0,0,0,82,37,28,0,134,36,0,0,60,114,3,0,37,24,0,0,82,19,28,0,1,37,0,0,134,36,0,0,184,15,3,0,37,19,0,0,82,20,18,0,135,36,214,2,20,0,0,0,137,30,0,0,139,0,0,0,140,2,34,0,0,0,0,0,2,27,0,0,80,54,0,0,2,28,0,0,170,69,0,0,136,29,0,0,0,26,29,0,136,29,0,0,1,30,160,0,3,29,29,30,137,29,0,0,130,29,0,0,136,30,0,0,49,29,29,30,4,16,2,0,1,30,160,0,135,29,208,2,30,0,0,0,25,2,26,32,25,25,26,24,25,24,26,8,0,23,26,0,1,29,156,0,3,6,26,29,1,29,136,0,3,7,26,29,1,29,132,0,3,8,26,29,1,29,128,0,3,9,26,29,25,10,26,124,25,18,26,120,25,21,26,116,25,22,26,112,25,3,26,92,25,4,26,72,25,5,26,52,85,6,1,0,1,29,0,0,85,7,29,0,1,30,0,0,109,7,4,30,1,29,0,0,109,7,8,29,1,30,0,0,109,7,12,30,1,29,0,0,109,7,16,29,82,30,6,0,1,31,160,69,134,29,0,0,192,124,3,0,30,31,0,0,121,29,55,0,1,29,0,0,85,8,29,0,1,29,0,0,85,9,29,0,1,29,0,0,85,10,29,0,82,31,6,0,134,29,0,0,132,255,2,0,31,27,0,0,85,18,29,0,82,29,18,0,121,29,178,0,82,31,18,0,1,30,0,0,134,29,0,0,184,17,3,0,31,8,9,10,30,0,0,0,85,7,29,0,82,30,18,0,134,29,0,0,196,87,3,0,30,0,0,0,82,30,8,0,109,7,4,30,82,29,9,0,109,7,8,29,1,30,1,0,109,7,12,30,82,30,10,0,32,30,30,1,121,30,4,0,1,29,1,0,109,7,16,29,119,0,155,0,82,29,10,0,32,29,29,2,121,29,4,0,1,30,2,0,109,7,16,30,119,0,149,0,82,30,10,0,32,30,30,3,121,30,4,0,1,29,4,0,109,7,16,29,119,0,143,0,82,29,10,0,32,29,29,4,121,29,140,0,1,30,7,0,109,7,16,30,119,0,137,0,82,29,6,0,1,31,165,69,134,30,0,0,192,124,3,0,29,31,0,0,121,30,67,0,1,30,0,0,85,21,30,0,82,31,6,0,134,30,0,0,132,255,2,0,31,27,0,0,85,22,30,0,1,31,1,0,134,30,0,0,212,163,3,0,31,0,0,0,82,31,22,0,25,29,7,4,25,32,7,8,1,33,0,0,134,30,0,0,20,100,3,0,31,29,32,21,33,0,0,0,85,7,30,0,1,33,0,0,134,30,0,0,212,163,3,0,33,0,0,0,82,33,22,0,134,30,0,0,196,87,3,0,33,0,0,0,1,33,1,0,109,7,12,33,82,33,21,0,32,33,33,1,121,33,4,0,1,30,8,0,109,7,16,30,119,0,95,0,82,30,21,0,32,30,30,3,121,30,4,0,1,33,9,0,109,7,16,33,119,0,89,0,82,33,21,0,32,33,33,4,121,33,4,0,1,30,10,0,109,7,16,30,119,0,83,0,116,2,6,0,1,33,2,0,134,30,0,0,104,5,3,0,33,28,2,0,116,2,7,0,106,33,7,4,109,2,4,33,106,30,7,8,109,2,8,30,106,33,7,12,109,2,12,33,106,30,7,16,109,2,16,30,134,30,0,0,196,179,3,0,2,0,0,0,119,0,65,0,82,30,6,0,1,33,206,69,134,11,0,0,192,124,3,0,30,33,0,0,82,12,6,0,121,11,14,0,134,33,0,0,176,148,1,0,3,12,0,0,116,7,3,0,106,30,3,4,109,7,4,30,106,33,3,8,109,7,8,33,106,30,3,12,109,7,12,30,106,33,3,16,109,7,16,33,119,0,45,0,1,33,211,69,134,13,0,0,192,124,3,0,12,33,0,0,82,14,6,0,121,13,14,0,134,33,0,0,124,81,2,0,4,14,0,0,116,7,4,0,106,30,4,4,109,7,4,30,106,33,4,8,109,7,8,33,106,30,4,12,109,7,12,30,106,33,4,16,109,7,16,33,119,0,26,0,1,33,216,69,134,15,0,0,192,124,3,0,14,33,0,0,82,16,6,0,121,15,14,0,134,33,0,0,16,64,2,0,5,16,0,0,116,7,5,0,106,30,5,4,109,7,4,30,106,33,5,8,109,7,8,33,106,30,5,12,109,7,12,30,106,33,5,16,109,7,16,33,119,0,7,0,85,23,16,0,1,30,2,0,134,33,0,0,104,5,3,0,30,28,23,0,119,0,1,0,82,17,6,0,82,33,7,0,121,33,23,0,106,19,7,4,106,20,7,8,85,24,17,0,109,24,4,19,109,24,8,20,1,30,1,0,1,32,222,69,134,33,0,0,104,5,3,0,30,32,24,0,116,0,7,0,106,32,7,4,109,0,4,32,106,33,7,8,109,0,8,33,106,32,7,12,109,0,12,32,106,33,7,16,109,0,16,33,137,26,0,0,139,0,0,0,119,0,18,0,85,25,17,0,1,32,2,0,1,30,5,70,134,33,0,0,104,5,3,0,32,30,25,0,116,0,7,0,106,30,7,4,109,0,4,30,106,33,7,8,109,0,8,33,106,30,7,12,109,0,12,30,106,33,7,16,109,0,16,33,137,26,0,0,139,0,0,0,139,0,0,0,140,1,29,0,0,0,0,0,136,26,0,0,0,25,26,0,136,26,0,0,1,27,176,0,3,26,26,27,137,26,0,0,130,26,0,0,136,27,0,0,49,26,26,27,116,20,2,0,1,27,176,0,135,26,208,2,27,0,0,0,1,26,164,0,3,5,25,26,1,26,144,0,3,4,25,26,1,26,136,0,3,3,25,26,25,2,25,88,25,24,25,64,25,1,25,32,25,6,25,112,25,12,25,104,25,16,25,8,0,18,25,0,25,19,25,96,25,20,25,80,25,21,25,56,1,26,160,0,3,22,25,26,25,23,25,24,25,7,25,16,1,26,156,0,3,8,25,26,1,26,152,0,3,9,25,26,2,26,0,0,0,157,0,0,82,26,26,0,85,6,26,0,2,27,0,0,4,157,0,0,82,27,27,0,109,6,4,27,2,26,0,0,8,157,0,0,82,26,26,0,109,6,8,26,2,27,0,0,12,157,0,0,82,27,27,0,109,6,12,27,2,26,0,0,16,157,0,0,82,26,26,0,109,6,16,26,2,27,0,0,32,157,0,0,134,26,0,0,176,158,3,0,12,0,27,0,25,10,0,16,106,11,10,4,0,13,16,0,116,13,10,0,109,13,4,11,1,14,128,39,106,15,14,4,0,17,18,0,116,17,14,0,109,17,4,15,1,26,91,41,79,26,26,0,1,27,92,41,79,27,27,0,41,27,27,8,20,26,26,27,1,27,93,41,79,27,27,0,41,27,27,16,20,26,26,27,1,27,94,41,79,27,27,0,41,27,27,24,20,26,26,27,85,19,26,0,116,1,6,0,106,27,6,4,109,1,4,27,106,26,6,8,109,1,8,26,106,27,6,12,109,1,12,27,106,26,6,16,109,1,16,26,1,26,156,39,82,26,26,0,85,24,26,0,1,27,160,39,82,27,27,0,109,24,4,27,1,26,164,39,82,26,26,0,109,24,8,26,1,27,168,39,82,27,27,0,109,24,12,27,116,2,12,0,106,26,12,4,109,2,4,26,116,3,16,0,106,27,16,4,109,3,4,27,116,4,18,0,106,26,18,4,109,4,4,26,78,26,19,0,83,5,26,0,102,27,19,1,107,5,1,27,102,26,19,2,107,5,2,26,102,27,19,3,107,5,3,27,59,26,0,0,145,26,26,0,134,27,0,0,92,128,2,0,1,24,2,3,4,26,5,0,102,27,0,25,121,27,37,0,2,26,0,0,32,157,0,0,134,27,0,0,176,158,3,0,20,0,26,0,25,26,0,28,2,28,0,0,32,157,0,0,134,27,0,0,176,158,3,0,21,26,28,0,1,27,230,255,83,22,27,0,1,28,41,0,107,22,1,28,1,27,55,0,107,22,2,27,1,28,255,255,107,22,3,28,116,3,20,0,106,27,20,4,109,3,4,27,116,4,21,0,106,28,21,4,109,4,4,28,78,28,22,0,83,5,28,0,102,27,22,1,107,5,1,27,102,28,22,2,107,5,2,28,102,27,22,3,107,5,3,27,134,27,0,0,252,147,3,0,3,4,5,0,102,27,0,26,121,27,51,0,2,28,0,0,32,157,0,0,134,27,0,0,176,158,3,0,23,0,28,0,25,28,0,36,2,26,0,0,32,157,0,0,134,27,0,0,176,158,3,0,7,28,26,0,1,27,230,255,83,9,27,0,1,26,41,0,107,9,1,26,1,27,55,0,107,9,2,27,1,26,255,255,107,9,3,26,78,26,9,0,83,5,26,0,102,27,9,1,107,5,1,27,102,26,9,2,107,5,2,26,102,27,9,3,107,5,3,27,61,26,0,0,0,0,128,62,145,26,26,0,134,27,0,0,92,108,3,0,8,5,26,0,116,3,23,0,106,26,23,4,109,3,4,26,116,4,7,0,106,27,7,4,109,4,4,27,78,27,8,0,83,5,27,0,102,26,8,1,107,5,1,26,102,27,8,2,107,5,2,27,102,26,8,3,107,5,3,26,134,26,0,0,252,147,3,0,3,4,5,0,137,25,0,0,139,0,0,0,140,1,33,0,0,0,0,0,2,26,0,0,144,22,0,0,2,27,0,0,144,21,0,0,2,28,0,0,0,1,0,0,1,22,0,0,136,29,0,0,0,23,29,0,136,29,0,0,25,29,29,32,137,29,0,0,130,29,0,0,136,30,0,0,49,29,29,30,16,24,2,0,1,30,32,0,135,29,208,2,30,0,0,0,25,1,23,24,25,11,23,20,25,12,23,16,25,15,23,12,25,16,23,8,25,18,23,4,0,19,23,0,25,21,23,28,85,11,0,0,82,29,11,0,25,29,29,16,116,12,29,0,82,24,11,0,25,30,24,32,134,29,0,0,32,251,2,0,24,30,0,0,85,15,29,0,82,10,15,0,82,29,15,0,47,29,29,28,224,24,2,0,34,29,10,0,121,29,3,0,1,22,4,0,119,0,156,0,82,29,11,0,106,29,29,24,82,30,12,0,50,29,29,30,188,24,2,0,82,30,11,0,82,31,12,0,1,32,1,0,134,29,0,0,112,191,2,0,30,31,32,0,120,29,3,0,1,22,7,0,119,0,142,0,82,29,11,0,25,29,29,16,116,12,29,0,82,29,15,0,1,32,255,0,19,29,29,32,0,13,29,0,82,14,12,0,25,29,14,1,85,12,29,0,83,14,13,0,119,0,217,255,45,29,10,28,240,24,2,0,1,22,11,0,119,0,126,0,82,29,15,0,1,32,1,1,4,29,29,32,85,15,29,0,1,29,16,21,82,32,15,0,41,32,32,2,3,29,29,32,116,18,29,0,82,29,15,0,41,29,29,2,94,29,27,29,121,29,11,0,82,29,11,0,82,32,15,0,41,32,32,2,94,32,27,32,134,17,0,0,92,92,3,0,29,32,0,0,82,32,18,0,3,32,32,17,85,18,32,0,82,25,11,0,1,29,4,8,3,29,25,29,134,32,0,0,32,251,2,0,25,29,0,0,85,15,32,0,82,32,15,0,34,32,32,0,121,32,3,0,1,22,15,0,119,0,91,0,1,32,16,22,82,29,15,0,41,29,29,2,3,32,32,29,116,19,32,0,82,32,15,0,41,32,32,2,94,32,26,32,121,32,11,0,82,32,11,0,82,29,15,0,41,29,29,2,94,29,26,29,134,20,0,0,92,92,3,0,32,29,0,0,82,29,19,0,3,29,29,20,85,19,29,0,82,29,12,0,82,32,11,0,106,32,32,20,4,29,29,32,82,32,19,0,47,29,29,32,236,25,2,0,1,22,19,0,119,0,63,0,82,29,11,0,106,29,29,24,82,32,12,0,82,31,18,0,3,32,32,31,48,29,29,32,56,26,2,0,82,32,11,0,82,31,12,0,82,30,18,0,134,29,0,0,112,191,2,0,32,31,30,0,120,29,3,0,1,22,22,0,119,0,47,0,82,29,11,0,25,29,29,16,116,12,29,0,82,29,12,0,1,30,0,0,82,31,19,0,4,30,30,31,3,29,29,30,85,16,29,0,82,29,19,0,32,29,29,1,121,29,18,0,82,29,16,0,78,29,29,0,83,21,29,0,82,29,18,0,120,29,2,0,119,0,116,255,78,2,21,0,82,3,12,0,25,29,3,1,85,12,29,0,83,3,2,0,82,29,18,0,26,4,29,1,85,18,4,0,33,29,4,0,120,29,247,255,119,0,105,255,82,29,18,0,120,29,2,0,119,0,102,255,82,5,16,0,25,29,5,1,85,16,29,0,78,6,5,0,82,7,12,0,25,29,7,1,85,12,29,0,83,7,6,0,82,29,18,0,26,8,29,1,85,18,8,0,33,29,8,0,120,29,244,255,119,0,88,255,32,29,22,4,121,29,10,0,1,30,244,57,134,29,0,0,176,165,3,0,30,0,0,0,85,1,29,0,82,9,1,0,137,23,0,0,139,9,0,0,119,0,49,0,32,29,22,7,121,29,7,0,1,29,0,0,85,1,29,0,82,9,1,0,137,23,0,0,139,9,0,0,119,0,41,0,32,29,22,11,121,29,10,0,82,29,11,0,82,30,12,0,109,29,16,30,1,30,1,0,85,1,30,0,82,9,1,0,137,23,0,0,139,9,0,0,119,0,30,0,32,30,22,15,121,30,10,0,1,29,244,57,134,30,0,0,176,165,3,0,29,0,0,0,85,1,30,0,82,9,1,0,137,23,0,0,139,9,0,0,119,0,19,0,32,30,22,19,121,30,10,0,1,29,5,58,134,30,0,0,176,165,3,0,29,0,0,0,85,1,30,0,82,9,1,0,137,23,0,0,139,9,0,0,119,0,8,0,32,30,22,22,121,30,6,0,1,30,0,0,85,1,30,0,82,9,1,0,137,23,0,0,139,9,0,0,1,30,0,0,139,30,0,0,140,7,38,0,0,0,0,0,1,31,0,0,136,33,0,0,0,32,33,0,136,33,0,0,25,33,33,48,137,33,0,0,130,33,0,0,136,34,0,0,49,33,33,34,20,28,2,0,1,34,48,0,135,33,208,2,34,0,0,0,25,23,32,40,25,25,32,36,25,27,32,32,25,7,32,28,25,8,32,24,25,11,32,20,25,12,32,16,25,13,32,12,25,14,32,8,25,15,32,4,0,16,32,0,85,23,0,0,89,25,1,0,85,27,2,0,85,7,3,0,89,8,4,0,85,11,5,0,85,12,6,0,59,33,0,0,145,33,33,0,89,14,33,0,82,33,7,0,82,34,27,0,4,17,33,34,59,34,1,0,145,34,34,0,88,33,25,0,145,33,33,0,66,18,34,33,145,18,18,0,1,36,48,23,82,37,23,0,41,37,37,3,3,36,36,37,106,36,36,4,38,36,36,7,135,35,18,3,36,18,0,0,145,35,35,0,59,36,2,0,145,36,36,0,65,34,35,36,145,34,34,0,135,33,19,3,34,0,0,0,75,33,33,0,47,33,33,17,236,28,2,0,1,34,181,67,1,36,138,59,1,35,17,4,1,37,24,68,135,33,209,2,34,36,35,37,82,33,11,0,116,33,27,0,82,33,11,0,82,37,7,0,109,33,4,37,82,37,11,0,106,37,37,4,82,33,11,0,82,33,33,0,47,37,37,33,48,29,2,0,1,33,33,67,1,35,138,59,1,36,22,4,1,34,24,68,135,37,209,2,33,35,36,34,1,37,0,0,85,13,37,0,82,37,7,0,82,34,27,0,4,37,37,34,82,34,13,0,54,37,37,34,124,30,2,0,82,36,13,0,82,35,27,0,3,34,36,35,76,34,34,0,145,34,34,0,61,35,0,0,0,0,0,63,145,35,35,0,63,37,34,35,145,37,37,0,89,16,37,0,88,19,8,0,145,19,19,0,88,37,16,0,145,37,37,0,64,20,19,37,145,20,20,0,59,37,1,0,145,37,37,0,88,35,25,0,145,35,35,0,66,21,37,35,145,21,21,0,1,35,48,23,82,37,23,0,41,37,37,3,94,35,35,37,38,35,35,7,135,22,20,3,35,20,21,0,145,22,22,0,82,35,12,0,82,37,13,0,41,37,37,2,101,35,37,22,82,37,13,0,120,37,21,0,82,35,12,0,82,34,13,0,41,34,34,2,100,37,35,34,145,37,37,0,59,35,0,0,145,35,35,0,70,37,37,35,121,37,3,0,1,31,10,0,119,0,11,0,82,37,27,0,25,24,37,1,85,27,24,0,82,37,11,0,85,37,24,0,82,37,13,0,26,37,37,1,85,13,37,0,119,0,2,0,1,31,10,0,32,37,31,10,121,37,12,0,1,31,0,0,82,37,12,0,82,35,13,0,41,35,35,2,100,26,37,35,145,26,26,0,88,35,14,0,145,35,35,0,63,37,35,26,145,37,37,0,89,14,37,0,82,37,13,0,25,37,37,1,85,13,37,0,119,0,176,255,82,35,7,0,25,37,35,1,76,37,37,0,145,37,37,0,61,35,0,0,0,0,0,63,145,35,35,0,63,28,37,35,145,28,28,0,88,35,8,0,145,35,35,0,64,29,28,35,145,29,29,0,59,35,1,0,145,35,35,0,88,37,25,0,145,37,37,0,66,30,35,37,145,30,30,0,1,35,48,23,82,34,23,0,41,34,34,3,94,35,35,34,38,35,35,7,135,37,20,3,35,29,30,0,145,37,37,0,59,35,0,0,145,35,35,0,69,37,37,35,120,37,7,0,1,35,63,68,1,34,138,59,1,36,40,4,1,33,24,68,135,37,209,2,35,34,36,33,88,37,14,0,145,37,37,0,62,33,0,0,205,204,204,204,204,204,236,63,73,37,37,33,120,37,7,0,1,33,171,68,1,36,138,59,1,34,42,4,1,35,24,68,135,37,209,2,33,36,34,35,88,37,14,0,145,37,37,0,62,35,0,0,82,253,247,158,153,153,241,63,145,35,35,0,71,37,37,35,120,37,7,0,1,35,190,68,1,34,138,59,1,36,43,4,1,33,24,68,135,37,209,2,35,34,36,33,59,33,1,0,145,33,33,0,88,36,14,0,145,36,36,0,66,37,33,36,145,37,37,0,89,15,37,0,1,37,0,0,85,13,37,0,82,37,7,0,82,36,27,0,4,37,37,36,82,36,13,0,54,37,37,36,244,31,2,0,88,9,15,0,145,9,9,0,82,37,12,0,82,36,13,0,41,36,36,2,3,10,37,36,88,37,10,0,145,37,37,0,65,36,37,9,145,36,36,0,89,10,36,0,82,36,13,0,25,36,36,1,85,13,36,0,119,0,236,255,82,36,7,0,82,37,27,0,4,36,36,37,85,13,36,0,82,36,13,0,34,36,36,0,121,36,3,0,1,31,25,0,119,0,23,0,82,37,12,0,82,33,13,0,41,33,33,2,100,36,37,33,145,36,36,0,59,37,0,0,145,37,37,0,70,36,36,37,121,36,3,0,1,31,25,0,119,0,12,0,82,36,11,0,82,37,11,0,82,37,37,0,82,33,13,0,3,37,37,33,26,37,37,1,109,36,4,37,82,37,13,0,26,37,37,1,85,13,37,0,119,0,230,255,32,37,31,25,121,37,3,0,137,32,0,0,139,0,0,0,139,0,0,0,140,2,42,0,0,0,0,0,2,35,0,0,185,39,0,0,2,36,0,0,186,39,0,0,2,37,0,0,124,40,0,0,136,38,0,0,0,32,38,0,136,38,0,0,1,39,144,0,3,38,38,39,137,38,0,0,130,38,0,0,136,39,0,0,49,38,38,39,216,32,2,0,1,39,144,0,135,38,208,2,39,0,0,0,25,30,32,24,25,29,32,16,0,28,32,0,25,10,32,120,25,12,32,116,25,14,32,112,25,18,32,48,25,23,32,44,25,26,32,40,1,38,128,0,97,32,38,0,109,32,124,1,2,38,0,0,228,158,0,0,82,38,38,0,2,39,0,0,232,161,0,0,82,39,39,0,50,38,38,39,232,35,2,0,2,38,0,0,232,158,0,0,82,38,38,0,2,39,0,0,236,161,0,0,82,39,39,0,50,38,38,39,232,35,2,0,2,38,0,0,232,161,0,0,82,38,38,0,2,39,0,0,228,158,0,0,82,39,39,0,50,38,38,39,224,33,2,0,2,38,0,0,236,161,0,0,82,38,38,0,2,39,0,0,232,158,0,0,82,39,39,0,50,38,38,39,224,33,2,0,2,38,0,0,240,161,0,0,2,39,0,0,228,158,0,0,82,39,39,0,85,38,39,0,2,39,0,0,244,161,0,0,2,38,0,0,232,158,0,0,82,38,38,0,85,39,38,0,2,38,0,0,248,161,0,0,1,39,0,0,85,38,39,0,2,39,0,0,252,161,0,0,1,38,0,0,85,39,38,0,137,32,0,0,139,0,0,0,2,38,0,0,232,158,0,0,82,19,38,0,2,38,0,0,232,161,0,0,82,20,38,0,2,38,0,0,236,161,0,0,82,21,38,0,2,38,0,0,228,158,0,0,82,38,38,0,85,30,38,0,109,30,4,19,109,30,8,20,109,30,12,21,1,39,1,0,1,40,150,53,134,38,0,0,104,5,3,0,39,40,30,0,2,38,0,0,232,161,0,0,82,22,38,0,77,38,22,0,145,22,38,0,2,39,0,0,236,161,0,0,82,40,39,0,77,40,40,0,145,40,40,0,66,38,22,40,145,38,38,0,89,23,38,0,2,38,0,0,228,158,0,0,82,24,38,0,76,38,24,0,145,24,38,0,2,39,0,0,232,158,0,0,82,40,39,0,76,40,40,0,145,40,40,0,66,38,24,40,145,38,38,0,89,26,38,0,88,25,23,0,145,25,25,0,88,38,26,0,145,38,38,0,72,38,25,38,121,38,40,0,2,38,0,0,240,161,0,0,2,40,0,0,228,158,0,0,82,40,40,0,85,38,40,0,2,40,0,0,228,158,0,0,82,27,40,0,76,40,27,0,145,27,40,0,2,40,0,0,244,161,0,0,88,41,23,0,145,41,41,0,66,39,27,41,145,39,39,0,134,38,0,0,96,181,3,0,39,0,0,0,75,38,38,0,85,40,38,0,2,38,0,0,248,161,0,0,1,40,0,0,85,38,40,0,2,40,0,0,252,161,0,0,2,38,0,0,244,161,0,0,82,38,38,0,2,39,0,0,232,158,0,0,82,39,39,0,4,38,38,39,85,40,38,0,137,32,0,0,139,0,0,0,119,0,39,0,2,38,0,0,232,158,0,0,82,2,38,0,76,38,2,0,145,2,38,0,2,38,0,0,240,161,0,0,88,41,23,0,145,41,41,0,65,39,2,41,145,39,39,0,134,40,0,0,96,181,3,0,39,0,0,0,75,40,40,0,85,38,40,0,2,40,0,0,244,161,0,0,2,38,0,0,232,158,0,0,82,38,38,0,85,40,38,0,2,38,0,0,248,161,0,0,2,40,0,0,240,161,0,0,82,40,40,0,2,39,0,0,228,158,0,0,82,39,39,0,4,40,40,39,85,38,40,0,2,40,0,0,252,161,0,0,1,38,0,0,85,40,38,0,137,32,0,0,139,0,0,0,2,38,0,0,232,158,0,0,82,3,38,0,2,38,0,0,232,161,0,0,82,4,38,0,2,38,0,0,236,161,0,0,82,5,38,0,2,38,0,0,228,158,0,0,82,38,38,0,85,28,38,0,109,28,4,3,109,28,8,4,109,28,12,5,1,40,2,0,1,39,7,53,134,38,0,0,104,5,3,0,40,39,28,0,2,38,0,0,232,161,0,0,82,6,38,0,77,38,6,0,145,6,38,0,2,40,0,0,228,158,0,0,82,39,40,0,76,39,39,0,145,39,39,0,66,38,6,39,145,38,38,0,89,10,38,0,2,38,0,0,236,161,0,0,82,7,38,0,77,38,7,0,145,7,38,0,2,40,0,0,232,158,0,0,82,39,40,0,76,39,39,0,145,39,39,0,66,38,7,39,145,38,38,0,89,12,38,0,88,8,10,0,145,8,8,0,88,38,12,0,145,38,38,0,72,38,8,38,121,38,38,0,2,38,0,0,240,161,0,0,2,39,0,0,232,161,0,0,82,39,39,0,85,38,39,0,2,39,0,0,232,158,0,0,82,9,39,0,76,39,9,0,145,9,39,0,2,39,0,0,244,161,0,0,88,41,10,0,145,41,41,0,65,40,9,41,145,40,40,0,134,38,0,0,96,181,3,0,40,0,0,0,75,38,38,0,85,39,38,0,2,38,0,0,248,161,0,0,1,39,0,0,85,38,39,0,2,39,0,0,252,161,0,0,2,38,0,0,236,161,0,0,82,38,38,0,2,40,0,0,244,161,0,0,82,40,40,0,4,38,38,40,85,39,38,0,119,0,37,0,2,38,0,0,228,158,0,0,82,11,38,0,76,38,11,0,145,11,38,0,2,38,0,0,240,161,0,0,88,41,12,0,145,41,41,0,65,40,11,41,145,40,40,0,134,39,0,0,96,181,3,0,40,0,0,0,75,39,39,0,85,38,39,0,2,39,0,0,244,161,0,0,2,38,0,0,236,161,0,0,82,38,38,0,85,39,38,0,2,38,0,0,248,161,0,0,2,39,0,0,232,161,0,0,82,39,39,0,2,40,0,0,240,161,0,0,82,40,40,0,4,39,39,40,85,38,39,0,2,39,0,0,252,161,0,0,1,38,0,0,85,39,38,0,2,38,0,0,240,161,0,0,82,13,38,0,76,38,13,0,145,13,38,0,2,40,0,0,228,158,0,0,82,39,40,0,76,39,39,0,145,39,39,0,66,38,13,39,145,38,38,0,89,14,38,0,88,15,14,0,145,15,15,0,88,16,14,0,145,16,16,0,88,39,14,0,145,39,39,0,134,38,0,0,188,23,3,0,18,15,16,39,2,31,0,0,168,161,0,0,0,33,18,0,25,34,31,64,116,31,33,0,25,31,31,4,25,33,33,4,54,38,31,34,72,38,2,0,2,38,0,0,240,161,0,0,2,39,0,0,232,161,0,0,82,39,39,0,85,38,39,0,2,39,0,0,244,161,0,0,2,38,0,0,236,161,0,0,82,38,38,0,85,39,38,0,2,38,0,0,244,161,0,0,82,17,38,0,2,38,0,0,240,161,0,0,82,38,38,0,85,29,38,0,109,29,4,17,1,39,2,0,1,40,85,53,134,38,0,0,104,5,3,0,39,40,29,0,137,32,0,0,139,0,0,0,140,1,26,0,0,0,0,0,2,20,0,0,255,0,0,0,1,18,0,0,136,21,0,0,0,19,21,0,136,21,0,0,1,22,0,10,3,21,21,22,137,21,0,0,130,21,0,0,136,22,0,0,49,21,21,22,16,39,2,0,1,22,0,10,135,21,208,2,22,0,0,0,1,21,240,9,3,1,19,21,1,21,236,9,3,8,19,21,1,21,8,2,3,9,19,21,25,10,19,32,0,11,19,0,1,21,4,2,3,14,19,21,1,21,0,2,3,15,19,21,1,21,252,1,3,16,19,21,1,21,248,1,3,17,19,21,1,21,244,1,3,2,19,21,1,21,240,1,3,3,19,21,1,21,236,1,3,5,19,21,1,21,232,1,3,6,19,21,1,21,244,9,3,7,19,21,85,8,0,0,82,22,8,0,1,23,5,0,134,21,0,0,92,92,3,0,22,23,0,0,1,23,1,1,3,21,21,23,85,16,21,0,82,23,8,0,1,22,5,0,134,21,0,0,92,92,3,0,23,22,0,0,25,21,21,1,85,17,21,0,82,22,8,0,1,23,4,0,134,21,0,0,92,92,3,0,22,23,0,0,25,21,21,4,85,2,21,0,82,21,16,0,82,23,17,0,3,21,21,23,85,3,21,0,1,21,0,0,85,11,21,0,1,23,0,0,109,11,4,23,1,21,0,0,109,11,8,21,1,23,0,0,109,11,12,23,1,21,0,0,108,11,16,21,1,23,0,0,107,11,18,23,1,23,0,0,85,14,23,0,82,23,2,0,82,21,14,0,56,23,23,21,104,40,2,0,82,21,8,0,1,22,3,0,134,23,0,0,92,92,3,0,21,22,0,0,85,5,23,0,1,23,16,23,82,22,14,0,91,23,23,22,82,22,5,0,95,11,23,22,82,22,14,0,25,22,22,1,85,14,22,0,119,0,238,255,1,23,19,0,134,22,0,0,128,43,2,0,9,11,23,0,120,22,6,0,1,22,0,0,85,1,22,0,82,4,1,0,137,19,0,0,139,4,0,0,1,22,0,0,85,15,22,0,82,22,3,0,82,23,15,0,49,22,22,23,176,40,2,0,1,18,25,0,119,0,90,0,82,23,8,0,134,22,0,0,32,251,2,0,23,9,0,0,85,6,22,0,82,22,6,0,34,22,22,0,1,23,19,0,82,21,6,0,17,23,23,21,20,22,22,23,121,22,3,0,1,18,9,0,119,0,76,0,82,22,6,0,34,22,22,16,121,22,9,0,82,22,6,0,19,22,22,20,0,12,22,0,82,13,15,0,25,22,13,1,85,15,22,0,95,10,13,12,119,0,226,255,1,22,0,0,83,7,22,0,82,22,6,0,32,22,22,16,121,22,17,0,82,23,8,0,1,21,2,0,134,22,0,0,92,92,3,0,23,21,0,0,25,22,22,3,85,6,22,0,82,22,15,0,120,22,3,0,1,18,14,0,119,0,49,0,82,22,15,0,26,22,22,1,90,22,10,22,83,7,22,0,119,0,24,0,82,22,6,0,32,22,22,17,121,22,9,0,82,21,8,0,1,23,3,0,134,22,0,0,92,92,3,0,21,23,0,0,25,22,22,3,85,6,22,0,119,0,13,0,82,22,6,0,33,22,22,18,121,22,3,0,1,18,19,0,119,0,28,0,82,23,8,0,1,21,7,0,134,22,0,0,92,92,3,0,23,21,0,0,25,22,22,11,85,6,22,0,82,22,3,0,82,21,15,0,4,22,22,21,82,21,6,0,47,22,22,21,228,41,2,0,1,18,22,0,119,0,13,0,82,21,15,0,3,21,10,21,79,23,7,0,19,23,23,20,82,24,6,0,135,22,213,2,21,23,24,0,82,22,15,0,82,24,6,0,3,22,22,24,85,15,22,0,119,0,162,255,32,22,18,9,121,22,10,0,1,24,163,58,134,22,0,0,176,165,3,0,24,0,0,0,85,1,22,0,82,4,1,0,137,19,0,0,139,4,0,0,119,0,79,0,32,22,18,14,121,22,10,0,1,24,163,58,134,22,0,0,176,165,3,0,24,0,0,0,85,1,22,0,82,4,1,0,137,19,0,0,139,4,0,0,119,0,68,0,32,22,18,19,121,22,8,0,1,24,179,58,1,23,109,54,1,21,215,15,1,25,187,58,135,22,209,2,24,23,21,25,119,0,59,0,32,22,18,22,121,22,10,0,1,25,163,58,134,22,0,0,176,165,3,0,25,0,0,0,85,1,22,0,82,4,1,0,137,19,0,0,139,4,0,0,119,0,48,0,32,22,18,25,121,22,46,0,82,22,15,0,82,25,3,0,46,22,22,25,244,42,2,0,1,25,163,58,134,22,0,0,176,165,3,0,25,0,0,0,85,1,22,0,82,4,1,0,137,19,0,0,139,4,0,0,82,25,8,0,25,25,25,32,82,21,16,0,134,22,0,0,128,43,2,0,25,10,21,0,120,22,6,0,1,22,0,0,85,1,22,0,82,4,1,0,137,19,0,0,139,4,0,0,82,21,8,0,1,25,4,8,3,21,21,25,82,25,16,0,3,25,10,25,82,23,17,0,134,22,0,0,128,43,2,0,21,25,23,0,121,22,7,0,1,22,1,0,85,1,22,0,82,4,1,0,137,19,0,0,139,4,0,0,119,0,6,0,1,22,0,0,85,1,22,0,82,4,1,0,137,19,0,0,139,4,0,0,1,22,0,0,139,22,0,0,140,3,33,0,0,0,0,0,2,25,0,0,0,2,0,0,2,26,0,0,0,4,0,0,2,27,0,0,100,4,0,0,1,20,0,0,136,28,0,0,0,21,28,0,136,28,0,0,1,29,192,0,3,28,28,29,137,28,0,0,130,28,0,0,136,29,0,0,49,28,28,29,216,43,2,0,1,29,192,0,135,28,208,2,29,0,0,0,1,28,180,0,3,12,21,28,1,28,176,0,3,13,21,28,1,28,172,0,3,14,21,28,1,28,168,0,3,15,21,28,1,28,164,0,3,16,21,28,1,28,160,0,3,17,21,28,1,28,156,0,3,18,21,28,25,3,21,80,0,4,21,0,1,28,152,0,3,5,21,28,1,28,148,0,3,6,21,28,1,28,184,0,3,7,21,28,1,28,144,0,3,8,21,28,85,13,0,0,85,14,1,0,85,15,2,0,1,28,0,0,85,17,28,0,0,19,4,0,25,22,19,68,1,28,0,0,85,19,28,0,25,19,19,4,54,28,19,22,84,44,2,0,82,29,13,0,1,30,0,0,135,28,213,2,29,30,26,0,1,28,0,0,85,16,28,0,82,28,15,0,82,30,16,0,56,28,28,30,192,44,2,0,82,28,14,0,82,30,16,0,91,28,28,30,41,28,28,2,3,11,4,28,82,28,11,0,25,28,28,1,85,11,28,0,82,28,16,0,25,28,28,1,85,16,28,0,119,0,241,255,1,28,0,0,85,4,28,0,1,28,1,0,85,16,28,0,1,28,16,0,82,30,16,0,56,28,28,30,24,45,2,0,1,28,1,0,82,30,16,0,22,28,28,30,82,30,16,0,41,30,30,2,94,30,4,30,47,28,28,30,8,45,2,0,1,20,7,0,119,0,5,0,82,28,16,0,25,28,28,1,85,16,28,0,119,0,239,255,32,28,20,7,121,28,9,0,1,30,215,58,134,28,0,0,176,165,3,0,30,0,0,0,85,12,28,0,82,10,12,0,137,21,0,0,139,10,0,0,1,28,0,0,85,18,28,0,1,28,1,0,85,16,28,0,1,28,16,0,82,30,16,0,56,28,28,30,76,46,2,0,82,28,16,0,41,28,28,2,82,30,18,0,97,3,28,30,82,30,13,0,3,30,30,26,82,28,16,0,41,28,28,1,82,29,18,0,96,30,28,29,82,29,13,0,3,29,29,27,82,28,16,0,41,28,28,1,82,30,17,0,96,29,28,30,82,30,18,0,82,28,16,0,41,28,28,2,94,28,4,28,3,30,30,28,85,18,30,0,82,30,16,0,41,30,30,2,94,30,4,30,121,30,10,0,1,30,1,0,82,28,16,0,22,30,30,28,82,28,18,0,26,28,28,1,49,30,30,28,236,45,2,0,1,20,13,0,119,0,25,0,82,30,13,0,1,28,32,4,3,30,30,28,82,28,16,0,41,28,28,2,82,29,18,0,1,31,16,0,82,32,16,0,4,31,31,32,22,29,29,31,97,30,28,29,82,29,18,0,41,29,29,1,85,18,29,0,82,29,17,0,82,28,16,0,41,28,28,2,94,28,4,28,3,29,29,28,85,17,29,0,82,29,16,0,25,29,29,1,85,16,29,0,119,0,194,255,32,29,20,13,121,29,9,0,1,28,163,58,134,29,0,0,176,165,3,0,28,0,0,0,85,12,29,0,82,10,12,0,137,21,0,0,139,10,0,0,82,29,13,0,1,28,32,4,3,29,29,28,2,28,0,0,0,0,1,0,109,29,64,28,1,28,0,0,85,16,28,0,82,28,15,0,82,29,16,0,56,28,28,29,204,47,2,0,82,28,14,0,82,29,16,0,91,28,28,29,85,5,28,0,82,28,5,0,121,28,65,0,82,23,13,0,82,28,5,0,41,28,28,1,0,24,28,0,82,28,5,0,41,28,28,2,94,28,3,28,3,29,23,26,93,29,29,24,4,28,28,29,3,29,23,27,93,29,29,24,3,28,28,29,85,6,28,0,82,28,5,0,41,28,28,9,82,29,16,0,20,28,28,29,84,7,28,0,82,28,13,0,1,29,132,4,3,28,28,29,82,29,6,0,82,30,5,0,95,28,29,30,82,30,13,0,1,29,164,5,3,30,30,29,82,29,6,0,41,29,29,1,82,28,16,0,96,30,29,28,82,28,5,0,36,28,28,9,121,28,24,0,82,29,5,0,41,29,29,2,94,29,3,29,82,30,5,0,134,28,0,0,0,135,3,0,29,30,0,0,85,8,28,0,82,28,8,0,56,28,25,28,164,47,2,0,82,28,13,0,82,30,8,0,41,30,30,1,80,29,7,0,96,28,30,29,82,29,8,0,1,30,1,0,82,28,5,0,22,30,30,28,3,29,29,30,85,8,29,0,119,0,242,255,82,29,5,0,41,29,29,2,3,9,3,29,82,29,9,0,25,29,29,1,85,9,29,0,82,29,16,0,25,29,29,1,85,16,29,0,119,0,179,255,1,29,1,0,85,12,29,0,82,10,12,0,137,21,0,0,139,10,0,0,140,7,59,0,0,0,0,0,136,53,0,0,0,52,53,0,136,53,0,0,25,53,53,80,137,53,0,0,130,53,0,0], eb + 133120);
  HEAPU8.set([136,54,0,0,49,53,53,54,24,48,2,0,1,54,80,0,135,53,208,2,54,0,0,0,25,38,52,68,25,43,52,64,25,50,52,60,25,7,52,56,25,8,52,52,25,9,52,48,25,10,52,44,25,11,52,40,25,12,52,36,25,13,52,32,25,14,52,28,25,15,52,24,25,16,52,20,25,17,52,16,25,18,52,12,25,19,52,8,25,20,52,4,0,21,52,0,85,38,0,0,85,43,1,0,85,50,2,0,89,7,3,0,89,8,4,0,85,9,5,0,85,10,6,0,88,22,7,0,145,22,22,0,82,54,50,0,82,55,9,0,82,56,10,0,134,53,0,0,32,38,3,0,22,54,55,56,85,12,53,0,88,56,7,0,145,56,56,0,134,53,0,0,104,160,3,0,56,0,0,0,33,23,53,0,1,53,48,23,82,56,50,0,41,56,56,3,3,53,53,56,106,24,53,4,88,25,7,0,145,25,25,0,121,23,63,0,59,53,1,0,145,53,53,0,66,26,53,25,145,26,26,0,38,53,24,7,135,27,18,3,53,26,0,0,145,27,27,0,88,56,7,0,145,56,56,0,65,53,27,56,145,53,53,0,89,13,53,0,1,53,0,0,85,11,53,0,82,53,12,0,82,56,11,0,56,53,53,56,200,49,2,0,88,28,13,0,145,28,28,0,88,29,7,0,145,29,29,0,82,56,11,0,88,55,8,0,145,55,55,0,134,53,0,0,44,162,2,0,56,28,29,55,15,16,14,0,82,30,50,0,88,31,7,0,145,31,31,0,82,32,15,0,82,33,16,0,88,34,14,0,145,34,34,0,82,53,38,0,82,55,11,0,134,35,0,0,28,156,3,0,53,55,0,0,88,36,7,0,145,36,36,0,82,56,43,0,82,54,50,0,82,57,11,0,1,58,0,0,134,53,0,0,220,90,3,0,56,54,36,57,58,0,0,0,134,55,0,0,216,27,2,0,30,31,32,33,34,35,53,0,82,55,11,0,25,55,55,1,85,11,55,0,119,0,212,255,137,52,0,0,139,0,0,0,38,55,24,7,135,37,18,3,55,25,0,0,145,37,37,0,88,53,7,0,145,53,53,0,66,55,37,53,145,55,55,0,89,17,55,0,1,55,0,0,85,11,55,0,82,55,12,0,82,53,11,0,56,55,55,53,212,50,2,0,82,39,11,0,82,53,50,0,88,58,7,0,145,58,58,0,134,55,0,0,252,143,3,0,53,58,0,0,4,55,39,55,85,21,55,0,88,40,17,0,145,40,40,0,88,41,7,0,145,41,41,0,82,58,21,0,88,53,8,0,145,53,53,0,134,55,0,0,108,160,2,0,58,40,41,53,19,20,18,0,82,42,50,0,88,44,7,0,145,44,44,0,82,45,19,0,82,46,20,0,88,47,18,0,145,47,47,0,82,55,38,0,82,53,11,0,134,48,0,0,28,156,3,0,55,53,0,0,88,49,7,0,145,49,49,0,82,58,43,0,82,57,50,0,82,54,11,0,1,56,0,0,134,55,0,0,220,90,3,0,58,57,49,54,56,0,0,0,134,53,0,0,36,88,2,0,42,44,45,46,47,48,55,0,82,53,11,0,25,53,53,1,85,11,53,0,119,0,203,255,88,51,7,0,145,51,51,0,82,55,38,0,82,56,43,0,82,54,50,0,82,57,9,0,82,58,10,0,134,53,0,0,200,199,1,0,55,56,54,51,57,58,0,0,137,52,0,0,139,0,0,0,140,0,33,0,0,0,0,0,2,27,0,0,176,147,0,0,2,28,0,0,150,39,0,0,136,29,0,0,0,10,29,0,136,29,0,0,25,29,29,32,137,29,0,0,130,29,0,0,136,30,0,0,49,29,29,30,80,51,2,0,1,30,32,0,135,29,208,2,30,0,0,0,25,0,10,24,25,1,10,20,25,5,10,16,25,6,10,12,25,7,10,8,25,8,10,4,0,9,10,0,2,29,0,0,76,158,0,0,82,29,29,0,2,30,0,0,80,158,0,0,82,30,30,0,26,30,30,1,27,30,30,12,3,29,29,30,25,29,29,4,116,0,29,0,82,29,0,0,30,3,29,4,1,30,4,0,82,31,0,0,49,30,30,31,184,51,2,0,0,29,3,0,119,0,4,0,1,30,4,0,4,30,30,3,0,29,30,0,85,1,29,0,1,29,0,0,85,5,29,0,82,29,1,0,82,30,5,0,56,29,29,30,20,52,2,0,59,30,255,255,145,30,30,0,59,31,255,255,145,31,31,0,59,32,255,255,145,32,32,0,134,29,0,0,236,129,2,0,30,31,32,0,82,29,5,0,25,29,29,1,85,5,29,0,119,0,240,255,2,29,0,0,88,158,0,0,82,29,29,0,27,29,29,48,94,29,27,29,2,32,0,0,88,158,0,0,82,32,32,0,27,32,32,48,3,32,27,32,106,32,32,8,46,29,29,32,36,54,2,0,2,29,0,0,88,158,0,0,82,29,29,0,27,29,29,48,3,11,27,29,82,29,11,0,106,32,11,8,4,29,29,32,85,6,29,0,1,29,0,0,85,7,29,0,82,29,6,0,82,32,7,0,56,29,29,32,36,54,2,0,2,29,0,0,88,158,0,0,82,29,29,0,27,29,29,48,3,12,27,29,2,29,0,0,88,158,0,0,82,29,29,0,27,29,29,48,3,29,27,29,106,13,29,20,2,29,0,0,88,158,0,0,82,29,29,0,27,29,29,48,3,29,27,29,106,29,29,8,41,29,29,2,0,14,29,0,26,32,14,4,90,32,13,32,95,13,14,32,2,32,0,0,88,158,0,0,82,32,32,0,27,32,32,48,3,15,27,32,2,32,0,0,88,158,0,0,82,32,32,0,27,32,32,48,3,32,27,32,106,16,32,20,2,32,0,0,88,158,0,0,82,32,32,0,27,32,32,48,3,32,27,32,106,32,32,8,41,32,32,2,0,17,32,0,25,32,17,1,26,29,17,3,90,29,16,29,95,16,32,29,2,29,0,0,88,158,0,0,82,29,29,0,27,29,29,48,3,18,27,29,2,29,0,0,88,158,0,0,82,29,29,0,27,29,29,48,3,29,27,29,106,19,29,20,2,29,0,0,88,158,0,0,82,29,29,0,27,29,29,48,3,29,27,29,106,29,29,8,41,29,29,2,0,20,29,0,25,29,20,2,26,32,20,2,90,32,19,32,95,19,29,32,2,32,0,0,88,158,0,0,82,32,32,0,27,32,32,48,3,21,27,32,2,32,0,0,88,158,0,0,82,32,32,0,27,32,32,48,3,32,27,32,106,22,32,20,2,32,0,0,88,158,0,0,82,32,32,0,27,32,32,48,3,32,27,32,106,32,32,8,41,32,32,2,0,23,32,0,25,32,23,3,26,29,23,1,90,29,22,29,95,22,32,29,2,29,0,0,88,158,0,0,82,29,29,0,27,29,29,48,3,29,27,29,25,2,29,8,82,29,2,0,25,29,29,1,85,2,29,0,82,29,7,0,25,29,29,1,85,7,29,0,119,0,149,255,2,29,0,0,88,158,0,0,82,29,29,0,27,29,29,48,94,29,27,29,2,32,0,0,88,158,0,0,82,32,32,0,27,32,32,48,3,32,27,32,106,32,32,4,46,29,29,32,44,55,2,0,2,29,0,0,88,158,0,0,82,29,29,0,27,29,29,48,3,24,27,29,82,29,24,0,106,32,24,4,4,29,29,32,85,8,29,0,1,29,0,0,85,9,29,0,82,29,8,0,82,32,9,0,56,29,29,32,44,55,2,0,2,29,0,0,88,158,0,0,82,29,29,0,27,29,29,48,3,25,27,29,106,29,25,16,106,32,25,4,41,32,32,1,41,32,32,2,59,31,0,0,145,31,31,0,101,29,32,31,2,31,0,0,88,158,0,0,82,31,31,0,27,31,31,48,3,26,27,31,106,31,26,16,106,32,26,4,41,32,32,1,25,32,32,1,41,32,32,2,59,29,0,0,145,29,29,0,101,31,32,29,2,29,0,0,88,158,0,0,82,29,29,0,27,29,29,48,3,29,27,29,25,4,29,4,82,29,4,0,25,29,29,1,85,4,29,0,82,29,9,0,25,29,29,1,85,9,29,0,119,0,215,255,1,29,176,39,1,30,176,39,88,31,30,0,145,31,31,0,62,30,0,0,50,236,172,223,226,54,10,63,145,30,30,0,63,32,31,30,145,32,32,0,89,29,32,0,2,32,0,0,88,158,0,0,82,32,32,0,27,32,32,48,94,32,27,32,1,29,252,31,47,32,32,29,128,55,2,0,137,10,0,0,139,0,0,0,134,32,0,0,252,76,3,0,134,32,0,0,140,183,3,0,137,10,0,0,139,0,0,0,140,3,48,0,0,0,0,0,2,39,0,0,137,40,0,0,2,40,0,0,138,40,0,0,2,41,0,0,133,40,0,0,2,42,0,0,132,40,0,0,136,43,0,0,0,38,43,0,136,43,0,0,25,43,43,32,137,43,0,0,130,43,0,0,136,44,0,0,49,43,43,44,240,55,2,0,1,44,32,0,135,43,208,2,44,0,0,0,25,12,38,24,25,17,38,4,0,21,38,0,89,12,1,0,1,44,72,0,134,43,0,0,120,146,3,0,44,0,0,0,121,43,3,0,134,43,0,0,140,183,3,0,134,43,0,0,244,192,2,0,17,0,0,0,82,44,17,0,134,43,0,0,164,94,3,0,44,0,0,0,1,44,7,0,134,43,0,0,132,82,3,0,44,0,0,0,1,43,0,0,85,21,43,0,1,43,104,1,82,44,21,0,56,43,43,44,172,60,2,0,78,44,2,0,102,45,2,1,102,46,2,2,102,47,2,3,134,43,0,0,200,249,2,0,44,45,46,47,2,43,0,0,16,162,0,0,88,7,43,0,145,7,7,0,2,47,0,0,36,162,0,0,82,43,47,0,76,43,43,0,145,43,43,0,66,8,7,43,145,8,8,0,2,43,0,0,20,162,0,0,88,9,43,0,145,9,9,0,2,45,0,0,40,162,0,0,82,46,45,0,76,46,46,0,145,46,46,0,66,47,9,46,145,47,47,0,134,43,0,0,148,81,3,0,8,47,0,0,88,10,0,0,145,10,10,0,112,47,0,4,145,47,47,0,134,43,0,0,148,141,3,0,10,47,0,0,2,43,0,0,16,162,0,0,88,11,43,0,145,11,11,0,2,47,0,0,36,162,0,0,82,43,47,0,76,43,43,0,145,43,43,0,66,13,11,43,145,13,13,0,2,43,0,0,20,162,0,0,88,14,43,0,145,14,14,0,2,47,0,0,28,162,0,0,88,43,47,0,145,43,43,0,63,15,14,43,145,15,15,0,2,45,0,0,40,162,0,0,82,46,45,0,76,46,46,0,145,46,46,0,66,47,15,46,145,47,47,0,134,43,0,0,148,81,3,0,13,47,0,0,88,16,0,0,145,16,16,0,82,47,21,0,76,47,47,0,145,47,47,0,62,46,0,0,20,25,67,160,70,223,145,63,145,46,46,0,65,43,47,46,145,43,43,0,135,18,13,3,43,0,0,0,145,18,18,0,88,46,12,0,145,46,46,0,65,43,18,46,145,43,43,0,63,19,16,43,145,19,19,0,112,20,0,4,145,20,20,0,82,46,21,0,76,46,46,0,145,46,46,0,62,47,0,0,20,25,67,160,70,223,145,63,145,47,47,0,65,43,46,47,145,43,43,0,135,22,14,3,43,0,0,0,145,22,22,0,88,45,12,0,145,45,45,0,65,46,22,45,145,46,46,0,63,47,20,46,145,47,47,0,134,43,0,0,148,141,3,0,19,47,0,0,2,43,0,0,16,162,0,0,88,23,43,0,145,23,23,0,2,47,0,0,24,162,0,0,88,43,47,0,145,43,43,0,63,24,23,43,145,24,24,0,2,47,0,0,36,162,0,0,82,43,47,0,76,43,43,0,145,43,43,0,66,25,24,43,145,25,25,0,2,43,0,0,20,162,0,0,88,26,43,0,145,26,26,0,2,47,0,0,28,162,0,0,88,43,47,0,145,43,43,0,63,27,26,43,145,27,27,0,2,45,0,0,40,162,0,0,82,46,45,0,76,46,46,0,145,46,46,0,66,47,27,46,145,47,47,0,134,43,0,0,148,81,3,0,25,47,0,0,88,28,0,0,145,28,28,0,82,46,21,0,25,47,46,10,76,47,47,0,145,47,47,0,62,46,0,0,20,25,67,160,70,223,145,63,145,46,46,0,65,43,47,46,145,43,43,0,135,29,13,3,43,0,0,0,145,29,29,0,88,46,12,0,145,46,46,0,65,43,29,46,145,43,43,0,63,30,28,43,145,30,30,0,112,31,0,4,145,31,31,0,82,47,21,0,25,46,47,10,76,46,46,0,145,46,46,0,62,47,0,0,20,25,67,160,70,223,145,63,145,47,47,0,65,43,46,47,145,43,43,0,135,32,14,3,43,0,0,0,145,32,32,0,88,45,12,0,145,45,45,0,65,46,32,45,145,46,46,0,63,47,31,46,145,47,47,0,134,43,0,0,148,141,3,0,30,47,0,0,2,43,0,0,16,162,0,0,88,33,43,0,145,33,33,0,2,47,0,0,24,162,0,0,88,43,47,0,145,43,43,0,63,34,33,43,145,34,34,0,2,47,0,0,36,162,0,0,82,43,47,0,76,43,43,0,145,43,43,0,66,35,34,43,145,35,35,0,2,43,0,0,20,162,0,0,88,36,43,0,145,36,36,0,2,45,0,0,40,162,0,0,82,46,45,0,76,46,46,0,145,46,46,0,66,47,36,46,145,47,47,0,134,43,0,0,148,81,3,0,35,47,0,0,88,37,0,0,145,37,37,0,82,46,21,0,25,47,46,20,76,47,47,0,145,47,47,0,62,46,0,0,20,25,67,160,70,223,145,63,145,46,46,0,65,43,47,46,145,43,43,0,135,3,13,3,43,0,0,0,145,3,3,0,88,46,12,0,145,46,46,0,65,43,3,46,145,43,43,0,63,4,37,43,145,4,4,0,112,5,0,4,145,5,5,0,82,47,21,0,25,46,47,20,76,46,46,0,145,46,46,0,62,47,0,0,20,25,67,160,70,223,145,63,145,47,47,0,65,43,46,47,145,43,43,0,135,6,14,3,43,0,0,0,145,6,6,0,88,45,12,0,145,45,45,0,65,46,6,45,145,46,46,0,63,47,5,46,145,47,47,0,134,43,0,0,148,141,3,0,4,47,0,0,82,43,21,0,25,43,43,20,85,21,43,0,119,0,234,254,134,43,0,0,8,51,2,0,134,43,0,0,80,177,3,0,137,38,0,0,139,0,0,0,140,7,41,0,0,0,0,0,136,33,0,0,0,32,33,0,136,33,0,0,25,33,33,80,137,33,0,0,130,33,0,0,136,34,0,0,49,33,33,34,252,60,2,0,1,34,80,0,135,33,208,2,34,0,0,0,25,28,32,64,25,30,32,60,25,31,32,56,25,7,32,52,25,12,32,48,25,16,32,44,25,17,32,40,25,18,32,36,25,19,32,32,25,20,32,28,25,21,32,24,25,22,32,20,25,23,32,8,25,24,32,4,0,25,32,0,85,28,0,0,85,30,1,0,85,31,2,0,85,7,3,0,85,12,4,0,85,16,5,0,85,17,6,0,1,33,1,0,82,34,28,0,82,34,34,0,22,33,33,34,26,33,33,1,82,34,17,0,47,33,33,34,168,62,2,0,82,33,17,0,1,34,1,0,82,35,28,0,82,35,35,0,22,34,34,35,4,33,33,34,85,18,33,0,82,33,18,0,120,33,3,0,137,32,0,0,139,0,0,0,82,33,30,0,82,34,28,0,25,34,34,4,82,35,18,0,91,34,34,35,4,33,33,34,85,19,33,0,82,33,31,0,82,34,28,0,1,35,4,1,3,34,34,35,82,35,18,0,91,34,34,35,4,33,33,34,85,20,33,0,82,33,7,0,82,34,28,0,1,35,4,2,3,34,34,35,82,35,18,0,91,34,34,35,4,33,33,34,85,21,33,0,82,26,19,0,82,27,20,0,82,29,21,0,82,34,19,0,34,34,34,0,121,34,5,0,1,34,0,0,4,34,34,26,0,33,34,0,119,0,2,0,0,33,26,0,82,35,20,0,34,35,35,0,121,35,5,0,1,35,0,0,4,35,35,27,0,34,35,0,119,0,2,0,0,34,27,0,3,33,33,34,82,35,21,0,34,35,35,0,121,35,5,0,1,35,0,0,4,35,35,29,0,34,35,0,119,0,2,0,0,34,29,0,3,33,33,34,85,22,33,0,82,33,16,0,82,33,33,0,82,34,22,0,49,33,33,34,144,62,2,0,137,32,0,0,139,0,0,0,82,33,12,0,116,33,18,0,82,33,16,0,116,33,22,0,137,32,0,0,139,0,0,0,116,23,30,0,82,34,31,0,109,23,4,34,82,33,7,0,109,23,8,33,82,33,28,0,1,34,4,3,3,33,33,34,82,34,17,0,91,33,33,34,41,33,33,2,3,33,23,33,116,24,33,0,82,33,28,0,1,34,3,4,3,33,33,34,82,34,17,0,91,33,33,34,85,25,33,0,82,8,28,0,82,9,30,0,82,10,31,0,82,11,7,0,82,13,12,0,82,14,16,0,82,33,17,0,41,33,33,1,0,15,33,0,82,33,24,0,82,34,25,0,47,33,33,34,156,63,2,0,134,33,0,0,196,60,2,0,8,9,10,11,13,14,15,0,82,33,16,0,82,33,33,0,82,34,25,0,82,35,24,0,4,34,34,35,49,33,33,34,92,63,2,0,137,32,0,0,139,0,0,0,82,34,28,0,82,35,30,0,82,36,31,0,82,37,7,0,82,38,12,0,82,39,16,0,82,40,17,0,41,40,40,1,25,40,40,1,134,33,0,0,196,60,2,0,34,35,36,37,38,39,40,0,137,32,0,0,139,0,0,0,119,0,29,0,25,40,15,1,134,33,0,0,196,60,2,0,8,9,10,11,13,14,40,0,82,33,16,0,82,33,33,0,82,40,24,0,82,39,25,0,4,40,40,39,49,33,33,40,212,63,2,0,137,32,0,0,139,0,0,0,82,40,28,0,82,39,30,0,82,38,31,0,82,37,7,0,82,36,12,0,82,35,16,0,82,34,17,0,41,34,34,1,134,33,0,0,196,60,2,0,40,39,38,37,36,35,34,0,137,32,0,0,139,0,0,0,139,0,0,0,140,2,23,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,96,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,76,64,2,0,1,19,96,0,135,18,208,2,19,0,0,0,25,12,17,40,25,11,17,32,25,15,17,24,25,14,17,16,25,13,17,8,0,10,17,0,25,2,17,76,25,3,17,56,25,4,17,52,25,5,17,80,25,6,17,48,25,7,17,44,85,2,1,0,1,18,0,0,85,3,18,0,1,19,0,0,109,3,4,19,1,18,0,0,109,3,8,18,1,19,0,0,109,3,12,19,1,18,0,0,109,3,16,18,82,19,2,0,1,20,80,54,134,18,0,0,132,255,2,0,19,20,0,0,85,4,18,0,82,18,4,0,120,18,18,0,116,10,2,0,1,20,2,0,1,19,36,70,134,18,0,0,104,5,3,0,20,19,10,0,116,0,3,0,106,19,3,4,109,0,4,19,106,18,3,8,109,0,8,18,106,19,3,12,109,0,12,19,106,18,3,16,109,0,16,18,137,17,0,0,139,0,0,0,1,19,16,0,1,20,1,0,82,21,4,0,134,18,0,0,8,219,2,0,5,19,20,21,103,18,5,3,33,18,18,92,121,18,3,0,1,16,7,0,119,0,111,0,103,18,5,2,1,21,161,0,46,18,18,21,80,65,2,0,1,16,7,0,119,0,105,0,103,18,5,1,1,21,171,0,46,18,18,21,104,65,2,0,1,16,7,0,119,0,99,0,79,18,5,0,33,18,18,19,121,18,3,0,1,16,7,0,119,0,94,0,25,21,5,7,103,21,21,2,41,21,21,16,25,20,5,7,103,20,20,1,41,20,20,8,20,21,21,20,103,20,5,7,20,21,21,20,109,3,4,21,25,18,5,10,103,18,18,2,41,18,18,16,25,20,5,10,103,20,20,1,41,20,20,8,20,18,18,20,103,20,5,10,20,18,18,20,109,3,8,18,25,18,3,4,116,14,18,0,1,21,8,0,1,20,120,70,134,18,0,0,104,5,3,0,21,20,14,0,25,18,3,8,116,15,18,0,1,20,8,0,1,21,141,70,134,18,0,0,104,5,3,0,20,21,15,0,103,8,5,5,103,18,5,4,85,11,18,0,109,11,4,8,1,21,8,0,1,20,163,70,134,18,0,0,104,5,3,0,21,20,11,0,1,20,1,0,109,3,12,20,1,20,128,0,103,21,5,4,103,19,5,5,5,18,21,19,6,20,20,18,85,6,20,0,82,20,6,0,32,20,20,8,82,18,6,0,32,18,18,2,20,20,20,18,120,20,8,0,116,12,2,0,1,18,2,0,1,19,188,70,134,20,0,0,104,5,3,0,18,19,12,0,119,0,30,0,106,20,3,4,106,19,3,8,5,9,20,19,82,20,6,0,5,19,9,20,28,19,19,8,85,7,19,0,82,20,7,0,135,19,1,0,20,0,0,0,85,3,19,0,82,20,3,0,82,18,7,0,1,21,1,0,82,22,4,0,134,19,0,0,8,219,2,0,20,18,21,22,82,19,6,0,32,19,19,8,121,19,4,0,1,22,20,0,109,3,16,22,119,0,6,0,82,22,6,0,32,22,22,2,121,22,3,0,1,19,21,0,109,3,16,19,32,19,16,7,121,19,7,0,116,13,2,0,1,22,2,0,1,21,71,70,134,19,0,0,104,5,3,0,22,21,13,0,82,21,4,0,134,19,0,0,196,87,3,0,21,0,0,0,116,0,3,0,106,21,3,4,109,0,4,21,106,19,3,8,109,0,8,19,106,21,3,12,109,0,12,21,106,19,3,16,109,0,16,19,137,17,0,0,139,0,0,0,140,23,69,0,0,0,0,0,136,56,0,0,0,55,56,0,136,56,0,0,1,57,80,1,3,56,56,57,137,56,0,0,130,56,0,0,136,57,0,0,49,56,56,57,136,67,2,0,1,57,80,1,135,56,208,2,57,0,0,0,1,56,68,1,3,23,55,56,1,56,60,1,3,24,55,56,1,56,56,1,3,25,55,56,1,56,52,1,3,26,55,56,1,56,48,1,3,27,55,56,1,56,44,1,3,28,55,56,1,56,40,1,3,29,55,56,1,56,36,1,3,30,55,56,1,56,32,1,3,31,55,56,1,56,28,1,3,32,55,56,1,56,24,1,3,33,55,56,1,56,20,1,3,34,55,56,1,56,16,1,3,35,55,56,1,56,12,1,3,36,55,56,1,56,8,1,3,37,55,56,1,56,4,1,3,38,55,56,1,56,0,1,3,39,55,56,1,56,252,0,3,40,55,56,1,56,248,0,3,41,55,56,1,56,244,0,3,42,55,56,1,56,240,0,3,43,55,56,1,56,236,0,3,44,55,56,1,56,232,0,3,45,55,56,25,46,55,12,25,47,55,8,25,48,55,4,0,49,55,0,1,56,64,1,97,55,56,0,85,24,1,0,85,25,2,0,85,26,3,0,85,27,4,0,85,28,5,0,85,29,6,0,85,30,7,0,85,31,8,0,89,32,9,0,89,33,10,0,89,34,11,0,89,35,12,0,85,36,13,0,85,37,14,0,85,38,15,0,85,39,16,0,85,40,17,0,85,41,18,0,85,42,19,0,85,43,20,0,85,44,21,0,85,45,22,0,82,57,25,0,82,58,26,0,82,59,29,0,82,60,30,0,82,61,37,0,134,56,0,0,232,39,3,0,46,57,58,59,60,61,0,0,88,50,32,0,145,50,50,0,88,51,33,0,145,51,51,0,88,52,34,0,145,52,52,0,88,53,35,0,145,53,53,0,82,61,36,0,134,56,0,0,88,93,2,0,46,50,51,52,53,61,0,0,82,61,41,0,82,60,42,0,134,56,0,0,216,79,3,0,46,61,60,0,134,56,0,0,64,240,1,0,46,0,0,0,85,48,56,0,82,60,48,0,135,56,1,0,60,0,0,0,85,49,56,0,82,56,49,0,121,56,28,0,82,60,24,0,82,61,27,0,82,59,28,0,82,58,31,0,82,57,38,0,82,62,39,0,82,63,40,0,82,64,43,0,82,65,44,0,82,66,45,0,82,67,49,0,82,68,48,0,134,56,0,0,220,99,1,0,46,60,61,59,58,57,62,63,64,65,66,67,68,0,0,0,85,47,56,0,82,68,49,0,135,56,214,2,68,0,0,0,116,23,47,0,82,54,23,0,137,55,0,0,139,54,0,0,119,0,6,0,1,56,0,0,85,23,56,0,82,54,23,0,137,55,0,0,139,54,0,0,1,56,0,0,139,56,0,0,140,4,16,0,0,0,0,0,2,9,0,0,8,25,0,0,2,10,0,0,7,25,0,0,2,11,0,0,173,164,0,0,136,12,0,0,0,8,12,0,136,12,0,0,25,12,12,32,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,28,70,2,0,1,13,32,0,135,12,208,2,13,0,0,0,25,4,8,16,25,5,8,12,25,6,8,8,25,7,8,4,85,4,0,0,85,5,1,0,85,6,2,0,85,7,3,0,82,12,5,0,1,13,255,255,85,12,13,0,82,13,6,0,1,12,255,255,85,13,12,0,82,12,7,0,1,13,255,255,85,12,13,0,82,13,4,0,1,14,1,0,1,15,21,0,138,13,14,15,220,70,2,0,4,71,2,0,44,71,2,0,80,71,2,0,112,71,2,0,148,71,2,0,184,71,2,0,216,71,2,0,20,72,2,0,72,72,2,0,124,72,2,0,156,72,2,0,188,72,2,0,220,72,2,0,252,72,2,0,36,73,2,0,76,73,2,0,116,73,2,0,156,73,2,0,196,73,2,0,236,73,2,0,1,12,2,0,1,15,228,50,134,14,0,0,104,5,3,0,12,15,8,0,119,0,207,0,82,12,5,0,1,14,9,25,85,12,14,0,82,14,6,0,1,12,9,25,85,14,12,0,82,12,7,0,1,14,1,20,85,12,14,0,119,0,197,0,82,14,5,0,1,12,10,25,85,14,12,0,82,12,6,0,1,14,10,25,85,12,14,0,82,14,7,0,1,12,1,20,85,14,12,0,119,0,187,0,82,12,5,0,85,12,10,0,82,12,6,0,85,12,10,0,82,12,7,0,2,14,0,0,99,131,0,0,85,12,14,0,119,0,178,0,82,14,5,0,85,14,10,0,82,14,6,0,85,14,10,0,82,14,7,0,1,12,1,20,85,14,12,0,119,0,170,0,82,12,5,0,85,12,9,0,82,12,6,0,85,12,9,0,82,12,7,0,2,14,0,0,52,128,0,0,85,12,14,0,119,0,161,0,82,14,5,0,85,14,9,0,82,14,6,0,85,14,9,0,82,14,7,0,2,12,0,0,51,128,0,0,85,14,12,0,119,0,152,0,82,12,5,0,85,12,9,0,82,12,6,0,85,12,9,0,82,12,7,0,1,14,1,20,85,12,14,0,119,0,144,0,2,14,0,0,172,164,0,0,78,14,14,0,38,14,14,1,121,14,4,0,82,14,5,0,1,12,9,25,85,14,12,0,82,12,6,0,1,14,9,25,85,12,14,0,82,14,7,0,1,12,6,20,85,14,12,0,119,0,129,0,2,12,0,0,172,164,0,0,78,12,12,0,38,12,12,1,121,12,3,0,82,12,5,0,85,12,10,0,82,12,6,0,85,12,10,0,82,12,7,0,1,14,6,20,85,12,14,0,119,0,116,0,2,14,0,0,172,164,0,0,78,14,14,0,38,14,14,1,121,14,3,0,82,14,5,0,85,14,9,0,82,14,6,0,85,14,9,0,82,14,7,0,1,12,6,20,85,14,12,0,119,0,103,0,78,12,11,0,38,12,12,1,121,12,100,0,82,12,5,0,2,14,0,0,240,131,0,0,85,12,14,0,119,0,95,0,78,14,11,0,38,14,14,1,121,14,92,0,82,14,5,0,2,12,0,0,241,131,0,0,85,14,12,0,119,0,87,0,78,12,11,0,38,12,12,1,121,12,84,0,82,12,5,0,2,14,0,0,242,131,0,0,85,12,14,0,119,0,79,0,78,14,11,0,38,14,14,1,121,14,76,0,82,14,5,0,2,12,0,0,243,131,0,0,85,14,12,0,119,0,71,0,2,12,0,0,174,164,0,0,78,12,12,0,38,12,12,1,121,12,66,0,82,12,5,0,2,14,0,0,100,141,0,0,85,12,14,0,119,0,61,0,2,14,0,0,175,164,0,0,78,14,14,0,38,14,14,1,121,14,56,0,82,14,5,0,2,12,0,0,116,146,0,0,85,14,12,0,119,0,51,0,2,12,0,0,175,164,0,0,78,12,12,0,38,12,12,1,121,12,46,0,82,12,5,0,2,14,0,0,120,146,0,0,85,12,14,0,119,0,41,0,2,14,0,0,176,164,0,0,78,14,14,0,38,14,14,1,121,14,36,0,82,14,5,0,2,12,0,0,0,140,0,0,85,14,12,0,119,0,31,0,2,12,0,0,176,164,0,0,78,12,12,0,38,12,12,1,121,12,26,0,82,12,5,0,2,14,0,0,2,140,0,0,85,12,14,0,119,0,21,0,2,14,0,0,177,164,0,0,78,14,14,0,38,14,14,1,121,14,16,0,82,14,5,0,2,12,0,0,176,147,0,0,85,14,12,0,119,0,11,0,2,12,0,0,177,164,0,0,78,12,12,0,38,12,12,1,121,12,6,0,82,12,5,0,2,14,0,0,183,147,0,0,85,12,14,0,119,0,1,0,137,8,0,0,139,0,0,0,140,2,20,0,0,0,0,0,2,13,0,0,0,0,128,127,2,14,0,0,255,0,0,0,2,15,0,0,255,255,255,127,1,12,0,0,127,16,0,0,89,16,1,0,127,16,0,0,82,10,16,0,19,16,10,15,0,6,16,0,48,16,13,6,104,74,2,0,1,12,3,0,119,0,219,0,127,16,0,0,89,16,0,0,127,16,0,0,82,7,16,0,19,16,7,15,0,8,16,0,48,16,13,8,144,74,2,0,1,12,3,0,119,0,209,0,2,16,0,0,0,0,128,63,45,16,10,16,180,74,2,0,134,2,0,0,88,144,2,0,0,0,0,0,145,2,2,0,119,0,200,0,43,16,7,31,0,4,16,0,43,16,10,30,38,16,16,2,20,16,16,4,0,5,16,0,120,8,23,0,38,16,5,3,1,17,0,0,1,18,4,0,138,16,17,18,244,74,2,0,252,74,2,0,0,75,2,0,20,75,2,0,119,0,14,0,58,2,0,0,119,0,182,0,119,0,254,255,62,2,0,0,80,53,221,95,251,33,9,64,145,2,2,0,119,0,176,0,62,2,0,0,80,53,221,95,251,33,9,192,145,2,2,0,119,0,171,0,19,16,10,15,0,11,16,0,47,16,11,13,140,75,2,0,1,16,0,0,1,17,1,0,138,11,16,17,76,75,2,0,119,0,83,0,119,0,1,0,32,17,4,0,121,17,7,0,62,17,0,0,80,53,221,95,251,33,249,63,145,17,17,0,58,16,17,0,119,0,6,0,62,17,0,0,80,53,221,95,251,33,249,191,145,17,17,0,58,16,17,0,58,2,16,0,119,0,146,0,2,16,0,0,0,0,128,127,1,17,1,0,138,11,16,17,164,75,2,0,119,0,61,0,119,0,1,0,19,16,5,14,0,9,16,0,45,16,8,13,44,76,2,0,38,16,9,3,1,17,0,0,1,18,4,0,138,16,17,18,220,75,2,0,240,75,2,0,4,76,2,0,24,76,2,0,119,0,47,0,62,2,0,0,80,53,221,95,251,33,233,63,145,2,2,0,119,0,121,0,62,2,0,0,80,53,221,95,251,33,233,191,145,2,2,0,119,0,116,0,62,2,0,0,222,30,132,128,124,217,2,64,145,2,2,0,119,0,111,0,62,2,0,0,222,30,132,128,124,217,2,192,145,2,2,0,119,0,106,0,38,16,9,3,1,17,0,0,1,18,4,0,138,16,17,18,80,76,2,0,92,76,2,0,108,76,2,0,128,76,2,0,119,0,18,0,59,2,0,0,145,2,2,0,119,0,94,0,61,2,0,0,0,0,0,128,145,2,2,0,119,0,90,0,62,2,0,0,80,53,221,95,251,33,9,64,145,2,2,0,119,0,85,0,62,2,0,0,80,53,221,95,251,33,9,192,145,2,2,0,119,0,80,0,13,16,8,13,2,17,0,0,0,0,0,13,3,17,6,17,16,17,17,8,20,16,16,17,121,16,16,0,32,17,4,0,121,17,7,0,62,17,0,0,80,53,221,95,251,33,249,63,145,17,17,0,58,16,17,0,119,0,6,0,62,17,0,0,80,53,221,95,251,33,249,191,145,17,17,0,58,16,17,0,58,2,16,0,119,0,58,0,34,16,10,0,2,17,0,0,0,0,0,13,3,17,8,17,16,17,17,6,19,16,16,17,121,16,4,0,59,3,0,0,145,3,3,0,119,0,10,0,66,17,0,1,145,17,17,0,135,16,21,3,17,0,0,0,145,16,16,0,134,3,0,0,88,144,2,0,16,0,0,0,145,3,3,0,38,16,5,3,1,17,0,0,1,18,3,0,138,16,17,18,136,77,2,0,144,77,2,0,156,77,2,0,62,17,0,0,193,73,171,191,165,119,119,62,145,17,17,0,63,18,3,17,145,18,18,0,62,17,0,0,80,53,221,95,251,33,9,192,145,17,17,0,63,2,18,17,145,2,2,0,119,0,19,0,58,2,3,0,119,0,17,0,68,2,3,0,145,2,2,0,119,0,14,0,62,17,0,0,80,53,221,95,251,33,9,64,145,17,17,0,62,19,0,0,193,73,171,191,165,119,119,62,145,19,19,0,63,18,3,19,145,18,18,0,64,2,17,18,145,2,2,0,119,0,1,0,32,16,12,3,121,16,3,0,63,2,0,1,145,2,2,0,145,16,2,0,139,16,0,0,140,6,37,0,0,0,0,0,136,32,0,0,0,31,32,0,136,32,0,0,25,32,32,16,137,32,0,0,130,32,0,0,136,33,0,0,49,32,32,33,32,78,2,0,1,33,16,0,135,32,208,2,33,0,0,0,25,16,31,8,25,20,31,4,0,25,31,0,89,16,4,0,82,32,0,0,37,32,32,0,121,32,3,0,137,31,0,0,139,0,0,0,106,32,0,4,76,32,32,0,145,32,32,0,89,20,32,0,106,32,0,8,76,32,32,0,145,32,32,0,89,25,32,0,112,32,1,8,145,32,32,0,59,33,0,0,145,33,33,0,71,32,32,33,121,32,8,0,112,6,1,8,145,6,6,0,88,33,1,0,145,33,33,0,64,32,33,6,145,32,32,0,89,1,32,0,112,32,1,12,145,32,32,0,59,33,0,0,145,33,33,0,71,32,32,33,121,32,9,0,112,7,1,12,145,7,7,0,25,8,1,4,88,33,8,0,145,33,33,0,64,32,33,7,145,32,32,0,89,8,32,0,82,33,0,0,134,32,0,0,164,94,3,0,33,0,0,0,134,32,0,0,4,120,3,0,88,9,2,0,145,9,9,0,112,33,2,4,145,33,33,0,59,34,0,0,145,34,34,0,134,32,0,0,72,226,2,0,9,33,34,0,88,34,16,0,145,34,34,0,59,33,0,0,145,33,33,0,59,35,0,0,145,35,35,0,59,36,1,0,145,36,36,0,134,32,0,0,56,138,2,0,34,33,35,36,88,32,3,0,145,32,32,0,68,10,32,0,145,10,10,0,112,35,3,4,145,35,35,0,68,36,35,0,145,36,36,0,59,35,0,0,145,35,35,0,134,32,0,0,72,226,2,0,10,36,35,0,1,35,7,0,134,32,0,0,132,82,3,0,35,0,0,0,78,35,5,0,102,36,5,1,102,33,5,2,102,34,5,3,134,32,0,0,200,249,2,0,35,36,33,34,59,34,0,0,145,34,34,0,59,33,0,0,145,33,33,0,59,36,1,0,145,36,36,0,134,32,0,0,192,159,3,0,34,33,36,0,88,11,1,0,145,11,11,0,88,32,20,0,145,32,32,0,66,12,11,32,145,12,12,0,112,13,1,4,145,13,13,0,88,33,25,0,145,33,33,0,66,36,13,33,145,36,36,0,134,32,0,0,148,81,3,0,12,36,0,0,59,36,0,0,145,36,36,0,59,33,0,0,145,33,33,0,134,32,0,0,148,141,3,0,36,33,0,0,88,14,1,0,145,14,14,0,88,32,20,0,145,32,32,0,66,15,14,32,145,15,15,0,112,17,1,4,145,17,17,0,112,32,1,12,145,32,32,0,63,18,17,32,145,18,18,0,88,36,25,0,145,36,36,0,66,33,18,36,145,33,33,0,134,32,0,0,148,81,3,0,15,33,0,0,59,33,0,0,145,33,33,0,112,36,2,12,145,36,36,0,134,32,0,0,148,141,3,0,33,36,0,0,88,19,1,0,145,19,19,0,112,32,1,8,145,32,32,0,63,21,19,32,145,21,21,0,88,32,20,0,145,32,32,0,66,22,21,32,145,22,22,0,112,23,1,4,145,23,23,0,112,32,1,12,145,32,32,0,63,24,23,32,145,24,24,0,88,33,25,0,145,33,33,0,66,36,24,33,145,36,36,0,134,32,0,0,148,81,3,0,22,36,0,0,112,26,2,8,145,26,26,0,112,36,2,12,145,36,36,0,134,32,0,0,148,141,3,0,26,36,0,0,88,27,1,0,145,27,27,0,112,32,1,8,145,32,32,0,63,28,27,32,145,28,28,0,88,32,20,0,145,32,32,0,66,29,28,32,145,29,29,0,112,30,1,4,145,30,30,0,88,33,25,0,145,33,33,0,66,36,30,33,145,36,36,0,134,32,0,0,148,81,3,0,29,36,0,0,112,36,2,8,145,36,36,0,59,33,0,0,145,33,33,0,134,32,0,0,148,141,3,0,36,33,0,0,134,32,0,0,8,51,2,0,134,32,0,0,252,76,3,0,134,32,0,0,80,177,3,0,137,31,0,0,139,0,0,0,140,2,21,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,136,16,0,0,1,17,144,0,3,16,16,17,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,188,81,2,0,1,17,144,0,135,16,208,2,17,0,0,0,25,11,15,32,25,13,15,24,25,12,15,16,25,10,15,8,0,9,15,0,1,16,136,0,3,2,15,16,25,3,15,116,25,4,15,112,25,5,15,48,1,16,140,0,3,6,15,16,25,7,15,40,25,8,15,36,85,2,1,0,1,16,0,0,85,3,16,0,1,17,0,0,109,3,4,17,1,16,0,0,109,3,8,16,1,17,0,0,109,3,12,17,1,16,0,0,109,3,16,16,82,17,2,0,1,18,80,54,134,16,0,0,132,255,2,0,17,18,0,0,85,4,16,0,82,16,4,0,120,16,18,0,116,9,2,0,1,18,2,0,1,17,237,70,134,16,0,0,104,5,3,0,18,17,9,0,116,0,3,0,106,17,3,4,109,0,4,17,106,16,3,8,109,0,8,16,106,17,3,12,109,0,12,17,106,16,3,16,109,0,16,16,137,15,0,0,139,0,0,0,1,17,64,0,1,18,1,0,82,19,4,0,134,16,0,0,8,219,2,0,5,17,18,19,102,16,5,1,33,16,16,75,121,16,3,0,1,14,9,0,119,0,113,0,102,16,5,2,33,16,16,84,121,16,3,0,1,14,9,0,119,0,108,0,102,16,5,3,33,16,16,88,121,16,3,0,1,14,9,0,119,0,103,0,102,16,5,4,33,16,16,32,121,16,3,0,1,14,9,0,119,0,98,0,102,16,5,5,33,16,16,49,121,16,3,0,1,14,9,0,119,0,93,0,102,16,5,6,33,16,16,49,121,16,3,0,1,14,9,0,119,0,88,0,106,19,5,36,109,3,4,19,106,16,5,40,109,3,8,16,106,19,5,56,109,3,12,19,25,19,5,36,116,12,19,0,1,16,8,0,1,18,68,71,134,19,0,0,104,5,3,0,16,18,12,0,25,19,5,40,116,13,19,0,1,18,8,0,1,16,94,71,134,19,0,0,104,5,3,0,18,16,13,0,25,19,5,28,116,11,19,0,1,16,8,0,1,18,121,71,134,19,0,0,104,5,3,0,16,18,11,0,1,19,0,0,106,18,5,60,48,19,19,18,208,83,2,0,1,19,0,0,85,7,19,0,106,19,5,60,82,18,7,0,57,19,19,18,208,83,2,0,1,18,1,0,1,16,1,0,82,17,4,0,134,19,0,0,8,219,2,0,6,18,16,17,82,19,7,0,25,19,19,1,85,7,19,0,119,0,243,255,1,17,4,0,1,16,1,0,82,18,4,0,134,19,0,0,8,219,2,0,8,17,16,18,82,18,8,0,135,19,1,0,18,0,0,0,85,3,19,0,82,18,3,0,82,16,8,0,1,17,1,0,82,20,4,0,134,19,0,0,8,219,2,0,18,16,17,20,106,19,5,28,2,20,0,0,100,141,0,0,45,19,19,20,52,84,2,0,1,20,15,0,109,3,16,20,119,0,16,0,106,20,5,28,2,19,0,0,116,146,0,0,45,20,20,19,84,84,2,0,1,19,16,0,109,3,16,19,119,0,8,0,106,19,5,28,2,20,0,0,120,146,0,0,45,19,19,20,112,84,2,0,1,20,17,0,109,3,16,20,32,20,14,9,121,20,7,0,116,10,2,0,1,19,2,0,1,17,21,71,134,20,0,0,104,5,3,0,19,17,10,0,82,17,4,0,134,20,0,0,196,87,3,0,17,0,0,0,116,0,3,0,106,17,3,4,109,0,4,17,106,20,3,8,109,0,8,20,106,17,3,12,109,0,12,17,106,20,3,16,109,0,16,20,137,15,0,0,139,0,0,0,140,4,33,0,0,0,0,0,2,25,0,0,255,0,0,0,136,26,0,0,0,24,26,0,136,26,0,0,25,26,26,48,137,26,0,0,130,26,0,0,136,27,0,0,49,26,26,27,12,85,2,0,1,27,48,0,135,26,208,2,27,0,0,0,25,12,24,40,25,14,24,36,25,15,24,32,25,18,24,28,25,20,24,24,25,21,24,20,25,4,24,16,25,6,24,12,25,7,24,8,25,8,24,4,0,9,24,0,85,14,0,0,85,15,1,0,85,18,2,0,85,20,3,0,82,26,14,0,120,26,6,0,1,26,0,0,85,12,26,0,82,5,12,0,137,24,0,0,139,5,0,0,82,27,15,0,82,28,18,0,82,29,20,0,1,30,0,0,134,26,0,0,84,25,3,0,27,28,29,30,85,7,26,0,82,26,7,0,120,26,17,0,82,30,14,0,135,26,214,2,30,0,0,0,1,30,203,54,134,26,0,0,176,165,3,0,30,0,0,0,33,10,26,0,1,30,0,0,1,29,0,0,125,26,10,30,29,0,0,0,85,12,26,0,82,5,12,0,137,24,0,0,139,5,0,0,82,11,20,0,82,26,20,0,38,26,26,1,121,26,3,0,85,6,11,0,119,0,3,0,26,26,11,1,85,6,26,0,1,26,0,0,85,21,26,0,82,29,15,0,82,30,18,0,5,26,29,30,82,30,21,0,56,26,26,30,8,88,2,0,1,26,0,0,85,4,26,0,82,26,6,0,82,30,4,0,56,26,26,30,36,87,2,0,82,26,21,0,82,30,20,0,5,13,26,30,82,31,14,0,82,32,4,0,3,32,13,32,41,32,32,2,100,27,31,32,145,27,27,0,59,31,1,0,145,31,31,0,65,28,27,31,145,28,28,0,62,31,0,0,60,98,176,191,69,23,221,63,145,31,31,0,135,29,22,3,28,31,0,0,145,29,29,0,59,31,255,0,145,31,31,0,65,26,29,31,145,26,26,0,61,31,0,0,0,0,0,63,145,31,31,0,63,30,26,31,145,30,30,0,89,8,30,0,88,30,8,0,145,30,30,0,59,31,0,0,145,31,31,0,71,30,30,31,121,30,4,0,59,30,0,0,145,30,30,0,89,8,30,0,88,30,8,0,145,30,30,0,59,31,255,0,145,31,31,0,73,30,30,31,121,30,4,0,59,30,255,0,145,30,30,0,89,8,30,0,88,30,8,0,145,30,30,0,75,30,30,0,19,30,30,25,0,16,30,0,82,30,21,0,82,31,20,0,5,17,30,31,82,31,7,0,82,30,4,0,3,30,17,30,95,31,30,16,82,30,4,0,25,30,30,1,85,4,30,0,119,0,189,255,82,30,4,0,82,31,20,0,47,30,30,31,248,87,2,0,82,30,21,0,82,31,20,0,5,19,30,31,82,29,14,0,82,28,4,0,3,28,19,28,41,28,28,2,100,26,29,28,145,26,26,0,59,29,255,0,145,29,29,0,65,30,26,29,145,30,30,0,61,29,0,0,0,0,0,63,145,29,29,0,63,31,30,29,145,31,31,0,89,9,31,0,88,31,9,0,145,31,31,0,59,29,0,0,145,29,29,0,71,31,31,29,121,31,4,0,59,31,0,0,145,31,31,0,89,9,31,0,88,31,9,0,145,31,31,0,59,29,255,0,145,29,29,0,73,31,31,29,121,31,4,0,59,31,255,0,145,31,31,0,89,9,31,0,88,31,9,0,145,31,31,0,75,31,31,0,19,31,31,25,0,22,31,0,82,31,21,0,82,29,20,0,5,23,31,29,82,29,7,0,82,31,4,0,3,31,23,31,95,29,31,22,82,31,21,0,25,31,31,1], eb + 143360);
  HEAPU8.set([85,21,31,0,119,0,124,255,82,29,14,0,135,31,214,2,29,0,0,0,116,12,7,0,82,5,12,0,137,24,0,0,139,5,0,0,140,7,34,0,0,0,0,0,1,27,0,0,136,29,0,0,0,28,29,0,136,29,0,0,25,29,29,48,137,29,0,0,130,29,0,0,136,30,0,0,49,29,29,30,96,88,2,0,1,30,48,0,135,29,208,2,30,0,0,0,25,21,28,36,25,25,28,32,25,26,28,28,25,7,28,24,25,8,28,20,25,9,28,16,25,10,28,12,25,11,28,8,25,12,28,4,0,13,28,0,85,21,0,0,89,25,1,0,85,26,2,0,85,7,3,0,89,8,4,0,85,9,5,0,85,10,6,0,82,29,7,0,82,30,26,0,4,14,29,30,88,15,25,0,145,15,15,0,1,32,48,23,82,33,21,0,41,33,33,3,3,32,32,33,106,32,32,4,38,32,32,7,135,31,18,3,32,15,0,0,145,31,31,0,59,32,2,0,145,32,32,0,65,29,31,32,145,29,29,0,135,30,19,3,29,0,0,0,75,30,30,0,47,30,30,14,24,89,2,0,1,29,143,66,1,32,138,59,1,31,65,4,1,33,248,66,135,30,209,2,29,32,31,33,82,30,9,0,116,30,26,0,82,30,9,0,82,33,7,0,109,30,4,33,82,33,9,0,106,33,33,4,82,30,9,0,82,30,30,0,47,33,33,30,92,89,2,0,1,30,33,67,1,31,138,59,1,32,70,4,1,29,248,66,135,33,209,2,30,31,32,29,1,33,0,0,85,11,33,0,82,33,7,0,82,29,26,0,4,33,33,29,82,29,11,0,54,33,33,29,36,90,2,0,82,32,11,0,82,31,26,0,3,29,32,31,76,29,29,0,145,29,29,0,61,31,0,0,0,0,0,63,145,31,31,0,63,33,29,31,145,33,33,0,89,12,33,0,88,16,12,0,145,16,16,0,88,31,8,0,145,31,31,0,64,33,16,31,145,33,33,0,89,13,33,0,88,17,13,0,145,17,17,0,88,18,25,0,145,18,18,0,1,33,48,23,82,31,21,0,41,31,31,3,94,33,33,31,38,33,33,7,135,19,20,3,33,17,18,0,145,19,19,0,88,33,25,0,145,33,33,0,65,20,19,33,145,20,20,0,82,33,10,0,82,31,11,0,41,31,31,2,101,33,31,20,82,31,11,0,25,31,31,1,85,11,31,0,119,0,209,255,82,33,7,0,25,31,33,1,76,31,31,0,145,31,31,0,61,33,0,0,0,0,0,63,145,33,33,0,63,22,31,33,145,22,22,0,88,33,8,0,145,33,33,0,64,23,22,33,145,23,23,0,88,24,25,0,145,24,24,0,1,31,48,23,82,29,21,0,41,29,29,3,94,31,31,29,38,31,31,7,135,33,20,3,31,23,24,0,145,33,33,0,59,31,0,0,145,31,31,0,69,33,33,31,120,33,7,0,1,31,68,67,1,29,138,59,1,32,79,4,1,30,248,66,135,33,209,2,31,29,32,30,82,33,7,0,82,30,26,0,4,33,33,30,85,11,33,0,82,33,11,0,34,33,33,0,121,33,3,0,1,27,14,0,119,0,23,0,82,30,10,0,82,32,11,0,41,32,32,2,100,33,30,32,145,33,33,0,59,30,0,0,145,30,30,0,70,33,33,30,121,33,3,0,1,27,14,0,119,0,12,0,82,33,9,0,82,30,9,0,82,30,30,0,82,32,11,0,3,30,30,32,26,30,30,1,109,33,4,30,82,30,11,0,26,30,30,1,85,11,30,0,119,0,230,255,32,30,27,14,121,30,3,0,137,28,0,0,139,0,0,0,139,0,0,0,140,0,24,0,0,0,0,0,2,20,0,0,176,119,0,0,136,21,0,0,0,18,21,0,136,21,0,0,1,22,128,0,3,21,21,22,137,21,0,0,130,21,0,0,136,22,0,0,49,21,21,22,124,91,2,0,1,22,128,0,135,21,208,2,22,0,0,0,25,17,18,112,25,16,18,104,25,15,18,96,25,2,18,88,25,14,18,72,25,1,18,52,25,3,18,32,25,4,18,24,25,8,18,8,0,12,18,0,25,13,18,16,1,0,0,0,27,21,0,20,3,21,20,21,102,21,21,16,121,21,98,0,2,21,0,0,0,157,0,0,82,21,21,0,85,3,21,0,2,22,0,0,4,157,0,0,82,22,22,0,109,3,4,22,2,21,0,0,8,157,0,0,82,21,21,0,109,3,8,21,2,22,0,0,12,157,0,0,82,22,22,0,109,3,12,22,2,21,0,0,16,157,0,0,82,21,21,0,109,3,16,21,27,21,0,20,3,19,20,21,25,22,19,8,2,23,0,0,32,157,0,0,134,21,0,0,176,158,3,0,4,22,23,0,0,5,19,0,106,6,5,4,0,7,8,0,116,7,5,0,109,7,4,6,1,9,128,39,106,10,9,4,0,11,12,0,116,11,9,0,109,11,4,10,1,21,91,41,79,21,21,0,1,23,92,41,79,23,23,0,41,23,23,8,20,21,21,23,1,23,93,41,79,23,23,0,41,23,23,16,20,21,21,23,1,23,94,41,79,23,23,0,41,23,23,24,20,21,21,23,85,13,21,0,116,1,3,0,106,23,3,4,109,1,4,23,106,21,3,8,109,1,8,21,106,23,3,12,109,1,12,23,106,21,3,16,109,1,16,21,1,21,140,39,82,21,21,0,85,14,21,0,1,23,144,39,82,23,23,0,109,14,4,23,1,21,148,39,82,21,21,0,109,14,8,21,1,23,152,39,82,23,23,0,109,14,12,23,116,2,4,0,106,21,4,4,109,2,4,21,116,15,8,0,106,23,8,4,109,15,4,23,116,16,12,0,106,21,12,4,109,16,4,21,78,21,13,0,83,17,21,0,102,23,13,1,107,17,1,23,102,21,13,2,107,17,2,21,102,23,13,3,107,17,3,23,59,21,0,0,145,21,21,0,134,23,0,0,92,128,2,0,1,14,2,15,16,21,17,0,25,0,0,1,1,23,0,1,53,23,0,23,172,91,2,0,137,18,0,0,139,0,0,0,140,6,39,0,0,0,0,0,136,37,0,0,0,36,37,0,136,37,0,0,25,37,37,32,137,37,0,0,130,37,0,0,136,38,0,0,49,37,37,38,144,93,2,0,1,38,32,0,135,37,208,2,38,0,0,0,25,20,36,20,25,24,36,16,25,27,36,12,25,32,36,8,25,6,36,4,0,7,36,0,85,20,0,0,89,24,1,0,89,27,2,0,89,32,3,0,89,6,4,0,85,7,5,0,88,8,24,0,145,8,8,0,82,37,20,0,113,37,32,8,88,9,27,0,145,9,9,0,82,37,20,0,113,37,36,9,88,10,32,0,145,10,10,0,82,37,20,0,113,37,40,10,88,11,6,0,145,11,11,0,82,37,20,0,113,37,44,11,82,37,7,0,121,37,24,0,82,37,7,0,88,12,37,0,145,12,12,0,82,37,20,0,113,37,56,12,82,37,7,0,112,13,37,4,145,13,13,0,82,37,20,0,113,37,60,13,82,37,7,0,112,14,37,8,145,14,14,0,82,37,20,0,113,37,48,14,82,37,7,0,112,15,37,12,145,15,15,0,82,37,20,0,113,37,52,15,137,36,0,0,139,0,0,0,119,0,79,0,82,37,20,0,106,16,37,20,76,37,16,0,145,16,37,0,82,38,20,0,106,37,38,4,76,37,37,0,145,37,37,0,66,17,16,37,145,17,17,0,88,18,32,0,145,18,18,0,88,38,24,0,145,38,38,0,64,37,18,38,145,37,37,0,66,19,17,37,145,19,19,0,82,37,20,0,113,37,56,19,82,37,20,0,106,21,37,24,76,37,21,0,145,21,37,0,82,38,20,0,106,37,38,8,76,37,37,0,145,37,37,0,66,22,21,37,145,22,22,0,88,23,6,0,145,23,23,0,88,38,27,0,145,38,38,0,64,37,23,38,145,37,37,0,66,25,22,37,145,25,25,0,82,37,20,0,113,37,60,25,88,26,24,0,145,26,26,0,82,38,20,0,106,37,38,20,76,37,37,0,145,37,37,0,65,28,26,37,145,28,28,0,88,29,32,0,145,29,29,0,88,38,24,0,145,38,38,0,64,37,29,38,145,37,37,0,66,30,28,37,145,30,30,0,82,37,20,0,113,37,48,30,88,31,27,0,145,31,31,0,82,38,20,0,106,37,38,24,76,37,37,0,145,37,37,0,65,33,31,37,145,33,33,0,88,34,6,0,145,34,34,0,88,38,27,0,145,38,38,0,64,37,34,38,145,37,37,0,66,35,33,37,145,35,35,0,82,37,20,0,113,37,52,35,137,36,0,0,139,0,0,0,139,0,0,0,140,1,27,0,0,0,0,0,2,19,0,0,168,0,0,0,2,20,0,0,172,0,0,0,2,21,0,0,176,0,0,0,1,15,0,0,136,22,0,0,0,16,22,0,136,22,0,0,25,22,22,32,137,22,0,0,130,22,0,0,136,23,0,0,49,22,22,23,244,95,2,0,1,23,32,0,135,22,208,2,23,0,0,0,25,1,16,24,25,4,16,20,25,5,16,16,25,8,16,12,25,9,16,8,25,10,16,4,0,13,16,0,85,1,0,0,82,23,1,0,112,22,23,60,145,22,22,0,89,5,22,0,59,22,1,0,145,22,22,0,88,23,5,0,145,23,23,0,66,2,22,23,145,2,2,0,1,23,48,23,82,22,1,0,106,22,22,84,41,22,22,3,3,23,23,22,106,23,23,4,38,23,23,7,135,3,18,3,23,2,0,0,145,3,3,0,88,22,5,0,145,22,22,0,65,23,3,22,145,23,23,0,89,8,23,0,82,22,1,0,134,23,0,0,108,157,3,0,22,0,0,0,120,23,7,0,1,22,149,65,1,24,138,59,1,25,19,8,1,26,190,65,135,23,209,2,22,24,25,26,1,23,0,0,85,4,23,0,82,23,1,0,106,23,23,24,82,26,4,0,49,23,23,26,200,96,2,0,1,15,19,0,119,0,100,0,59,23,0,0,145,23,23,0,89,9,23,0,1,23,0,0,85,10,23,0,1,23,0,0,85,13,23,0,88,6,8,0,145,6,6,0,88,7,5,0,145,7,7,0,82,26,4,0,82,24,1,0,112,25,24,52,145,25,25,0,134,23,0,0,44,162,2,0,26,6,7,25,10,13,9,0,82,23,1,0,1,25,164,0,94,23,23,25,82,25,13,0,82,26,10,0,4,25,25,26,25,25,25,1,47,23,23,25,64,97,2,0,1,15,6,0,119,0,70,0,1,23,0,0,82,25,1,0,94,25,25,21,49,23,23,25,220,97,2,0,82,23,10,0,82,25,1,0,94,25,25,19,56,23,23,25,220,97,2,0,82,11,1,0,82,23,1,0,94,23,23,19,82,25,1,0,94,25,25,20,52,23,23,25,188,97,2,0,3,12,11,19,82,23,12,0,25,23,23,1,85,12,23,0,82,23,1,0,3,17,23,21,82,18,1,0,82,23,17,0,25,23,23,1,1,25,164,0,94,25,18,25,8,23,23,25,85,17,23,0,119,0,231,255,1,25,255,255,97,11,21,25,82,25,1,0,1,23,0,0,97,25,19,23,82,23,1,0,1,25,0,0,97,23,20,25,82,25,1,0,94,25,25,21,34,25,25,0,121,25,6,0,82,23,1,0,82,26,10,0,134,25,0,0,232,93,3,0,23,26,0,0,82,14,1,0,82,25,13,0,82,26,1,0,94,26,26,20,56,25,25,26,52,98,2,0,82,26,1,0,94,26,26,20,25,26,26,1,134,25,0,0,232,93,3,0,14,26,0,0,119,0,244,255,82,26,4,0,134,25,0,0,120,242,0,0,14,26,0,0,82,25,4,0,25,25,25,1,85,4,25,0,119,0,151,255,32,25,15,6,121,25,8,0,1,26,218,65,1,23,138,59,1,24,28,8,1,22,190,65,135,25,209,2,26,23,24,22,119,0,5,0,32,25,15,19,121,25,3,0,137,16,0,0,139,0,0,0,139,0,0,0,140,6,25,0,0,0,0,0,136,20,0,0,0,17,20,0,136,20,0,0,25,20,20,32,137,20,0,0,130,20,0,0,136,21,0,0,49,20,20,21,196,98,2,0,1,21,32,0,135,20,208,2,21,0,0,0,25,13,17,28,25,14,17,24,25,15,17,20,25,16,17,16,25,6,17,12,25,7,17,8,25,9,17,4,0,10,17,0,85,14,0,0,85,15,1,0,85,16,2,0,85,6,3,0,85,7,4,0,85,9,5,0,1,20,0,0,85,10,20,0,82,20,7,0,34,20,20,0,1,21,4,0,82,22,7,0,15,21,21,22,20,20,20,21,121,20,14,0,1,21,145,55,134,20,0,0,176,165,3,0,21,0,0,0,33,11,20,0,1,21,0,0,1,22,0,0,125,20,11,21,22,0,0,0,85,13,20,0,82,8,13,0,137,17,0,0,139,8,0,0,82,22,14,0,1,21,0,0,82,23,7,0,134,20,0,0,172,177,0,0,22,21,23,0,121,20,85,0,82,20,14,0,106,20,20,16,34,20,20,8,121,20,5,0,82,20,9,0,1,23,8,0,85,20,23,0,119,0,5,0,82,23,9,0,82,20,14,0,25,20,20,16,116,23,20,0,82,20,14,0,25,20,20,12,116,10,20,0,82,20,14,0,1,23,0,0,109,20,12,23,82,23,7,0,121,23,49,0,82,23,7,0,82,20,14,0,82,20,20,0,106,20,20,12,46,23,23,20,128,100,2,0,82,12,10,0,82,23,9,0,82,23,23,0,32,23,23,8,121,23,15,0,82,23,14,0,82,18,23,0,106,20,18,12,82,21,7,0,82,22,14,0,82,22,22,0,82,22,22,0,106,24,18,4,134,23,0,0,156,124,1,0,12,20,21,22,24,0,0,0,85,10,23,0,119,0,14,0,82,23,14,0,82,19,23,0,106,24,19,12,82,22,7,0,82,21,14,0,82,21,21,0,82,21,21,0,106,20,19,4,134,23,0,0,56,117,1,0,12,24,22,21,20,0,0,0,85,10,23,0,82,23,14,0,82,23,23,0,82,20,7,0,109,23,12,20,82,20,10,0,120,20,5,0,116,13,10,0,82,8,13,0,137,17,0,0,139,8,0,0,82,20,15,0,82,23,14,0,82,23,23,0,116,20,23,0,82,23,16,0,82,20,14,0,82,20,20,0,25,20,20,4,116,23,20,0,82,20,6,0,121,20,6,0,82,20,6,0,82,23,14,0,82,23,23,0,25,23,23,8,116,20,23,0,82,20,14,0,106,20,20,12,135,23,214,2,20,0,0,0,82,23,14,0,1,20,0,0,109,23,12,20,82,23,14,0,106,23,23,8,135,20,214,2,23,0,0,0,82,20,14,0,1,23,0,0,109,20,8,23,82,20,14,0,106,20,20,4,135,23,214,2,20,0,0,0,82,23,14,0,1,20,0,0,109,23,4,20,116,13,10,0,82,8,13,0,137,17,0,0,139,8,0,0,140,3,38,0,0,0,0,0,2,34,0,0,255,0,0,0,2,35,0,0,255,255,0,0,37,36,1,20,121,36,193,0,1,36,9,0,1,37,10,0,138,1,36,37,124,101,2,0,180,101,2,0,0,102,2,0,68,102,2,0,140,102,2,0,232,102,2,0,48,103,2,0,140,103,2,0,212,103,2,0,12,104,2,0,119,0,179,0,82,36,2,0,1,37,4,0,26,37,37,1,3,36,36,37,1,37,4,0,26,37,37,1,11,37,37,0,19,36,36,37,0,30,36,0,82,3,30,0,25,36,30,4,85,2,36,0,85,0,3,0,119,0,165,0,82,36,2,0,1,37,4,0,26,37,37,1,3,36,36,37,1,37,4,0,26,37,37,1,11,37,37,0,19,36,36,37,0,8,36,0,82,9,8,0,25,36,8,4,85,2,36,0,0,10,0,0,85,10,9,0,34,37,9,0,41,37,37,31,42,37,37,31,109,10,4,37,119,0,146,0,82,37,2,0,1,36,4,0,26,36,36,1,3,37,37,36,1,36,4,0,26,36,36,1,11,36,36,0,19,37,37,36,0,11,37,0,82,12,11,0,25,37,11,4,85,2,37,0,0,13,0,0,85,13,12,0,1,36,0,0,109,13,4,36,119,0,129,0,82,36,2,0,1,37,8,0,26,37,37,1,3,36,36,37,1,37,8,0,26,37,37,1,11,37,37,0,19,36,36,37,0,14,36,0,0,15,14,0,82,16,15,0,106,17,15,4,25,36,14,8,85,2,36,0,0,18,0,0,85,18,16,0,109,18,4,17,119,0,111,0,82,36,2,0,1,37,4,0,26,37,37,1,3,36,36,37,1,37,4,0,26,37,37,1,11,37,37,0,19,36,36,37,0,19,36,0,82,20,19,0,25,36,19,4,85,2,36,0,19,36,20,35,41,36,36,16,42,36,36,16,0,21,36,0,0,22,0,0,85,22,21,0,34,37,21,0,41,37,37,31,42,37,37,31,109,22,4,37,119,0,88,0,82,37,2,0,1,36,4,0,26,36,36,1,3,37,37,36,1,36,4,0,26,36,36,1,11,36,36,0,19,37,37,36,0,23,37,0,82,24,23,0,25,37,23,4,85,2,37,0,0,25,0,0,19,37,24,35,85,25,37,0,1,36,0,0,109,25,4,36,119,0,70,0,82,36,2,0,1,37,4,0,26,37,37,1,3,36,36,37,1,37,4,0,26,37,37,1,11,37,37,0,19,36,36,37,0,26,36,0,82,27,26,0,25,36,26,4,85,2,36,0,19,36,27,34,41,36,36,24,42,36,36,24,0,28,36,0,0,29,0,0,85,29,28,0,34,37,28,0,41,37,37,31,42,37,37,31,109,29,4,37,119,0,47,0,82,37,2,0,1,36,4,0,26,36,36,1,3,37,37,36,1,36,4,0,26,36,36,1,11,36,36,0,19,37,37,36,0,31,37,0,82,32,31,0,25,37,31,4,85,2,37,0,0,33,0,0,19,37,32,34,85,33,37,0,1,36,0,0,109,33,4,36,119,0,29,0,82,36,2,0,1,37,8,0,26,37,37,1,3,36,36,37,1,37,8,0,26,37,37,1,11,37,37,0,19,36,36,37,0,4,36,0,86,5,4,0,25,36,4,8,85,2,36,0,87,0,5,0,119,0,15,0,82,36,2,0,1,37,8,0,26,37,37,1,3,36,36,37,1,37,8,0,26,37,37,1,11,37,37,0,19,36,36,37,0,6,36,0,86,7,6,0,25,36,6,8,85,2,36,0,87,0,7,0,119,0,1,0,139,0,0,0,140,2,32,0,0,0,0,0,2,22,0,0,168,0,0,0,2,23,0,0,176,0,0,0,1,18,0,0,136,24,0,0,0,19,24,0,136,24,0,0,25,24,24,64,137,24,0,0,130,24,0,0,136,25,0,0,49,24,24,25,148,104,2,0,1,25,64,0,135,24,208,2,25,0,0,0,25,9,19,52,25,10,19,48,25,11,19,44,25,12,19,40,25,13,19,36,25,14,19,32,25,15,19,28,25,16,19,24,25,2,19,20,25,4,19,16,25,5,19,12,25,6,19,8,25,7,19,4,0,8,19,0,85,9,0,0,85,10,1,0,82,24,9,0,25,24,24,28,116,11,24,0,82,24,9,0,25,24,24,64,116,12,24,0,82,24,9,0,25,24,24,68,116,13,24,0,82,24,9,0,25,24,24,76,116,14,24,0,82,24,9,0,25,24,24,96,116,15,24,0,82,24,9,0,25,24,24,20,116,16,24,0,82,24,9,0,25,24,24,16,116,2,24,0,82,24,14,0,41,24,24,1,82,25,15,0,3,24,24,25,85,4,24,0,82,24,9,0,1,25,180,0,3,24,24,25,116,5,24,0,82,24,9,0,1,25,160,0,94,24,24,25,29,24,24,4,85,6,24,0,82,24,9,0,94,24,24,23,34,24,24,0,121,24,3,0,137,19,0,0,139,0,0,0,82,24,10,0,82,25,9,0,94,25,25,22,49,24,24,25,148,105,2,0,1,18,10,0,119,0,60,0,1,24,0,0,82,25,9,0,94,25,25,22,49,24,24,25,40,106,2,0,82,24,9,0,94,24,24,22,82,25,9,0,106,25,25,24,47,24,24,25,40,106,2,0,82,25,9,0,94,25,25,22,82,26,11,0,5,24,25,26,85,7,24,0,82,26,5,0,82,25,9,0,94,25,25,23,82,27,6,0,134,24,0,0,160,135,3,0,26,25,27,0,85,8,24,0,82,27,9,0,82,25,16,0,82,26,2,0,82,28,7,0,3,26,26,28,82,28,8,0,82,29,12,0,82,30,13,0,82,31,4,0,134,24,0,0,172,50,1,0,27,25,26,28,29,30,31,0,82,17,9,0,82,24,9,0,94,24,24,22,82,31,9,0,1,30,172,0,94,31,31,30,52,24,24,31,128,106,2,0,3,3,17,22,82,24,3,0,25,24,24,1,85,3,24,0,82,24,9,0,3,20,24,23,82,21,9,0,82,24,20,0,25,24,24,1,1,31,164,0,94,31,21,31,8,24,24,31,85,20,24,0,119,0,191,255,32,24,18,10,121,24,3,0,137,19,0,0,139,0,0,0,1,31,255,255,97,17,23,31,82,31,9,0,1,24,0,0,97,31,22,24,82,24,9,0,1,31,172,0,1,30,0,0,97,24,31,30,137,19,0,0,139,0,0,0,140,4,22,0,0,0,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,48,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,244,106,2,0,1,19,48,0,135,18,208,2,19,0,0,0,25,12,17,44,25,13,17,40,25,14,17,36,25,15,17,28,25,16,17,24,25,4,17,20,25,5,17,16,25,7,17,12,25,8,17,8,25,9,17,4,0,10,17,0,85,13,0,0,85,14,1,0,109,17,32,2,85,15,3,0,82,19,13,0,82,19,19,0,82,19,19,0,82,20,13,0,82,20,20,0,106,20,20,4,5,18,19,20,85,4,18,0,82,18,13,0,25,18,18,12,116,8,18,0,82,20,4,0,82,19,15,0,1,21,0,0,134,18,0,0,64,89,3,0,20,19,21,0,85,5,18,0,82,18,5,0,120,18,9,0,1,21,203,54,134,18,0,0,176,165,3,0,21,0,0,0,85,12,18,0,82,6,12,0,137,17,0,0,139,6,0,0,116,7,5,0,82,18,15,0,32,11,18,3,1,18,0,0,85,16,18,0,121,11,34,0,82,18,4,0,82,21,16,0,57,18,18,21,216,108,2,0,82,18,8,0,82,21,16,0,91,18,18,21,41,18,18,2,85,9,18,0,82,18,5,0,82,21,14,0,82,19,9,0,90,21,21,19,83,18,21,0,82,21,5,0,82,18,14,0,82,19,9,0,25,19,19,1,90,18,18,19,107,21,1,18,82,18,5,0,82,21,14,0,82,19,9,0,25,19,19,2,90,21,21,19,107,18,2,21,82,21,5,0,25,21,21,3,85,5,21,0,82,21,16,0,25,21,21,1,85,16,21,0,119,0,224,255,82,21,4,0,82,18,16,0,57,21,21,18,216,108,2,0,82,21,8,0,82,18,16,0,91,21,21,18,41,21,21,2,85,10,21,0,82,21,5,0,82,18,14,0,82,19,10,0,90,18,18,19,83,21,18,0,82,18,5,0,82,21,14,0,82,19,10,0,25,19,19,1,90,21,21,19,107,18,1,21,82,21,5,0,82,18,14,0,82,19,10,0,25,19,19,2,90,18,18,19,107,21,2,18,82,18,5,0,82,21,14,0,82,19,10,0,25,19,19,3,90,21,21,19,107,18,3,21,82,21,5,0,25,21,21,4,85,5,21,0,82,21,16,0,25,21,21,1,85,16,21,0,119,0,218,255,82,18,13,0,106,18,18,12,135,21,214,2,18,0,0,0,82,21,13,0,82,18,7,0,109,21,12,18,1,18,1,0,85,12,18,0,82,6,12,0,137,17,0,0,139,6,0,0,140,1,19,0,0,0,0,0,2,13,0,0,255,0,0,0,136,14,0,0,0,11,14,0,136,14,0,0,25,14,14,32,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,72,109,2,0,1,15,32,0,135,14,208,2,15,0,0,0,25,1,11,16,25,3,11,12,25,4,11,8,25,5,11,4,0,6,11,0,25,7,11,24,25,8,11,23,25,9,11,22,25,10,11,21,25,2,11,20,85,1,0,0,82,14,1,0,116,3,14,0,82,15,3,0,82,15,15,0,82,16,3,0,106,16,16,4,5,14,15,16,85,5,14,0,82,14,1,0,25,14,14,12,116,6,14,0,82,14,3,0,106,14,14,12,32,14,14,3,121,14,26,0,1,14,0,0,85,4,14,0,82,14,5,0,82,16,4,0,57,14,14,16,12,110,2,0,82,14,6,0,78,14,14,0,83,7,14,0,82,14,6,0,82,16,6,0,102,16,16,2,83,14,16,0,82,16,6,0,78,14,7,0,107,16,2,14,82,14,6,0,25,14,14,3,85,6,14,0,82,14,4,0,25,14,14,1,85,4,14,0,119,0,236,255,137,11,0,0,139,0,0,0,82,14,3,0,106,14,14,12,33,14,14,4,121,14,7,0,1,16,230,56,1,15,109,54,1,17,92,18,1,18,248,56,135,14,209,2,16,15,17,18,1,14,0,0,85,4,14,0,1,14,0,0,120,14,24,0,82,14,5,0,82,18,4,0,57,14,14,18,160,110,2,0,82,14,6,0,78,14,14,0,83,2,14,0,82,14,6,0,82,18,6,0,102,18,18,2,83,14,18,0,82,18,6,0,78,14,2,0,107,18,2,14,82,14,6,0,25,14,14,4,85,6,14,0,82,14,4,0,25,14,14,1,85,4,14,0,119,0,236,255,137,11,0,0,139,0,0,0,82,14,5,0,82,18,4,0,57,14,14,18,136,111,2,0,82,14,6,0,102,14,14,3,83,8,14,0,82,14,6,0,78,14,14,0,83,9,14,0,78,14,8,0,121,14,31,0,79,14,8,0,28,14,14,2,83,10,14,0,82,14,6,0,82,18,6,0,103,18,18,2,5,18,18,13,79,17,10,0,3,18,18,17,79,17,8,0,6,18,18,17,83,14,18,0,82,18,6,0,25,12,18,1,79,18,12,0,5,18,18,13,79,14,10,0,3,18,18,14,79,14,8,0,6,18,18,14,83,12,18,0,82,18,6,0,79,14,9,0,5,14,14,13,79,17,10,0,3,14,14,17,79,17,8,0,6,14,14,17,107,18,2,14,119,0,8,0,82,14,6,0,82,18,6,0,102,18,18,2,83,14,18,0,82,18,6,0,78,14,9,0,107,18,2,14,82,14,6,0,25,14,14,4,85,6,14,0,82,14,4,0,25,14,14,1,85,4,14,0,119,0,201,255,137,11,0,0,139,0,0,0,140,1,25,0,0,0,0,0,2,19,0,0,172,0,0,0,1,16,0,0,136,20,0,0,0,17,20,0,136,20,0,0,25,20,20,48,137,20,0,0,130,20,0,0,136,21,0,0,49,20,20,21,212,111,2,0,1,21,48,0,135,20,208,2,21,0,0,0,25,1,17,36,25,3,17,32,25,6,17,28,25,7,17,24,25,10,17,20,25,11,17,16,25,12,17,12,25,14,17,8,25,15,17,4,0,2,17,0,85,1,0,0,82,21,1,0,112,20,21,60,145,20,20,0,89,6,20,0,82,20,1,0,25,20,20,24,116,7,20,0,88,4,6,0,145,4,4,0,1,20,48,23,82,21,1,0,106,21,21,84,41,21,21,3,3,20,20,21,106,20,20,4,38,20,20,7,135,5,18,3,20,4,0,0,145,5,5,0,88,21,6,0,145,21,21,0,66,20,5,21,145,20,20,0,89,10,20,0,82,20,1,0,1,21,148,0,3,20,20,21,116,11,20,0,82,20,1,0,106,20,20,8,82,21,11,0,3,20,20,21,85,12,20,0,82,21,1,0,134,20,0,0,108,157,3,0,21,0,0,0,121,20,7,0,1,21,50,62,1,22,138,59,1,23,120,8,1,24,92,62,135,20,209,2,21,22,23,24,1,20,0,0,82,24,11,0,4,20,20,24,85,3,20,0,82,20,12,0,82,24,3,0,49,20,20,24,216,112,2,0,1,16,16,0,119,0,73,0,88,8,10,0,145,8,8,0,88,9,6,0,145,9,9,0,82,24,3,0,82,22,1,0,112,23,22,52,145,23,23,0,134,20,0,0,108,160,2,0,24,8,9,23,15,2,14,0,82,20,1,0,1,23,164,0,94,20,20,23,82,23,2,0,82,24,15,0,4,23,23,24,25,23,23,1,47,20,20,23,52,113,2,0,1,16,6,0,119,0,50,0,1,20,0,0,82,23,2,0,49,20,20,23,232,113,2,0,82,20,15,0,82,23,7,0,47,20,20,23,232,113,2,0,82,23,1,0,82,24,15,0,134,20,0,0,72,104,2,0,23,24,0,0,82,24,1,0,82,23,3,0,134,20,0,0,140,31,3,0,24,23,0,0,82,20,1,0,1,23,176,0,94,20,20,23,34,20,20,0,121,20,6,0,82,23,1,0,82,24,15,0,134,20,0,0,52,240,2,0,23,24,0,0,82,13,1,0,82,20,2,0,82,24,1,0,94,24,24,19,56,20,20,24,216,113,2,0,82,24,1,0,94,24,24,19,25,24,24,1,134,20,0,0,52,240,2,0,13,24,0,0,119,0,244,255,82,24,3,0,134,20,0,0,92,166,1,0,13,24,0,0,82,20,3,0,25,20,20,1,85,3,20,0,119,0,179,255,32,20,16,6,121,20,8,0,1,24,122,62,1,23,138,59,1,22,129,8,1,21,92,62,135,20,209,2,24,23,22,21,119,0,10,0,32,20,16,16,121,20,8,0,82,18,1,0,106,21,18,24,134,20,0,0,72,104,2,0,18,21,0,0,137,17,0,0,139,0,0,0,139,0,0,0,140,1,24,0,0,0,0,0,136,19,0,0,0,17,19,0,136,19,0,0,25,19,19,32,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,124,114,2,0,1,20,32,0,135,19,208,2,20,0,0,0,25,1,17,16,25,4,17,12,25,8,17,20,25,11,17,8,25,14,17,4,0,15,17,0,85,4,0,0,82,19,4,0,106,19,19,8,38,19,19,7,121,19,7,0,82,18,4,0,106,20,18,8,38,20,20,7,134,19,0,0,92,92,3,0,18,20,0,0,1,19,0,0,85,15,19,0,82,5,4,0,82,19,4,0,106,19,19,8,36,19,19,0,120,19,20,0,106,19,5,12,1,20,255,0,19,19,19,20,0,6,19,0,82,7,15,0,25,19,7,1,85,15,19,0,95,8,7,6,82,19,4,0,25,9,19,12,82,19,9,0,43,19,19,8,85,9,19,0,82,19,4,0,25,10,19,8,82,19,10,0,26,19,19,8,85,10,19,0,119,0,233,255,106,19,5,8,121,19,7,0,1,20,225,58,1,21,109,54,1,22,242,15,1,23,242,58,135,19,209,2,20,21,22,23,1,19,4,0,82,23,15,0,56,19,19,23,124,115,2,0,82,19,4,0,134,12,0,0,92,110,3,0,19,0,0,0,82,13,15,0,25,19,13,1,85,15,19,0,95,8,13,12,119,0,244,255,103,19,8,1,41,19,19,8,79,23,8,0,3,19,19,23,85,11,19,0,103,19,8,3,41,19,19,8,103,23,8,2,3,19,19,23,85,14,19,0,82,19,14,0,82,23,11,0,2,22,0,0,255,255,0,0,21,23,23,22,46,19,19,23,224,115,2,0,1,23,17,59,134,19,0,0,176,165,3,0,23,0,0,0,85,1,19,0,82,3,1,0,137,17,0,0,139,3,0,0,82,19,4,0,106,19,19,4,82,23,4,0,82,23,23,0,82,22,11,0,3,23,23,22,48,19,19,23,32,116,2,0,1,23,30,59,134,19,0,0,176,165,3,0,23,0,0,0,85,1,19,0,82,3,1,0,137,17,0,0,139,3,0,0,82,19,4,0,106,19,19,24,82,23,4,0,106,23,23,16,82,22,11,0,3,23,23,22,48,19,19,23,116,116,2,0,82,23,4,0,82,22,4,0,106,22,22,16,82,21,11,0,134,19,0,0,112,191,2,0,23,22,21,0,120,19,6,0,1,19,0,0,85,1,19,0,82,3,1,0,137,17,0,0,139,3,0,0,82,21,4,0,106,21,21,16,82,22,4,0,82,22,22,0,82,23,11,0,135,19,210,2,21,22,23,0,82,16,4,0,82,19,16,0,82,23,11,0,3,19,19,23,85,16,19,0,82,19,4,0,25,2,19,16,82,19,2,0,82,23,11,0,3,19,19,23,85,2,19,0,1,19,1,0,85,1,19,0,82,3,1,0,137,17,0,0,139,3,0,0,140,7,31,0,0,0,0,0,136,27,0,0,0,24,27,0,136,27,0,0,1,28,128,0,3,27,27,28,137,27,0,0,130,27,0,0,136,28,0,0,49,27,27,28,12,117,2,0,1,28,128,0,135,27,208,2,28,0,0,0,25,20,24,40,25,21,24,32,25,22,24,24,25,7,24,16,25,8,24,8,0,9,24,0,25,10,24,64,25,11,24,56,25,12,24,52,25,13,24,48,87,20,1,0,87,21,2,0,87,22,3,0,87,7,4,0,87,8,5,0,87,9,6,0,0,23,10,0,25,26,23,64,1,27,0,0,85,23,27,0,25,23,23,4,54,27,23,26,84,117,2,0,86,28,21,0,86,29,20,0,64,27,28,29,145,27,27,0,89,11,27,0,86,29,7,0,86,28,22,0,64,27,29,28,145,27,27,0,89,12,27,0,86,28,9,0,86,29,8,0,64,27,28,29,145,27,27,0,89,13,27,0,59,29,2,0,145,29,29,0,88,28,11,0,145,28,28,0,66,27,29,28,145,27,27,0,89,10,27,0,59,28,0,0,145,28,28,0,113,10,16,28,59,27,0,0,145,27,27,0,113,10,32,27,59,28,0,0,145,28,28,0,113,10,48,28,59,27,0,0,145,27,27,0,113,10,4,27,59,29,2,0,145,29,29,0,88,30,12,0,145,30,30,0,66,28,29,30,145,28,28,0,113,10,20,28,59,27,0,0,145,27,27,0,113,10,36,27,59,28,0,0,145,28,28,0,113,10,52,28,59,27,0,0,145,27,27,0,113,10,8,27,59,28,0,0,145,28,28,0,113,10,24,28,59,30,254,255,145,30,30,0,88,29,13,0,145,29,29,0,66,27,30,29,145,27,27,0,113,10,40,27,59,28,0,0,145,28,28,0,113,10,56,28,86,14,20,0,145,14,14,0,86,27,21,0,145,27,27,0,63,28,14,27,145,28,28,0,68,15,28,0,145,15,15,0,88,29,11,0,145,29,29,0,66,27,15,29,145,27,27,0,113,10,12,27,86,16,7,0,145,16,16,0,86,28,22,0,145,28,28,0,63,27,16,28,145,27,27,0,68,17,27,0,145,17,17,0,88,29,12,0,145,29,29,0,66,28,17,29,145,28,28,0,113,10,28,28,86,18,9,0,145,18,18,0,86,27,8,0,145,27,27,0,63,28,18,27,145,28,28,0,68,19,28,0,145,19,19,0,88,29,13,0,145,29,29,0,66,27,19,29,145,27,27,0,113,10,44,27,59,28,1,0,145,28,28,0,113,10,60,28,0,23,0,0,0,25,10,0,25,26,23,64,116,23,25,0,25,23,23,4,25,25,25,4,54,28,23,26,24,119,2,0,137,24,0,0,139,0,0,0,140,3,36,0,0,0,0,0,2,31,0,0,128,128,128,128,2,32,0,0,255,254,254,254,2,33,0,0,255,0,0,0,1,30,0,0,19,34,1,33,0,25,34,0,33,28,2,0,38,34,0,3,33,34,34,0,19,34,28,34,121,34,29,0,19,34,1,33,0,29,34,0,0,6,0,0,0,9,2,0,78,34,6,0,41,35,29,24,42,35,35,24,45,34,34,35,168,119,2,0,0,5,6,0,0,8,9,0,1,30,6,0,119,0,20,0,25,18,6,1,26,19,9,1,33,20,19,0,38,34,18,3,33,34,34,0,19,34,20,34,121,34,4,0,0,6,18,0,0,9,19,0,119,0,238,255,0,4,18,0,0,7,19,0,0,17,20,0,1,30,5,0,119,0,5,0,0,4,0,0,0,7,2,0,0,17,28,0,1,30,5,0,32,34,30,5,121,34,7,0,121,17,5,0,0,5,4,0,0,8,7,0,1,30,6,0,119,0,2,0,1,30,16,0,32,34,30,6,121,34,71,0,19,34,1,33,0,21,34,0,78,34,5,0,41,35,21,24,42,35,35,24,45,34,34,35,76,120,2,0,120,8,3,0,1,30,16,0,119,0,61,0,0,27,5,0,119,0,59,0,2,34,0,0,1,1,1,1,5,22,25,34,1,34,3,0,48,34,34,8,208,120,2,0,0,10,5,0,0,13,8,0,82,34,10,0,21,34,34,22,0,23,34,0,19,34,23,31,21,34,34,31,2,35,0,0,1,1,1,1,4,35,23,35,19,34,34,35,121,34,4,0,0,12,13,0,0,16,10,0,119,0,16,0,25,24,10,4,26,26,13,4,1,34,3,0,48,34,34,26,192,120,2,0,0,10,24,0,0,13,26,0,119,0,236,255,0,3,24,0,0,11,26,0,1,30,11,0,119,0,4,0,0,3,5,0,0,11,8,0,1,30,11,0,32,34,30,11,121,34,6,0,120,11,3,0,1,30,16,0,119,0,18,0,0,12,11,0,0,16,3,0,0,14,16,0,0,15,12,0,78,34,14,0,41,35,21,24,42,35,35,24,45,34,34,35,28,121,2,0,0,27,14,0,119,0,7,0,26,15,15,1,120,15,3,0,1,30,16,0,119,0,3,0,25,14,14,1,119,0,244,255,32,34,30,16,121,34,2,0,1,27,0,0,139,27,0,0,140,4,29,0,0,0,0,0,136,23,0,0,0,22,23,0,136,23,0,0,25,23,23,48,137,23,0,0,130,23,0,0,136,24,0,0,49,23,23,24,124,121,2,0,1,24,48,0,135,23,208,2,24,0,0,0,25,9,22,32,25,11,22,28,25,13,22,24,25,15,22,20,25,18,22,16,25,20,22,12,25,4,22,8,25,5,22,4,0,6,22,0,85,11,0,0,85,13,1,0,85,15,2,0,85,18,3,0,82,23,11,0,120,23,6,0,1,23,0,0,85,9,23,0,82,21,9,0,137,22,0,0,139,21,0,0,82,24,13,0,82,25,15,0,82,26,18,0,1,27,4,0,1,28,0,0,134,23,0,0,192,10,3,0,24,25,26,27,28,0,0,0,85,6,23,0,82,23,6,0,120,23,17,0,82,28,11,0,135,23,214,2,28,0,0,0,1,28,203,54,134,23,0,0,176,165,3,0,28,0,0,0,33,7,23,0,1,28,0,0,1,27,0,0,125,23,7,28,27,0,0,0,85,9,23,0,82,21,9,0,137,22,0,0,139,21,0,0,82,8,18,0,82,23,18,0,38,23,23,1,121,23,3,0,85,5,8,0,119,0,3,0,26,23,8,1,85,5,23,0,1,23,0,0,85,20,23,0,82,27,13,0,82,28,15,0,5,23,27,28,82,28,20,0,56,23,23,28,148,123,2,0,1,23,0,0,85,4,23,0,82,23,5,0,82,28,4,0,56,23,23,28,32,123,2,0,82,23,20,0,82,28,18,0,5,10,23,28,82,26,11,0,82,25,4,0,3,25,10,25,91,27,26,25,76,27,27,0,145,27,27,0,59,26,255,0,145,26,26,0,66,23,27,26,145,23,23,0,62,26,0,0,64,150,79,160,153,153,1,64,145,26,26,0,135,28,22,3,23,26,0,0,59,26,1,0,145,26,26,0,65,12,28,26,145,12,12,0,82,26,20,0,82,28,18,0,5,14,26,28,82,28,6,0,82,26,4,0,3,26,14,26,41,26,26,2,101,28,26,12,82,26,4,0,25,26,26,1,85,4,26,0,119,0,218,255,82,26,4,0,82,28,18,0,47,26,26,28,132,123,2,0,82,26,20,0,82,28,18,0,5,16,26,28,82,26,11,0,82,23,4,0,3,23,16,23,91,28,26,23,76,28,28,0,145,28,28,0,59,26,255,0,145,26,26,0,66,17,28,26,145,17,17,0,82,26,20,0,82,28,18,0,5,19,26,28,82,28,6,0,82,26,4,0,3,26,19,26,41,26,26,2,101,28,26,17,82,26,20,0,25,26,26,1,85,20,26,0,119,0,181,255,82,28,11,0,135,26,214,2,28,0,0,0,116,9,6,0,82,21,9,0,137,22,0,0,139,21,0,0,140,6,25,0,0,0,0,0,1,16,0,0,136,19,0,0,0,17,19,0,136,19,0,0,25,19,19,48,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,236,123,2,0,1,20,48,0,135,19,208,2,20,0,0,0,25,12,17,36,25,13,17,32,25,14,17,28,25,15,17,24,25,6,17,20,25,7,17,16,25,8,17,12,25,9,17,8,25,10,17,4,0,11,17,0,85,12,0,0,85,13,1,0,85,14,2,0,85,15,3,0,85,6,4,0,85,7,5,0,82,20,15,0,82,21,6,0,5,19,20,21,85,8,19,0,1,19,0,0,85,9,19,0,82,19,8,0,82,21,9,0,57,19,19,21,228,125,2,0,82,19,12,0,121,19,41,0,82,19,12,0,79,19,19,0,82,21,13,0,79,21,21,0,45,19,19,21,244,124,2,0,82,19,12,0,103,19,19,1,82,21,13,0,103,21,21,1,45,19,19,21,236,124,2,0,82,19,12,0,103,19,19,2,82,21,13,0,103,21,21,2,45,19,19,21,228,124,2,0,82,19,14,0,82,21,12,0,78,21,21,0,83,19,21,0,82,21,14,0,82,19,12,0,102,19,19,1,107,21,1,19,82,19,14,0,82,21,12,0,102,21,21,2,107,19,2,21,82,21,14,0,1,19,0,0,107,21,3,19,119,0,8,0,1,16,8,0,119,0,6,0,1,16,8,0,119,0,4,0,1,16,8,0,119,0,2,0,1,16,8,0,32,19,16,8,121,19,41,0,1,16,0,0,2,19,0,0,64,66,15,0,85,10,19,0,1,19,1,0,85,11,19,0,82,18,13,0,82,21,7,0,82,20,13,0,79,20,20,0,103,22,18,1,103,23,18,2,1,24,1,0,134,19,0,0,196,60,2,0,21,20,22,23,11,10,24,0,82,19,14,0,82,24,7,0,25,24,24,4,82,23,11,0,90,24,24,23,83,19,24,0,82,24,14,0,82,19,7,0,1,23,4,1,3,19,19,23,82,23,11,0,90,19,19,23,107,24,1,19,82,19,14,0,82,24,7,0,1,23,4,2,3,24,24,23,82,23,11,0,90,24,24,23,107,19,2,24,82,24,14,0,82,19,11,0,107,24,3,19,82,19,12,0,121,19,4,0,82,19,12,0,25,19,19,4,85,12,19,0,82,19,14,0,25,19,19,4,85,14,19,0,82,19,13,0,25,19,19,4,85,13,19,0,82,19,9,0,25,19,19,1,85,9,19,0,119,0,153,255,137,17,0,0,139,0,0,0,140,3,23,0,0,0,0,0,1,16,0,0,136,19,0,0,0,17,19,0,136,19,0,0,25,19,19,16,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,40,126,2,0,1,20,16,0,135,19,208,2,20,0,0,0,25,4,17,12,25,8,17,8,25,12,17,4,0,15,17,0,85,4,0,0,85,8,1,0,85,12,2,0,82,19,8,0,103,19,19,3,120,19,53,0,82,19,12,0,1,20,1,0,1,21,4,0,138,19,20,21,124,126,2,0,132,126,2,0,156,126,2,0,164,126,2,0,137,17,0,0,139,0,0,0,119,0,17,0,1,16,13,0,119,0,15,0,82,21,4,0,59,20,1,0,145,20,20,0,113,21,4,20,1,16,13,0,119,0,9,0,1,16,11,0,119,0,7,0,82,20,4,0,59,21,1,0,145,21,21,0,113,20,12,21,1,16,11,0,119,0,1,0,32,19,16,11,121,19,16,0,82,19,4,0,59,20,0,0,145,20,20,0,113,19,8,20,82,20,4,0,59,19,0,0,145,19,19,0,113,20,4,19,82,19,4,0,59,20,0,0,145,20,20,0,89,19,20,0,137,17,0,0,139,0,0,0,119,0,9,0,32,20,16,13,121,20,7,0,82,20,4,0,59,19,0,0,145,19,19,0,89,20,19,0,137,17,0,0,139,0,0,0,59,20,1,0,82,21,8,0,103,21,21,3,1,22,136,0,4,21,21,22,134,19,0,0,168,183,3,0,20,21,0,0,145,19,19,0,89,15,19,0,82,19,8,0,79,3,19,0,82,19,12,0,36,19,19,2,121,19,19,0,82,18,8,0,103,19,18,1,3,19,3,19,103,21,18,2,3,5,19,21,76,21,5,0,145,5,21,0,88,19,15,0,145,19,19,0,65,21,5,19,145,21,21,0,59,19,3,0,145,19,19,0,66,6,21,19,145,6,6,0,82,19,4,0,89,19,6,0,119,0,29,0,76,19,3,0,145,7,19,0,88,19,15,0,145,19,19,0,65,9,7,19,145,9,9,0,82,19,4,0,89,19,9,0,82,19,8,0,103,10,19,1,76,19,10,0,145,10,19,0,88,19,15,0,145,19,19,0,65,11,10,19,145,11,11,0,82,19,4,0,113,19,4,11,82,19,8,0,103,13,19,2,76,19,13,0,145,13,19,0,88,19,15,0], eb + 153600);
  HEAPU8.set([145,19,19,0,65,14,13,19,145,14,14,0,82,19,4,0,113,19,8,14,82,19,12,0,32,19,19,2,121,19,5,0,82,19,4,0,59,21,1,0,145,21,21,0,113,19,4,21,82,21,12,0,33,21,21,4,121,21,3,0,137,17,0,0,139,0,0,0,82,21,4,0,59,19,1,0,145,19,19,0,113,21,12,19,137,17,0,0,139,0,0,0,140,7,23,0,0,0,0,0,136,21,0,0,0,20,21,0,136,21,0,0,25,21,21,112,137,21,0,0,130,21,0,0,136,22,0,0,49,21,21,22,148,128,2,0,1,22,112,0,135,21,208,2,22,0,0,0,25,19,20,96,25,10,20,88,25,9,20,72,25,8,20,56,25,7,20,32,25,16,20,16,25,17,20,8,0,18,20,0,106,11,2,4,88,21,3,0,145,21,21,0,59,22,2,0,145,22,22,0,65,12,21,22,145,12,12,0,112,22,3,4,145,22,22,0,59,21,2,0,145,21,21,0,65,13,22,21,145,13,13,0,88,21,4,0,145,21,21,0,65,14,12,21,145,14,14,0,112,21,4,4,145,21,21,0,65,15,13,21,145,15,15,0,116,16,2,0,109,16,4,11,113,16,8,12,113,16,12,13,89,17,14,0,113,17,4,15,79,21,6,0,103,22,6,1,41,22,22,8,20,21,21,22,103,22,6,2,41,22,22,16,20,21,21,22,103,22,6,3,41,22,22,24,20,21,21,22,85,18,21,0,116,7,0,0,106,22,0,4,109,7,4,22,106,21,0,8,109,7,8,21,106,22,0,12,109,7,12,22,106,21,0,16,109,7,16,21,116,8,1,0,106,22,1,4,109,8,4,22,106,21,1,8,109,8,8,21,106,22,1,12,109,8,12,22,116,9,16,0,106,21,16,4,109,9,4,21,106,22,16,8,109,9,8,22,106,21,16,12,109,9,12,21,116,10,17,0,106,22,17,4,109,10,4,22,78,22,18,0,83,19,22,0,102,21,18,1,107,19,1,21,102,22,18,2,107,19,2,22,102,21,18,3,107,19,3,21,134,21,0,0,232,77,2,0,7,8,9,10,5,19,0,0,137,20,0,0,139,0,0,0,140,3,26,0,0,0,0,0,136,23,0,0,0,17,23,0,136,23,0,0,1,24,128,0,3,23,23,24,137,23,0,0,130,23,0,0,136,24,0,0,49,23,23,24,40,130,2,0,1,24,128,0,135,23,208,2,24,0,0,0,25,14,17,56,25,3,17,40,0,15,17,0,25,5,17,36,25,7,17,32,25,9,17,28,25,11,17,16,25,13,17,4,89,5,0,0,89,7,1,0,89,9,2,0,88,23,5,0,145,23,23,0,89,11,23,0,88,24,7,0,145,24,24,0,113,11,4,24,88,23,9,0,145,23,23,0,113,11,8,23,2,23,0,0,168,164,0,0,78,23,23,0,38,23,23,1,121,23,23,0,116,3,11,0,106,24,11,4,109,3,4,24,106,23,11,8,109,3,8,23,0,16,14,0,2,18,0,0,12,158,0,0,25,19,16,64,116,16,18,0,25,16,16,4,25,18,18,4,54,23,16,19,176,130,2,0,134,23,0,0,192,154,2,0,13,3,14,0,116,11,13,0,106,24,13,4,109,11,4,24,106,23,13,8,109,11,8,23,2,23,0,0,176,147,0,0,2,24,0,0,88,158,0,0,82,24,24,0,27,24,24,48,94,23,23,24,1,24,0,32,47,23,23,24,36,132,2,0,88,4,11,0,145,4,4,0,2,23,0,0,176,147,0,0,2,24,0,0,88,158,0,0,82,24,24,0,27,24,24,48,3,20,23,24,106,24,20,12,82,23,20,0,27,23,23,3,41,23,23,2,101,24,23,4,112,6,11,4,145,6,6,0,2,23,0,0,176,147,0,0,2,24,0,0,88,158,0,0,82,24,24,0,27,24,24,48,3,21,23,24,106,24,21,12,82,23,21,0,27,23,23,3,25,23,23,1,41,23,23,2,101,24,23,6,112,8,11,8,145,8,8,0,2,23,0,0,176,147,0,0,2,24,0,0,88,158,0,0,82,24,24,0,27,24,24,48,3,22,23,24,106,24,22,12,82,23,22,0,27,23,23,3,25,23,23,2,41,23,23,2,101,24,23,8,2,23,0,0,176,147,0,0,2,24,0,0,88,158,0,0,82,24,24,0,27,24,24,48,3,10,23,24,82,24,10,0,25,24,24,1,85,10,24,0,2,24,0,0,76,158,0,0,82,24,24,0,2,23,0,0,80,158,0,0,82,23,23,0,26,23,23,1,27,23,23,12,3,24,24,23,25,12,24,4,82,24,12,0,25,24,24,1,85,12,24,0,137,17,0,0,139,0,0,0,119,0,8,0,1,23,4,0,1,25,214,41,134,24,0,0,104,5,3,0,23,25,15,0,137,17,0,0,139,0,0,0,139,0,0,0,140,3,28,0,0,0,0,0,136,25,0,0,0,20,25,0,136,25,0,0,1,26,144,0,3,25,25,26,137,25,0,0,130,25,0,0,136,26,0,0,49,25,25,26,128,132,2,0,1,26,144,0,135,25,208,2,26,0,0,0,25,3,20,88,25,5,20,80,25,6,20,76,25,10,20,16,25,15,20,8,0,18,20,0,85,5,0,0,85,6,1,0,109,20,72,2,82,25,5,0,32,25,25,22,121,25,4,0,1,25,1,0,85,10,25,0,119,0,12,0,82,25,5,0,32,25,25,23,121,25,4,0,1,25,0,0,85,10,25,0,119,0,6,0,82,25,5,0,32,25,25,24,121,25,3,0,1,25,2,0,85,10,25,0,82,26,6,0,82,26,26,0,109,10,4,26,82,25,6,0,106,25,25,20,109,10,8,25,25,25,10,8,82,26,6,0,25,26,26,20,106,26,26,52,109,25,4,26,25,4,10,24,82,25,6,0,25,25,25,20,106,26,25,36,76,26,26,0,145,26,26,0,89,15,26,0,82,27,6,0,25,27,27,20,106,25,27,40,76,25,25,0,145,25,25,0,113,15,4,25,116,4,15,0,106,26,15,4,109,4,4,26,25,26,10,24,25,23,26,8,25,26,10,24,25,24,26,8,0,7,23,0,82,25,6,0,25,25,25,20,25,25,25,52,106,26,25,36,76,26,26,0,145,26,26,0,89,18,26,0,82,27,6,0,25,27,27,20,25,27,27,52,106,25,27,40,76,25,25,0,145,25,25,0,113,18,4,25,116,7,18,0,106,26,18,4,109,7,4,26,134,8,0,0,208,185,3,0,76,26,8,0,145,8,26,0,25,9,10,24,88,25,9,0,145,25,25,0,66,26,25,8,145,26,26,0,89,9,26,0,134,11,0,0,172,185,3,0,76,26,11,0,145,11,26,0,25,26,10,24,25,12,26,4,88,25,12,0,145,25,25,0,66,26,25,11,145,26,26,0,89,12,26,0,134,13,0,0,208,185,3,0,76,26,13,0,145,13,26,0,0,14,23,0,88,25,14,0,145,25,25,0,66,26,25,13,145,26,26,0,89,14,26,0,134,16,0,0,172,185,3,0,76,26,16,0,145,16,26,0,25,17,24,4,88,25,17,0,145,25,25,0,66,26,25,16,145,26,26,0,89,17,26,0,0,19,3,0,0,21,10,0,25,22,19,56,116,19,21,0,25,19,19,4,25,21,21,4,54,26,19,22,92,134,2,0,134,26,0,0,40,137,1,0,3,0,0,0,137,20,0,0,1,26,1,0,139,26,0,0,140,1,15,0,0,0,0,0,136,12,0,0,0,8,12,0,136,12,0,0,1,13,16,1,3,12,12,13,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,196,134,2,0,1,13,16,1,135,12,208,2,13,0,0,0,1,12,200,0,3,2,8,12,1,12,136,0,3,1,8,12,1,12,128,0,3,3,8,12,25,4,8,64,0,5,8,0,85,3,0,0,82,13,3,0,88,12,13,0,145,12,12,0,89,4,12,0,82,14,3,0,112,13,14,16,145,13,13,0,113,4,4,13,82,14,3,0,112,12,14,32,145,12,12,0,113,4,8,12,82,14,3,0,112,13,14,48,145,13,13,0,113,4,12,13,82,14,3,0,112,12,14,4,145,12,12,0,113,4,16,12,82,14,3,0,112,13,14,20,145,13,13,0,113,4,20,13,82,14,3,0,112,12,14,36,145,12,12,0,113,4,24,12,82,14,3,0,112,13,14,52,145,13,13,0,113,4,28,13,82,14,3,0,112,12,14,8,145,12,12,0,113,4,32,12,82,14,3,0,112,13,14,24,145,13,13,0,113,4,36,13,82,14,3,0,112,12,14,40,145,12,12,0,113,4,40,12,82,14,3,0,112,13,14,56,145,13,13,0,113,4,44,13,82,14,3,0,112,12,14,12,145,12,12,0,113,4,48,12,82,14,3,0,112,13,14,28,145,13,13,0,113,4,52,13,82,14,3,0,112,12,14,44,145,12,12,0,113,4,56,12,82,14,3,0,112,13,14,60,145,13,13,0,113,4,60,13,2,13,0,0,196,157,0,0,82,11,13,0,0,6,11,0,0,7,1,0,0,9,11,0,25,10,7,64,116,7,9,0,25,7,7,4,25,9,9,4,54,13,7,10,4,136,2,0,0,7,2,0,0,9,4,0,25,10,7,64,116,7,9,0,25,7,7,4,25,9,9,4,54,13,7,10,36,136,2,0,134,13,0,0,80,81,1,0,5,1,2,0,0,7,6,0,0,9,5,0,25,10,7,64,116,7,9,0,25,7,7,4,25,9,9,4,54,13,7,10,80,136,2,0,137,8,0,0,139,0,0,0,140,3,31,0,0,0,0,0,2,28,0,0,146,0,0,0,1,26,0,0,136,29,0,0,0,27,29,0,136,29,0,0,25,29,29,48,137,29,0,0,130,29,0,0,136,30,0,0,49,29,29,30,176,136,2,0,1,30,48,0,135,29,208,2,30,0,0,0,25,25,27,32,25,24,27,16,0,16,27,0,25,19,0,28,82,21,19,0,85,16,21,0,25,22,0,20,82,29,22,0,4,23,29,21,109,16,4,23,109,16,8,1,109,16,12,2,3,10,23,2,25,11,0,60,116,24,11,0,109,24,4,16,1,30,2,0,109,24,8,30,135,30,23,3,28,24,0,0,134,12,0,0,116,171,3,0,30,0,0,0,45,30,10,12,28,137,2,0,1,26,3,0,119,0,60,0,1,4,2,0,0,5,10,0,0,6,16,0,0,15,12,0,34,30,15,0,120,30,39,0,4,5,5,15,106,17,6,4,16,18,17,15,121,18,4,0,25,29,6,8,0,30,29,0,119,0,2,0,0,30,6,0,0,9,30,0,41,30,18,31,42,30,30,31,3,8,4,30,1,29,0,0,125,30,18,17,29,0,0,0,4,3,15,30,82,30,9,0,3,30,30,3,85,9,30,0,25,20,9,4,82,30,20,0,4,30,30,3,85,20,30,0,116,25,11,0,109,25,4,9,109,25,8,8,135,30,23,3,28,25,0,0,134,15,0,0,116,171,3,0,30,0,0,0,45,30,5,15,192,137,2,0,1,26,3,0,119,0,19,0,0,4,8,0,0,6,9,0,119,0,217,255,1,29,0,0,109,0,16,29,1,29,0,0,85,19,29,0,1,29,0,0,85,22,29,0,82,29,0,0,39,29,29,32,85,0,29,0,32,29,4,2,121,29,3,0,1,7,0,0,119,0,3,0,106,29,6,4,4,7,2,29,32,29,26,3,121,29,9,0,106,13,0,44,106,30,0,48,3,30,13,30,109,0,16,30,0,14,13,0,85,19,14,0,85,22,14,0,0,7,2,0,137,27,0,0,139,7,0,0,140,4,25,0,0,0,0,0,136,23,0,0,0,19,23,0,136,23,0,0,1,24,112,1,3,23,23,24,137,23,0,0,130,23,0,0,136,24,0,0,49,23,23,24,116,138,2,0,1,24,112,1,135,23,208,2,24,0,0,0,1,23,40,1,3,5,19,23,1,23,232,0,3,4,19,23,1,23,228,0,3,12,19,23,1,23,224,0,3,13,19,23,1,23,220,0,3,14,19,23,1,23,216,0,3,15,19,23,1,23,152,0,3,16,19,23,1,23,140,0,3,17,19,23,1,23,128,0,3,6,19,23,25,7,19,64,0,8,19,0,89,12,0,0,89,13,1,0,89,14,2,0,89,15,3,0,134,23,0,0,4,103,3,0,16,0,0,0,88,23,13,0,145,23,23,0,89,17,23,0,88,24,14,0,145,24,24,0,113,17,4,24,88,23,15,0,145,23,23,0,113,17,8,23,116,5,17,0,106,24,17,4,109,5,4,24,106,23,17,8,109,5,8,23,134,23,0,0,68,231,2,0,6,5,0,0,88,23,12,0,145,23,23,0,62,24,0,0,20,25,67,160,70,223,145,63,145,24,24,0,65,9,23,24,145,9,9,0,116,5,6,0,106,23,6,4,109,5,4,23,106,24,6,8,109,5,8,24,134,24,0,0,180,249,1,0,7,5,9,0,0,18,16,0,0,20,7,0,25,21,18,64,116,18,20,0,25,18,18,4,25,20,20,4,54,24,18,21,112,139,2,0,2,24,0,0,196,157,0,0,82,22,24,0,0,10,22,0,0,11,22,0,0,18,4,0,0,20,16,0,25,21,18,64,116,18,20,0,25,18,18,4,25,20,20,4,54,24,18,21,164,139,2,0,0,18,5,0,0,20,11,0,25,21,18,64,116,18,20,0,25,18,18,4,25,20,20,4,54,24,18,21,196,139,2,0,134,24,0,0,80,81,1,0,8,4,5,0,0,18,10,0,0,20,8,0,25,21,18,64,116,18,20,0,25,18,18,4,25,20,20,4,54,24,18,21,240,139,2,0,137,19,0,0,139,0,0,0,140,3,19,0,0,0,0,0,136,15,0,0,0,12,15,0,136,15,0,0,1,16,80,1,3,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,72,140,2,0,1,16,80,1,135,15,208,2,16,0,0,0,1,15,8,1,3,4,12,15,1,15,128,0,3,3,12,15,1,15,0,1,3,7,12,15,1,15,192,0,3,8,12,15,25,9,12,64,0,10,12,0,85,7,0,0,0,11,8,0,0,13,1,0,25,14,11,64,116,11,13,0,25,11,11,4,25,13,13,4,54,15,11,14,128,140,2,0,0,11,9,0,0,13,2,0,25,14,11,64,116,11,13,0,25,11,11,4,25,13,13,4,54,15,11,14,160,140,2,0,82,16,7,0,2,17,0,0,228,158,0,0,82,17,17,0,5,15,16,17,28,5,15,2,1,17,0,0,2,16,0,0,228,158,0,0,82,16,16,0,28,16,16,2,2,18,0,0,232,158,0,0,82,18,18,0,134,15,0,0,80,128,3,0,5,17,16,18,2,15,0,0,28,160,0,0,82,18,7,0,41,18,18,6,3,6,15,18,0,11,3,0,0,13,2,0,25,14,11,64,116,11,13,0,25,11,11,4,25,13,13,4,54,18,11,14,24,141,2,0,0,11,4,0,0,13,6,0,25,14,11,64,116,11,13,0,25,11,11,4,25,13,13,4,54,18,11,14,56,141,2,0,134,18,0,0,80,81,1,0,10,3,4,0,0,11,9,0,0,13,10,0,25,14,11,64,116,11,13,0,25,11,11,4,25,13,13,4,54,18,11,14,100,141,2,0,0,11,8,0,2,18,0,0,156,159,0,0,82,15,7,0,41,15,15,6,3,13,18,15,25,14,11,64,116,11,13,0,25,11,11,4,25,13,13,4,54,15,11,14,148,141,2,0,0,11,4,0,0,13,9,0,25,14,11,64,116,11,13,0,25,11,11,4,25,13,13,4,54,15,11,14,180,141,2,0,134,15,0,0,56,165,3,0,4,0,0,0,0,11,4,0,0,13,8,0,25,14,11,64,116,11,13,0,25,11,11,4,25,13,13,4,54,15,11,14,224,141,2,0,134,15,0,0,8,165,3,0,4,0,0,0,137,12,0,0,139,0,0,0,140,2,22,0,0,0,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,48,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,64,142,2,0,1,19,48,0,135,18,208,2,19,0,0,0,25,16,17,16,25,15,17,8,0,14,17,0,25,3,17,44,25,7,17,40,25,9,17,36,25,10,17,32,25,11,17,28,25,12,17,24,25,13,17,20,85,3,0,0,85,7,1,0,1,18,0,0,85,9,18,0,1,18,0,0,85,10,18,0,135,18,24,3,85,9,18,0,82,19,9,0,82,20,3,0,135,18,25,3,19,20,0,0,82,20,9,0,82,19,7,0,135,18,25,3,20,19,0,0,82,19,9,0,1,20,0,0,1,21,20,48,135,18,26,3,19,20,21,0,82,21,9,0,1,20,1,0,1,19,35,48,135,18,26,3,21,20,19,0,82,19,9,0,1,20,2,0,1,21,134,48,135,18,26,3,19,20,21,0,82,21,9,0,1,20,3,0,1,19,50,48,135,18,26,3,21,20,19,0,82,19,9,0,1,20,4,0,1,21,147,48,135,18,26,3,19,20,21,0,82,21,9,0,1,20,5,0,1,19,161,48,135,18,26,3,21,20,19,0,82,19,9,0,135,18,27,3,19,0,0,0,82,19,9,0,2,20,0,0,130,139,0,0,135,18,28,3,19,20,10,0,82,4,9,0,82,18,10,0,120,18,57,0,85,14,4,0,1,20,2,0,1,19,177,48,134,18,0,0,104,5,3,0,20,19,14,0,1,18,0,0,85,11,18,0,82,19,9,0,2,20,0,0,132,139,0,0,135,18,28,3,19,20,11,0,82,5,11,0,135,18,29,3,85,13,18,0,0,2,5,0,136,18,0,0,0,6,18,0,136,18,0,0,27,20,2,1,25,20,20,15,38,20,20,240,3,18,18,20,137,18,0,0,130,18,0,0,136,20,0,0,49,18,18,20,212,143,2,0,27,20,2,1,25,20,20,15,38,20,20,240,135,18,208,2,20,0,0,0,82,20,9,0,82,19,11,0,135,18,30,3,20,19,12,6,85,15,6,0,1,19,1,0,1,20,223,48,134,18,0,0,104,5,3,0,19,20,15,0,82,20,9,0,135,18,31,3,20,0,0,0,1,18,0,0,85,9,18,0,82,20,13,0,135,18,32,3,20,0,0,0,82,8,9,0,137,17,0,0,139,8,0,0,119,0,10,0,85,16,4,0,1,20,1,0,1,19,226,48,134,18,0,0,104,5,3,0,20,19,16,0,82,8,9,0,137,17,0,0,139,8,0,0,1,18,0,0,139,18,0,0,140,1,22,0,0,0,0,0,127,17,0,0,89,17,0,0,127,17,0,0,82,4,17,0,43,17,4,31,0,6,17,0,2,17,0,0,255,255,255,127,19,17,4,17,0,9,17,0,2,17,0,0,255,255,127,76,48,17,17,9,236,144,2,0,32,18,6,0,121,18,7,0,62,18,0,0,252,222,166,63,251,33,249,63,145,18,18,0,58,17,18,0,119,0,6,0,62,18,0,0,252,222,166,63,251,33,249,191,145,18,18,0,58,17,18,0,58,16,17,0,2,18,0,0,0,0,128,127,16,18,18,9,126,17,18,0,16,0,0,0,145,17,17,0,139,17,0,0,2,17,0,0,0,0,224,62,48,17,9,17,40,145,2,0,2,17,0,0,0,0,128,57,48,17,9,17,28,145,2,0,58,1,0,0,145,17,1,0,139,17,0,0,119,0,72,0,1,2,255,255,58,3,0,0,119,0,69,0,145,17,0,0,135,5,21,3,17,0,0,0,145,5,5,0,2,17,0,0,0,0,152,63,48,17,9,17,200,145,2,0,2,17,0,0,0,0,48,63,48,17,9,17,152,145,2,0,1,2,0,0,59,19,2,0,145,19,19,0,65,18,5,19,145,18,18,0,59,19,255,255,145,19,19,0,63,17,18,19,145,17,17,0,59,18,2,0,145,18,18,0,63,19,5,18,145,19,19,0,66,3,17,19,145,3,3,0,119,0,41,0,1,2,1,0,59,17,255,255,145,17,17,0,63,19,5,17,145,19,19,0,59,18,1,0,145,18,18,0,63,17,5,18,145,17,17,0,66,3,19,17,145,3,3,0,119,0,29,0,2,17,0,0,0,0,28,64,48,17,9,17,32,146,2,0,1,2,2,0,61,19,0,0,0,0,192,191,145,19,19,0,63,17,5,19,145,17,17,0,61,20,0,0,0,0,192,63,145,20,20,0,65,18,5,20,145,18,18,0,59,20,1,0,145,20,20,0,63,19,18,20,145,19,19,0,66,3,17,19,145,3,3,0,119,0,7,0,1,2,3,0,59,19,255,255,145,19,19,0,66,3,19,5,145,3,3,0,119,0,1,0,65,7,3,3,145,7,7,0,65,8,7,7,145,8,8,0,62,21,0,0,48,15,216,159,132,149,175,63,145,21,21,0,65,18,8,21,145,18,18,0,62,21,0,0,96,42,231,159,161,62,194,63,145,21,21,0,63,20,18,21,145,20,20,0,65,17,8,20,145,17,17,0,62,20,0,0,159,176,92,32,85,85,213,63,145,20,20,0,63,19,17,20,145,19,19,0,65,10,7,19,145,10,10,0,62,20,0,0,154,171,96,0,83,153,201,191,145,20,20,0,62,21,0,0,153,156,0,225,72,66,187,63,145,21,21,0,65,17,8,21,145,17,17,0,64,19,20,17,145,19,19,0,65,11,8,19,145,11,11,0,34,19,2,0,121,19,10,0,63,17,11,10,145,17,17,0,65,19,3,17,145,19,19,0,64,1,3,19,145,1,1,0,145,19,1,0,139,19,0,0,119,0,26,0,1,19,96,39,41,17,2,2,100,12,19,17,145,12,12,0,63,19,11,10,145,19,19,0,65,13,3,19,145,13,13,0,1,21,112,39,41,18,2,2,100,20,21,18,145,20,20,0,64,17,13,20,145,17,17,0,64,19,17,3,145,19,19,0,64,14,12,19,145,14,14,0,68,15,14,0,145,15,15,0,32,19,6,0,126,1,19,14,15,0,0,0,145,19,1,0,139,19,0,0,59,19,0,0,145,19,19,0,139,19,0,0,140,0,15,0,0,0,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,32,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,172,147,2,0,1,9,32,0,135,8,208,2,9,0,0,0,25,0,7,20,25,1,7,8,25,2,7,16,25,3,7,12,0,6,7,0,134,8,0,0,140,183,3,0,1,8,0,0,121,8,102,0,2,8,0,0,12,162,0,0,2,9,0,0,12,162,0,0,82,9,9,0,25,9,9,1,85,8,9,0,2,9,0,0,12,162,0,0,82,9,9,0,30,9,9,10,120,9,28,0,2,8,0,0,228,158,0,0,82,8,8,0,2,10,0,0,232,158,0,0,82,10,10,0,134,9,0,0,244,200,2,0,8,10,0,0,85,1,9,0,82,10,1,0,2,8,0,0,228,158,0,0,82,8,8,0,2,11,0,0,232,158,0,0,82,11,11,0,1,12,10,0,1,13,8,0,1,14,0,0,134,9,0,0,80,211,2,0,10,8,11,12,13,14,0,0,82,14,1,0,135,9,214,2,14,0,0,0,2,9,0,0,12,162,0,0,82,9,9,0,28,9,9,15,30,9,9,2,32,9,9,1,121,9,54,0,2,9,0,0,232,158,0,0,82,9,9,0,26,4,9,20,1,9,230,255,83,2,9,0,1,14,41,0,107,2,1,14,1,9,55,0,107,2,2,9,1,14,255,255,107,2,3,14,78,14,2,0,83,0,14,0,102,9,2,1,107,0,1,9,102,14,2,2,107,0,2,14,102,9,2,3,107,0,3,9,1,14,30,0,59,13,10,0,145,13,13,0,134,9,0,0,244,14,3,0,14,4,13,0,2,9,0,0,232,158,0,0,82,9,9,0,26,5,9,25,1,9,190,255,83,3,9,0,1,13,33,0,107,3,1,13,1,9,55,0,107,3,2,9,1,13,255,255,107,3,3,13,78,13,3,0,83,0,13,0,102,9,3,1,107,0,1,9,102,13,3,2,107,0,2,13,102,9,3,3,107,0,3,9,1,13,25,54,1,14,50,0,1,12,10,0,134,9,0,0,200,150,2,0,13,14,5,12,0,0,0,0,134,9,0,0,140,183,3,0,134,9,0,0,112,184,3,0,134,9,0,0,136,29,3,0,2,9,0,0,216,156,0,0,134,12,0,0,56,186,3,0,87,9,12,0,2,12,0,0,232,156,0,0,2,9,0,0,216,156,0,0,86,9,9,0,2,14,0,0,208,156,0,0,86,14,14,0,64,9,9,14,87,12,9,0,2,9,0,0,208,156,0,0,2,12,0,0,216,156,0,0,86,12,12,0,87,9,12,0,2,12,0,0,240,156,0,0,2,9,0,0,224,156,0,0,86,9,9,0,2,14,0,0,232,156,0,0,86,14,14,0,63,9,9,14,87,12,9,0,2,9,0,0,240,156,0,0,86,9,9,0,2,12,0,0,200,156,0,0,86,12,12,0,71,9,9,12,120,9,3,0,137,7,0,0,139,0,0,0,2,13,0,0,200,156,0,0,86,13,13,0,2,11,0,0,240,156,0,0,86,11,11,0,64,14,13,11,145,14,14,0,59,11,232,3,145,11,11,0,65,12,14,11,145,12,12,0,134,9,0,0,80,130,3,0,12,0,0,0,2,9,0,0,216,156,0,0,134,12,0,0,56,186,3,0,87,9,12,0,2,12,0,0,216,156,0,0,86,12,12,0,2,9,0,0,208,156,0,0,86,9,9,0,64,12,12,9,87,6,12,0,2,12,0,0,208,156,0,0,2,9,0,0,216,156,0,0,86,9,9,0,87,12,9,0,2,9,0,0,240,156,0,0,2,12,0,0,240,156,0,0,86,12,12,0,86,11,6,0,63,12,12,11,87,9,12,0,137,7,0,0,139,0,0,0,140,5,23,0,0,0,0,0,136,21,0,0,0,20,21,0,136,21,0,0,1,22,144,0,3,21,21,22,137,21,0,0,130,21,0,0,136,22,0,0,49,21,21,22,4,151,2,0,1,22,144,0,135,21,208,2,22,0,0,0,1,21,136,0,3,7,20,21,1,21,128,0,3,6,20,21,25,5,20,96,25,15,20,92,25,16,20,88,25,17,20,84,25,18,20,80,25,19,20,48,25,8,20,40,25,9,20,36,25,10,20,32,0,11,20,0,85,15,0,0,85,16,1,0,85,17,2,0,85,18,3,0,134,21,0,0,224,156,3,0,19,0,0,0,82,21,19,0,120,21,3,0,137,20,0,0,139,0,0,0,82,21,16,0,76,21,21,0,145,21,21,0,89,8,21,0,82,22,17,0,76,22,22,0,145,22,22,0,113,8,4,22,1,22,10,0,85,9,22,0,82,22,18,0,82,21,9,0,47,22,22,21,164,151,2,0,116,18,9,0,82,22,18,0,82,21,9,0,6,22,22,21,85,10,22,0,134,22,0,0,224,156,3,0,11,0,0,0,82,12,15,0,82,13,18,0,76,22,13,0,145,13,22,0,82,14,10,0,76,22,14,0,145,14,22,0,116,5,11,0,106,21,11,4,109,5,4,21,106,22,11,8,109,5,8,22,106,21,11,12,109,5,12,21,106,22,11,16,109,5,16,22,106,21,11,20,109,5,20,21,106,22,11,24,109,5,24,22,106,21,11,28,109,5,28,21,116,6,8,0,106,22,8,4,109,6,4,22,78,22,4,0,83,7,22,0,102,21,4,1,107,7,1,21,102,22,4,2,107,7,2,22,102,21,4,3,107,7,3,21,134,21,0,0,200,184,1,0,5,12,6,13,14,7,0,0,137,20,0,0,139,0,0,0,140,2,17,0,0,0,0,0,2,10,0,0,32,1,0,0,2,11,0,0,4,8,0,0,2,12,0,0,208,19,0,0,1,8,0,0,136,13,0,0,0,9,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,176,152,2,0,1,14,32,0,135,13,208,2,14,0,0,0,25,2,9,16,25,4,9,12,25,5,9,8,25,6,9,4,0,7,9,0,85,4,0,0,85,5,1,0,82,13,5,0,121,13,11,0,82,14,4,0,134,13,0,0,96,32,3,0,14,0,0,0,121,13,3,0,1,8,4,0,119,0,5,0,1,13,0,0,85,2,13,0,119,0,2,0,1,8,4,0,32,13,8,4,121,13,108,0,82,13,4,0,1,14,0,0,109,13,8,14,82,14,4,0,1,13,0,0,109,14,12,13,82,14,4,0,1,15,1,0,134,13,0,0,92,92,3,0,14,15,0,0,85,6,13,0,82,15,4,0,1,14,2,0,134,13,0,0,92,92,3,0,15,14,0,0,85,7,13,0,82,13,7,0,120,13,8,0,82,14,4,0,134,13,0,0,68,114,2,0,14,0,0,0,120,13,42,0,1,8,7,0,119,0,46,0,82,13,7,0,32,13,13,3,121,13,3,0,1,8,9,0,119,0,41,0,82,3,4,0,82,13,7,0,32,13,13,1,121,13,18,0,25,14,3,32,134,13,0,0,128,43,2,0,14,12,10,0,120,13,3,0,1,8,12,0,119,0,30,0,82,14,4,0,3,14,14,11,1,15,240,20,1,16,32,0,134,13,0,0,128,43,2,0,14,15,16,0,120,13,9,0,1,8,14,0,119,0,20,0,134,13,0,0,200,38,2,0,3,0,0,0,120,13,3,0,1,8,16,0,119,0,14,0,82,16,4,0,134,13,0,0,188,23,2,0,16,0,0,0,120,13,3,0,1,8,18,0,119,0,7,0,82,13,6,0,33,13,13,0,40,13,13,1,120,13,193,255,1,8,20,0,119,0,1,0,32,13,8,7,121,13,4,0,1,13,0,0,85,2,13,0,119,0,31,0,32,13,8,9,121,13,4,0,1,13,0,0,85,2,13,0,119,0,26,0,32,13,8,12,121,13,4,0,1,13,0,0,85,2,13,0,119,0,21,0,32,13,8,14,121,13,4,0,1,13,0,0,85,2,13,0,119,0,16,0,32,13,8,16,121,13,4,0,1,13,0,0,85,2,13,0,119,0,11,0,32,13,8,18,121,13,4,0,1,13,0,0,85,2,13,0,119,0,6,0,32,13,8,20,121,13,4,0,1,13,1,0,85,2,13,0,119,0,1,0,137,9,0,0,82,13,2,0,139,13,0,0,140,3,30,0,0,0,0,0,136,26,0,0,0,25,26,0,136,26,0,0,25,26,26,32,137,26,0,0,130,26,0,0,136,27,0,0,49,26,26,27,248,154,2,0,1,27,32,0,135,26,208,2,27,0,0,0,25,10,25,12,25,15,25,8,25,19,25,4,0,24,25,0,1,26,0,0,85,10,26,0,1,27,0,0,109,10,4,27,1,26,0,0,109,10,8,26,88,26,1,0,145,26,26,0,89,15,26,0,112,26,1,4,145,26,26,0,89,19,26,0,112,26,1,8,145,26,26,0,89,24,26,0,88,3,2,0,145,3,3,0,88,26,15,0,145,26,26,0,65,4,3,26,145,4,4,0,112,5,2,4,145,5,5,0,88,27,19,0,145,27,27,0,65,26,5,27,145,26,26,0,63,6,4,26,145,6,6,0,112,7,2,8,145,7,7,0,88,27,24,0,145,27,27,0,65,26,7,27,145,26,26,0,63,8,6,26,145,8,8,0,112,27,2,12,145,27,27,0,63,26,8,27,145,26,26,0,89,10,26,0,112,9,2,16,145,9,9,0,88,26,15,0,145,26,26,0,65,11,9,26,145,11,11,0,112,12,2,20,145,12,12,0,88,27,19,0,145,27,27,0,65,26,12,27,145,26,26,0,63,13,11,26,145,13,13,0,112,14,2,24,145,14,14,0,88,27,24,0,145,27,27,0,65,26,14,27,145,26,26,0,63,16,13,26,145,16,16,0,112,28,2,28,145,28,28,0,63,27,16,28,145,27,27,0,113,10,4,27,112,17,2,32,145,17,17,0,88,27,15,0,145,27,27,0,65,18,17,27,145,18,18,0,112,20,2,36,145,20,20,0,88,26,19,0,145,26,26,0,65,27,20,26,145,27,27,0,63,21,18,27,145,21,21,0,112,22,2,40,145,22,22,0,88,26,24,0,145,26,26,0,65,27,22,26,145,27,27,0,63,23,21,27,145,23,23,0,112,28,2,44,145,28,28,0,63,26,23,28,145,26,26,0,113,10,8,26,116,0,10,0,106,27,10,4,109,0,4,27,106,26,10,8,109,0,8,26,137,25,0,0,139,0,0,0,140,2,18,0,0,0,0,0,136,14,0,0,0,13,14,0,136,14,0,0,25,14,14,64,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,220,156,2,0,1,15,64,0,135,14,208,2,15,0,0,0,25,10,13,40,25,12,13,24,25,11,13,16,0,9,13,0,25,4,13,56,1,15,68,75,78,16,1,0,134,14,0,0,4,173,3,0,15,16,0,0,120,14,7,0,134,14,0,0,96,186,3,0,1,16,22,0,85,14,16,0,1,2,0,0,119,0,104,0,1,16,132,4,135,8,1,0,16,0,0,0,120,8,3,0,1,2,0,0,119,0,98,0,1,14,0,0,1,15,124,0,135,16,213,2,8,14,15,0,1,15,43,0,134,16,0,0,4,173,3,0,1,15,0,0,120,16,8,0,78,15,1,0,32,15,15,114,1,14,8,0,1,17,4,0,125,16,15,14,17,0,0,0,85,8,16,0,1,17,101,0,134,16,0,0,4,173,3,0,1,17,0,0,121,16,9,0,85,9,0,0,1,17,2,0,109,9,4,17,1,16,1,0,109,9,8,16,1,17,221,0,135,16,33,3,17,9,0,0,78,16,1,0,32,16,16,97,121,16,26,0,85,11,0,0,1,17,3,0,109,11,4,17,1,17,221,0,135,3,33,3,17,11,0,0,1,17,0,4,19,17,3,17,120,17,10,0,85,12,0,0,1,16,4,0,109,12,4,16,1,17,0,4,20,17,3,17,109,12,8,17,1,16,221,0,135,17,33,3,16,12,0,0,82,17,8,0,1,16,128,0,20,17,17,16,0,5,17,0,85,8,5,0,0,7,5,0,119,0,2,0,82,7,8,0,109,8,60,0,1,16,132,0,3,16,8,16,109,8,44,16,1,17,0,4,109,8,48,17,25,6,8,75,1,17,255,255,83,6,17,0,38,17,7,8,120,17,11,0,85,10,0,0,1,16,19,84,109,10,4,16,109,10,8,4,1,17,54,0,135,16,34,3,17,10,0,0,120,16,3,0,1,16,10,0,83,6,16,0,1,17,10,0,109,8,32,17,1,16,9,0,109,8,36,16,1,17,3,0,109,8,40,17,1,16,2,0,109,8,12,16,2,16,0,0,96,162,0,0,82,16,16,0,120,16,3,0,1,17,255,255,109,8,76,17,134,17,0,0,56,167,3,0,8,0,0,0,0,2,8,0,137,13,0,0,139,2,0,0,140,3,26,0,0,0,0,0,136,16,0,0,0,14,16,0,136,16,0,0,25,16,16,64,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,252,158,2,0,1,17,64,0,135,16,208,2,17,0,0,0,25,3,14,44,25,5,14,40,25,8,14,36,25,9,14,32,25,10,14,28,25,11,14,24,25,12,14,20,0,13,14,0,85,5,0,0,85,8,1,0,85,9,2,0,82,4,5,0,116,3,4,0,106,17,4,4,109,3,4,17,106,16,4,8,109,3,8,16,106,17,4,12,109,3,12,17,106,16,4,16,109,3,16,16,134,16,0,0,200,156,1,0,3,0,0,0,85,10,16,0,82,18,8,0,82,19,9,0,5,17,18,19,41,17,17,2,135,16,1,0,17,0,0,0,85,11,16,0,82,15,5,0,82,17,10,0,106,19,15,4,106,18,15,8,1,20,0,0,82,21,11,0,82,22,8,0,82,23,9,0,1,24,0,0,1,25,4,0,134,16,0,0,112,254,2,0,17,19,18,20,21,22,23,24,25,0,0,0,82,16,5,0,25,16,16,16,116,12,16,0,82,6,5,0,116,3,6,0,106,25,6,4,109,3,4,25,106,16,6,8,109,3,8,16,106,25,6,12,109,3,12,25,106,16,6,16,109,3,16,16,134,16,0,0,196,179,3,0,3,0,0,0,82,7,5,0,82,25,11,0,82,24,8,0,82,23,9,0,134,16,0,0,212,189,2,0,13,25,24,23,116,7,13,0,106,23,13,4,109,7,4,23,106,16,13,8,109,7,8,16,106,23,13,12,109,7,12,23,106,16,13,16,109,7,16,16,82,23,5,0,82,24,12,0,134,16,0,0,72,214,0,0,23,24,0,0,82,24,11,0,135,16,214,2,24,0,0,0,82,24,10,0,135,16,214,2,24,0,0,0,137,14,0,0,139,0,0,0,140,7,34,0,0,0,0,0,136,31,0,0,0,30,31,0,136,31,0,0,25,31,31,48,137,31,0,0,130,31,0,0,136,32,0,0,49,31,31,32,164,160,2,0,1,32,48,0,135,31,208,2,32,0,0,0,25,27,30,44,25,28,30,40,25,29,30,36,25,7,30,32,25,8,30,28,25,9,30,24,25,10,30,20,25,11,30,16,25,12,30,12,25,13,30,8,25,14,30,4,0,15,30,0,85,27,0,0,89,28,1,0,89,29,2,0,89,7,3,0,85,8,4,0,85,9,5,0,85,10,6,0,82,32,27,0,76,32,32,0,145,32,32,0,61,33,0,0,0,0,0,63,145,33,33,0,63,31,32,33,145,31,31,0,89,11,31,0,88,16,11,0,145,16,16,0,88,33,28,0,145,33,33,0,64,31,16,33,145,31,31,0,89,12,31,0,88,17,11,0,145,17,17,0,88,33,28,0,145,33,33,0,63,31,17,33,145,31,31,0,89,13,31,0,88,18,12,0,145,18,18,0,88,31,29,0,145,31,31,0,65,19,18,31,145,19,19,0,88,33,7,0,145,33,33,0,64,31,19,33,145,31,31,0,89,14,31,0,88,20,13,0,145,20,20,0,88,31,29,0,145,31,31,0,65,21,20,31,145,21,21,0,88,33,7,0,145,33,33,0,64,31,21,33,145,31,31,0,89,15,31,0,88,22,11,0,145,22,22,0,88,31,29,0,145,31,31,0,65,23,22,31,145,23,23,0,88,31,7,0,145,31,31,0,64,24,23,31,145,24,24,0,82,31,10,0,89,31,24,0,88,33,14,0,145,33,33,0,61,32,0,0,0,0,0,63,63,33,33,32,135,31,35,3,33,0,0,0,75,25,31,0,82,31,8,0,85,31,25,0,88,33,15,0,145,33,33,0,61,32,0,0,0,0,0,63,64,33,33,32,135,31,35,3,33,0,0,0,75,26,31,0,82,31,9,0,85,31,26,0,137,30,0,0,139,0,0,0,140,7,34,0,0,0,0,0,136,31,0,0,0,30,31,0,136,31,0,0,25,31,31,48,137,31,0,0,130,31,0,0,136,32,0,0,49,31,31,32,100,162,2,0,1,32,48,0,135,31,208,2,32,0,0,0,25,27,30,44,25,28,30,40,25,29,30,36,25,7,30,32,25,8,30,28,25,9,30,24,25,10,30,20,25,11,30,16,25,12,30,12,25,13,30,8,25,14,30,4,0,15,30,0,85,27,0,0,89,28,1,0,89,29,2,0,89,7,3,0,85,8,4,0,85,9,5,0,85,10,6,0,82,32,27,0,76,32,32,0,145,32,32,0,61,33,0,0,0,0,0,63,145,33,33,0,63,31,32,33,145,31,31,0,89,11,31,0,88,16,11,0,145,16,16,0,88,33,28,0,145,33,33,0,64,31,16,33,145,31,31,0,89,12,31,0,88,17,11,0,145,17,17,0,88,33,28,0,145,33,33,0,63,31,17,33,145,31,31,0,89,13,31,0,88,18,12,0,145,18,18,0,88,31,7,0,145,31,31,0,63,19,18,31,145,19,19,0,88,33,29,0,145,33,33,0,66,31,19,33,145,31,31,0,89,14,31,0,88,20,13,0,145,20,20,0,88,31,7,0,145,31,31,0,63,21,20,31,145,21,21,0,88,33,29,0,145,33,33,0,66,31,21,33,145,31,31,0,89,15,31,0,88,22,11,0,145,22,22,0,88,31,7,0,145,31,31,0,63,23,22,31,145,23,23,0,88,31,29,0,145,31,31,0,66,24,23,31,145,24,24,0,82,31,10,0,89,31,24,0,88,33,14,0,145,33,33,0,61,32,0,0,0,0,0,63,63,33,33,32,135,31,35,3,33,0,0,0,75,25,31,0,82,31,8,0,85,31,25,0,88,33,15,0,145,33,33,0,61,32,0,0,0,0,0,63,64,33,33,32,135,31,35,3,33,0,0,0,75,26,31,0,82,31,9,0,85,31,26,0,137,30,0,0,139,0,0,0,140,3,18,0,0,0,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,32,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,36,164,2,0,1,16,32,0,135,15,208,2,16,0,0,0,25,7,14,8,25,8,14,4,0,9,14,0,25,10,14,19,25,11,14,18,25,12,14,17,25,13,14,16,25,3,14,15,25,4,14,14,25,5,14,13,25,6,14,12,85,7,0,0,85,8,1,0,85,9,2,0,82,15,7,0,82,16,8,0,41,16,16,2,90,15,15,16,83,10,15,0,82,15,7,0,82,16,8,0,41,16,16,2,25,16,16,1,90,15,15,16,83,11,15,0,82,15,7,0,82,16,8,0,41,16,16,2,25,16,16,2,90,15,15,16,83,12,15,0,82,15,7,0,82,16,8,0,41,16,16,2,25,16,16,3,90,15,15,16,83,13,15,0,82,15,7,0,82,16,9,0,41,16,16,2,90,15,15,16,83,3,15,0,82,15,7,0,82,16,9,0,41,16,16,2,25,16,16,1,90,15,15,16,83,4,15,0,82,15,7,0,82,16,9,0,41,16,16,2,25,16,16,2,90,15,15,16,83,5,15,0,82,15,7,0,82,16,8,0,41,16,16,2,25,16,16,3,90,15,15,16,83,6,15,0,82,15,7,0,82,16,8,0,41,16,16,2,78,17,3,0,95,15,16,17,82,17,7,0,82,16,8,0,41,16,16,2,25,16,16,1,78,15,4,0,95,17,16,15,82,15,7,0,82,16,8,0,41,16,16,2,25,16,16,2,78,17,5,0,95,15,16,17,82,17,7,0,82,16,8,0,41,16,16,2,25,16,16,3,78,15,6,0,95,17,16,15,82,15,7,0,82,16,9,0,41,16,16,2,78,17,10,0,95,15,16,17,82,17,7,0,82,16,9,0,41,16,16,2,25,16,16,1,78,15,11,0,95,17,16,15,82,15,7,0,82,16,9,0,41,16,16,2,25,16,16,2,78,17,12,0,95,15,16,17,82,17,7,0,82,16,9,0,41,16,16,2,25,16,16,3,78,15,13,0,95,17,16,15,137,14,0,0,139,0,0,0,140,7,31,0,0,0,0,0,136,21,0,0,0,20,21,0,136,21,0,0,25,21,21,64,137,21,0,0,130,21,0,0,136,22,0,0,49,21,21,22,12,166,2,0,1,22,64,0,135,21,208,2,22,0,0,0,25,17,20,44,25,18,20,40,25,19,20,36,25,7,20,32,25,8,20,28,25,9,20,48,25,10,20,24,25,11,20,20,25,12,20,16,25,13,20,12,25,14,20,8,25,15,20,4,0,16,20,0,85,17,0,0,85,18,1,0,85,19,2,0,85,7,3,0,85,8,4,0,38,21,5,1,83,9,21,0,85,10,6,0,82,21,10,0,116,21,8,0,82,22,19,0,82,23,7,0,5,21,22,23,41,21,21,2,85,11,21,0,82,23,11,0,135,21,1,0,23,0,0,0,85,12,21,0,82,23,12,0,82,22,18,0,82,24,11,0,135,21,210,2,23,22,24,0,82,24,19,0,82,22,7,0,5,21,24,22,85,13,21,0,82,21,17,0,121,21,8,0,82,22,17,0,82,24,12,0,82,23,13,0,134,21,0,0,44,214,2,0,22,24,23,0,85,13,21,0,1,21,1,0,82,23,8,0,22,21,21,23,85,14,21,0,82,21,14,0,28,21,21,2,85,15,21,0,82,21,15,0,28,21,21,2,85,16,21,0,82,23,12,0,82,24,13,0,1,22,1,0,82,25,14,0,82,26,15,0,82,27,16,0,1,28,1,0,78,29,9,0,38,29,29,1,82,30,10,0,134,21,0,0,128,31,1,0,23,24,22,25,26,27,28,29,30,0,0,0,82,30,12,0,135,21,214,2,30,0,0,0,82,21,10,0,1,30,3,4,3,21,21,30,1,30,1,0,82,29,8,0,26,29,29,1,22,30,30,29,1,29,0,0,95,21,30,29,82,29,10,0,1,30,4,3,3,29,29,30,1,30,1,0,82,21,8,0,26,21,21,1,22,30,30,21,1,21,0,0,95,29,30,21,82,21,10,0,1,30,4,2,1,29,0,0,95,21,30,29,82,29,10,0,1,30,4,1,1,21,0,0,95,29,30,21,82,21,10,0,1,30,0,0,107,21,4,30,137,20,0,0,139,0,0,0,140,3,19,0,0,0,0,0,136,13,0,0,0,12,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,248,167,2,0,1,14,32,0,135,13,208,2,14,0,0,0,25,5,12,20,25,6,12,16], eb + 163840);
  HEAPU8.set([25,8,12,12,25,9,12,8,25,10,12,4,0,11,12,0,85,6,0,0,85,8,1,0,85,9,2,0,82,13,6,0,1,14,1,0,1,18,4,0,138,13,14,18,88,168,2,0,152,168,2,0,40,169,2,0,128,169,2,0,1,15,17,65,1,16,138,59,1,17,224,3,1,18,44,65,135,14,209,2,15,16,17,18,119,0,78,0,82,14,8,0,34,14,14,0,121,14,4,0,1,14,0,0,85,5,14,0,119,0,72,0,82,14,9,0,82,15,8,0,49,14,14,15,144,168,2,0,82,14,9,0,26,14,14,1,85,5,14,0,119,0,64,0,116,5,8,0,119,0,62,0,82,3,8,0,82,4,9,0,82,14,8,0,34,14,14,0,121,14,12,0,47,14,3,4,200,168,2,0,1,14,0,0,82,15,8,0,4,14,14,15,85,5,14,0,119,0,50,0,82,14,9,0,26,14,14,1,85,5,14,0,119,0,46,0,47,14,3,4,232,168,2,0,116,5,8,0,119,0,42,0,82,14,9,0,41,14,14,1,85,10,14,0,82,14,10,0,82,15,8,0,49,14,14,15,16,169,2,0,1,14,0,0,85,5,14,0,119,0,32,0,82,14,10,0,82,15,8,0,4,14,14,15,26,14,14,1,85,5,14,0,119,0,26,0,82,7,8,0,1,14,0,0,82,15,8,0,49,14,14,15,76,169,2,0,82,14,9,0,8,14,7,14,85,5,14,0,119,0,17,0,1,14,0,0,4,14,14,7,82,15,9,0,8,14,14,15,85,11,14,0,82,14,11,0,121,14,5,0,82,14,9,0,82,15,11,0,4,14,14,15,85,11,14,0,116,5,11,0,119,0,4,0,1,14,0,0,85,5,14,0,119,0,1,0,137,12,0,0,82,13,5,0,139,13,0,0,140,2,31,0,0,0,0,0,2,27,0,0,128,128,128,128,2,28,0,0,255,254,254,254,1,26,0,0,0,18,1,0,21,29,18,0,38,29,29,3,120,29,59,0,38,29,18,3,120,29,4,0,0,5,1,0,0,7,0,0,119,0,20,0,0,6,1,0,0,8,0,0,78,25,6,0,83,8,25,0,41,29,25,24,42,29,29,24,120,29,3,0,0,9,8,0,119,0,48,0,25,15,6,1,25,16,8,1,38,29,15,3,120,29,4,0,0,5,15,0,0,7,16,0,119,0,4,0,0,6,15,0,0,8,16,0,119,0,240,255,82,17,5,0,19,29,17,27,21,29,29,27,2,30,0,0,1,1,1,1,4,30,17,30,19,29,29,30,120,29,21,0,0,4,7,0,0,10,5,0,0,21,17,0,25,19,10,4,25,20,4,4,85,4,21,0,82,21,19,0,19,29,21,27,21,29,29,27,2,30,0,0,1,1,1,1,4,30,21,30,19,29,29,30,121,29,4,0,0,2,19,0,0,3,20,0,119,0,6,0,0,4,20,0,0,10,19,0,119,0,240,255,0,2,5,0,0,3,7,0,0,11,2,0,0,12,3,0,1,26,10,0,119,0,4,0,0,11,1,0,0,12,0,0,1,26,10,0,32,29,26,10,121,29,21,0,78,22,11,0,83,12,22,0,41,29,22,24,42,29,29,24,120,29,3,0,0,9,12,0,119,0,14,0,0,13,12,0,0,14,11,0,25,14,14,1,25,23,13,1,78,24,14,0,83,23,24,0,41,29,24,24,42,29,29,24,120,29,3,0,0,9,23,0,119,0,3,0,0,13,23,0,119,0,246,255,139,9,0,0,140,2,11,0,0,0,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,96,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,76,171,2,0,1,9,96,0,135,8,208,2,9,0,0,0,25,2,7,68,25,3,7,64,25,4,7,44,25,5,7,24,25,6,7,4,85,3,1,0,1,8,0,0,85,4,8,0,1,9,0,0,109,4,4,9,1,8,0,0,109,4,8,8,1,9,0,0,109,4,12,9,1,8,0,0,109,4,16,8,82,9,3,0,134,8,0,0,184,15,2,0,5,9,0,0,82,8,5,0,121,8,46,0,116,2,5,0,106,9,5,4,109,2,4,9,106,8,5,8,109,2,8,8,106,9,5,12,109,2,12,9,106,8,5,16,109,2,16,8,134,8,0,0,180,30,3,0,6,2,0,0,116,4,6,0,106,9,6,4,109,4,4,9,106,8,6,8,109,4,8,8,106,9,6,12,109,4,12,9,106,8,6,16,109,4,16,8,116,2,5,0,106,9,5,4,109,2,4,9,106,8,5,8,109,2,8,8,106,9,5,12,109,2,12,9,106,8,5,16,109,2,16,8,134,8,0,0,196,179,3,0,2,0,0,0,116,0,4,0,106,9,4,4,109,0,4,9,106,8,4,8,109,0,8,8,106,9,4,12,109,0,12,9,106,8,4,16,109,0,16,8,137,7,0,0,139,0,0,0,119,0,17,0,1,9,2,0,1,10,163,72,134,8,0,0,104,5,3,0,9,10,7,0,116,0,4,0,106,10,4,4,109,0,4,10,106,8,4,8,109,0,8,8,106,10,4,12,109,0,12,10,106,8,4,16,109,0,16,8,137,7,0,0,139,0,0,0,139,0,0,0,140,3,22,0,0,0,0,0,136,17,0,0,0,12,17,0,136,17,0,0,25,17,17,32,137,17,0,0,130,17,0,0,136,18,0,0,49,17,17,18,212,172,2,0,1,18,32,0,135,17,208,2,18,0,0,0,25,3,12,24,25,4,12,20,25,5,12,16,25,6,12,12,25,7,12,8,25,10,12,4,0,11,12,0,85,4,0,0,85,5,1,0,85,6,2,0,82,17,4,0,106,17,17,16,121,17,47,0,82,13,4,0,1,17,172,0,94,17,13,17,1,18,168,0,94,18,13,18,4,17,17,18,85,7,17,0,82,17,7,0,82,18,6,0,47,17,17,18,192,173,2,0,82,18,5,0,82,19,4,0,1,20,168,0,94,19,19,20,82,20,7,0,135,17,210,2,18,19,20,0,82,14,4,0,82,15,7,0,106,20,14,16,38,20,20,15,106,19,14,28,82,18,5,0,3,18,18,15,82,21,6,0,4,21,21,15,135,17,36,3,20,19,18,21,85,11,17,0,82,17,11,0,82,20,6,0,82,21,7,0,4,20,20,21,13,17,17,20,38,17,17,1,85,10,17,0,82,16,4,0,1,17,168,0,1,20,172,0,94,20,16,20,97,16,17,20,116,3,10,0,82,9,3,0,137,12,0,0,139,9,0,0,82,20,4,0,1,17,168,0,94,20,20,17,82,17,6,0,3,20,20,17,82,17,4,0,1,21,172,0,94,17,17,21,50,20,20,17,56,174,2,0,82,17,5,0,82,21,4,0,1,18,168,0,94,21,21,18,82,18,6,0,135,20,210,2,17,21,18,0,82,20,4,0,1,18,168,0,3,8,20,18,82,18,8,0,82,20,6,0,3,18,18,20,85,8,18,0,1,18,1,0,85,3,18,0,82,9,3,0,137,12,0,0,139,9,0,0,119,0,6,0,1,18,0,0,85,3,18,0,82,9,3,0,137,12,0,0,139,9,0,0,1,18,0,0,139,18,0,0,140,7,29,0,0,0,0,0,136,22,0,0,0,21,22,0,136,22,0,0,25,22,22,48,137,22,0,0,130,22,0,0,136,23,0,0,49,22,22,23,140,174,2,0,1,23,48,0,135,22,208,2,23,0,0,0,25,18,21,32,25,19,21,28,25,20,21,24,25,7,21,20,25,8,21,16,25,9,21,12,25,10,21,8,0,11,21,0,85,19,0,0,85,20,1,0,85,7,2,0,85,8,3,0,85,9,4,0,85,10,5,0,109,21,4,6,82,12,10,0,1,22,0,0,85,12,22,0,1,23,0,0,109,12,4,23,1,22,0,0,109,12,8,22,82,22,10,0,1,23,8,0,85,22,23,0,82,23,10,0,1,22,0,0,109,23,8,22,82,22,10,0,1,23,0,0,109,22,4,23,82,22,19,0,134,23,0,0,176,152,3,0,22,0,0,0,33,13,23,0,82,14,19,0,121,13,14,0,82,22,20,0,82,24,7,0,82,25,8,0,82,26,9,0,82,27,10,0,134,23,0,0,164,88,3,0,14,22,24,25,26,27,0,0,85,18,23,0,82,17,18,0,137,21,0,0,139,17,0,0,134,23,0,0,232,114,3,0,14,0,0,0,120,23,14,0,1,27,212,54,134,23,0,0,176,165,3,0,27,0,0,0,33,16,23,0,1,27,0,0,1,26,0,0,125,23,16,27,26,0,0,0,85,18,23,0,82,17,18,0,137,21,0,0,139,17,0,0,82,26,19,0,82,27,20,0,82,25,7,0,82,24,8,0,82,22,9,0,82,28,10,0,134,23,0,0,144,89,1,0,26,27,25,24,22,28,0,0,85,11,23,0,82,23,9,0,121,23,3,0,82,15,9,0,119,0,3,0,82,23,8,0,82,15,23,0,82,28,11,0,82,22,20,0,82,22,22,0,82,24,7,0,82,24,24,0,134,23,0,0,204,84,2,0,28,22,24,15,85,18,23,0,82,17,18,0,137,21,0,0,139,17,0,0,140,2,13,0,0,0,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,48,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,72,176,2,0,1,10,48,0,135,9,208,2,10,0,0,0,25,3,8,16,25,4,8,12,25,5,8,8,25,6,8,4,0,7,8,0,1,9,0,0,85,3,9,0,1,10,0,0,109,3,4,10,1,9,0,0,109,3,8,9,1,10,0,0,109,3,12,10,1,9,0,0,109,3,16,9,25,9,1,4,116,4,9,0,25,9,1,8,116,5,9,0,1,9,0,0,85,6,9,0,1,9,0,0,85,7,9,0,106,9,1,12,82,10,7,0,56,9,9,10,40,177,2,0,82,9,4,0,82,10,5,0,106,11,1,16,134,2,0,0,92,237,2,0,9,10,11,0,82,11,6,0,3,11,11,2,85,6,11,0,82,11,4,0,28,11,11,2,85,4,11,0,82,11,5,0,28,11,11,2,85,5,11,0,82,11,4,0,34,11,11,1,121,11,3,0,1,11,1,0,85,4,11,0,82,11,5,0,34,11,11,1,121,11,3,0,1,11,1,0,85,5,11,0,82,11,7,0,25,11,11,1,85,7,11,0,119,0,224,255,82,10,6,0,135,11,1,0,10,0,0,0,85,3,11,0,82,11,3,0,120,11,12,0,116,0,3,0,106,10,3,4,109,0,4,10,106,11,3,8,109,0,8,11,106,10,3,12,109,0,12,10,106,11,3,16,109,0,16,11,137,8,0,0,139,0,0,0,82,10,3,0,82,9,1,0,82,12,6,0,135,11,210,2,10,9,12,0,106,12,1,4,109,3,4,12,106,11,1,8,109,3,8,11,106,12,1,12,109,3,12,12,106,11,1,16,109,3,16,11,116,0,3,0,106,12,3,4,109,0,4,12,106,11,3,8,109,0,8,11,106,12,3,12,109,0,12,12,106,11,3,16,109,0,16,11,137,8,0,0,139,0,0,0,140,4,23,0,0,0,0,0,2,18,0,0,0,8,0,0,136,19,0,0,0,16,19,0,136,19,0,0,1,20,48,8,3,19,19,20,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,16,178,2,0,1,20,48,8,135,19,208,2,20,0,0,0,1,19,40,8,3,10,16,19,1,19,36,8,3,11,16,19,1,19,32,8,3,12,16,19,1,19,28,8,3,13,16,19,1,19,24,8,3,14,16,19,1,19,20,8,3,15,16,19,0,4,16,0,1,19,16,8,3,5,16,19,1,19,12,8,3,6,16,19,1,19,8,8,3,7,16,19,1,19,4,8,3,8,16,19,3,9,16,18,85,10,0,0,85,11,1,0,85,12,2,0,85,13,3,0,82,20,11,0,82,21,13,0,5,19,20,21,85,15,19,0,116,5,10,0,1,19,0,0,85,14,19,0,82,19,12,0,42,19,19,1,82,21,14,0,56,19,19,21,136,179,2,0,82,19,5,0,82,20,14,0,82,22,15,0,5,21,20,22,3,19,19,21,85,6,19,0,82,19,5,0,82,22,12,0,82,20,14,0,4,22,22,20,26,22,22,1,82,20,15,0,5,21,22,20,3,19,19,21,85,7,19,0,116,8,15,0,82,19,8,0,120,19,2,0,119,0,34,0,82,17,8,0,48,21,17,18,8,179,2,0,0,19,17,0,119,0,2,0,0,19,18,0,85,9,19,0,82,21,6,0,82,20,9,0,135,19,210,2,4,21,20,0,82,20,6,0,82,21,7,0,82,22,9,0,135,19,210,2,20,21,22,0,82,22,7,0,82,21,9,0,135,19,210,2,22,4,21,0,82,19,6,0,82,21,9,0,3,19,19,21,85,6,19,0,82,19,7,0,82,21,9,0,3,19,19,21,85,7,19,0,82,19,8,0,82,21,9,0,4,19,19,21,85,8,19,0,119,0,221,255,82,19,14,0,25,19,19,1,85,14,19,0,119,0,196,255,137,16,0,0,139,0,0,0,140,3,17,0,0,0,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,32,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,200,179,2,0,1,13,32,0,135,12,208,2,13,0,0,0,25,4,11,24,25,5,11,20,25,6,11,16,25,7,11,12,25,8,11,8,25,9,11,4,0,10,11,0,85,4,0,0,85,5,1,0,85,6,2,0,82,12,4,0,116,7,12,0,82,13,7,0,82,13,13,0,82,14,7,0,106,14,14,4,5,12,13,14,85,9,12,0,82,12,4,0,25,12,12,12,116,10,12,0,82,12,6,0,32,12,12,2,82,14,6,0,32,14,14,4,20,12,12,14,120,12,7,0,1,14,8,57,1,13,109,54,1,15,11,18,1,16,60,57,135,12,209,2,14,13,15,16,82,12,6,0,32,3,12,2,1,12,0,0,85,8,12,0,121,3,27,0,82,12,9,0,82,16,8,0,57,12,12,16,188,180,2,0,82,12,10,0,82,15,10,0,81,15,15,0,82,13,5,0,81,13,13,0,13,15,15,13,1,13,0,0,2,14,0,0,255,255,0,0,125,16,15,13,14,0,0,0,108,12,2,16,82,16,10,0,25,16,16,4,85,10,16,0,82,16,8,0,25,16,16,1,85,8,16,0,119,0,234,255,137,11,0,0,1,16,1,0,139,16,0,0,82,16,9,0,82,12,8,0,57,16,16,12,72,181,2,0,82,16,10,0,81,16,16,0,82,12,5,0,81,12,12,0,45,16,16,12,44,181,2,0,82,16,10,0,105,16,16,2,82,12,5,0,105,12,12,2,45,16,16,12,44,181,2,0,82,16,10,0,105,16,16,4,82,12,5,0,105,12,12,4,45,16,16,12,44,181,2,0,82,16,10,0,1,12,0,0,108,16,6,12,82,12,10,0,25,12,12,8,85,10,12,0,82,12,8,0,25,12,12,1,85,8,12,0,119,0,225,255,137,11,0,0,1,12,1,0,139,12,0,0,140,5,21,0,0,0,0,0,136,17,0,0,0,16,17,0,136,17,0,0,25,17,17,48,137,17,0,0,130,17,0,0,136,18,0,0,49,17,17,18,140,181,2,0,1,18,48,0,135,17,208,2,18,0,0,0,25,11,16,32,25,12,16,28,25,13,16,24,25,14,16,20,25,15,16,16,25,5,16,12,25,6,16,8,25,7,16,36,25,8,16,4,0,9,16,0,85,11,0,0,85,12,1,0,85,13,2,0,85,14,3,0,85,15,4,0,82,17,11,0,82,18,15,0,41,18,18,2,82,19,14,0,3,18,18,19,91,17,17,18,85,5,17,0,82,18,11,0,82,19,15,0,82,20,13,0,26,20,20,1,134,17,0,0,236,163,2,0,18,19,20,0,116,6,12,0,1,17,0,0,83,7,17,0,116,8,12,0,82,10,11,0,82,17,13,0,26,17,17,1,82,20,8,0,56,17,17,20,220,182,2,0,82,17,8,0,41,17,17,2,82,20,14,0,3,17,17,20,91,17,10,17,85,9,17,0,82,17,9,0,82,20,5,0,47,17,17,20,120,182,2,0,82,20,11,0,82,19,8,0,82,18,6,0,134,17,0,0,236,163,2,0,20,19,18,0,82,17,6,0,25,17,17,1,85,6,17,0,119,0,22,0,82,17,9,0,82,18,5,0,45,17,17,18,204,182,2,0,78,17,7,0,38,17,17,1,121,17,10,0,82,18,11,0,82,19,8,0,82,20,6,0,134,17,0,0,236,163,2,0,18,19,20,0,82,17,6,0,25,17,17,1,85,6,17,0,78,17,7,0,38,17,17,1,40,17,17,1,38,17,17,1,83,7,17,0,82,17,8,0,25,17,17,1,85,8,17,0,119,0,206,255,82,20,6,0,82,19,13,0,26,19,19,1,134,17,0,0,236,163,2,0,10,20,19,0,137,16,0,0,82,17,6,0,139,17,0,0,140,3,17,0,0,0,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,32,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,56,183,2,0,1,13,32,0,135,12,208,2,13,0,0,0,25,4,11,24,25,5,11,20,25,6,11,16,25,7,11,12,25,8,11,8,25,9,11,4,0,10,11,0,85,4,0,0,85,5,1,0,85,6,2,0,82,12,4,0,116,7,12,0,82,13,7,0,82,13,13,0,82,14,7,0,106,14,14,4,5,12,13,14,85,9,12,0,82,12,4,0,25,12,12,12,116,10,12,0,82,12,6,0,32,12,12,2,82,14,6,0,32,14,14,4,20,12,12,14,120,12,7,0,1,14,8,57,1,13,109,54,1,15,242,17,1,16,33,57,135,12,209,2,14,13,15,16,82,12,6,0,32,3,12,2,1,12,0,0,85,8,12,0,121,3,26,0,82,12,9,0,82,16,8,0,57,12,12,16,40,184,2,0,82,12,10,0,82,15,10,0,79,15,15,0,82,13,5,0,79,13,13,0,13,15,15,13,1,13,0,0,1,14,255,0,125,16,15,13,14,0,0,0,107,12,1,16,82,16,10,0,25,16,16,2,85,10,16,0,82,16,8,0,25,16,16,1,85,8,16,0,119,0,235,255,137,11,0,0,1,16,1,0,139,16,0,0,82,16,9,0,82,12,8,0,57,16,16,12,180,184,2,0,82,16,10,0,79,16,16,0,82,12,5,0,79,12,12,0,45,16,16,12,152,184,2,0,82,16,10,0,103,16,16,1,82,12,5,0,103,12,12,1,45,16,16,12,152,184,2,0,82,16,10,0,103,16,16,2,82,12,5,0,103,12,12,2,45,16,16,12,152,184,2,0,82,16,10,0,1,12,0,0,107,16,3,12,82,12,10,0,25,12,12,4,85,10,12,0,82,12,8,0,25,12,12,1,85,8,12,0,119,0,225,255,137,11,0,0,1,12,1,0,139,12,0,0,140,2,22,0,0,0,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,48,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,248,184,2,0,1,19,48,0,135,18,208,2,19,0,0,0,25,16,17,16,25,15,17,8,0,14,17,0,25,5,17,44,25,8,17,40,25,9,17,36,25,10,17,32,25,11,17,28,25,12,17,24,25,13,17,20,85,5,0,0,85,8,1,0,82,19,8,0,135,18,37,3,19,0,0,0,85,9,18,0,82,19,9,0,1,20,1,0,1,21,0,0,135,18,38,3,19,20,5,21,1,18,0,0,85,10,18,0,82,21,9,0,135,18,39,3,21,0,0,0,82,21,9,0,2,20,0,0,129,139,0,0,135,18,40,3,21,20,10,0,82,3,9,0,82,18,10,0,33,18,18,1,121,18,52,0,85,14,3,0,1,20,2,0,1,21,18,49,134,18,0,0,104,5,3,0,20,21,14,0,1,18,0,0,85,11,18,0,82,21,9,0,2,20,0,0,132,139,0,0,135,18,40,3,21,20,11,0,82,4,11,0,135,18,29,3,85,13,18,0,0,2,4,0,136,18,0,0,0,6,18,0,136,18,0,0,27,20,2,1,25,20,20,15,38,20,20,240,3,18,18,20,137,18,0,0,130,18,0,0,136,20,0,0,49,18,18,20,12,186,2,0,27,20,2,1,25,20,20,15,38,20,20,240,135,18,208,2,20,0,0,0,82,20,9,0,82,21,11,0,135,18,41,3,20,21,12,6,85,15,6,0,1,21,1,0,1,20,223,48,134,18,0,0,104,5,3,0,21,20,15,0,82,20,13,0,135,18,32,3,20,0,0,0,82,7,9,0,137,17,0,0,139,7,0,0,119,0,10,0,85,16,3,0,1,20,1,0,1,21,59,49,134,18,0,0,104,5,3,0,20,21,16,0,82,7,9,0,137,17,0,0,139,7,0,0,1,18,0,0,139,18,0,0,140,3,28,0,0,0,0,0,136,24,0,0,0,22,24,0,136,24,0,0,1,25,224,0,3,24,24,25,137,24,0,0,130,24,0,0,136,25,0,0,49,24,24,25,184,186,2,0,1,25,224,0,135,24,208,2,25,0,0,0,1,24,208,0,3,14,22,24,1,24,160,0,3,16,22,24,25,18,22,80,0,19,22,0,0,21,16,0,25,23,21,40,1,24,0,0,85,21,24,0,25,21,21,4,54,24,21,23,216,186,2,0,116,14,2,0,1,25,0,0,134,24,0,0,144,198,0,0,25,1,14,18,16,0,0,0,34,24,24,0,121,24,3,0,1,3,255,255,119,0,78,0,1,24,255,255,106,25,0,76,47,24,24,25,52,187,2,0,134,17,0,0,16,186,3,0,0,0,0,0,119,0,2,0,1,17,0,0,82,5,0,0,38,24,5,32,0,6,24,0,102,24,0,74,34,24,24,1,121,24,3,0,38,24,5,223,85,0,24,0,25,7,0,48,82,24,7,0,120,24,42,0,25,8,0,44,82,9,8,0,85,8,19,0,25,10,0,28,85,10,19,0,25,11,0,20,85,11,19,0,1,24,80,0,85,7,24,0,25,12,0,16,25,24,19,80,85,12,24,0,134,13,0,0,144,198,0,0,0,1,14,18,16,0,0,0,120,9,3,0,0,4,13,0,119,0,27,0,106,25,0,36,38,25,25,15,1,26,0,0,1,27,0,0,135,24,36,3,25,0,26,27,82,24,11,0,32,24,24,0,1,25,255,255,125,20,24,25,13,0,0,0,85,8,9,0,1,25,0,0,85,7,25,0,1,25,0,0,85,12,25,0,1,25,0,0,85,10,25,0,1,25,0,0,85,11,25,0,0,4,20,0,119,0,5,0,134,4,0,0,144,198,0,0,0,1,14,18,16,0,0,0,82,15,0,0,20,25,15,6,85,0,25,0,121,17,4,0,134,25,0,0,4,186,3,0,0,0,0,0,38,25,15,32,32,25,25,0,1,24,255,255,125,3,25,4,24,0,0,0,137,22,0,0,139,3,0,0,140,5,29,0,0,0,0,0,136,23,0,0,0,22,23,0,136,23,0,0,25,23,23,48,137,23,0,0,130,23,0,0,136,24,0,0,49,23,23,24,136,188,2,0,1,24,48,0,135,23,208,2,24,0,0,0,25,16,22,40,25,18,22,36,25,19,22,32,25,20,22,28,25,21,22,24,25,5,22,20,25,6,22,16,0,7,22,0,85,18,0,0,85,19,1,0,85,20,2,0,85,21,3,0,85,5,4,0,82,24,18,0,134,23,0,0,232,114,3,0,24,0,0,0,33,8,23,0,82,9,18,0,82,10,19,0,82,11,20,0,82,12,21,0,82,13,5,0,121,8,22,0,25,24,22,4,134,23,0,0,144,89,1,0,9,10,11,12,13,24,0,0,85,7,23,0,82,23,7,0,121,23,10,0,82,24,7,0,82,25,19,0,82,26,20,0,82,27,21,0,82,28,5,0,134,23,0,0,132,33,3,0,24,25,26,27,28,0,0,0,116,16,7,0,82,17,16,0,137,22,0,0,139,17,0,0,134,23,0,0,132,197,2,0,9,10,11,12,13,0,0,0,85,6,23,0,82,23,6,0,120,23,14,0,1,28,212,54,134,23,0,0,176,165,3,0,28,0,0,0,33,15,23,0,1,28,0,0,1,27,0,0,125,23,15,28,27,0,0,0,85,16,23,0,82,17,16,0,137,22,0,0,139,17,0,0,82,23,5,0,121,23,3,0,82,14,5,0,119,0,3,0,82,23,21,0,82,14,23,0,82,27,6,0,82,28,19,0,82,28,28,0,82,26,20,0,82,26,26,0,134,23,0,0,68,121,2,0,27,28,26,14,85,16,23,0,82,17,16,0,137,22,0,0,139,17,0,0,140,4,15,0,0,0,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,48,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,12,190,2,0,1,12,48,0,135,11,208,2,12,0,0,0,25,4,10,36,25,5,10,32,25,6,10,28,25,7,10,8,25,8,10,4,0,9,10,0,85,4,1,0,85,5,2,0,85,6,3,0,1,11,0,0,85,7,11,0,82,12,5,0,109,7,4,12,82,11,6,0,109,7,8,11,1,12,1,0,109,7,12,12,1,11,7,0,109,7,16,11,1,11,0,0,85,8,11,0,106,13,7,4,106,14,7,8,5,12,13,14,41,12,12,2,135,11,1,0,12,0,0,0,85,7,11,0,1,11,0,0,85,9,11,0,106,12,7,4,106,14,7,8,5,11,12,14,41,11,11,2,82,14,9,0,56,11,11,14,68,191,2,0,82,11,7,0,82,14,9,0,82,12,4,0,82,13,8,0,41,13,13,2,90,12,12,13,95,11,14,12,82,12,7,0,82,14,9,0,25,14,14,1,82,11,4,0,82,13,8,0,41,13,13,2,3,11,11,13,102,11,11,1,95,12,14,11,82,11,7,0,82,14,9,0,25,14,14,2,82,12,4,0,82,13,8,0,41,13,13,2,3,12,12,13,102,12,12,2,95,11,14,12,82,12,7,0,82,14,9,0,25,14,14,3,82,11,4,0,82,13,8,0,41,13,13,2,3,11,11,13,102,11,11,3,95,12,14,11,82,11,8,0,25,11,11,1,85,8,11,0,82,11,9,0,25,11,11,4,85,9,11,0,119,0,209,255,116,0,7,0,106,14,7,4,109,0,4,14,106,11,7,8,109,0,8,11,106,14,7,12,109,0,12,14,106,11,7,16,109,0,16,11,137,10,0,0,139,0,0,0,140,3,18,0,0,0,0,0,136,15,0,0,0,12,15,0,136,15,0,0,25,15,15,32,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,168,191,2,0,1,16,32,0,135,15,208,2,16,0,0,0,25,3,12,28,25,5,12,24,25,6,12,20,25,7,12,16,25,9,12,12,25,10,12,8,25,11,12,4,85,5,0,0,85,6,1,0,85,7,2,0,82,15,5,0,82,16,6,0,109,15,16,16,82,16,5,0,106,16,16,28,120,16,9,0,1,15,14,58,134,16,0,0,176,165,3,0,15,0,0,0,85,3,16,0,82,8,3,0,137,12,0,0,139,8,0,0,82,13,5,0,106,16,13,16,106,15,13,20,4,16,16,15,85,10,16,0,82,14,5,0,106,16,14,24,106,15,14,20,4,4,16,15,85,12,4,0,85,11,4,0,82,15,10,0,82,16,7,0,3,15,15,16,82,16,11,0,56,15,15,16,92,192,2,0,82,15,11,0,41,15,15,1,85,11,15,0,119,0,247,255,82,16,5,0,106,16,16,20,82,17,11,0,134,15,0,0,132,107,3,0,16,17,0,0,85,9,15,0,82,15,9,0,120,15,10,0,1,17,203,54,134,15,0,0,176,165,3,0,17,0,0,0,85,3,15,0,82,8,3,0,137,12,0,0,139,8,0,0,119,0,19,0,82,15,5,0,82,17,9,0,109,15,20,17,82,17,5,0,82,15,9,0,82,16,10,0,3,15,15,16,109,17,16,15,82,15,5,0,82,17,9,0,82,16,11,0,3,17,17,16,109,15,24,17,1,17,1,0,85,3,17,0,82,8,3,0,137,12,0,0,139,8,0,0,1,17,0,0,139,17,0,0,140,1,11,0,0,0,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,96,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,44,193,2,0,1,8,96,0,135,7,208,2,8,0,0,0,25,1,6,64,25,3,6,48,25,4,6,16,0,5,6,0,1,7,0,0,2,8,0,0,32,162,0,0,82,8,8,0,48,7,7,8,172,193,2,0,2,7,0,0,32,162,0,0,82,7,7,0,85,0,7,0,2,8,0,0,36,162,0,0,82,8,8,0,109,0,4,8,2,7,0,0,40,162,0,0,82,7,7,0,109,0,8,7,2,8,0,0,44,162,0,0,82,8,8,0,109,0,12,8,2,7,0,0,48,162,0,0,82,7,7,0,109,0,16,7,137,6,0,0,139,0,0,0,134,7,0,0,224,156,3,0,1,0,0,0,2,7,0,0,32,162,0,0,82,8,1,0,85,7,8,0,2,8,0,0,36,162,0,0,106,7,1,4,85,8,7,0,2,7,0,0,40,162,0,0,106,8,1,8,85,7,8,0,2,8,0,0,44,162,0,0,106,7,1,12,85,8,7,0,2,7,0,0,48,162,0,0,106,8,1,16,85,7,8,0,134,8,0,0,224,156,3,0,4,0,0,0,106,8,4,28,1,7,92,13,3,8,8,7,25,2,8,4,116,3,2,0,106,7,2,4,109,3,4,7,106,8,2,8,109,3,8,8,106,7,2,12,109,3,12,7,88,8,3,0,145,8,8,0,59,9,1,0,145,9,9,0,63,7,8,9,145,7,7,0,89,5,7,0,112,8,3,4,145,8,8,0,59,10,1,0,145,10,10,0,63,9,8,10,145,9,9,0,113,5,4,9,112,10,3,8,145,10,10,0,59,8,2,0,145,8,8,0,64,7,10,8,145,7,7,0,113,5,8,7,112,8,3,12,145,8,8,0,59,10,2,0,145,10,10,0,64,9,8,10,145,9,9,0,113,5,12,9,2,9,0,0,16,162,0,0,82,7,5,0,85,9,7,0,2,7,0,0,20,162,0,0,106,9,5,4,85,7,9,0,2,9,0,0,24,162,0,0,106,7,5,8,85,9,7,0,2,7,0,0,28,162,0,0,106,9,5,12,85,7,9,0,2,9,0,0,32,162,0,0,82,9,9,0,85,0,9,0,2,7,0,0,36,162,0,0,82,7,7,0,109,0,4,7,2,9,0,0,40,162,0,0,82,9,9,0,109,0,8,9,2,7,0,0,44,162,0,0,82,7,7,0,109,0,12,7,2,9,0,0,48,162,0,0,82,9,9,0,109,0,16,9,137,6,0,0,139,0,0,0,140,1,13,0,0,0,0,0,136,9,0,0,0,8,9,0,136,9,0,0,1,10,64,4,3,9,9,10,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,132,195,2,0,1,10,64,4,135,9,208,2,10,0,0,0,1,9,176,3,3,7,8,9,1,9,168,3,3,6,8,9,1,9,184,3,3,1,8,9,1,9,180,3,3,3,8,9,1,9,192,1,3,4,8,9,0,5,8,0,1,10,0,0,1,11,132,0,135,9,213,2,1,10,11,0,1,9,0,0,85,3,9,0,1,9,32,0,82,11,3,0,56,9,9,11,252,195,2,0,25,9,1,4,82,11,3,0,41,11,11,2,1,10,255,255,97,9,11,10,82,10,3,0,25,10,10,1,85,3,10,0,119,0,244,255,1,11,0,4,1,9,227,1,135,10,210,2,4,11,9,0,1,9,240,5,1,11,185,1,135,10,210,2,5,9,11,0,2,10,0,0,76,161,0,0,2,9,0,0,49,139,0,0,134,11,0,0,192,184,2,0,4,9,0,0,85,10,11,0,2,11,0,0,80,161,0,0,2,9,0,0,48,139,0,0,134,10,0,0,192,184,2,0,5,9,0,0,85,11,10,0,2,11,0,0,76,161,0,0,82,11,11,0,2,9,0,0,80,161,0,0,82,9,9,0,134,10,0,0,8,142,2,0,11,9,0,0,85,1,10,0,82,2,1,0,1,10,0,0,82,9,1,0,48,10,10,9,84,197,2,0,85,6,2,0,1,9,1,0,1,11,228,47,134,10,0,0,104,5,3,0,9,11,6,0,82,9,1,0,1,12,20,48,135,11,42,3,9,12,0,0,109,1,4,11,25,11,1,4,82,12,1,0,1,9,35,48,135,10,42,3,12,9,0,0,109,11,4,10,25,10,1,4,82,9,1,0,1,12,50,48,135,11,42,3,9,12,0,0,109,10,20,11,25,11,1,4,82,12,1,0,1,9,62,48,135,10,43,3,12,9,0,0,109,11,24,10,25,10,1,4,82,9,1,0,1,12,66,48,135,11,43,3,9,12,0,0,109,10,44,11,25,11,1,4,82,12,1,0,1,9,77,48,135,10,43,3,12,9,0,0,109,11,56,10,1,11,132,0,135,10,210,2,0,1,11,0,137,8,0,0,139,0,0,0,119,0,12,0,85,7,2,0,1,11,2,0,1,9,86,48,134,10,0,0,104,5,3,0,11,9,7,0,1,9,132,0,135,10,210,2,0,1,9,0,137,8,0,0,139,0,0,0,139,0,0,0,140,5,25,0,0,0,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,48,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,188,197,2,0,1,19,48,0,135,18,208,2,19,0,0,0,25,11,17,40,25,13,17,36,25,14,17,32,25,15,17,28,25,16,17,24,25,5,17,20,25,6,17,8,25,7,17,4,0,8,17,0,85,13,0,0,85,14,1,0,85,15,2,0,85,16,3,0,85,5,4,0,82,19,13,0,82,20,14,0,82,21,15,0,82,22,16,0,82,23,5,0,1,24,8,0,134,18,0,0,84,174,2,0,19,20,21,22,23,6,24,0,85,7,18,0,82,18,7,0,120,18,6,0,1,18,0,0,85,11,18,0,82,12,11,0,137,17,0,0,139,12,0,0,82,18,6,0,33,18,18,8,121,18,27,0,82,18,6,0,33,18,18,16,121,18,7,0,1,24,83,54,1,23,109,54,1,22,70,4,1,21,171,54,135,18,209,2,24,23,22,21,82,18,5,0,120,18,4,0,82,18,16,0,82,9,18,0,119,0,2,0,82,9,5,0,82,21,7,0,82,22,14,0,82,22,22,0,82,23,15,0,82,23,23,0,134,18,0,0,252,234,2,0,21,22,23,9,85,7,18,0,1,18,8,0,85,6,18,0,2,18,0,0,88,162,0,0,82,18,18,0,121,18,17,0,82,18,5,0,121,18,3,0,82,10,5,0,119,0,3,0,82,18,16,0,82,10,18,0,85,8,10,0,82,23,7,0,82,22,14,0,82,22,22,0,82,21,15,0,82,21,21,0,82,24,8,0,134,18,0,0,204,177,2,0,23,22,21,24,116,11,7,0,82,12,11,0,137,17,0,0,139,12,0,0,140,3,26,0,0,0,0,0,82,24,0,0,2,25,0,0,34,237,251,106,3,17,24,25,106,25,0,8,134,23,0,0,24,176,3,0,25,17,0,0,106,25,0,12,134,6,0,0,24,176,3,0,25,17,0,0,106,25,0,16,134,7,0,0,24,176,3,0,25,17,0,0,43,25,1,2,48,25,23,25,236,200,2,0,41,25,23,2,4,8,1,25,16,25,6,8,16,24,7,8,19,25,25,24,121,25,91,0,20,25,7,6,38,25,25,3,120,25,86,0,43,25,6,2,0,9,25,0,43,25,7,2,0,10,25,0,1,3,0,0,0,4,23,0,43,25,4,1,0,11,25,0,3,12,3,11,41,25,12,1,0,13,25,0,3,14,13,9,41,25,14,2,94,25,0,25,134,15,0,0,24,176,3,0,25,17,0,0,25,25,14,1,41,25,25,2,94,25,0,25,134,16,0,0,24,176,3,0,25,17,0,0,16,25,16,1,4,24,1,16,16,24,15,24,19,25,25,24,120,25,3,0,1,5,0,0,119,0,61,0,3,25,16,15,90,25,0,25,121,25,3,0,1,5,0,0,119,0,56,0,3,25,0,16,134,18,0,0,4,118,3,0,2,25,0,0,120,18,2,0,119,0,15,0,34,22,18,0,32,25,4,1,121,25,3,0,1,5,0,0,119,0,45,0,125,3,22,3,12,0,0,0,121,22,3,0,0,25,11,0,119,0,3,0,4,24,4,11,0,25,24,0,0,4,25,0,119,0,208,255,3,19,13,10,41,25,19,2,94,25,0,25,134,20,0,0,24,176,3,0,25,17,0,0,25,25,19,1,41,25,25,2,94,25,0,25,134,21,0,0,24,176,3,0,25,17,0,0,16,25,21,1,4,24,1,21,16,24,20,24,19,25,25,24,121,25,12,0,3,24,21,20,90,24,0,24,32,24,24,0,121,24,4,0,3,24,0,21,0,25,24,0,119,0,3,0,1,24,0,0,0,25,24,0,0,5,25,0,119,0,8,0,1,5,0,0,119,0,6,0,1,5,0,0,119,0,4,0,1,5,0,0,119,0,2,0,1,5,0,0,139,5,0,0,140,2,21,0,0,0,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,44,201,2,0,1,14,32,0,135,13,208,2,14,0,0,0,25,2,11,20,25,3,11,16,25,5,11,12,25,7,11,8,25,8,11,4,0,10,11,0,85,2,0,0,85,3,1,0,82,15,2,0,82,16,3,0,5,14,15,16,41,14,14,2,1,16,1,0,134,13,0,0,164,150,3,0,14,16,0,0,85,5,13,0,1,16,0,0,1,14,0,0,82,15,2,0,82,17,3,0,1,18,8,25,1,19,1,20,82,20,5,0,135,13,44,3,16,14,15,17,18,19,20,0,82,19,2,0,82,18,3,0,5,20,19,18,41,20,20,2,135,13,1,0,20,0,0,0,85,7,13,0,82,13,3,0,26,13,13,1,85,8,13,0,82,13,8,0,34,13,13,0,120,13,53,0,1,13,0,0,85,10,13,0,82,13,2,0,41,13,13,2,82,20,10,0,56,13,13,20,140,202,2,0,82,20,8,0,82,18,2,0,5,13,20,18,41,13,13,2,0,4,13,0,82,18,3,0,26,18,18,1,82,20,8,0,4,18,18,20,82,20,2,0,5,13,18,20,41,13,13,2,0,6,13,0,82,12,10,0,82,13,7,0,3,20,6,12,82,18,5,0,3,19,4,12,90,18,18,19,95,13,20,18,82,18,10,0,25,18,18,1,30,18,18,4,120,18,14,0,82,20,3,0,26,20,20,1,82,13,8,0,4,20,20,13,82,13,2,0,5,18,20,13,41,18,18,2,0,9,18,0,82,18,7,0,82,13,10,0,3,13,9,13,1,20,255,255,95,18,13,20,82,20,10,0,25,20,20,1,85,10,20,0,119,0,211,255,82,20,8,0,26,20,20,1,85,8,20,0,119,0,202,255,82,13,5,0,135,20,214,2,13,0,0,0,137,11,0,0,82,20,7,0,139,20,0,0,140,2,20,0,0,0,0,0,136,15,0,0,0,12,15,0,136,15,0,0,25,15,15,32,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,236,202,2,0,1,16,32,0,135,15,208,2,16,0,0,0,25,3,12,20,25,4,12,16,25,5,12,12,25,6,12,8,25,9,12,4,0,11,12,0,85,4,0,0,85,5,1,0,82,16,4,0,106,16,16,12,1,17,16,0,134,15,0,0,0,135,3,0,16,17,0,0,85,11,15,0,1,15,10,0,85,9,15,0,82,2,9,0,82,15,11,0,82,17,5,0,1,16,32,4,3,17,17,16,82,16,9,0,41,16,16,2,94,17,17,16,54,15,15,17,100,203,2,0,25,15,2,1,85,9,15,0,119,0,244,255,32,15,2,16,121,15,6,0,1,15,255,255,85,3,15,0,82,10,3,0,137,12,0,0,139,10,0,0,82,13,5,0,82,15,9,0,41,15,15,1,0,14,15,0,82,15,11,0,1,17,16,0,82,16,9,0,4,17,17,16,23,15,15,17,1,17,0,4,3,17,13,17,93,17,17,14,4,15,15,17,1,17,100,4,3,17,13,17,93,17,17,14,3,15,15,17,85,6,15,0,82,15,5,0,1,17,132,4,3,15,15,17,82,17,6,0,91,15,15,17,82,17,9,0,46,15,15,17,0,204,2,0,1,17,34,58,1,16,109,54,1,18,85,15,1,19,50,58,135,15,209,2,17,16,18,19,82,15,4,0,25,7,15,12,82,15,7,0,82,19,9,0,24,15,15,19,85,7,15,0,82,15,4,0,25,8,15,8,82,15,8,0,82,19,9,0,4,15,15,19,85,8,15,0,82,15,5,0,1,19,164,5,3,15,15,19,82,19,6,0,41,19,19,1,93,15,15,19,85,3,15,0,82,10,3,0,137,12,0,0,139,10,0,0,140,2,19,0,0,0,0,0,136,14,0,0,0,13,14,0,136,14,0,0,25,14,14,32,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,144,204,2,0,1,15,32,0,135,14,208,2,15,0,0,0,25,3,13,20,25,7,13,16,25,9,13,12,25,10,13,8,25,11,13,4,0,12,13,0,89,7,0,0,89,9,1,0,88,15,9,0,145,15,15,0,59,16,2,0,145,16,16,0,66,14,15,16,145,14,14,0,89,10,14,0,88,16,10,0,145,16,16,0,61,15,0,0,0,0,0,63,145,15,15,0,63,14,16,15,145,14,14,0,89,11,14,0,88,14,9,0,145,14,14,0,59,15,1,0,145,15,15,0,72,14,14,15,120,14,7,0,1,15,89,65,1,16,138,59,1,17,248,2,1,18,125,65,135,14,209,2,15,16,17,18,88,18,7,0,145,18,18,0,135,14,21,3,18,0,0,0,145,14,14,0,89,7,14,0,88,2,7,0,145,2,2,0,88,14,11,0,145,14,14,0,74,14,2,14,121,14,9,0,59,14,0,0,145,14,14,0,89,3,14,0,88,8,3,0,145,8,8,0,137,13,0,0,145,14,8,0,139,14,0,0,61,18,0,0,0,0,0,63,145,18,18,0,88,17,10,0,145,17,17,0,64,14,18,17,145,14,14,0,89,12,14,0,88,4,7,0,145,4,4,0,88,14,12,0,145,14,14,0,72,14,4,14,121,14,10,0,59,14,1,0,145,14,14,0,89,3,14,0,88,8,3,0,145,8,8,0,137,13,0,0,145,14,8,0,139,14,0,0,119,0,17,0,88,5,11,0,145,5,5,0,88,14,7,0,145,14,14,0,64,6,5,14,145,6,6,0,88,17,9,0,145,17,17,0,66,14,6,17,145,14,14,0,89,3,14,0,88,8,3,0,145,8,8,0,137,13,0,0,145,14,8,0,139,14,0,0,59,14,0,0,145,14,14,0,139,14,0,0,140,3,14,0,0,0,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,76,206,2,0,1,9,16,0,135,8,208,2,9,0,0,0,0,6,7,0,25,3,7,12,25,4,7,8,25,5,7,4,85,3,0,0,85,4,1,0,85,5,2,0,1,8,89,51,85,6,8,0,1,9,1,0,1,10,66,51,134,8,0,0,104,5,3,0,9,10,6,0,2,8,0,0,164,161,0,0,82,10,5,0,85,8,10,0,2,10,0,0,182,164,0,0,82,9,3,0,82,11,4,0,134,8,0,0,252,231,1,0,9,11,0,0,38,8,8,1,83,10,8,0,2,8,0,0,182,164,0,0,78,8,8,0,38,8,8,1,120,8,3,0,137,7,0,0,139,0,0,0,134,8,0,0,28,183,3,0,134,8,0,0,128,217,1,0,1,10,0,0,1,11,0,0,1,9,1,0,1,12,4,0,1,13,2,0,135,8,45,3,10,11,9,12,13,0,0,0,1,13,97,51,1,12,0,0,1,9,1,0,1,11,5,0,1,10,2,0,135,8,46,3,13,12,9,11,10,0,0,0,1,10,97,51,1,11,0,0,1,9,1,0,1,12,6,0,1,13,2,0,135,8,47,3,10,11,9,12,13,0,0,0,1,13,97,51,1,12,0,0,1,9,1,0,1,11,7,0,1,10,2,0,135,8,48,3,13,12,9,11,10,0,0,0,1,10,97,51,1,11,0,0,1,9,1,0,1,12,7,0,1,13,2,0,135,8,49,3,10,11,9,12,13,0,0,0,1,13,97,51,1,12,0,0,1,9,1,0,1,11,7,0,1,10,2,0,135,8,50,3,13,12,9,11,10,0,0,0,1,10,97,51,1,11,0,0,1,9,1,0,1,12,7,0,1,13,2,0,135,8,51,3,10,11,9,12,13,0,0,0,1,13,0,0,1,12,1,0,1,9,8,0,1,11,2,0,135,8,52,3,13,12,9,11,1,11,0,0,1,9,1,0,1,12,8,0,1,13,2,0,135,8,53,3,11,9,12,13,2,8,0,0,160,164,0,0,2,9,0,0], eb + 174080);
  HEAPU8.set([228,158,0,0,82,12,9,0,76,12,12,0,145,12,12,0,59,9,2,0,145,9,9,0,66,13,12,9,145,13,13,0,89,8,13,0,2,13,0,0,164,164,0,0,2,12,0,0,232,158,0,0,82,9,12,0,76,9,9,0,145,9,9,0,59,12,2,0,145,12,12,0,66,8,9,12,145,8,8,0,89,13,8,0,1,8,0,0,120,8,3,0,137,7,0,0,139,0,0,0,1,13,60,0,134,8,0,0,144,129,3,0,13,0,0,0,134,8,0,0,188,186,3,0,137,7,0,0,139,0,0,0,140,6,29,0,0,0,0,0,136,22,0,0,0,18,22,0,136,22,0,0,1,23,48,1,3,22,22,23,137,22,0,0,130,22,0,0,136,23,0,0,49,22,22,23,192,208,2,0,1,23,48,1,135,22,208,2,23,0,0,0,1,22,240,0,3,7,18,22,1,22,176,0,3,6,18,22,25,13,18,40,25,14,18,32,25,15,18,24,25,16,18,16,25,8,18,8,0,9,18,0,25,10,18,112,25,11,18,48,87,13,0,0,87,14,1,0,87,15,2,0,87,16,3,0,87,8,4,0,87,9,5,0,86,23,13,0,86,24,14,0,86,25,15,0,86,26,16,0,86,27,8,0,86,28,9,0,134,22,0,0,208,116,2,0,10,23,24,25,26,27,28,0,2,22,0,0,196,157,0,0,82,21,22,0,0,12,21,0,0,17,6,0,0,19,21,0,25,20,17,64,116,17,19,0,25,17,17,4,25,19,19,4,54,22,17,20,76,209,2,0,0,17,7,0,0,19,10,0,25,20,17,64,116,17,19,0,25,17,17,4,25,19,19,4,54,22,17,20,108,209,2,0,134,22,0,0,80,81,1,0,11,6,7,0,0,17,12,0,0,19,11,0,25,20,17,64,116,17,19,0,25,17,17,4,25,19,19,4,54,22,17,20,152,209,2,0,137,18,0,0,139,0,0,0,140,2,21,0,0,0,0,0,2,17,0,0,255,0,0,0,136,18,0,0,0,16,18,0,136,18,0,0,25,18,18,32,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,244,209,2,0,1,19,32,0,135,18,208,2,19,0,0,0,0,10,16,0,1,18,0,0,85,10,18,0,1,19,0,0,109,10,4,19,1,18,0,0,109,10,8,18,1,19,0,0,109,10,12,19,1,18,0,0,109,10,16,18,1,19,0,0,109,10,20,19,1,18,0,0,109,10,24,18,1,19,0,0,109,10,28,19,78,14,1,0,41,19,14,24,42,19,19,24,120,19,3,0,1,2,0,0,119,0,63,0,102,19,1,1,120,19,12,0,0,4,0,0,78,19,4,0,41,18,14,24,42,18,18,24,45,19,19,18,120,210,2,0,25,4,4,1,119,0,250,255,119,0,1,0,4,2,4,0,119,0,50,0,0,3,1,0,0,8,14,0,19,19,8,17,0,7,19,0,43,19,7,5,41,19,19,2,3,9,10,19,82,19,9,0,1,18,1,0,38,20,7,31,22,18,18,20,20,19,19,18,85,9,19,0,25,3,3,1,78,8,3,0,41,19,8,24,42,19,19,24,33,19,19,0,120,19,240,255,78,11,0,0,41,19,11,24,42,19,19,24,120,19,3,0,0,5,0,0,119,0,24,0,0,6,0,0,0,13,11,0,19,19,13,17,0,12,19,0,43,19,12,5,41,19,19,2,94,19,10,19,1,18,1,0,38,20,12,31,22,18,18,20,19,19,19,18,120,19,3,0,0,5,6,0,119,0,10,0,25,15,6,1,78,13,15,0,41,19,13,24,42,19,19,24,120,19,3,0,0,5,15,0,119,0,3,0,0,6,15,0,119,0,236,255,4,2,5,0,137,16,0,0,139,2,0,0,140,6,31,0,0,0,0,0,136,23,0,0,0,21,23,0,136,23,0,0,1,24,32,5,3,23,23,24,137,23,0,0,130,23,0,0,136,24,0,0,49,23,23,24,140,211,2,0,1,24,32,5,135,23,208,2,24,0,0,0,1,23,29,5,3,17,21,23,1,23,24,5,3,18,21,23,1,23,20,5,3,19,21,23,1,23,16,5,3,20,21,23,1,23,12,5,3,7,21,23,1,23,8,5,3,8,21,23,1,23,28,5,3,9,21,23,1,23,4,5,3,10,21,23,0,11,21,0,85,18,0,0,85,19,1,0,85,20,2,0,85,7,3,0,85,8,4,0,38,23,5,1,83,9,23,0,1,23,0,0,120,23,8,0,1,23,0,0,83,17,23,0,78,6,17,0,38,23,6,1,0,16,23,0,137,21,0,0,139,16,0,0,1,23,0,0,85,10,23,0,78,23,9,0,38,23,23,1,0,22,23,0,121,22,4,0,1,25,0,0,0,24,25,0,119,0,3,0,82,25,10,0,0,24,25,0,82,25,18,0,82,26,19,0,82,27,20,0,82,28,8,0,134,23,0,0,212,165,2,0,24,25,26,27,28,22,11,0,82,12,10,0,82,13,18,0,82,14,19,0,82,15,20,0,78,23,9,0,38,23,23,1,121,23,7,0,1,28,0,0,134,23,0,0,236,71,1,0,12,13,28,14,15,11,0,0,119,0,6,0,1,28,0,0,134,23,0,0,176,123,2,0,12,13,28,14,15,11,0,0,1,28,0,0,1,27,0,0,1,26,0,0,1,25,0,0,82,24,19,0,82,29,20,0,82,30,7,0,134,23,0,0,248,9,2,0,28,27,26,25,24,29,30,11,1,23,1,0,83,17,23,0,78,6,17,0,38,23,6,1,0,16,23,0,137,21,0,0,139,16,0,0,140,2,10,0,0,0,0,0,136,7,0,0,0,4,7,0,136,7,0,0,25,7,7,64,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,36,213,2,0,1,8,64,0,135,7,208,2,8,0,0,0,0,2,4,0,0,3,2,0,25,6,3,64,1,7,0,0,85,3,7,0,25,3,3,4,54,7,3,6,48,213,2,0,88,7,1,0,145,7,7,0,89,2,7,0,112,8,1,16,145,8,8,0,113,2,4,8,112,7,1,32,145,7,7,0,113,2,8,7,112,8,1,48,145,8,8,0,113,2,12,8,112,7,1,4,145,7,7,0,113,2,16,7,112,8,1,20,145,8,8,0,113,2,20,8,112,7,1,36,145,7,7,0,113,2,24,7,112,8,1,52,145,8,8,0,113,2,28,8,112,7,1,8,145,7,7,0,113,2,32,7,112,8,1,24,145,8,8,0,113,2,36,8,112,7,1,40,145,7,7,0,113,2,40,7,112,8,1,56,145,8,8,0,113,2,44,8,112,7,1,12,145,7,7,0,113,2,48,7,112,8,1,28,145,8,8,0,113,2,52,8,112,7,1,44,145,7,7,0,113,2,56,7,112,8,1,60,145,8,8,0,113,2,60,8,0,3,0,0,0,5,2,0,25,6,3,64,116,3,5,0,25,3,3,4,25,5,5,4,54,8,3,6,16,214,2,0,137,4,0,0,139,0,0,0,140,3,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,32,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,104,214,2,0,1,12,32,0,135,11,208,2,12,0,0,0,25,3,10,20,25,4,10,16,25,5,10,12,25,6,10,8,25,7,10,4,0,8,10,0,85,3,0,0,85,4,1,0,85,5,2,0,1,11,0,0,85,6,11,0,116,7,4,0,1,11,0,0,85,8,11,0,82,11,5,0,82,12,8,0,56,11,11,12,136,215,2,0,82,11,3,0,79,11,11,0,82,12,4,0,79,12,12,0,46,11,11,12,208,214,2,0,1,9,6,0,119,0,16,0,82,11,3,0,103,11,11,1,82,12,4,0,103,12,12,1,46,11,11,12,240,214,2,0,1,9,6,0,119,0,8,0,82,11,3,0,103,11,11,2,82,12,4,0,103,12,12,2,46,11,11,12,12,215,2,0,1,9,6,0,32,11,9,6,121,11,20,0,1,9,0,0,82,11,7,0,82,12,4,0,78,12,12,0,83,11,12,0,82,12,7,0,82,11,4,0,102,11,11,1,107,12,1,11,82,11,7,0,82,12,4,0,102,12,12,2,107,11,2,12,82,12,6,0,25,12,12,1,85,6,12,0,82,12,7,0,25,12,12,4,85,7,12,0,82,12,3,0,25,12,12,4,85,3,12,0,82,12,4,0,25,12,12,4,85,4,12,0,82,12,8,0,25,12,12,1,85,8,12,0,119,0,199,255,137,10,0,0,82,12,6,0,139,12,0,0,140,2,25,0,0,0,0,0,2,19,0,0,128,128,128,128,2,20,0,0,255,254,254,254,2,21,0,0,255,0,0,0,19,22,1,21,0,12,22,0,120,12,5,0,135,22,0,0,0,0,0,0,3,2,0,22,119,0,92,0,38,22,0,3,120,22,3,0,0,5,0,0,119,0,28,0,19,22,1,21,0,18,22,0,0,6,0,0,78,8,6,0,41,23,8,24,42,23,23,24,32,23,23,0,121,23,4,0,1,23,1,0,0,22,23,0,119,0,7,0,41,23,8,24,42,23,23,24,41,24,18,24,42,24,24,24,13,23,23,24,0,22,23,0,121,22,3,0,0,2,6,0,119,0,68,0,25,9,6,1,38,22,9,3,120,22,3,0,0,5,9,0,119,0,3,0,0,6,9,0,119,0,233,255,2,22,0,0,1,1,1,1,5,10,12,22,82,11,5,0,19,22,11,19,21,22,22,19,2,23,0,0,1,1,1,1,4,23,11,23,19,22,22,23,120,22,27,0,0,4,5,0,0,14,11,0,21,22,14,10,0,13,22,0,19,22,13,19,21,22,22,19,2,23,0,0,1,1,1,1,4,23,13,23,19,22,22,23,121,22,3,0,0,3,4,0,119,0,15,0,25,15,4,4,82,14,15,0,19,22,14,19,21,22,22,19,2,23,0,0,1,1,1,1,4,23,14,23,19,22,22,23,121,22,3,0,0,3,15,0,119,0,4,0,0,4,15,0,119,0,233,255,0,3,5,0,19,22,1,21,0,16,22,0,0,7,3,0,78,17,7,0,41,23,17,24,42,23,23,24,32,23,23,0,121,23,4,0,1,23,1,0,0,22,23,0,119,0,7,0,41,23,17,24,42,23,23,24,41,24,16,24,42,24,24,24,13,23,23,24,0,22,23,0,121,22,3,0,0,2,7,0,119,0,3,0,25,7,7,1,119,0,238,255,139,2,0,0,140,2,21,0,0,0,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,120,217,2,0,1,12,16,0,135,11,208,2,12,0,0,0,25,5,10,8,25,8,10,4,89,8,0,0,89,10,1,0,88,12,8,0,145,12,12,0,135,11,21,3,12,0,0,0,145,11,11,0,89,8,11,0,88,11,8,0,145,11,11,0,59,12,1,0,145,12,12,0,71,2,11,12,88,3,8,0,145,3,3,0,121,2,31,0,88,12,8,0,145,12,12,0,65,4,3,12,145,4,4,0,88,16,8,0,145,16,16,0,59,17,21,0,145,17,17,0,65,15,16,17,145,15,15,0,59,17,36,0,145,17,17,0,64,14,15,17,145,14,14,0,65,13,4,14,145,13,13,0,59,14,16,0,145,14,14,0,63,11,13,14,145,11,11,0,59,14,18,0,145,14,14,0,66,12,11,14,145,12,12,0,89,5,12,0,88,9,5,0,145,9,9,0,137,10,0,0,145,12,9,0,139,12,0,0,59,12,2,0,145,12,12,0,71,12,3,12,121,12,38,0,88,6,8,0,145,6,6,0,88,7,8,0,145,7,7,0,59,16,36,0,145,16,16,0,88,19,8,0,145,19,19,0,59,20,7,0,145,20,20,0,65,18,19,20,145,18,18,0,64,15,16,18,145,15,15,0,65,17,7,15,145,17,17,0,59,15,196,255,145,15,15,0,63,13,17,15,145,13,13,0,65,11,6,13,145,11,11,0,59,13,32,0,145,13,13,0,63,14,11,13,145,14,14,0,59,13,18,0,145,13,13,0,66,12,14,13,145,12,12,0,89,5,12,0,88,9,5,0,145,9,9,0,137,10,0,0,145,12,9,0,139,12,0,0,119,0,9,0,59,12,0,0,145,12,12,0,89,5,12,0,88,9,5,0,145,9,9,0,137,10,0,0,145,12,9,0,139,12,0,0,59,12,0,0,145,12,12,0,139,12,0,0,140,4,24,0,0,0,0,0,1,21,0,0,5,18,2,1,32,22,1,0,1,23,0,0,125,20,22,23,2,0,0,0,1,23,255,255,106,22,3,76,47,23,23,22,72,219,2,0,134,17,0,0,16,186,3,0,3,0,0,0,119,0,2,0,1,17,0,0,25,10,3,74,78,11,10,0,1,23,255,0,3,23,11,23,20,23,23,11,83,10,23,0,25,12,3,4,82,13,12,0,106,23,3,8,4,14,23,13,1,23,0,0,47,23,23,14,172,219,2,0,16,23,14,18,125,4,23,14,18,0,0,0,135,23,210,2,0,13,4,0,82,23,12,0,3,23,23,4,85,12,23,0,4,6,18,4,3,7,0,4,119,0,3,0,0,6,18,0,0,7,0,0,120,6,3,0,1,21,13,0,119,0,28,0,25,15,3,32,0,8,7,0,0,9,6,0,134,23,0,0,80,105,3,0,3,0,0,0,120,23,15,0,82,23,15,0,38,23,23,15,135,16,36,3,23,3,8,9,25,23,16,1,35,23,23,2,120,23,8,0,4,19,9,16,120,19,3,0,1,21,13,0,119,0,10,0,3,8,8,16,0,9,19,0,119,0,239,255,121,17,4,0,134,23,0,0,4,186,3,0,3,0,0,0,4,23,18,9,7,5,23,1,32,23,21,13,121,23,8,0,120,17,3,0,0,5,20,0,119,0,5,0,134,23,0,0,4,186,3,0,3,0,0,0,0,5,20,0,139,5,0,0,140,2,19,0,0,0,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,140,220,2,0,1,12,16,0,135,11,208,2,12,0,0,0,25,5,10,8,25,8,10,4,89,8,0,0,89,10,1,0,88,12,8,0,145,12,12,0,135,11,21,3,12,0,0,0,145,11,11,0,89,8,11,0,88,11,8,0,145,11,11,0,59,12,1,0,145,12,12,0,71,2,11,12,88,3,8,0,145,3,3,0,121,2,31,0,88,12,8,0,145,12,12,0,65,4,3,12,145,4,4,0,88,16,8,0,145,16,16,0,59,17,3,0,145,17,17,0,65,15,16,17,145,15,15,0,59,17,6,0,145,17,17,0,64,14,15,17,145,14,14,0,65,13,4,14,145,13,13,0,59,14,4,0,145,14,14,0,63,11,13,14,145,11,11,0,59,14,6,0,145,14,14,0,66,12,11,14,145,12,12,0,89,5,12,0,88,9,5,0,145,9,9,0,137,10,0,0,145,12,9,0,139,12,0,0,59,12,2,0,145,12,12,0,71,12,3,12,121,12,34,0,88,6,8,0,145,6,6,0,88,7,8,0,145,7,7,0,59,16,6,0,145,16,16,0,88,18,8,0,145,18,18,0,64,15,16,18,145,15,15,0,65,17,7,15,145,17,17,0,59,15,244,255,145,15,15,0,63,13,17,15,145,13,13,0,65,11,6,13,145,11,11,0,59,13,8,0,145,13,13,0,63,14,11,13,145,14,14,0,59,13,6,0,145,13,13,0,66,12,14,13,145,12,12,0,89,5,12,0,88,9,5,0,145,9,9,0,137,10,0,0,145,12,9,0,139,12,0,0,119,0,9,0,59,12,0,0,145,12,12,0,89,5,12,0,88,9,5,0,145,9,9,0,137,10,0,0,145,12,9,0,139,12,0,0,59,12,0,0,145,12,12,0,139,12,0,0,140,2,20,0,0,0,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,68,222,2,0,1,12,16,0,135,11,208,2,12,0,0,0,25,5,10,8,25,9,10,4,89,9,0,0,89,10,1,0,88,12,9,0,145,12,12,0,135,11,21,3,12,0,0,0,145,11,11,0,89,9,11,0,88,11,9,0,145,11,11,0,59,12,1,0,145,12,12,0,71,2,11,12,88,3,9,0,145,3,3,0,121,2,29,0,88,12,9,0,145,12,12,0,65,4,3,12,145,4,4,0,59,11,1,0,145,11,11,0,61,15,0,0,0,0,32,64,145,15,15,0,88,17,9,0,145,17,17,0,61,18,0,0,0,0,192,63,145,18,18,0,65,16,17,18,145,16,16,0,64,14,15,16,145,14,14,0,65,13,4,14,145,13,13,0,64,12,11,13,145,12,12,0,89,5,12,0,88,8,5,0,145,8,8,0,137,10,0,0,145,12,8,0,139,12,0,0,59,12,2,0,145,12,12,0,71,12,3,12,121,12,36,0,88,6,9,0,145,6,6,0,88,7,9,0,145,7,7,0,59,13,2,0,145,13,13,0,88,17,9,0,145,17,17,0,61,19,0,0,0,0,0,63,145,19,19,0,65,18,17,19,145,18,18,0,61,19,0,0,0,0,32,64,145,19,19,0,64,15,18,19,145,15,15,0,65,16,7,15,145,16,16,0,59,15,4,0,145,15,15,0,63,14,16,15,145,14,14,0,65,11,6,14,145,11,11,0,64,12,13,11,145,12,12,0,89,5,12,0,88,8,5,0,145,8,8,0,137,10,0,0,145,12,8,0,139,12,0,0,119,0,9,0,59,12,0,0,145,12,12,0,89,5,12,0,88,8,5,0,145,8,8,0,137,10,0,0,145,12,8,0,139,12,0,0,59,12,0,0,145,12,12,0,139,12,0,0,140,3,20,0,0,0,0,0,1,17,0,0,25,13,2,16,82,15,13,0,120,15,10,0,134,18,0,0,16,136,3,0,2,0,0,0,120,18,4,0,82,9,13,0,1,17,5,0,119,0,5,0,1,4,0,0,119,0,3,0,0,9,15,0,1,17,5,0,32,18,17,5,121,18,53,0,25,16,2,20,82,8,16,0,0,10,8,0,4,18,9,8,48,18,18,1,60,224,2,0,106,18,2,36,38,18,18,15,135,4,36,3,18,2,0,1,119,0,42,0,102,18,2,75,34,18,18,0,32,19,1,0,20,18,18,19,121,18,6,0,1,5,0,0,0,6,0,0,0,7,1,0,0,14,10,0,119,0,26,0,0,3,1,0,26,11,3,1,90,18,0,11,32,18,18,10,120,18,9,0,120,11,6,0,1,5,0,0,0,6,0,0,0,7,1,0,0,14,10,0,119,0,15,0,0,3,11,0,119,0,245,255,106,18,2,36,38,18,18,15,135,12,36,3,18,2,0,3,48,18,12,3,184,224,2,0,0,4,12,0,119,0,11,0,0,5,3,0,3,6,0,3,4,7,1,3,82,14,16,0,135,18,210,2,14,6,7,0,82,18,16,0,3,18,18,7,85,16,18,0,3,4,5,7,139,4,0,0,140,4,21,0,0,0,0,0,136,18,0,0,0,15,18,0,136,18,0,0,1,19,144,0,3,18,18,19,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,32,225,2,0,1,19,144,0,135,18,208,2,19,0,0,0,25,4,15,80,25,10,15,72,25,11,15,68,25,12,15,8,0,13,15,0,109,15,76,0,85,10,1,0,85,11,2,0,109,15,64,3,2,18,0,0,183,164,0,0,82,19,10,0,82,20,11,0,95,18,19,20,1,19,0,0,134,20,0,0,224,137,3,0,19,0,0,0,121,20,4,0,1,20,1,0,85,12,20,0,119,0,8,0,1,19,0,0,134,20,0,0,4,139,3,0,19,0,0,0,121,20,3,0,1,20,0,0,85,12,20,0,1,19,0,0,109,12,8,19,1,20,1,0,109,12,4,20,25,5,12,24,134,20,0,0,132,169,3,0,13,0,0,0,116,5,13,0,106,19,13,4,109,5,4,19,134,6,0,0,208,185,3,0,76,19,6,0,145,6,19,0,25,7,12,24,88,20,7,0,145,20,20,0,66,19,20,6,145,19,19,0,89,7,19,0,134,8,0,0,172,185,3,0,76,19,8,0,145,8,19,0,25,19,12,24,25,9,19,4,88,20,9,0,145,20,20,0,66,19,20,8,145,19,19,0,89,9,19,0,0,14,4,0,0,16,12,0,25,17,14,56,116,14,16,0,25,14,14,4,25,16,16,4,54,19,14,17,32,226,2,0,134,19,0,0,40,137,1,0,4,0,0,0,137,15,0,0,139,0,0,0,140,3,21,0,0,0,0,0,136,19,0,0,0,15,19,0,136,19,0,0,1,20,16,1,3,19,19,20,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,132,226,2,0,1,20,16,1,135,19,208,2,20,0,0,0,1,19,208,0,3,4,15,19,1,19,144,0,3,3,15,19,1,19,136,0,3,7,15,19,1,19,132,0,3,8,15,19,1,19,128,0,3,9,15,19,25,10,15,64,0,11,15,0,89,7,0,0,89,8,1,0,89,9,2,0,88,12,7,0,145,12,12,0,88,13,8,0,145,13,13,0,88,20,9,0,145,20,20,0,134,19,0,0,192,233,2,0,10,12,13,20,2,19,0,0,196,157,0,0,82,18,19,0,0,5,18,0,0,6,18,0,0,14,3,0,0,16,10,0,25,17,14,64,116,14,16,0,25,14,14,4,25,16,16,4,54,19,14,17,4,227,2,0,0,14,4,0,0,16,6,0,25,17,14,64,116,14,16,0,25,14,14,4,25,16,16,4,54,19,14,17,36,227,2,0,134,19,0,0,80,81,1,0,11,3,4,0,0,14,5,0,0,16,11,0,25,17,14,64,116,14,16,0,25,14,14,4,25,16,16,4,54,19,14,17,80,227,2,0,137,15,0,0,139,0,0,0,140,5,22,0,0,0,0,0,136,19,0,0,0,18,19,0,136,19,0,0,25,19,19,32,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,164,227,2,0,1,20,32,0,135,19,208,2,20,0,0,0,25,13,18,16,25,14,18,12,25,15,18,8,25,16,18,4,0,17,18,0,85,13,0,0,85,14,1,0,85,15,2,0,85,16,3,0,85,17,4,0,82,20,13,0,82,21,14,0,134,19,0,0,136,113,3,0,20,21,0,0,120,19,6,0,1,12,0,0,38,19,12,1,0,11,19,0,137,18,0,0,139,11,0,0,82,19,13,0,82,21,14,0,5,5,19,21,82,19,15,0,134,21,0,0,136,113,3,0,5,19,0,0,120,21,6,0,1,12,0,0,38,21,12,1,0,11,21,0,137,18,0,0,139,11,0,0,82,21,13,0,82,19,14,0,5,6,21,19,82,19,15,0,5,7,6,19,82,21,16,0,134,19,0,0,136,113,3,0,7,21,0,0,120,19,6,0,1,12,0,0,38,19,12,1,0,11,19,0,137,18,0,0,139,11,0,0,82,19,13,0,82,21,14,0,5,8,19,21,82,21,15,0,5,9,8,21,82,21,16,0,5,10,9,21,82,19,17,0,134,21,0,0,84,116,3,0,10,19,0,0,33,12,21,0,38,21,12,1,0,11,21,0,137,18,0,0,139,11,0,0,140,1,20,0,0,0,0,0,1,17,0,0,25,4,0,104,82,8,4,0,120,8,3,0,1,17,3,0,119,0,7,0,106,18,0,108,47,18,18,8,220,228,2,0,1,17,3,0,119,0,2,0,1,17,4,0,32,18,17,3,121,18,52,0,134,16,0,0,168,153,3,0,0,0,0,0,34,18,16,0,121,18,3,0,1,17,4,0,119,0,45,0,82,5,4,0,106,3,0,8,120,5,4,0,0,15,3,0,1,17,9,0,119,0,15,0,106,6,0,4,106,18,0,108,4,7,5,18,0,9,3,0,4,18,3,6,47,18,18,7,68,229,2,0,0,15,9,0,1,17,9,0,119,0,5,0,26,19,7,1,3,19,6,19,109,0,100,19,0,10,9,0,32,19,17,9,121,19,3,0,109,0,100,3,0,10,15,0,25,2,0,4,120,10,3,0,82,14,2,0,119,0,9,0,82,11,2,0,25,12,0,108,25,19,10,1,4,19,19,11,82,18,12,0,3,19,19,18,85,12,19,0,0,14,11,0,26,13,14,1,79,19,13,0,45,19,16,19,172,229,2,0,0,1,16,0,119,0,3,0,83,13,16,0,0,1,16,0,32,19,17,4,121,19,4,0,1,18,0,0,109,0,100,18,1,1,255,255,139,1,0,0,140,2,21,0,0,0,0,0,2,17,0,0,255,0,0,0,1,15,0,0,136,18,0,0,0,16,18,0,136,18,0,0,25,18,18,32,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,16,230,2,0,1,19,32,0,135,18,208,2,19,0,0,0,0,9,16,0,78,13,1,0,41,18,13,24,42,18,18,24,120,18,3,0,1,15,3,0,119,0,61,0,102,18,1,1,120,18,3,0,1,15,3,0,119,0,57,0,1,19,0,0,1,20,32,0,135,18,213,2,9,19,20,0,78,5,1,0,41,18,5,24,42,18,18,24,121,18,20,0,0,2,1,0,0,7,5,0,19,18,7,17,0,6,18,0,43,18,6,5,41,18,18,2,3,8,9,18,82,18,8,0,1,20,1,0,38,19,6,31,22,20,20,19,20,18,18,20,85,8,18,0,25,2,2,1,78,7,2,0,41,18,7,24,42,18,18,24,33,18,18,0,120,18,240,255,78,10,0,0,41,18,10,24,42,18,18,24,120,18,3,0,0,3,0,0,119,0,24,0,0,4,0,0,0,12,10,0,19,18,12,17,0,11,18,0,43,18,11,5,41,18,18,2,94,18,9,18,1,20,1,0,38,19,11,31,22,20,20,19,19,18,18,20,121,18,3,0,0,3,4,0,119,0,10,0,25,14,4,1,78,12,14,0,41,18,12,24,42,18,18,24,120,18,3,0,0,3,14,0,119,0,3,0,0,4,14,0,119,0,236,255,32,18,15,3,121,18,6,0,41,18,13,24,42,18,18,24,134,3,0,0,148,215,2,0,0,18,0,0,137,16,0,0,4,18,3,0,139,18,0,0,140,2,15,0,0,0,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,32,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,124,231,2,0,1,13,32,0,135,12,208,2,13,0,0,0,25,2,11,20,25,8,11,8,25,9,11,4,0,10,11,0,116,8,1,0,106,13,1,4,109,8,4,13,106,12,1,8,109,8,8,12,116,2,1,0,106,13,1,4,109,2,4,13,106,12,1,8,109,2,8,12,134,12,0,0,152,104,3,0,2,0,0,0,145,12,12,0,89,9,12,0,88,12,9,0,145,12,12,0,59,13,0,0,145,13,13,0,69,12,12,13,121,12,4,0,59,12,1,0,145,12,12,0,89,9,12,0,59,13,1,0,145,13,13,0,88,14,9,0,145,14,14,0,66,12,13,14,145,12,12,0,89,10,12,0,88,3,10,0,145,3,3,0,88,14,8,0,145,14,14,0,65,12,14,3,145,12,12,0,89,8,12,0,88,4,10,0,145,4,4,0,25,5,8,4,88,14,5,0,145,14,14,0,65,12,14,4,145,12,12,0,89,5,12,0,88,6,10,0,145,6,6,0,25,7,8,8,88,14,7,0,145,14,14,0,65,12,14,6,145,12,12,0,89,7,12,0,116,0,8,0,106,14,8,4,109,0,4,14,106,12,8,8,109,0,8,12,137,11,0,0,139,0,0,0,140,5,20,0,0,0,0,0,136,15,0,0,0,14,15,0,136,15,0,0,1,16,16,16,3,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,188,232,2,0,1,16,16,16,135,15,208,2,16,0,0,0,1,15,4,16,3,9,14,15,1,15,0,16,3,10,14,15,1,15,252,15,3,11,14,15,1,15,248,15,3,12,14,15,1,15,244,15,3,13,14,15,1,15,240,15,3,5,14,15,25,6,14,8,0,7,14,0,85,10,0,0,85,11,1,0,85,12,2,0,85,13,3,0,85,5,4,0,82,16,12,0,134,15,0,0,128,163,3,0,16,0,0,0,85,7,15,0,82,15,7,0,120,15,6,0,1,15,0,0,85,9,15,0,82,8,9,0,137,14,0,0,139,8,0,0,116,6,10,0,82,16,10,0,82,17,11,0,3,16,16,17,109,6,4,16,82,15,7,0,82,17,12,0,1,18,1,0,82,19,5,0,134,16,0,0,20,42,3,0,6,15,17,18,19,0,0,0,120,16,9,0,106,19,6,20,135,16,214,2,19,0,0,0,1,16,0,0,85,9,16,0,82,8,9,0,137,14,0,0,139,8,0,0,82,16,13,0,121,16,6,0,82,16,13,0,106,19,6,16,106,18,6,20,4,19,19,18,85,16,19,0,25,19,6,20,116,9,19,0,82,8,9,0,137,14,0,0,139,8,0,0,140,4,14,0,0,0,0,0,136,12,0,0,0,9,12,0,136,12,0,0,25,12,12,80,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,248,233,2,0,1,13,80,0,135,12,208,2,13,0,0,0,25,4,9,72,25,5,9,68,25,6,9,64,0,7,9,0,89,4,1,0,89,5,2,0,89,6,3,0,59,12,1,0,145,12,12,0,89,7,12,0,59,13,0,0,145,13,13,0,113,7,4,13,59,12,0,0,145,12,12,0,113,7,8,12,88,13,4,0,145,13,13,0,113,7,12,13,59,12,0,0,145,12,12,0,113,7,16,12,59,13,1,0,145,13,13,0,113,7,20,13,59,12,0,0,145,12,12,0,113,7,24,12,88,13,5,0,145,13,13,0,113,7,28,13,59,12,0,0,145,12,12,0,113,7,32,12,59,13,0,0,145,13,13,0,113,7,36,13,59,12,1,0,145,12,12,0,113,7,40,12,88,13,6,0,145,13,13,0,113,7,44,13,59,12,0,0,145,12,12,0,113,7,48,12,59,13,0,0,145,13,13,0,113,7,52,13,59,12,0,0,145,12,12,0,113,7,56,12,59,13,1,0,145,13,13,0,113,7,60,13,0,8,0,0,0,10,7,0,25,11,8,64,116,8,10,0,25,8,8,4,25,10,10,4,54,13,8,11,224,234,2,0,137,9,0,0,139,0,0,0,140,4,20,0,0,0,0,0,136,17,0,0,0,16,17,0,136,17,0,0,25,17,17,32,137,17,0,0,130,17,0,0,136,18,0,0,49,17,17,18,52,235,2,0,1,18,32,0,135,17,208,2,18,0,0,0,25,9,16,28,25,11,16,24,25,12,16,20,25,13,16,16,25,14,16,12,25,15,16,8,25,4,16,4,0,5,16,0,85,11,0,0,85,12,1,0,85,13,2,0,85,14,3,0,82,17,12,0,82,18,13,0,5,6,17,18,82,17,14,0,5,18,6,17,85,4,18,0,82,17,4,0,134,18,0,0,128,163,3,0,17,0,0,0,85,5,18,0,82,18,5,0,120,18,14,0,1,17,203,54,134,18,0,0,176,165,3,0,17,0,0,0,33,7,18,0,1,17,0,0,1,19,0,0,125,18,7,17,19,0,0,0,85,9,18,0,82,10,9,0,137,16,0,0,139,10,0,0,1,18,0,0,85,15,18,0,82,8,11,0,82,18,4,0,82,19,15,0,56,18,18,19,20,236,2,0,82,18,5,0,82,19,15,0,82,17,15,0,41,17,17,1,93,17,8,17,42,17,17,8,95,18,19,17,82,17,15,0,25,17,17,1,85,15,17,0,119,0,241,255,135,17,214,2,8,0,0,0,116,9,5,0,82,10,9,0,137,16,0,0,139,10,0,0,140,3,16,0,0,0,0,0,136,13,0,0,0,12,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,100,236,2,0,1,14,32,0,135,13,208,2,14,0,0,0,25,4,12,28,25,5,12,24,25,7,12,20,25,8,12,16,25,9,12,12,25,10,12,8,25,11,12,4,0,3,12,0,85,5,0,0,85,7,1,0,85,8,2,0,82,13,5,0,82,14,7,0,3,13,13,14,82,14,8,0,4,13,13,14,85,9,13,0,82,14,9,0,82,15,5,0,4,14,14,15,135,13,54,3,14,0,0,0,85,10,13,0,82,14,9,0,82,15,7,0,4,14,14,15,135,13,54,3,14,0,0,0,85,11,13,0,82,14,9,0,82,15,8,0,4,14,14,15,135,13,54,3,14,0,0,0,85,3,13,0,82,13,10,0,82,14,11,0,49,13,13,14,32,237,2,0,82,13,10,0,82,14,3,0,49,13,13,14,32,237,2,0,116,4,5,0,82,6,4,0,137,12,0,0,139,6,0,0,82,13,11,0,82,14,3,0,49,13,13,14,68,237,2,0,116,4,7,0,82,6,4,0,137,12,0,0,139,6,0,0,119,0,5,0,116,4,8,0,82,6,4,0,137,12,0,0,139,6,0,0,1,13,0,0,139,13,0,0,140,3,13,0,0,0,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,32,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,148,237,2,0,1,11,32,0,135,10,208,2,11,0,0,0,25,4,9,16,25,5,9,12,25,6,9,8,25,7,9,4,0,8,9,0,85,4,0,0,85,5,1,0,85,6,2,0,1,10,0,0,85,7,10,0,1,10,0,0,85,8,10,0,82,10,6,0,1,11,1,0,1,12,21,0,138,10,11,12,44,238,2,0,56,238,2,0,68,238,2,0,72,238,2,0,84,238,2,0,88,238,2,0,92,238,2,0,104,238,2,0,116,238,2,0,128,238,2,0,140,238,2,0,152,238,2,0,156,238,2,0,168,238,2,0,172,238,2,0,176,238,2,0,180,238,2,0,184,238,2,0,188,238,2,0,192,238,2,0,196,238,2,0,119,0,42,0,1,11,8,0,85,8,11,0,119,0,39,0,1,11,16,0,85,8,11,0,119,0,36,0,119,0,253,255,1,11,24,0,85,8,11,0,119,0,32,0,119,0,249,255,119,0,248,255,1,11,32,0,85,8,11,0,119,0,27,0,1,11,32,0,85,8,11,0,119,0,24,0,1,11,96,0,85,8,11,0,119,0,21,0,1,11,128,0,85,8,11,0,119,0,18,0,1,11,4,0,85,8,11,0,119,0,15,0,119,0,253,255,1,11,8,0,85,8,11,0,119,0,11,0,119,0,253,255,119,0,248,255,119,0,247,255,119,0,250,255,119,0,245,255,119,0,244,255,119,0,247,255,1,11,2,0,85,8,11,0,119,0,1,0,82,10,4,0,82,11,5,0,5,3,10,11,82,10,8,0,5,11,3,10,28,11,11,8,85,7,11,0,137,9,0,0,82,11,7,0,139,11,0,0,140,5,19,0,0,0,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,48,239,2,0,1,14,32,0,135,13,208,2,14,0,0,0,25,6,11,20,25,7,11,16,25,8,11,12,25,9,11,8,25,10,11,4,0,5,11,0,85,6,0,0,85,7,1,0,85,8,2,0,85,9,3,0,85,10,4,0,82,13,8,0,26,13,13,1,82,14,7,0,49,13,13,14,120,239,2,0,137,11,0,0,139,0,0,0,82,12,7,0,82,13,8,0,4,13,13,12,28,13,13,2,3,13,12,13,85,5,13,0,82,14,6,0,82,15,7,0,82,16,8,0,82,17,9,0,82,18,5,0,134,13,0,0,84,181,2,0,14,15,16,17,18,0,0,0,85,5,13,0,82,13,10,0,82,18,5,0,47,13,13,18,236,239,2,0,82,18,6,0,82,17,7,0,82,16,5,0,82,15,9,0,82,14,10,0,134,13,0,0,248,238,2,0,18,17,16,15,14,0,0,0,82,13,10,0,82,14,5,0,49,13,13,14,4,240,2,0,137,11,0,0,139,0,0,0,82,14,6,0,82,15,5,0,25,15,15,1,82,16,8,0,82,17,9,0,82,18,10,0,134,13,0,0,248,238,2,0,14,15,16,17,18,0,0,0,137,11,0,0,139,0,0,0,140,2,17,0,0,0,0,0,2,10,0,0,176,0,0,0,2,11,0,0,168,0,0,0,136,12,0,0,0,7,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,124,240,2,0,1,13,16,0,135,12,208,2,13,0,0,0,25,3,7,12,25,4,7,8,25,5,7,4,0,6,7,0,85,3,0,0,85,4,1,0,82,12,3,0,1,13,172,0,82,14,4,0,97,12,13,14,82,14,3,0,3,2,14,10,82,14,3,0,94,14,14,10,34,14,14,0,121,14,9,0,1,14,0,0,85,2,14,0,1,14,0,0,85,5,14,0,82,14,3,0,82,13,4,0,97,14,11,13,119,0,23,0,82,9,3,0,82,13,2,0,1,14,172,0,94,14,9,14,94,12,9,11,4,14,14,12,3,13,13,14,1,14,164,0,94,14,9,14,8,13,13,14,85,5,13,0,82,13,5,0,82,14,3,0,94,14,14,10,53,13,13,14,52,241,2,0,1,14,240,62,1,12,138,59,1,15,149,5,1,16,41,63,135,13,209,2,14,12,15,16,82,8,3,0,1,16,180,0,94,16,8,16,82,15,5,0,1,12,160,0,94,12,8,12,29,12,12,4,134,13,0,0,160,135,3,0,16,15,12,0,85,6,13,0,82,12,6,0,1,15,0,0,82,16,3,0,1,14,160,0,94,16,16,14,135,13,213,2,12,15,16,0,137,7,0,0,82,13,6,0,139,13,0,0,140,3,19,0,0,0,0,0,136,17,0,0,0,14,17,0,136,17,0,0,1,18,144,0,3,17,17,18,137,17,0,0,130,17,0,0,136,18,0,0,49,17,17,18,196,241,2,0,1,18,144,0,135,17,208,2,18,0,0,0,25,3,14,88,25,9,14,8,0,10,14,0,25,11,14,24,25,12,14,16,109,14,80,0,87,9,1,0,87,10,2,0,1,17,2,0,85,11,17,0,1,18,0,0,109,11,8,18,1,17,1,0,109,11,4,17,25,4,11,24,86,17,9,0,145,17,17,0,89,12,17,0,86,18,10,0,145,18,18,0,113,12,4,18,116,4,12,0,106,17,12,4,109,4,4,17,134,5,0,0,208,185,3,0,76,17,5,0,145,5,17,0,25,6,11,24,88,18,6,0,145,18,18,0,66,17,18,5,145,17,17,0,89,6,17,0,134,7,0,0,172,185,3,0,76,17,7,0,145,7,17,0,25,17,11,24,25,8,17,4,88,18,8,0,145,18,18,0,66,17,18,7,145,17,17,0,89,8,17,0,0,13,3,0,0,15,11,0,25,16,13,56,116,13,15,0,25,13,13,4,25,15,15,4,54,17,13,16,132,242,2,0,134,17,0,0,40,137,1,0,3,0,0,0,137,14,0,0,139,0,0,0,140,3,18,0,0,0,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,32,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,228,242,2,0,1,17,32,0,135,16,208,2,17,0,0,0,25,14,15,16,0,10,15,0,85,10,1,0,25,11,10,4,25,12,0,48,82,13,12,0,33,16,13,0,38,16,16,1,4,16,2,16,85,11,16,0,25,5,0,44,82,17,5,0,109,10,8,17,109,10,12,13,25,17,0,60,116,14,17,0,109,14,4,10,1,16,2,0,109,14,8,16,1,17,145,0,135,16,55,3,17,14,0,0,134,6,0,0,116,171,3,0,16,0,0,0,34,16,6,1,121,16,8,0,82,16,0,0,38,17,6,48,40,17,17,16,20,16,16,17,85,0,16,0,0,3,6,0,119,0,23,0,82,7,11,0,48,16,7,6,192,243,2,0,82,8,5,0,25,9,0,4,85,9,8,0,0,4,8,0,4,17,6,7,3,17,4,17,109,0,8,17,82,17,12,0,120,17,3,0,0,3,2,0,119,0,9,0,25,17,4,1,85,9,17,0,26,17,2,1,78,16,4,0,95,1,17,16,0,3,2,0,119,0,2,0,0,3,6,0,137,15,0,0,139,3,0,0,140,0,7,0,0,0,0,0,2,2,0,0,176,147,0,0,136,3,0,0,0,1,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,12,244,2,0,1,4,16,0,135,3,208,2,4,0,0,0,0,0,1,0,2,3,0,0,169,164,0,0,78,3,3,0,38,3,3,1,121,3,9,0,2,4,0,0,224,158,0,0,82,4,4,0,1,5,255,0,19,4,4,5,1,5,0,0,135,3,236,2,4,5,0,0,1,4,0,0,135,3,56,3,4,0,0,0,1,4,1,0,135,3,56,3,4,0,0,0,1,4,2,0,135,3,56,3,4,0,0,0,1,4,3,0,135,3,56,3,4,0,0,0,2,4,0,0,146,136,0,0,1,5,0,0,135,3,237,2,4,5,0,0,2,5,0,0,147,136,0,0,1,4,0,0,135,3,237,2,5,4,0,0,1,3,0,0,85,0,3,0,1,3,1,0,82,4,0,0,56,3,3,4,228,245,2,0,1,4,1,0,82,5,0,0,27,5,5,48,3,5,2,5,25,5,5,32,135,3,57,3,4,5,0,0,1,5,1,0,82,4,0,0,27,4,4,48,3,4,2,4,25,4,4,32,25,4,4,4,135,3,57,3,5,4,0,0,1,4,1,0,82,5,0,0,27,5,5,48,3,5,2,5,25,5,5,32,25,5,5,8,135,3,57,3,4,5,0,0,1,5,1,0,82,4,0,0,27,4,4,48,3,4,2,4,25,4,4,32,25,4,4,12,135,3,57,3,5,4,0,0,2,3,0,0,169,164,0,0,78,3,3,0,38,3,3,1,121,3,13,0,2,4,0,0,192,160,0,0,82,4,4,0,1,5,255,0,19,4,4,5,1,5,1,0,82,6,0,0,27,6,6,48,3,6,2,6,25,6,6,28,135,3,15,3,4,5,6,0,82,4,0,0,27,4,4,48,3,4,2,4,106,4,4,12,135,3,214,2,4,0,0,0,82,4,0,0,27,4,4,48,3,4,2,4,106,4,4,16,135,3,214,2,4,0,0,0,82,4,0,0,27,4,4,48,3,4,2,4,106,4,4,20,135,3,214,2,4,0,0,0,82,4,0,0,27,4,4,48,3,4,2,4,106,4,4,24,135,3,214,2,4,0,0,0,82,3,0,0,25,3,3,1,85,0,3,0,119,0,177,255,137,1,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,17,0,0,16,17,17,1,32,18,1,0,1,19,255,255,16,19,19,0,19,18,18,19,20,17,17,18,121,17,38,0,0,6,2,0,0,12,0,0,0,13,1,0,0,14,12,0,1,17,10,0,1,18,0,0,134,12,0,0,228,172,3,0,12,13,17,18,0,15,13,0,135,13,211,2,1,18,10,0,1,17,0,0,134,9,0,0,12,128,3,0,12,13,18,17,135,17,211,2,134,10,0,0,16,167,3,0,14,15,9,17,135,17,211,2,26,6,6,1,1,17,255,0,19,17,10,17,39,17,17,48,83,6,17,0,1,17,9,0,16,17,17,15,32,18,15,9,1,19,255,255,16,19,19,14,19,18,18,19,20,17,17,18,120,17,226,255,0,3,12,0,0,5,6,0,119,0,3,0,0,3,0,0,0,5,2,0,120,3,3,0,0,7,5,0,119,0,16,0,0,4,3,0,0,8,5,0,0,16,4,0,29,4,4,10,26,11,8,1,27,17,4,10,4,17,16,17,39,17,17,48,83,11,17,0,35,17,16,10,121,17,3,0,0,7,11,0,119,0,3,0,0,8,11,0,119,0,244,255,139,7,0,0,140,1,13,0,0,0,0,0,2,10,0,0,176,119,0,0,136,11,0,0,0,9,11,0,136,11,0,0,25,11,11,32,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,60,247,2,0,1,12,32,0,135,11,208,2,12,0,0,0,25,2,9,24,25,8,9,16,0,3,9,0,25,6,9,8,121,0,65,0,1,12,84,0,134,11,0,0,200,112,3,0,12,0,0,0,121,11,21,0,1,12,188,41,134,11,0,0,12,124,3,0,12,0,0,0,1,1,0,0,27,11,1,20,3,11,10,11,25,7,11,16,78,11,7,0,121,11,7,0,27,11,1,20,3,11,10,11,102,11,11,17,121,11,3,0,1,11,0,0,83,7,11,0,25,1,1,1,1,11,0,1,53,11,1,11,120,247,2,0,1,12,0,0,134,11,0,0,224,137,3,0,12,0,0,0,121,11,35,0,134,11,0,0,132,169,3,0,2,0,0,0,2,12,0,0,32,157,0,0,134,11,0,0,108,158,3,0,3,2,12,0,1,11,10,0,1,12,100,0,134,4,0,0,192,109,3,0,11,12,0,0,76,12,4,0], eb + 184320);
  HEAPU8.set([145,4,12,0,1,12,10,0,1,11,100,0,134,5,0,0,192,109,3,0,12,11,0,0,76,11,5,0,145,5,11,0,89,6,4,0,113,6,4,5,116,8,3,0,106,12,3,4,109,8,4,12,116,2,6,0,106,11,6,4,109,2,4,11,1,12,1,0,134,11,0,0,160,123,3,0,8,2,12,0,137,9,0,0,139,0,0,0,140,2,17,0,0,0,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,144,248,2,0,1,13,16,0,135,12,208,2,13,0,0,0,25,6,11,8,25,8,11,4,0,10,11,0,85,8,0,0,89,10,1,0,82,12,8,0,120,12,7,0,1,13,210,68,1,14,138,59,1,15,114,3,1,16,222,68,135,12,209,2,13,14,15,16,1,12,6,0,82,16,8,0,50,12,12,16,236,248,2,0,1,16,252,68,1,15,138,59,1,14,115,3,1,13,222,68,135,12,209,2,16,15,14,13,88,13,10,0,145,13,13,0,134,12,0,0,104,160,3,0,13,0,0,0,33,2,12,0,1,12,48,23,82,13,8,0,41,13,13,3,3,12,12,13,106,3,12,4,88,4,10,0,145,4,4,0,121,2,21,0,59,12,1,0,145,12,12,0,66,5,12,4,145,5,5,0,38,15,3,7,135,14,18,3,15,5,0,0,145,14,14,0,59,15,2,0,145,15,15,0,65,13,14,15,145,13,13,0,135,12,19,3,13,0,0,0,75,12,12,0,85,6,12,0,82,9,6,0,137,11,0,0,139,9,0,0,119,0,20,0,38,13,3,7,135,12,18,3,13,4,0,0,145,12,12,0,59,13,2,0,145,13,13,0,65,7,12,13,145,7,7,0,88,15,10,0,145,15,15,0,66,12,7,15,145,12,12,0,135,13,19,3,12,0,0,0,75,13,13,0,85,6,13,0,82,9,6,0,137,11,0,0,139,9,0,0,1,13,0,0,139,13,0,0,140,4,17,0,0,0,0,0,136,14,0,0,0,9,14,0,136,14,0,0,25,14,14,16,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,0,250,2,0,1,15,16,0,135,14,208,2,15,0,0,0,25,4,9,3,25,5,9,2,25,7,9,1,0,8,9,0,83,4,0,0,83,5,1,0,83,7,2,0,83,8,3,0,2,14,0,0,176,147,0,0,2,15,0,0,88,158,0,0,82,15,15,0,27,15,15,48,3,10,14,15,106,15,10,20,106,14,10,8,41,14,14,2,78,16,4,0,95,15,14,16,2,16,0,0,176,147,0,0,2,14,0,0,88,158,0,0,82,14,14,0,27,14,14,48,3,11,16,14,106,14,11,20,106,16,11,8,41,16,16,2,25,16,16,1,78,15,5,0,95,14,16,15,2,15,0,0,176,147,0,0,2,16,0,0,88,158,0,0,82,16,16,0,27,16,16,48,3,12,15,16,106,16,12,20,106,15,12,8,41,15,15,2,25,15,15,2,78,14,7,0,95,16,15,14,2,14,0,0,176,147,0,0,2,15,0,0,88,158,0,0,82,15,15,0,27,15,15,48,3,13,14,15,106,15,13,20,106,14,13,8,41,14,14,2,25,14,14,3,78,16,8,0,95,15,14,16,2,16,0,0,176,147,0,0,2,14,0,0,88,158,0,0,82,14,14,0,27,14,14,48,3,16,16,14,25,6,16,8,82,16,6,0,25,16,16,1,85,6,16,0,137,9,0,0,139,0,0,0,140,2,14,0,0,0,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,32,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,88,251,2,0,1,12,32,0,135,11,208,2,12,0,0,0,25,2,10,16,25,4,10,12,25,7,10,8,25,8,10,4,0,9,10,0,85,4,0,0,85,7,1,0,82,11,4,0,106,11,11,8,34,11,11,16,121,11,5,0,82,12,4,0,134,11,0,0,92,34,3,0,12,0,0,0,82,11,7,0,82,12,4,0,106,12,12,12,1,13,255,1,19,12,12,13,41,12,12,1,93,11,11,12,85,8,11,0,82,11,8,0,121,11,24,0,82,11,8,0,42,11,11,9,85,9,11,0,82,11,4,0,25,3,11,12,82,11,3,0,82,12,9,0,24,11,11,12,85,3,11,0,82,11,4,0,25,5,11,8,82,11,5,0,82,12,9,0,4,11,11,12,85,5,11,0,82,11,8,0,1,12,255,1,19,11,11,12,85,2,11,0,82,6,2,0,137,10,0,0,139,6,0,0,119,0,10,0,82,12,4,0,82,13,7,0,134,11,0,0,180,202,2,0,12,13,0,0,85,2,11,0,82,6,2,0,137,10,0,0,139,6,0,0,1,11,0,0,139,11,0,0,140,3,15,0,0,0,0,0,136,12,0,0,0,10,12,0,136,12,0,0,25,12,12,48,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,124,252,2,0,1,13,48,0,135,12,208,2,13,0,0,0,25,9,10,16,0,8,10,0,25,7,10,36,109,10,40,0,85,7,1,0,109,10,32,2,82,11,7,0,1,12,8,1,94,3,11,12,1,12,12,1,94,4,11,12,1,12,16,1,94,5,11,12,1,12,20,1,94,6,11,12,82,12,7,0,82,12,12,0,121,12,14,0,85,8,3,0,109,8,4,4,109,8,8,5,109,8,12,6,1,13,1,0,1,14,156,51,134,12,0,0,104,5,3,0,13,14,8,0,137,10,0,0,1,12,0,0,139,12,0,0,119,0,13,0,85,9,3,0,109,9,4,4,109,9,8,5,109,9,12,6,1,14,1,0,1,13,225,51,134,12,0,0,104,5,3,0,14,13,9,0,137,10,0,0,1,12,0,0,139,12,0,0,1,12,0,0,139,12,0,0,140,2,15,0,0,0,0,0,2,11,0,0,255,0,0,0,1,9,0,0,136,12,0,0,0,10,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,116,253,2,0,1,13,16,0,135,12,208,2,13,0,0,0,25,5,10,8,25,6,10,4,0,7,10,0,25,8,10,12,85,5,0,0,85,6,1,0,1,12,0,0,85,7,12,0,1,12,0,0,83,8,12,0,82,13,5,0,134,12,0,0,204,19,3,0,13,0,0,0,83,8,12,0,82,13,5,0,134,12,0,0,64,41,3,0,13,0,0,0,120,12,22,0,78,12,8,0,32,12,12,10,120,12,19,0,78,2,8,0,82,3,6,0,82,4,7,0,25,12,4,1,85,7,12,0,95,3,4,2,82,12,7,0,1,13,255,3,45,12,12,13,0,254,2,0,1,9,5,0,119,0,7,0,82,13,5,0,134,12,0,0,204,19,3,0,13,0,0,0,83,8,12,0,119,0,231,255,32,12,9,5,121,12,14,0,82,13,5,0,134,12,0,0,64,41,3,0,13,0,0,0,120,12,9,0,82,13,5,0,134,12,0,0,204,19,3,0,13,0,0,0,19,12,12,11,32,12,12,10,121,12,245,255,119,0,1,0,82,12,6,0,82,13,7,0,1,14,0,0,95,12,13,14,137,10,0,0,82,14,6,0,139,14,0,0,140,9,43,0,0,0,0,0,136,20,0,0,0,19,20,0,136,20,0,0,25,20,20,48,137,20,0,0,130,20,0,0,136,21,0,0,49,20,20,21,168,254,2,0,1,21,48,0,135,20,208,2,21,0,0,0,25,18,19,32,25,9,19,28,25,10,19,24,25,11,19,20,25,12,19,16,25,13,19,12,25,14,19,8,25,15,19,4,0,16,19,0,85,18,0,0,85,9,1,0,85,10,2,0,85,11,3,0,85,12,4,0,85,13,5,0,85,14,6,0,85,15,7,0,85,16,8,0,1,20,0,0,82,21,18,0,82,22,9,0,82,23,10,0,82,24,11,0,82,25,12,0,82,26,13,0,82,27,14,0,82,28,15,0,59,29,0,0,145,29,29,0,59,30,0,0,145,30,30,0,59,31,1,0,145,31,31,0,59,32,1,0,145,32,32,0,1,33,0,0,82,34,16,0,1,35,255,255,1,36,0,0,1,37,0,0,1,38,0,0,1,39,0,0,1,40,1,0,1,41,1,0,1,42,0,0,134,17,0,0,76,67,2,0,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,0,137,19,0,0,139,17,0,0,140,2,13,0,0,0,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,48,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,188,255,2,0,1,11,48,0,135,10,208,2,11,0,0,0,25,8,9,32,25,7,9,16,0,6,9,0,1,11,68,75,78,12,1,0,134,10,0,0,4,173,3,0,11,12,0,0,120,10,7,0,134,10,0,0,96,186,3,0,1,12,22,0,85,10,12,0,1,2,0,0,119,0,44,0,134,5,0,0,248,116,3,0,1,0,0,0,85,6,0,0,2,10,0,0,0,128,0,0,20,10,5,10,109,6,4,10,1,12,182,1,109,6,8,12,1,10,5,0,135,12,58,3,10,6,0,0,134,3,0,0,116,171,3,0,12,0,0,0,34,12,3,0,121,12,3,0,1,2,0,0,119,0,24,0,2,12,0,0,0,0,8,0,19,12,5,12,121,12,9,0,85,7,3,0,1,10,2,0,109,7,4,10,1,12,1,0,109,7,8,12,1,10,221,0,135,12,33,3,10,7,0,0,134,4,0,0,164,156,2,0,3,1,0,0,120,4,7,0,85,8,3,0,1,10,6,0,135,12,59,3,10,8,0,0,1,2,0,0,119,0,2,0,0,2,4,0,137,9,0,0,139,2,0,0,140,1,14,0,0,0,0,0,2,11,0,0,19,10,0,0,120,0,53,0,1,12,76,40,82,12,12,0,120,12,3,0,1,8,0,0,119,0,6,0,1,12,76,40,82,12,12,0,134,8,0,0,172,0,3,0,12,0,0,0,134,12,0,0,136,185,3,0,82,2,12,0,120,2,3,0,0,4,8,0,119,0,33,0,0,3,2,0,0,5,8,0,1,12,255,255,106,13,3,76,47,12,12,13,40,1,3,0,134,7,0,0,16,186,3,0,3,0,0,0,119,0,2,0,1,7,0,0,106,12,3,28,106,13,3,20,48,12,12,13,84,1,3,0,134,12,0,0,40,93,3,0,3,0,0,0,20,12,12,5,0,6,12,0,119,0,2,0,0,6,5,0,121,7,4,0,134,12,0,0,4,186,3,0,3,0,0,0,106,3,3,56,120,3,3,0,0,4,6,0,119,0,3,0,0,5,6,0,119,0,227,255,134,12,0,0,232,185,3,0,0,1,4,0,119,0,22,0,106,12,0,76,36,12,12,255,121,12,5,0,134,1,0,0,40,93,3,0,0,0,0,0,119,0,15,0,134,12,0,0,16,186,3,0,0,0,0,0,32,10,12,0,134,9,0,0,40,93,3,0,0,0,0,0,121,10,3,0,0,1,9,0,119,0,5,0,134,12,0,0,4,186,3,0,0,0,0,0,0,1,9,0,139,1,0,0,140,2,16,0,0,0,0,0,136,11,0,0,0,7,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,32,2,3,0,1,12,16,0,135,11,208,2,12,0,0,0,25,2,7,8,25,3,7,4,0,4,7,0,85,2,0,0,85,3,1,0,82,6,2,0,82,11,3,0,34,11,11,0,121,11,8,0,82,11,2,0,1,12,168,0,1,13,172,0,94,13,6,13,97,11,12,13,137,7,0,0,139,0,0,0,106,13,6,16,121,13,30,0,82,8,2,0,1,13,172,0,94,13,8,13,1,12,168,0,94,12,8,12,4,13,13,12,85,4,13,0,82,13,4,0,82,12,3,0,47,13,13,12,220,2,3,0,82,9,2,0,1,13,168,0,1,12,172,0,94,12,9,12,97,9,13,12,82,10,2,0,25,13,10,16,106,13,13,4,1,11,255,0,19,13,13,11,106,11,10,28,82,14,3,0,82,15,4,0,4,14,14,15,135,12,15,3,13,11,14,0,137,7,0,0,139,0,0,0,82,12,2,0,1,13,168,0,3,5,12,13,82,13,5,0,82,12,3,0,3,13,13,12,85,5,13,0,137,7,0,0,139,0,0,0,140,5,21,0,0,0,0,0,136,17,0,0,0,16,17,0,136,17,0,0,25,17,17,32,137,17,0,0,130,17,0,0,136,18,0,0,49,17,17,18,56,3,3,0,1,18,32,0,135,17,208,2,18,0,0,0,25,12,16,16,25,13,16,8,0,14,16,0,134,17,0,0,176,158,3,0,12,2,1,0,134,17,0,0,176,158,3,0,13,4,3,0,134,17,0,0,176,158,3,0,14,3,1,0,134,15,0,0,0,162,3,0,12,13,0,0,145,15,15,0,112,17,13,4,145,17,17,0,66,5,17,15,145,5,5,0,88,18,13,0,145,18,18,0,68,17,18,0,145,17,17,0,66,6,17,15,145,6,6,0,112,18,12,4,145,18,18,0,68,17,18,0,145,17,17,0,66,7,17,15,145,7,7,0,88,17,12,0,145,17,17,0,66,8,17,15,145,8,8,0,88,9,14,0,145,9,9,0,65,10,5,9,145,10,10,0,112,11,14,4,145,11,11,0,65,18,6,11,145,18,18,0,63,17,10,18,145,17,17,0,89,0,17,0,65,19,7,9,145,19,19,0,65,20,8,11,145,20,20,0,63,18,19,20,145,18,18,0,113,0,4,18,137,16,0,0,139,0,0,0,140,2,12,0,0,0,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,32,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,80,4,3,0,1,10,32,0,135,9,208,2,10,0,0,0,25,2,8,20,25,3,8,16,25,4,8,12,25,5,8,8,25,6,8,4,0,7,8,0,85,2,0,0,85,3,1,0,1,10,0,0,82,11,3,0,134,9,0,0,184,15,3,0,10,11,0,0,1,11,0,0,82,10,3,0,134,9,0,0,184,15,3,0,11,10,0,0,1,10,0,0,82,11,3,0,134,9,0,0,184,15,3,0,10,11,0,0,1,9,1,0,85,4,9,0,1,9,1,0,82,11,2,0,82,11,11,0,22,9,9,11,82,11,4,0,56,9,9,11,96,5,3,0,82,9,2,0,25,9,9,4,82,11,4,0,91,9,9,11,85,5,9,0,82,9,2,0,1,11,4,1,3,9,9,11,82,11,4,0,91,9,9,11,85,6,9,0,82,9,2,0,1,11,4,2,3,9,9,11,82,11,4,0,91,9,9,11,85,7,9,0,82,11,5,0,82,10,3,0,134,9,0,0,184,15,3,0,11,10,0,0,82,10,6,0,82,11,3,0,134,9,0,0,184,15,3,0,10,11,0,0,82,11,7,0,82,10,3,0,134,9,0,0,184,15,3,0,11,10,0,0,82,9,4,0,25,9,9,1,85,4,9,0,119,0,214,255,137,8,0,0,139,0,0,0,140,3,11,0,0,0,0,0,2,7,0,0,224,151,0,0,136,8,0,0,0,6,8,0,136,8,0,0,25,8,8,32,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,168,5,3,0,1,9,32,0,135,8,208,2,9,0,0,0,25,3,6,20,25,4,6,16,0,5,6,0,85,3,0,0,85,4,1,0,85,5,2,0,82,8,3,0,1,9,1,0,1,10,8,0,138,8,9,10,244,5,3,0,4,6,3,0,240,5,3,0,20,6,3,0,240,5,3,0,240,5,3,0,240,5,3,0,36,6,3,0,119,0,17,0,1,10,235,74,135,9,2,0,7,10,0,0,119,0,13,0,1,10,250,74,135,9,2,0,7,10,0,0,119,0,9,0,1,10,242,74,135,9,2,0,7,10,0,0,119,0,5,0,1,10,4,75,135,9,2,0,7,10,0,0,119,0,1,0,82,9,4,0,135,8,60,3,7,9,0,0,1,9,12,75,135,8,60,3,7,9,0,0,82,8,3,0,1,9,1,0,1,10,8,0,138,8,9,10,128,6,3,0,152,6,3,0,124,6,3,0,176,6,3,0,124,6,3,0,124,6,3,0,124,6,3,0,200,6,3,0,119,0,25,0,1,9,1,0,121,9,23,0,134,9,0,0,232,180,3,0,7,5,0,0,119,0,19,0,1,9,2,0,121,9,17,0,134,9,0,0,232,180,3,0,7,5,0,0,119,0,13,0,1,9,4,0,121,9,11,0,134,9,0,0,232,180,3,0,7,5,0,0,119,0,7,0,1,9,0,0,121,9,5,0,134,9,0,0,232,180,3,0,7,5,0,0,119,0,1,0,82,8,3,0,32,8,8,4,121,8,5,0,1,9,1,0,135,8,61,3,9,0,0,0,119,0,3,0,137,6,0,0,139,0,0,0,139,0,0,0,140,3,8,0,0,0,0,0,2,4,0,0,128,0,0,0,120,0,3,0,1,3,1,0,119,0,91,0,35,5,1,128,121,5,4,0,83,0,1,0,1,3,1,0,119,0,86,0,134,5,0,0,32,185,3,0,1,6,188,0,94,5,5,6,82,5,5,0,120,5,15,0,38,5,1,128,2,6,0,0,128,223,0,0,45,5,5,6,112,7,3,0,83,0,1,0,1,3,1,0,119,0,72,0,134,5,0,0,96,186,3,0,1,6,84,0,85,5,6,0,1,3,255,255,119,0,66,0,1,6,0,8,48,6,1,6,184,7,3,0,43,6,1,6,1,5,192,0,20,6,6,5,83,0,6,0,38,5,1,63,20,5,5,4,107,0,1,5,1,3,2,0,119,0,54,0,2,5,0,0,0,216,0,0,16,5,1,5,1,6,0,224,19,6,1,6,2,7,0,0,0,224,0,0,13,6,6,7,20,5,5,6,121,5,14,0,43,5,1,12,1,6,224,0,20,5,5,6,83,0,5,0,43,6,1,6,38,6,6,63,20,6,6,4,107,0,1,6,38,5,1,63,20,5,5,4,107,0,2,5,1,3,3,0,119,0,31,0,2,5,0,0,0,0,1,0,4,5,1,5,2,6,0,0,0,0,16,0,48,5,5,6,116,8,3,0,43,5,1,18,1,6,240,0,20,5,5,6,83,0,5,0,43,6,1,12,38,6,6,63,20,6,6,4,107,0,1,6,43,5,1,6,38,5,5,63,20,5,5,4,107,0,2,5,38,6,1,63,20,6,6,4,107,0,3,6,1,3,4,0,119,0,7,0,134,6,0,0,96,186,3,0,1,5,84,0,85,6,5,0,1,3,255,255,119,0,1,0,139,3,0,0,140,4,19,0,0,0,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,32,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,200,8,3,0,1,17,32,0,135,16,208,2,17,0,0,0,25,9,15,19,25,10,15,18,25,11,15,17,25,12,15,16,25,13,15,12,25,14,15,8,25,4,15,4,0,5,15,0,83,9,0,0,83,10,1,0,83,11,2,0,83,12,3,0,79,17,9,0,76,17,17,0,145,17,17,0,59,18,255,0,145,18,18,0,66,16,17,18,145,16,16,0,89,13,16,0,79,18,10,0,76,18,18,0,145,18,18,0,59,17,255,0,145,17,17,0,66,16,18,17,145,16,16,0,89,14,16,0,79,17,11,0,76,17,17,0,145,17,17,0,59,18,255,0,145,18,18,0,66,16,17,18,145,16,16,0,89,4,16,0,79,18,12,0,76,18,18,0,145,18,18,0,59,17,255,0,145,17,17,0,66,16,18,17,145,16,16,0,89,5,16,0,88,6,13,0,145,6,6,0,88,7,14,0,145,7,7,0,88,8,4,0,145,8,8,0,88,17,5,0,145,17,17,0,135,16,229,2,6,7,8,17,137,15,0,0,139,0,0,0,140,5,21,0,0,0,0,0,136,17,0,0,0,16,17,0,136,17,0,0,25,17,17,32,137,17,0,0,130,17,0,0,136,18,0,0,49,17,17,18,224,9,3,0,1,18,32,0,135,17,208,2,18,0,0,0,25,12,16,16,25,13,16,8,0,14,16,0,134,17,0,0,176,158,3,0,12,2,1,0,134,17,0,0,176,158,3,0,13,4,3,0,134,17,0,0,176,158,3,0,14,3,1,0,134,15,0,0,0,162,3,0,12,13,0,0,145,15,15,0,112,17,13,4,145,17,17,0,66,5,17,15,145,5,5,0,88,18,13,0,145,18,18,0,68,17,18,0,145,17,17,0,66,6,17,15,145,6,6,0,112,18,12,4,145,18,18,0,68,17,18,0,145,17,17,0,66,7,17,15,145,7,7,0,88,17,12,0,145,17,17,0,66,8,17,15,145,8,8,0,88,9,14,0,145,9,9,0,65,10,5,9,145,10,10,0,112,11,14,4,145,11,11,0,65,18,6,11,145,18,18,0,63,17,10,18,145,17,17,0,89,0,17,0,65,19,7,9,145,19,19,0,65,20,8,11,145,20,20,0,63,18,19,20,145,18,18,0,113,0,4,18,137,16,0,0,139,0,0,0,140,5,22,0,0,0,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,32,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,248,10,3,0,1,17,32,0,135,16,208,2,17,0,0,0,25,10,15,20,25,11,15,16,25,12,15,12,25,13,15,8,25,14,15,4,0,5,15,0,85,11,0,0,85,12,1,0,85,13,2,0,85,14,3,0,85,5,4,0,82,17,11,0,82,18,12,0,82,19,13,0,82,20,14,0,82,21,5,0,134,16,0,0,108,227,2,0,17,18,19,20,21,0,0,0,121,16,18,0,82,16,11,0,82,21,12,0,5,6,16,21,82,21,13,0,5,7,6,21,82,21,14,0,5,8,7,21,82,16,5,0,3,16,8,16,134,21,0,0,128,163,3,0,16,0,0,0,85,10,21,0,82,9,10,0,137,15,0,0,139,9,0,0,119,0,6,0,1,21,0,0,85,10,21,0,82,9,10,0,137,15,0,0,139,9,0,0,1,21,0,0,139,21,0,0,140,1,15,0,0,0,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,32,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,228,11,3,0,1,12,32,0,135,11,208,2,12,0,0,0,25,1,10,20,25,3,10,16,25,4,10,12,25,6,10,8,25,7,10,4,0,8,10,0,89,1,0,0,88,9,1,0,145,9,9,0,1,12,196,39,88,11,12,0,145,11,11,0,73,11,9,11,120,11,5,0,1,12,196,39,88,11,12,0,145,11,11,0,89,1,11,0,88,2,1,0,145,2,2,0,1,12,200,39,88,11,12,0,145,11,11,0,73,11,2,11,121,11,5,0,1,12,200,39,88,11,12,0,145,11,11,0,89,1,11,0,88,11,1,0,145,11,11,0,89,8,11,0,1,11,96,27,82,12,8,0,1,13,196,39,82,13,13,0,4,12,12,13,43,12,12,20,41,12,12,2,3,11,11,12,116,3,11,0,82,11,3,0,43,11,11,16,41,11,11,9,85,4,11,0,82,11,3,0,2,12,0,0,255,255,0,0,19,11,11,12,85,6,11,0,82,11,8,0,43,11,11,12,1,12,255,0,19,11,11,12,85,7,11,0,82,11,4,0,82,13,6,0,82,14,7,0,5,12,13,14,3,11,11,12,43,11,11,16,1,12,255,0,19,11,11,12,0,5,11,0,137,10,0,0,139,5,0,0,140,0,8,0,0,0,0,0,2,3,0,0,176,147,0,0,2,4,0,0,88,158,0,0,82,4,4,0,27,4,4,48,94,3,3,4,36,3,3,0,121,3,2,0,139,0,0,0,2,3,0,0,169,164,0,0,78,3,3,0,38,3,3,1,121,3,16,0,2,4,0,0,224,158,0,0,82,4,4,0,1,5,255,0,19,4,4,5,2,5,0,0,176,147,0,0,2,6,0,0,88,158,0,0,82,6,6,0,27,6,6,48,3,5,5,6,106,5,5,28,135,3,236,2,4,5,0,0,2,4,0,0,146,136,0,0,2,5,0,0,176,147,0,0,2,6,0,0,88,158,0,0,82,6,6,0,27,6,6,48,3,5,5,6,106,5,5,32,135,3,237,2,4,5,0,0,2,3,0,0,176,147,0,0,2,5,0,0,88,158,0,0,82,5,5,0,27,5,5,48,3,0,3,5,2,3,0,0,146,136,0,0,1,4,0,0,82,6,0,0,27,6,6,12,106,7,0,12,135,5,62,3,3,4,6,7,2,7,0,0,146,136,0,0,2,6,0,0,176,147,0,0,2,4,0,0,88,158,0,0,82,4,4,0,27,4,4,48,3,6,6,4,25,6,6,32,106,6,6,4,135,5,237,2,7,6,0,0,2,5,0,0,176,147,0,0,2,6,0,0,88,158,0,0,82,6,6,0,27,6,6,48,3,1,5,6,2,5,0,0,146,136,0,0,1,7,0,0,82,4,1,0,41,4,4,3,106,3,1,16,135,6,62,3,5,7,4,3,2,3,0,0,146,136,0,0,2,4,0,0,176,147,0,0,2,7,0,0,88,158,0,0,82,7,7,0,27,7,7,48,3,4,4,7,25,4,4,32,106,4,4,8,135,6,237,2,3,4,0,0,2,6,0,0,176,147,0,0,2,4,0,0,88,158,0,0,82,4,4,0,27,4,4,48,3,2,6,4,2,6,0,0,146,136,0,0,1,3,0,0,82,7,2,0,41,7,7,2,106,5,2,20,135,4,62,3,6,3,7,5,2,4,0,0,169,164,0,0,78,4,4,0,38,4,4,1,120,4,2,0,139,0,0,0,2,5,0,0,224,158,0,0,82,5,5,0,1,7,255,0,19,5,5,7,1,7,0,0,135,4,236,2,5,7,0,0,139,0,0,0,140,4,14,0,0,0,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,48,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,44,15,3,0,1,13,48,0,135,12,208,2,13,0,0,0,25,5,11,32,25,4,11,24,25,7,11,16,25,8,11,12,25,9,11,8,0,10,11,0,85,7,0,0,85,8,1,0,89,9,2,0,82,12,7,0,76,12,12,0,145,12,12,0,89,10,12,0,82,13,8,0,76,13,13,0,145,13,13,0,113,10,4,13,88,6,9,0,145,6,6,0,116,4,10,0,106,12,10,4,109,4,4,12,78,12,3,0,83,5,12,0,102,13,3,1,107,5,1,13,102,12,3,2,107,5,2,12,102,13,3,3,107,5,3,13,134,13,0,0,152,55,2,0,4,6,5,0,137,11,0,0,139,0,0,0,140,2,15,0,0,0,0,0,2,13,0,0,255,0,0,0,1,12,0,0,106,14,1,76,34,14,14,0,121,14,3,0,1,12,3,0,119,0,36,0,134,14,0,0,16,186,3,0,1,0,0,0,120,14,3,0,1,12,3,0,119,0,30,0,19,14,0,13,0,5,14,0,19,14,0,13,0,6,14,0,102,14,1,75,45,14,6,14,28,16,3,0,1,12,10,0,119,0,12,0,25,7,1,20,82,8,7,0,106,14,1,16,48,14,8,14,68,16,3,0,25,14,8,1,85,7,14,0,83,8,5,0,0,9,6,0,119,0,2,0,1,12,10,0,32,14,12,10,121,14,4,0,134,9,0,0,36,27,3,0,1,0,0,0,134,14,0,0,4,186,3,0,1,0,0,0,0,2,9,0,32,14,12,3,121,14,21,0,19,14,0,13,0,10,14,0,19,14,0,13,0,11,14,0,102,14,1,75,46,14,11,14,184,16,3,0,25,3,1,20,82,4,3,0,106,14,1,16,48,14,4,14,184,16,3,0,25,14,4,1,85,3,14,0,83,4,10,0,0,2,11,0,119,0,4,0,134,2,0,0,36,27,3,0,1,0,0,0,139,2,0,0,140,4,17,0,0,0,0,0,136,14,0,0,0,13,14,0,136,14,0,0,25,14,14,16,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,0,17,3,0,1,15,16,0,135,14,208,2,15,0,0,0,25,9,13,12,25,10,13,8,25,11,13,4,0,12,13,0,85,9,0,0,85,10,1,0,85,11,2,0,85,12,3,0,82,15,9,0,82,16,10,0,134,14,0,0,136,113,3,0,15,16,0,0,120,14,6,0,1,8,0,0,38,14,8,1,0,7,14,0,137,13,0,0,139,7,0,0,82,14,9,0,82,16,10,0,5,4,14,16,82,14,11,0,134,16,0,0,136,113,3,0,4,14,0,0,120,16,6,0,1,8,0,0,38,16,8,1,0,7,16,0,137,13,0,0,139,7,0,0,82,16,9,0,82,14,10,0,5,5,16,14,82,14,11,0,5,6,5,14,82,16,12,0,134,14,0,0,84,116,3,0,6,16,0,0,33,8,14,0,38,14,8,1,0,7,14,0,137,13,0,0,139,7,0,0,140,5,19,0,0,0,0,0,136,14,0,0,0,13,14,0,136,14,0,0,1,15,208,0,3,14,14,15,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,244,17,3,0,1,15,208,0,135,14,208,2,15,0,0,0,1,14,204,0,3,8,13,14,1,14,200,0,3,9,13,14,1,14,196,0,3,10,13,14,1,14,192,0,3,11,13,14,1,14,188,0,3,12,13,14,1,14,184,0,3,5,13,14,0,6,13,0,85,8,0,0,85,9,1,0,85,10,2,0,85,11,3,0,85,12,4,0,82,15,8,0,134,14,0,0,44,154,3,0,6,15,0,0,82,15,9,0,82,16,10,0,82,17,11,0,82,18,12,0,134,14,0,0,132,197,2,0,6,15,16,17,18,0,0,0,85,5,14,0,82,14,5,0,120,14,4,0,82,7,5,0,137,13,0,0,139,7,0,0,82,18,8,0,1,17,0,0,1,16,172,0,94,16,6,16,1,15,168,0,94,15,6,15,4,16,16,15,4,17,17,16,1,16,1,0,134,14,0,0,208,180,3,0,18,17,16,0,82,7,5,0,137,13,0,0,139,7,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,252,18,3,0,1,12,16,0,135,11,208,2,12,0,0,0,25,4,10,12,25,6,10,8,25,7,10,4,0,8,10,0,85,6,0,0,85,7,1,0,1,11,0,0,85,8,11,0,82,2,6,0,82,11,7,0,82,12,8,0,90,11,11,12,120,11,3,0,1,9,6,0,119,0,18,0,134,11,0,0,204,19,3,0,2,0,0,0,1,12,255,0,19,11,11,12,0,3,11,0,82,11,7,0,82,12,8,0,90,11,11,12,46,11,3,11,108,19,3,0,1,9,4,0,119,0,5,0,82,11,8,0,25,11,11,1,85,8,11,0,119,0,233,255,32,11,9,4,121,11,7,0,1,11,0,0,85,4,11,0,82,5,4,0,137,10,0,0,139,5,0,0,119,0,11,0,32,11,9,6,121,11,9,0,134,11,0,0,212,148,3,0,2,0,0,0,1,11,1,0,85,4,11,0,82,5,4,0,137,10,0,0,139,5,0,0,1,11,0,0,139,11,0,0,140,1,13,0,0,0,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,4,20,3,0,1,11,16,0,135,10,208,2,11,0,0,0,25,1,9,4,0,5,9,0,85,5,0,0,82,2,5,0,82,10,5,0,1,11,168,0,94,10,10,11,82,11,5,0,1,12,172,0,94,11,11,12,48,10,10,11,92,20,3,0,1,10,168,0,3,3,2,10,82,4,3,0,25,10,4,1,85,3,10,0,78,10,4,0,83,1,10,0,78,8,1,0,137,9,0,0,139,8,0,0,106,10,2,32,121,10,17,0,82,11,5,0,134,10,0,0,192,20,3,0,11,0,0,0,82,10,5,0,1,11,168,0,3,6,10,11,82,7,6,0,25,11,7,1,85,6,11,0,78,11,7,0,83,1,11,0,78,8,1,0,137,9,0,0,139,8,0,0,119,0,6,0,1,11,0,0,83,1,11,0,78,8,1,0,137,9,0,0,139,8,0,0,1,11,0,0,139,11,0,0,140,1,14,0,0,0,0,0,136,9,0,0,0,4,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,248,20,3,0,1,10,16,0,135,9,208,2,10,0,0,0,25,1,4,4,0,3,4,0,85,1,0,0,82,5,1,0,106,10,5,16,38,10,10,15,106,11,5,28,25,12,5,40,106,13,5,36,135,9,36,3,10,11,12,13,85,3,9,0,82,2,1,0,82,9,3,0,120,9,20,0,1,10,0,0,109,2,32,10,82,6,1,0,1,10,168,0,25,9,6,40,97,6,10,9,82,7,1,0,1,9,172,0,25,10,7,40,25,10,10,1,97,7,9,10,82,10,1,0,1,9,168,0,94,10,10,9,1,9,0,0,83,10,9,0,137,4,0,0,139,0,0,0,119,0,13,0,82,9,1,0,1,10,168,0,25,13,2,40,97,9,10,13,82,8,1,0,1,13,172,0,25,10,8,40,82,9,3,0,3,10,10,9,97,8,13,10,137,4,0,0,139,0,0,0,139,0,0,0,140,2,14,0,0,0,0,0,136,12,0,0,0,10,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,236,21,3,0,1,13,16,0,135,12,208,2,13,0,0,0,25,4,10,4,0,7,10,0,85,4,0,0,85,7,1,0,82,12,7,0,38,12,12,1,85,7,12,0,82,12,7,0,82,13,4,0,79,13,13,0,22,12,12,13,85,7,12,0,82,12,4,0,25,2,12,1,79,12,2,0,82,13,7,0,20,12,12,13,83,2,12,0,82,3,4,0,78,12,3,0,25,12,12,1,41,12,12,24,42,12,12,24,83,3,12,0,82,12,4,0,79,12,12,0,36,12,12,7,121,12,3,0,137,10,0,0,139,0,0,0,82,11,4,0,102,5,11,1,25,6,11,8,25,8,11,4,82,9,8,0,25,12,9,1,85,8,12,0,95,6,9,5,82,12,4,0,1,13,0,0,83,12,13,0,82,13,4,0,1,12,0,0,107,13,1,12,137,10,0,0,139,0,0,0,140,2,15,0,0,0,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,220,22,3,0,1,12,16,0,135,11,208,2,12,0,0,0,25,5,10,8,25,7,10,4,0,8,10,0,85,7,0,0,89,8,1,0,88,12,8,0,145,12,12,0,134,11,0,0,104,160,3,0,12,0,0,0,33,9,11,0,1,11,48,23,82,12,7,0,41,12,12,3,3,11,11,12,106,2,11,4,88,3,8,0,145,3,3,0,121,9,21,0,59,11,1,0,145,11,11,0,66,4,11,3,145,4,4,0,38,14,2,7,135,13,18,3,14,4,0,0,145,13,13,0,59,14,2,0,145,14,14,0,65,12,13,14,145,12,12,0,135,11,19,3,12,0,0,0,75,11,11,0,85,5,11,0,82,6,5,0,137,10,0,0,139,6,0,0,119,0,16,0,38,13,2,7,135,14,18,3,13,3,0,0,145,14,14,0,59,13,2,0,145,13,13,0,65,12,14,13,145,12,12,0,135,11,19,3,12,0,0,0,75,11,11,0,85,5,11,0,82,6,5,0,137,10,0,0,139,6,0,0,1,11,0,0,139,11,0,0,140,4,14,0,0,0,0,0,136,12,0,0,0,9,12,0,136,12,0,0,25,12,12,80,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,244,23,3,0,1,13,80,0,135,12,208,2,13,0,0,0,25,4,9,72,25,5,9,68,25,6,9,64,0,7,9,0,89,4,1,0,89,5,2,0,89,6,3,0,0,8,7,0,25,11,8,64,1,12,0,0,85,8,12,0,25,8,8,4,54,12,8,11,24,24,3,0,88,12,4,0,145,12,12,0,89,7,12,0,88,13,5,0,145,13,13,0,113,7,20,13,88,12,6,0,145,12,12,0,113,7,40,12,59,13,1,0,145,13,13,0,113,7,60,13,0,8,0,0,0,10,7,0,25,11,8,64,116,8,10,0,25,8,8,4,25,10,10,4,54,13,8,11,104,24,3,0,137,9,0,0,139,0,0,0,140,3,13,0,0,0,0,0,136,11,0,0,0,8,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,188,24,3,0,1,12,16,0,135,11,208,2,12,0,0,0,25,3,8,8,25,4,8,4,0,5,8,0,85,3,0,0,85,4,1,0,85,5,2,0,82,11,3,0,25,6,11,16,82,7,4,0,116,6,7,0,106,12,7,4,109,6,4,12,106,11,7,8,109,6,8,11,82,11,3,0,82,12,5,0,109,11,28,12,82,12,3,0,1,11,128,0,109,12,36,11,82,11,3,0,1,12,1,0,109,11,32,12,82,9,3,0,1,12,176,0,25,11,9,40,97,9,12,11,82,12,3,0,134,11,0,0,192,20,3,0,12,0,0,0,82,10,3,0,1,11,180,0,1,12,172,0,94,12,10,12,97,10,11,12,137,8,0,0,139,0,0,0,140,4,18,0,0,0,0,0,136,13,0,0,0,12,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,140,25,3,0,1,14,32,0,135,13,208,2,14,0,0,0,25,7,12,16,25,8,12,12,25,9,12,8,25,10,12,4,0,11,12,0,85,8,0,0,85,9,1,0,85,10,2,0,85,11,3,0,82,14,8,0,82,15,9,0,82,16,10,0,82,17,11,0,134,13,0,0,200,16,3,0,14,15,16,17,121,13,16,0,82,13,8,0,82,17,9,0,5,4,13,17,82,17,10,0,5,5,4,17,82,13,11,0,3,13,5,13,134,17,0,0,128,163,3,0,13,0,0,0,85,7,17,0,82,6,7,0,137,12,0,0,139,6,0,0,119,0,6,0,1,17,0,0,85,7,17,0,82,6,7,0,137,12,0,0,139,6,0,0,1,17,0,0,139,17,0,0,140,2,16,0,0,0,0,0,103,14,1,1,41,14,14,16,79,15,1,0,41,15,15,24,20,14,14,15,103,15,1,2,41,15,15,8,20,14,14,15,103,15,1,3,20,14,14,15,0,6,14,0,25,7,0,3,78,8,7,0,103,14,0,1,41,14,14,16,79,15,0,0,41,15,15,24,20,14,14,15,103,15,0,2,41,15,15,8,20,14,14,15,1,15,255,0,19,15,8,15,20,14,14,15,0,9,14,0,41,14,8,24,42,14,14,24,32,10,14,0,13,14,9,6,20,14,14,10,121,14,4,0,0,2,7,0,0,5,10,0,119,0,21,0,0,3,7,0,0,4,9,0,25,11,3,1,78,12,11,0,41,14,4,8,1,15,255,0,19,15,12,15,20,14,14,15,0,4,14,0,41,14,12,24,42,14,14,24,32,13,14,0,13,14,4,6,20,14,14,13,121,14,4,0,0,2,11,0,0,5,13,0,119,0,3,0,0,3,11,0,119,0,239,255,121,5,4,0,1,15,0,0,0,14,15,0,119,0,3,0,26,15,2,3,0,14,15,0,139,14,0,0,140,2,16,0,0,0,0,0,1,11,0,0,136,13,0,0,0,12,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,96,27,3,0,1,14,16,0,135,13,208,2,14,0,0,0,0,6,12,0,1,13,255,0,19,13,1,13,0,7,13,0,83,6,7,0,25,8,0,16,82,9,8,0,120,9,10,0,134,13,0,0,16,136,3,0,0,0,0,0,120,13,4,0,82,4,8,0,1,11,4,0,119,0,5,0,1,2,255,255,119,0,3,0,0,4,9,0,1,11,4,0,32,13,11,4,121,13,26,0,25,10,0,20,82,3,10,0,48,13,3,4,240,27,3,0,1,13,255,0,19,13,1,13,0,5,13,0,102,13,0,75,46,13,5,13,240,27,3,0,25,13,3,1,85,10,13,0,83,3,7,0,0,2,5,0,119,0,11,0,106,14,0,36,38,14,14,15,1,15,1,0,135,13,36,3,14,0,6,15,32,13,13,1,121,13,3,0,79,2,6,0,119,0,2,0,1,2,255,255,137,12,0,0,139,2,0,0,140,3,16,0,0,0,0,0,120,2,3,0,1,6,0,0,119,0,44,0,78,11,0,0,41,13,11,24,42,13,13,24,120,13,4,0,0,3,1,0,1,8,0,0,119,0,33,0,0,4,0,0,0,5,2,0,0,7,1,0,0,9,11,0,26,5,5,1,78,12,7,0,41,13,9,24,42,13,13,24,41,14,12,24,42,14,14,24,13,13,13,14,33,14,5,0,41,15,12,24,42,15,15,24,33,15,15,0,19,14,14,15,19,13,13,14,120,13,4,0,0,3,7,0,0,8,9,0,119,0,12,0,25,4,4,1,25,10,7,1,78,9,4,0,41,13,9,24,42,13,13,24,120,13,4,0,0,3,10,0,1,8,0,0,119,0,3,0,0,7,10,0,119,0,229,255,1,13,255,0,19,13,8,13,79,14,3,0,4,6,13,14,139,6,0,0,140,2,14,0,0,0,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,32,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,28,29,3,0,1,13,32,0,135,12,208,2,13,0,0,0,25,10,11,16,25,5,11,8,0,6,11,0,0,7,1,0,82,8,7,0,106,9,7,4,0,2,5,0,85,2,8,0,109,2,4,9,0,3,6,0,85,3,8,0,109,3,4,9,116,10,6,0,106,13,6,4,109,10,4,13,134,4,0,0,12,166,3,0,10,0,0,0,145,4,4,0,116,10,5,0,106,12,5,4,109,10,4,12,134,12,0,0,196,166,3,0,0,10,4,0,137,11,0,0,139,0,0,0,140,0,9,0,0,0,0,0,136,7,0,0,0,4,7,0,136,7,0,0,25,7,7,32,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,192,29,3,0,1,8,32,0,135,7,208,2,8,0,0,0,25,0,4,8,0,1,4,0,25,2,4,20,25,3,4,16,134,7,0,0,96,132,3,0,2,8,0,0,160,161,0,0,82,8,8,0,135,7,63,3,8,0,1,0,2,7,0,0,160,164,0,0,86,8,0,0,145,8,8,0,89,7,8,0,2,8,0,0,164,164,0,0,86,7,1,0,145,7,7,0,89,8,7,0,1,7,0,0,85,2,7,0,1,7,0,2,82,8,2,0,56,7,7,8,88,30,3,0,82,5,2,0,2,7,0,0,224,149,0,0,2,8,0,0,224,147,0,0,90,8,8,5,95,7,5,8,82,8,2,0,25,8,8,1,85,2,8,0,119,0,242,255,1,8,0,0,85,3,8,0,1,8,3,0,82,7,3,0,56,8,8,7,156,30,3,0,82,6,3,0,2,8,0,0,186,164,0,0,2,7,0,0,183,164,0,0,90,7,7,6,95,8,6,7,82,7,3,0,25,7,7,1,85,3,7,0,119,0,242,255,2,7,0,0,8,162,0,0,1,8,0,0,85,7,8,0,137,4,0,0,139,0,0,0,140,2,10,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,32,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,236,30,3,0,1,5,32,0,135,4,208,2,5,0,0,0,0,2,3,0,1,4,0,0,85,2,4,0,1,5,0,0,109,2,4,5,1,4,0,0,109,2,8,4,1,5,0,0,109,2,12,5,1,4,0,0,109,2,16,4,82,5,1,0,106,6,1,4,106,7,1,8,106,8,1,16,106,9,1,12,134,4,0,0,152,244,1,0,5,6,7,8,9,0,0,0,85,2,4,0,106,9,1,4,109,2,4,9,106,4,1,8,109,2,8,4,106,9,1,12,109,2,12,9,106,4,1,16,109,2,16,4,116,0,2,0,106,9,2,4,109,0,4,9,106,4,2,8,109,0,8,4,106,9,2,12,109,0,12,9,106,4,2,16,109,0,16,4,137,3,0,0,139,0,0,0,140,2,16,0,0,0,0,0,136,10,0,0,0,7,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,196,31,3,0,1,11,16,0,135,10,208,2,11,0,0,0,25,3,7,4,0,6,7,0,85,3,0,0,85,6,1,0,82,11,3,0,82,12,6,0,134,10,0,0,4,230,0,0,11,12,0,0,82,8,3,0,106,12,8,124,1,11,0,0,106,14,8,20,106,15,8,64,5,13,14,15], eb + 194560);
  HEAPU8.set([41,13,13,2,135,10,213,2,12,11,13,0,82,13,3,0,134,10,0,0,204,157,3,0,13,0,0,0,33,2,10,0,82,9,3,0,0,4,9,0,106,5,9,124,121,2,7,0,134,10,0,0,4,62,1,0,4,5,0,0,137,7,0,0,139,0,0,0,119,0,6,0,134,10,0,0,200,253,0,0,4,5,0,0,137,7,0,0,139,0,0,0,139,0,0,0,140,1,9,0,0,0,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,32,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,152,32,3,0,1,8,32,0,135,7,208,2,8,0,0,0,25,1,6,16,25,2,6,12,25,3,6,8,25,4,6,4,0,5,6,0,85,2,0,0,82,8,2,0,134,7,0,0,92,110,3,0,8,0,0,0,1,8,255,0,19,7,7,8,85,3,7,0,82,7,3,0,38,7,7,15,85,4,7,0,82,8,2,0,134,7,0,0,92,110,3,0,8,0,0,0,1,8,255,0,19,7,7,8,85,5,7,0,82,7,3,0,41,7,7,8,82,8,5,0,3,7,7,8,30,7,7,31,121,7,7,0,1,8,47,59,134,7,0,0,176,165,3,0,8,0,0,0,85,1,7,0,119,0,22,0,82,7,5,0,38,7,7,32,121,7,7,0,1,8,63,59,134,7,0,0,176,165,3,0,8,0,0,0,85,1,7,0,119,0,13,0,82,7,4,0,33,7,7,8,121,7,7,0,1,8,78,59,134,7,0,0,176,165,3,0,8,0,0,0,85,1,7,0,119,0,4,0,1,7,1,0,85,1,7,0,119,0,1,0,137,6,0,0,82,7,1,0,139,7,0,0,140,5,18,0,0,0,0,0,136,13,0,0,0,12,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,188,33,3,0,1,14,32,0,135,13,208,2,14,0,0,0,25,7,12,20,25,8,12,16,25,9,12,12,25,10,12,8,25,11,12,4,0,5,12,0,85,7,0,0,85,8,1,0,85,9,2,0,85,10,3,0,85,11,4,0,2,13,0,0,88,162,0,0,82,13,13,0,33,13,13,0,82,14,7,0,33,14,14,0,19,13,13,14,120,13,3,0,137,12,0,0,139,0,0,0,82,13,11,0,121,13,3,0,82,6,11,0,119,0,3,0,82,13,10,0,82,6,13,0,85,5,6,0,82,14,7,0,82,15,8,0,82,15,15,0,82,16,9,0,82,16,16,0,82,17,5,0,41,17,17,2,134,13,0,0,204,177,2,0,14,15,16,17,137,12,0,0,139,0,0,0,140,1,12,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,152,34,3,0,1,8,16,0,135,7,208,2,8,0,0,0,0,1,6,0,85,1,0,0,1,7,1,0,82,8,1,0,106,8,8,8,22,7,7,8,82,8,1,0,106,8,8,12,50,7,7,8,200,34,3,0,1,5,3,0,119,0,29,0,82,8,1,0,134,7,0,0,92,110,3,0,8,0,0,0,1,8,255,0,19,7,7,8,0,2,7,0,82,7,1,0,25,3,7,12,82,7,3,0,82,8,1,0,106,8,8,8,22,8,2,8,20,7,7,8,85,3,7,0,82,7,1,0,25,4,7,8,82,7,4,0,25,7,7,8,85,4,7,0,1,7,24,0,82,8,1,0,106,8,8,8,47,7,7,8,52,35,3,0,1,5,5,0,119,0,2,0,119,0,219,255,32,7,5,3,121,7,8,0,1,8,110,58,1,9,109,54,1,10,57,15,1,11,147,58,135,7,209,2,8,9,10,11,119,0,5,0,32,7,5,5,121,7,3,0,137,6,0,0,139,0,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,1,4,0,0,1,11,224,30,91,11,11,4,45,11,11,0,152,35,3,0,1,9,4,0,119,0,9,0,25,8,4,1,32,11,8,87,121,11,4,0,1,7,87,0,1,9,5,0,119,0,3,0,0,4,8,0,119,0,243,255,32,11,9,4,121,11,6,0,120,4,3,0,1,2,64,31,119,0,3,0,0,7,4,0,1,9,5,0,32,11,9,5,121,11,15,0,1,3,64,31,0,6,7,0,0,5,3,0,0,10,5,0,25,5,5,1,78,11,10,0,33,11,11,0,120,11,252,255,26,6,6,1,120,6,3,0,0,2,5,0,119,0,3,0,0,3,5,0,119,0,245,255,106,12,1,20,134,11,0,0,148,182,3,0,2,12,0,0,139,11,0,0,140,2,16,0,0,0,0,0,103,14,1,1,41,14,14,16,79,15,1,0,41,15,15,24,20,14,14,15,103,15,1,2,41,15,15,8,20,14,14,15,0,6,14,0,25,7,0,2,78,8,7,0,103,14,0,1,41,14,14,16,79,15,0,0,41,15,15,24,20,14,14,15,1,15,255,0,19,15,8,15,41,15,15,8,20,14,14,15,0,9,14,0,41,14,8,24,42,14,14,24,32,10,14,0,13,14,9,6,20,14,14,10,121,14,4,0,0,2,7,0,0,5,10,0,119,0,21,0,0,3,7,0,0,4,9,0,25,11,3,1,78,12,11,0,1,14,255,0,19,14,12,14,20,14,4,14,41,14,14,8,0,4,14,0,41,14,12,24,42,14,14,24,32,13,14,0,13,14,4,6,20,14,14,13,121,14,4,0,0,2,11,0,0,5,13,0,119,0,3,0,0,3,11,0,119,0,239,255,121,5,4,0,1,15,0,0,0,14,15,0,119,0,3,0,26,15,2,2,0,14,15,0,139,14,0,0,140,3,13,0,0,0,0,0,2,9,0,0,128,40,0,0,136,10,0,0,0,7,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,84,37,3,0,1,11,16,0,135,10,208,2,11,0,0,0,25,4,7,8,25,5,7,4,0,6,7,0,109,7,12,0,85,4,1,0,85,5,2,0,134,10,0,0,200,128,3,0,2,10,0,0,0,162,0,0,82,12,4,0,41,12,12,2,135,11,1,0,12,0,0,0,85,10,11,0,1,11,0,0,85,6,11,0,82,11,4,0,82,10,6,0,56,11,11,10,8,38,3,0,1,11,0,1,135,3,1,0,11,0,0,0,2,11,0,0,0,162,0,0,82,11,11,0,82,10,6,0,41,10,10,2,97,11,10,3,82,10,6,0,41,10,10,2,0,8,10,0,2,11,0,0,0,162,0,0,82,11,11,0,94,11,11,8,82,12,5,0,94,12,12,8,135,10,2,0,11,12,0,0,82,10,6,0,25,10,10,1,85,6,10,0,119,0,229,255,2,10,0,0,4,162,0,0,82,12,4,0,85,10,12,0,137,7,0,0,139,0,0,0,140,4,15,0,0,0,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,32,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,88,38,3,0,1,13,32,0,135,12,208,2,13,0,0,0,25,6,11,16,25,7,11,12,25,8,11,8,25,9,11,4,0,10,11,0,89,7,0,0,85,8,1,0,85,9,2,0,85,10,3,0,88,13,7,0,145,13,13,0,134,12,0,0,104,160,3,0,13,0,0,0,121,12,6,0,116,6,10,0,82,5,6,0,137,11,0,0,139,5,0,0,119,0,14,0,82,4,9,0,82,13,8,0,88,14,7,0,145,14,14,0,134,12,0,0,252,143,3,0,13,14,0,0,41,12,12,1,3,12,4,12,85,6,12,0,82,5,6,0,137,11,0,0,139,5,0,0,1,12,0,0,139,12,0,0,140,1,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,32,39,3,0,1,9,16,0,135,8,208,2,9,0,0,0,25,1,7,8,25,3,7,4,0,4,7,0,85,3,0,0,1,8,0,0,85,4,8,0,1,8,8,0,82,9,4,0,49,8,8,9,80,39,3,0,1,6,6,0,119,0,19,0,82,9,3,0,134,8,0,0,204,19,3,0,9,0,0,0,1,9,255,0,19,8,8,9,0,5,8,0,1,8,94,59,82,9,4,0,91,8,8,9,46,8,5,8,136,39,3,0,1,6,4,0,119,0,5,0,82,8,4,0,25,8,8,1,85,4,8,0,119,0,233,255,32,8,6,4,121,8,10,0,1,9,102,59,134,8,0,0,176,165,3,0,9,0,0,0,85,1,8,0,82,2,1,0,137,7,0,0,139,2,0,0,119,0,8,0,32,8,6,6,121,8,6,0,1,8,1,0,85,1,8,0,82,2,1,0,137,7,0,0,139,2,0,0,1,8,0,0,139,8,0,0,140,6,15,0,0,0,0,0,136,13,0,0,0,12,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,32,40,3,0,1,14,32,0,135,13,208,2,14,0,0,0,25,8,12,20,25,9,12,16,25,10,12,12,25,11,12,8,25,6,12,4,0,7,12,0,85,8,0,0,85,9,1,0,85,10,2,0,85,11,3,0,85,6,4,0,85,7,5,0,82,13,8,0,82,14,9,0,109,13,4,14,82,14,8,0,82,13,10,0,109,14,8,13,82,13,8,0,82,14,11,0,109,13,20,14,82,14,8,0,82,13,6,0,109,14,24,13,82,13,8,0,82,14,7,0,109,13,64,14,137,12,0,0,139,0,0,0,140,6,18,0,0,0,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,32,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,204,40,3,0,1,16,32,0,135,15,208,2,16,0,0,0,25,10,14,24,25,11,14,20,25,12,14,16,25,13,14,12,25,6,14,8,25,7,14,4,0,8,14,0,85,10,0,0,85,11,1,0,85,12,2,0,85,13,3,0,85,6,4,0,85,7,5,0,82,15,12,0,82,16,10,0,82,17,13,0,4,16,16,17,3,15,15,16,82,16,6,0,8,15,15,16,85,8,15,0,82,15,11,0,82,16,8,0,82,17,7,0,134,9,0,0,160,135,3,0,15,16,17,0,137,14,0,0,139,9,0,0,140,1,9,0,0,0,0,0,136,6,0,0,0,4,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,120,41,3,0,1,7,16,0,135,6,208,2,7,0,0,0,25,1,4,4,0,2,4,0,85,2,0,0,82,6,2,0,106,6,6,16,121,6,23,0,82,7,2,0,25,7,7,16,106,7,7,8,38,7,7,31,82,8,2,0,106,8,8,28,135,6,64,3,7,8,0,0,120,6,6,0,1,6,0,0,85,1,6,0,82,3,1,0,137,4,0,0,139,3,0,0,82,6,2,0,106,6,6,32,120,6,6,0,1,6,1,0,85,1,6,0,82,3,1,0,137,4,0,0,139,3,0,0,82,5,2,0,1,6,172,0,94,6,5,6,1,7,168,0,94,7,5,7,18,6,6,7,38,6,6,1,85,1,6,0,82,3,1,0,137,4,0,0,139,3,0,0,140,5,15,0,0,0,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,32,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,76,42,3,0,1,13,32,0,135,12,208,2,13,0,0,0,25,6,11,16,25,7,11,12,25,8,11,8,25,9,11,4,0,10,11,0,85,6,0,0,85,7,1,0,85,8,2,0,85,9,3,0,85,10,4,0,82,12,6,0,82,13,7,0,109,12,20,13,82,13,6,0,82,12,7,0,109,13,16,12,82,12,6,0,82,13,7,0,82,14,8,0,3,13,13,14,109,12,24,13,82,13,6,0,82,12,9,0,109,13,28,12,82,12,6,0,82,13,10,0,134,5,0,0,92,152,2,0,12,13,0,0,137,11,0,0,139,5,0,0,140,2,13,0,0,0,0,0,127,9,0,0,87,9,0,0,127,9,0,0,82,4,9,0,127,9,0,0,106,5,9,4,1,9,52,0,135,6,216,2,4,5,9,0,135,9,211,2,1,9,255,7,19,9,6,9,1,11,0,0,1,10,0,8,138,9,11,10,84,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0,12,75,3,0], eb + 204800);
  HEAPU8.seteb + 215040);
  HEAPU8.set([139,0,0,0,140,1,9,0,0,0,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,60,112,3,0,1,7,16,0,135,6,208,2,7,0,0,0,0,1,5,0,25,4,5,4,85,1,0,0,1,6,0,0,83,4,6,0,2,6,0,0,224,147,0,0,82,7,1,0,90,6,6,7,2,7,0,0,224,149,0,0,82,8,1,0,90,7,7,8,46,6,6,7,172,112,3,0,2,6,0,0,224,147,0,0,82,7,1,0,90,6,6,7,32,6,6,1,121,6,8,0,1,6,1,0,83,4,6,0,78,2,4,0,38,6,2,1,0,3,6,0,137,5,0,0,139,3,0,0,1,6,0,0,83,4,6,0,78,2,4,0,38,6,2,1,0,3,6,0,137,5,0,0,139,3,0,0,140,1,9,0,0,0,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,0,113,3,0,1,7,16,0,135,6,208,2,7,0,0,0,0,1,5,0,25,4,5,4,85,1,0,0,1,6,0,0,83,4,6,0,2,6,0,0,224,147,0,0,82,7,1,0,90,6,6,7,2,7,0,0,224,149,0,0,82,8,1,0,90,7,7,8,46,6,6,7,108,113,3,0,2,6,0,0,224,147,0,0,82,7,1,0,90,6,6,7,120,6,8,0,1,6,1,0,83,4,6,0,78,2,4,0,38,6,2,1,0,3,6,0,137,5,0,0,139,3,0,0,1,6,0,0,83,4,6,0,78,2,4,0,38,6,2,1,0,3,6,0,137,5,0,0,139,3,0,0,140,2,9,0,0,0,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,192,113,3,0,1,7,16,0,135,6,208,2,7,0,0,0,25,2,5,8,25,3,5,4,0,4,5,0,85,3,0,0,85,4,1,0,82,6,3,0,34,6,6,0,82,7,4,0,34,7,7,0,20,6,6,7,121,6,4,0,1,6,0,0,85,2,6,0,119,0,15,0,82,6,4,0,120,6,4,0,1,6,1,0,85,2,6,0,119,0,10,0,82,6,3,0,2,7,0,0,255,255,255,127,82,8,4,0,6,7,7,8,17,6,6,7,38,6,6,1,85,2,6,0,119,0,1,0,137,5,0,0,82,6,2,0,139,6,0,0,140,2,11,0,0,0,0,0,136,6,0,0,0,4,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,116,114,3,0,1,7,16,0,135,6,208,2,7,0,0,0,25,2,4,4,0,3,4,0,85,2,0,0,85,3,1,0,82,7,3,0,106,7,7,4,82,8,2,0,134,6,0,0,184,15,3,0,7,8,0,0,82,5,3,0,25,8,5,8,1,7,1,0,106,9,5,4,82,10,2,0,134,6,0,0,216,125,3,0,8,7,9,10,82,6,3,0,1,10,0,0,83,6,10,0,82,10,3,0,1,6,0,0,107,10,1,6,82,6,3,0,1,10,0,0,109,6,4,10,137,4,0,0,139,0,0,0,140,1,8,0,0,0,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,32,115,3,0,1,6,16,0,135,5,208,2,6,0,0,0,25,1,4,4,0,3,4,0,85,1,0,0,82,6,1,0,1,7,125,55,134,5,0,0,192,18,3,0,6,7,0,0,85,3,5,0,82,7,1,0,134,5,0,0,212,148,3,0,7,0,0,0,82,5,3,0,121,5,4,0,82,2,3,0,137,4,0,0,139,2,0,0,82,7,1,0,1,6,137,55,134,5,0,0,192,18,3,0,7,6,0,0,85,3,5,0,82,6,1,0,134,5,0,0,212,148,3,0,6,0,0,0,82,2,3,0,137,4,0,0,139,2,0,0,140,1,7,0,0,0,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,212,115,3,0,1,6,16,0,135,5,208,2,6,0,0,0,25,1,4,4,0,2,4,0,89,2,0,0,88,5,2,0,145,5,5,0,59,6,0,0,145,6,6,0,71,5,5,6,121,5,5,0,59,5,0,0,145,5,5,0,89,1,5,0,119,0,15,0,88,5,2,0,145,5,5,0,59,6,1,0,145,6,6,0,73,5,5,6,121,5,5,0,59,5,1,0,145,5,5,0,89,1,5,0,119,0,5,0,88,5,2,0,145,5,5,0,89,1,5,0,119,0,1,0,88,3,1,0,145,3,3,0,137,4,0,0,145,5,3,0,139,5,0,0,140,2,10,0,0,0,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,140,116,3,0,1,8,16,0,135,7,208,2,8,0,0,0,25,3,6,8,25,4,6,4,0,5,6,0,85,4,0,0,85,5,1,0,82,7,5,0,34,7,7,0,121,7,7,0,1,7,0,0,85,3,7,0,82,2,3,0,137,6,0,0,139,2,0,0,119,0,12,0,82,7,4,0,2,8,0,0,255,255,255,127,82,9,5,0,4,8,8,9,17,7,7,8,38,7,7,1,85,3,7,0,82,2,3,0,137,6,0,0,139,2,0,0,1,7,0,0,139,7,0,0,140,1,13,0,0,0,0,0,1,12,43,0,134,11,0,0,4,173,3,0,0,12,0,0,32,4,11,0,78,5,0,0,41,11,5,24,42,11,11,24,0,10,11,0,121,4,5,0,33,12,10,114,38,12,12,1,0,11,12,0,119,0,3,0,1,12,2,0,0,11,12,0,0,1,11,0,1,12,120,0,134,11,0,0,4,173,3,0,0,12,0,0,32,6,11,0,121,6,3,0,0,11,1,0,119,0,4,0,1,12,128,0,20,12,1,12,0,11,12,0,0,8,11,0,1,12,101,0,134,11,0,0,4,173,3,0,0,12,0,0,32,7,11,0,121,7,3,0,0,11,8,0,119,0,5,0,2,12,0,0,0,0,8,0,20,12,8,12,0,11,12,0,0,2,11,0,32,12,10,114,121,12,3,0,0,11,2,0,119,0,3,0,39,12,2,64,0,11,12,0,0,9,11,0,32,12,10,119,121,12,5,0,1,12,0,2,20,12,9,12,0,11,12,0,119,0,2,0,0,11,9,0,0,3,11,0,32,12,10,97,121,12,5,0,1,12,0,4,20,12,3,12,0,11,12,0,119,0,2,0,0,11,3,0,139,11,0,0,140,2,13,0,0,0,0,0,78,6,0,0,78,7,1,0,41,11,6,24,42,11,11,24,32,11,11,0,121,11,4,0,1,11,1,0,0,10,11,0,119,0,7,0,41,11,6,24,42,11,11,24,41,12,7,24,42,12,12,24,14,11,11,12,0,10,11,0,121,10,4,0,0,4,7,0,0,5,6,0,119,0,23,0,0,2,1,0,0,3,0,0,25,3,3,1,25,2,2,1,78,8,3,0,78,9,2,0,41,11,8,24,42,11,11,24,32,11,11,0,121,11,4,0,1,11,1,0,0,10,11,0,119,0,7,0,41,11,8,24,42,11,11,24,41,12,9,24,42,12,12,24,14,11,11,12,0,10,11,0,121,10,239,255,0,4,9,0,0,5,8,0,1,10,255,0,19,10,5,10,1,11,255,0,19,11,4,11,4,10,10,11,139,10,0,0,140,2,9,0,0,0,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,0,119,3,0,1,8,16,0,135,7,208,2,8,0,0,0,0,5,6,0,25,3,0,4,82,7,3,0,3,4,7,1,85,5,1,0,1,8,68,41,134,7,0,0,12,160,3,0,8,5,0,0,106,7,0,8,47,7,7,4,80,119,3,0,1,8,119,41,134,7,0,0,12,124,3,0,8,0,0,0,1,8,1,0,135,7,61,3,8,0,0,0,119,0,7,0,82,7,0,0,82,8,3,0,3,2,7,8,85,3,4,0,137,6,0,0,139,2,0,0,1,8,0,0,139,8,0,0,140,3,8,0,0,0,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,32,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,168,119,3,0,1,7,32,0,135,6,208,2,7,0,0,0,0,4,5,0,1,7,9,0,109,0,36,7,82,7,0,0,38,7,7,64,120,7,13,0,25,7,0,60,116,4,7,0,1,6,19,84,109,4,4,6,25,7,5,16,109,4,8,7,1,6,54,0,135,7,34,3,6,4,0,0,121,7,3,0,1,6,255,255,107,0,75,6,134,3,0,0,108,136,2,0,0,1,2,0,137,5,0,0,139,3,0,0,140,0,7,0,0,0,0,0,136,4,0,0,0,1,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,60,120,3,0,1,5,16,0,135,4,208,2,5,0,0,0,1,4,32,0,2,5,0,0,8,158,0,0,82,5,5,0,49,4,4,5,104,120,3,0,1,5,4,0,1,6,192,41,134,4,0,0,104,5,3,0,5,6,1,0,1,4,172,39,82,4,4,0,1,6,0,23,45,4,4,6,160,120,3,0,2,4,0,0,168,164,0,0,1,6,1,0,83,4,6,0,2,6,0,0,196,157,0,0,2,4,0,0,12,158,0,0,85,6,4,0,2,4,0,0,176,139,0,0,2,6,0,0,8,158,0,0,82,6,6,0,41,6,6,6,3,0,4,6,2,6,0,0,196,157,0,0,82,2,6,0,25,3,0,64,116,0,2,0,25,0,0,4,25,2,2,4,54,6,0,3,204,120,3,0,2,6,0,0,8,158,0,0,2,4,0,0,8,158,0,0,82,4,4,0,25,4,4,1,85,6,4,0,137,1,0,0,139,0,0,0,140,1,5,0,0,0,0,0,130,3,1,0,82,1,3,0,3,2,1,0,1,3,0,0,15,3,3,0,15,4,2,1,19,3,3,4,34,4,2,0,20,3,3,4,121,3,7,0,135,3,70,3,1,4,12,0,135,3,71,3,4,0,0,0,1,3,255,255,139,3,0,0,130,3,1,0,85,3,2,0,135,3,72,3,47,3,3,2,132,121,3,0,135,3,73,3,120,3,8,0,130,3,1,0,85,3,1,0,1,4,12,0,135,3,71,3,4,0,0,0,1,3,255,255,139,3,0,0,139,1,0,0,140,0,6,0,0,0,0,0,136,2,0,0,0,1,2,0,136,2,0,0,25,2,2,32,137,2,0,0,130,2,0,0,136,3,0,0,49,2,2,3,192,121,3,0,1,3,32,0,135,2,208,2,3,0,0,0,0,0,1,0,1,3,0,5,1,4,208,2,1,5,95,41,134,2,0,0,20,206,2,0,3,4,5,0,1,5,100,41,134,2,0,0,20,171,2,0,0,5,0,0,2,2,0,0,0,157,0,0,82,5,0,0,85,2,5,0,2,5,0,0,4,157,0,0,106,2,0,4,85,5,2,0,2,2,0,0,8,157,0,0,106,5,0,8,85,2,5,0,2,5,0,0,12,157,0,0,106,2,0,12,85,5,2,0,2,2,0,0,16,157,0,0,106,5,0,16,85,2,5,0,134,5,0,0,208,96,3,0,2,5,0,0,20,157,0,0,1,4,0,64,135,2,1,0,4,0,0,0,85,5,2,0,2,2,0,0,24,157,0,0,1,5,0,0,85,2,5,0,2,5,0,0,28,157,0,0,1,2,0,64,85,5,2,0,1,5,1,0,1,4,0,0,1,3,1,0,135,2,74,3,5,4,3,0,134,2,0,0,16,161,3,0,137,1,0,0,1,2,0,0,139,2,0,0,140,1,6,0,0,0,0,0,136,3,0,0,0,2,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,220,122,3,0,1,4,16,0,135,3,208,2,4,0,0,0,0,1,2,0,85,1,0,0,82,3,1,0,2,4,0,0,170,170,0,0,19,3,3,4,42,3,3,1,82,4,1,0,1,5,85,85,19,4,4,5,41,4,4,1,20,3,3,4,85,1,3,0,82,3,1,0,2,4,0,0,204,204,0,0,19,3,3,4,42,3,3,2,82,4,1,0,1,5,51,51,19,4,4,5,41,4,4,2,20,3,3,4,85,1,3,0,82,3,1,0,2,4,0,0,240,240,0,0,19,3,3,4,42,3,3,4,82,4,1,0,1,5,15,15,19,4,4,5,41,4,4,4,20,3,3,4,85,1,3,0,82,3,1,0,2,4,0,0,0,255,0,0,19,3,3,4,42,3,3,8,82,4,1,0,1,5,255,0,19,4,4,5,41,4,4,8,20,3,3,4,85,1,3,0,137,2,0,0,82,3,1,0,139,3,0,0,140,3,13,0,0,0,0,0,2,11,0,0,88,157,0,0,82,8,11,0,2,11,0,0,88,157,0,0,25,12,8,1,85,11,12,0,1,12,176,119,27,11,8,20,3,10,12,11,1,12,1,0,107,10,16,12,38,11,2,1,107,10,17,11,0,9,0,0,106,3,9,4,25,4,10,8,116,4,9,0,109,4,4,3,0,5,1,0,106,6,5,4,0,7,10,0,116,7,5,0,109,7,4,6,139,0,0,0,140,1,8,0,0,0,0,0,1,6,204,39,82,1,6,0,1,6,255,255,106,7,1,76,47,6,6,7,60,124,3,0,134,4,0,0,16,186,3,0,1,0,0,0,119,0,2,0,1,4,0,0,134,6,0,0,72,174,3,0,0,1,0,0,34,6,6,0,121,6,3,0,1,5,255,255,119,0,21,0,102,6,1,75,33,6,6,10,121,6,12,0,25,2,1,20,82,3,2,0,106,6,1,16,48,6,3,6,148,124,3,0,25,6,3,1,85,2,6,0,1,6,10,0,83,3,6,0,1,5,0,0,119,0,7,0,1,7,10,0,134,6,0,0,36,27,3,0,1,7,0,0,42,6,6,31,0,5,6,0,121,4,4,0,134,6,0,0,4,186,3,0,1,0,0,0,139,5,0,0,140,2,11,0,0,0,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,248,124,3,0,1,9,16,0,135,8,208,2,9,0,0,0,25,2,7,8,25,3,7,4,25,4,7,12,0,5,7,0,85,2,0,0,85,3,1,0,1,8,0,0,83,4,8,0,82,8,2,0,1,9,46,0,134,6,0,0,24,180,3,0,8,9,0,0,85,5,6,0,121,6,9,0,82,8,5,0,82,10,3,0,134,9,0,0,4,118,3,0,8,10,0,0,120,9,3,0,1,9,1,0,83,4,9,0,137,7,0,0,78,9,4,0,38,9,9,1,139,9,0,0,140,3,12,0,0,0,0,0,2,9,0,0,255,0,0,0,120,2,3,0,1,6,0,0,119,0,22,0,0,3,0,0,0,4,2,0,0,5,1,0,78,7,3,0,78,8,5,0,41,10,7,24,42,10,10,24,41,11,8,24,42,11,11,24,53,10,10,11,200,125,3,0,26,4,4,1,120,4,3,0,1,6,0,0,119,0,7,0,25,3,3,1,25,5,5,1,119,0,242,255,19,10,7,9,19,11,8,9,4,6,10,11,139,6,0,0,140,4,12,0,0,0,0,0,5,7,2,1,32,10,1,0,1,11,0,0,125,9,10,11,2,0,0,0,1,11,255,255,106,10,3,76,47,11,11,10,64,126,3,0,134,11,0,0,16,186,3,0,3,0,0,0,32,8,11,0,134,4,0,0,196,223,2,0,0,7,3,0,121,8,3,0,0,5,4,0,119,0,9,0,134,11,0,0,4,186,3,0,3,0,0,0,0,5,4,0,119,0,4,0,134,5,0,0,196,223,2,0,0,7,3,0,45,11,5,7,92,126,3,0,0,6,9,0,119,0,2,0,7,6,5,1,139,6,0,0,140,1,5,0,0,0,0,0,59,3,124,1,145,3,3,0,89,0,3,0,59,4,38,2,145,4,4,0,113,0,4,4,59,3,0,0,145,3,3,0,113,0,8,3,59,4,0,0,145,4,4,0,113,0,12,4,1,4,136,39,82,2,4,0,109,0,16,2,109,0,20,2,1,3,0,0,107,0,24,3,1,4,0,0,107,0,25,4,1,3,0,0,107,0,26,3,25,1,0,28,1,3,0,0,85,1,3,0,1,4,0,0,109,1,4,4,1,3,0,0,109,1,8,3,1,4,0,0,109,1,12,4,59,3,255,255,145,3,3,0,113,0,44,3,139,0,0,0,140,3,9,0,0,0,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,48,127,3,0,1,7,16,0,135,6,208,2,7,0,0,0,25,3,5,8,25,4,5,4,85,3,0,0,85,4,1,0,85,5,2,0,82,6,3,0,33,6,6,1,121,6,4,0,137,5,0,0,1,6,0,0,139,6,0,0,82,7,4,0,25,7,7,32,1,8,149,51,134,6,0,0,4,118,3,0,7,8,0,0,121,6,4,0,137,5,0,0,1,6,0,0,139,6,0,0,135,6,66,3,137,5,0,0,1,6,0,0,139,6,0,0,140,4,11,0,0,0,0,0,32,9,0,0,32,10,1,0,19,9,9,10,121,9,3,0,0,4,2,0,119,0,22,0,0,5,2,0,0,7,1,0,0,8,0,0,26,6,5,1,1,9,208,30,38,10,8,15,91,9,9,10,20,9,9,3,83,6,9,0,1,9,4,0,135,8,216,2,8,7,9,0,135,7,211,2,32,9,8,0,32,10,7,0,19,9,9,10,121,9,3,0,0,4,6,0,119,0,3,0,0,5,6,0,119,0,239,255,139,4,0,0,140,4,11,0,0,0,0,0,0,4,0,0,0,5,2,0,134,6,0,0,248,144,3,0,4,5,0,0,135,7,211,2,5,9,1,5,5,10,3,4,3,9,9,10,3,9,9,7,38,10,7,0,20,9,9,10,135,8,217,2,9,0,0,0,139,6,0,0,140,4,14,0,0,0,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,136,128,3,0,1,10,16,0,135,9,208,2,10,0,0,0,25,4,8,12,25,5,8,8,25,6,8,4,0,7,8,0,85,4,0,0,85,5,1,0,85,6,2,0,85,7,3,0,82,10,4,0,82,11,5,0,82,12,6,0,82,13,7,0,135,9,75,3,10,11,12,13,137,8,0,0,139,0,0,0,140,0,5,0,0,0,0,0,136,3,0,0,0,2,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,0,129,3,0,1,4,16,0,135,3,208,2,4,0,0,0,0,0,2,0,2,3,0,0,4,162,0,0,82,3,3,0,36,3,3,0,121,3,3,0,137,2,0,0,139,0,0,0,1,3,0,0,85,0,3,0,2,3,0,0,0,162,0,0,82,1,3,0,2,3,0,0,4,162,0,0,82,3,3,0,82,4,0,0,56,3,3,4,112,129,3,0,82,4,0,0,41,4,4,2,94,4,1,4,135,3,214,2,4,0,0,0,82,3,0,0,25,3,3,1,85,0,3,0,119,0,239,255,135,3,214,2,1,0,0,0,2,3,0,0,4,162,0,0,1,4,0,0,85,3,4,0,137,2,0,0,139,0,0,0,140,1,7,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,200,129,3,0,1,5,16,0,135,4,208,2,5,0,0,0,0,2,3,0,25,1,3,8,85,1,0,0,82,4,1,0,34,4,4,1,121,4,6,0,2,4,0,0,200,156,0,0,59,5,0,0,87,4,5,0,119,0,8,0,2,5,0,0,200,156,0,0,59,4,1,0,82,6,1,0,76,6,6,0,66,4,4,6,87,5,4,0,2,6,0,0,200,156,0,0,86,5,6,0,145,5,5,0,59,6,232,3,145,6,6,0,65,4,5,6,145,4,4,0,87,2,4,0,1,6,1,0,1,5,105,51,134,4,0,0,104,5,3,0,6,5,2,0,137,3,0,0,139,0,0,0,140,1,9,0,0,0,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,32,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,136,130,3,0,1,6,32,0,135,5,208,2,6,0,0,0,25,1,4,16,25,2,4,8,0,3,4,0,89,1,0,0,134,5,0,0,56,186,3,0,87,2,5,0,59,5,0,0,87,3,5,0,86,5,3,0,86,6,2,0,64,5,5,6,88,7,1,0,145,7,7,0,59,8,232,3,145,8,8,0,66,6,7,8,145,6,6,0,71,5,5,6,120,5,2,0,119,0,5,0,134,5,0,0,56,186,3,0,87,3,5,0,119,0,241,255,137,4,0,0,139,0,0,0,140,1,9,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,44,131,3,0,1,5,16,0,135,4,208,2,5,0,0,0,0,1,3,0,89,1,0,0,88,4,1,0,145,4,4,0,59,5,1,0,145,5,5,0,72,4,4,5,121,4,16,0,88,5,1,0,145,5,5,0,59,6,2,0,145,6,6,0,66,4,5,6,145,4,4,0,61,6,0,0,0,0,0,63,145,6,6,0,63,2,4,6,145,2,2,0,137,3,0,0,145,6,2,0,139,6,0,0,119,0,7,0,1,4,89,65,1,5,138,59,1,7,10,3,1,8,100,65,135,6,209,2,4,5,7,8,59,6,0,0,145,6,6,0,139,6,0,0,140,0,4,0,0,0,0,0,136,2,0,0,0,1,2,0,136,2,0,0,25,2,2,32,137,2,0,0,130,2,0,0,136,3,0,0,49,2,2,3,228,131,3,0,1,3,32,0,135,2,208,2,3,0,0,0,0,0,1,0,2,2,0,0,52,162,0,0,82,2,2,0,85,0,2,0,2,3,0,0,56,162,0,0,82,3,3,0,109,0,4,3,2,2,0,0,60,162,0,0,82,2,2,0,109,0,8,2,2,3,0,0,64,162,0,0,82,3,3,0,109,0,12,3,2,2,0,0,68,162,0,0,82,2,2,0,109,0,16,2,134,2,0,0,248,145,3,0,0,0,0,0,2,3,0,0,80,162,0,0,82,3,3,0,135,2,214,2,3,0,0,0,137,1,0,0,139,0,0,0,140,0,5,0,0,0,0,0,2,1,0,0,85,40,0,0,2,2,0,0,84,161,0,0,82,2,2,0,32,2,2,1,2,3,0,0,84,161,0,0,82,3,3,0,32,3,3,2,20,2,2,3,2,3,0,0,88,161,0,0,82,3,3,0,34,3,3,2,19,2,2,3,121,2,7,0,2,2,0,0,84,161,0,0,1,3,4,0,85,2,3,0,134,3,0,0,4,169,3,0,134,0,0,0,4,169,3,0,2,3,0,0,184,156,0,0,86,3,3,0,64,3,0,3,59,2,44,1,73,3,3,2,2,2,0,0,84,161,0,0,82,2,2,0,32,2,2,8,19,3,3,2,2,2,0,0,88,161,0,0,82,2,2,0,34,2,2,2,19,3,3,2,121,3,11,0,2,3,0,0,84,161,0,0,1,2,4,0,85,3,2,0,134,2,0,0,4,169,3,0,2,2,0,0,181,164,0,0,1,3,1,0,83,2,3,0,2,3,0,0,84,161,0,0,82,3,3,0,32,3,3,16,2,2,0,0,84,161,0,0,82,2,2,0,32,2,2,64,20,3,3,2,2,2,0,0,84,161,0,0,82,2,2,0,32,2,2,32,20,3,3,2,2,2,0,0,84,161,0,0,82,2,2,0,1,4,128,0,13,2,2,4,20,3,3,2,120,3,2,0,139,0,0,0,2,3,0,0,84,161,0,0,1,2,0,0,85,3,2,0,139,0,0,0,140,2,10,0,0,0,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,220,133,3,0,1,8,16,0,135,7,208,2,8,0,0,0,0,5,6,0,25,2,6,12,25,3,6,8,85,2,0,0,85,3,1,0,82,4,3,0,116,5,2,0,109,5,4,4,1,8,2,0,1,9,216,53,134,7,0,0,104,5,3,0,8,9,5,0,137,6,0,0,139,0,0,0,140,1,10,0,0,0,0,0,136,6,0,0,0,4,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,80,134,3,0,1,7,16,0,135,6,208,2,7,0,0,0,0,1,4,0,85,1,0,0,82,6,1,0,1,7,152,0,94,3,6,7,82,5,1,0,106,7,5,80,112,8,5,56,145,8,8,0,134,6,0,0,164,22,3,0,7,8,0,0,5,2,3,6,137,4,0,0,139,2,0,0,140,1,10,0,0,0,0,0,136,6,0,0,0,4,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,196,134,3,0,1,7,16,0,135,6,208,2,7,0,0,0,0,1,4,0,85,1,0,0,82,6,1,0,1,7,156,0,94,3,6,7,82,5,1,0,106,7,5,84,112,8,5,60,145,8,8,0,134,6,0,0,164,22,3,0,7,8,0,0,5,2,3,6,137,4,0,0,139,2,0,0,140,2,11,0,0,0,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,56,135,3,0,1,7,16,0,135,6,208,2,7,0,0,0,25,2,5,4,0,3,5,0,85,2,0,0,85,3,1,0,82,6,3,0,36,6,6,16,121,6,12,0,82,6,2,0,134,4,0,0,164,122,3,0,6,0,0,0,137,5,0,0,1,6,16,0,82,7,3,0,4,6,6,7,23,6,4,6,139,6,0,0,119,0,7,0,1,7,81,58,1,8,109,54,1,9,231,14,1,10,92,58,135,6,209,2,7,8,9,10,1,6,0,0,139,6,0,0,140,3,12,0,0,0,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,216,135,3,0,1,9,16,0,135,8,208,2,9,0,0,0,25,4,7,8,25,5,7,4,0,6,7,0,85,4,0,0,85,5,1,0,85,6,2,0,82,8,4,0,82,10,5,0,82,11,6,0,5,9,10,11,41,9,9,2,3,3,8,9,137,7,0,0,139,3,0,0,140,1,8,0,0,0,0,0,25,2,0,74,78,4,2,0,1,6,255,0,3,6,4,6,20,6,6,4,83,2,6,0,82,5,0,0,38,6,5,8,120,6,13,0,1,7,0,0,109,0,8,7,1,6,0,0,109,0,4,6,106,3,0,44,109,0,28,3,109,0,20,3,106,7,0,48,3,7,3,7,109,0,16,7,1,1,0,0,119,0,4,0,39,7,5,32,85,0,7,0,1,1,255,255,139,1,0,0,140,3,10,0,0,0,0,0,32,8,0,0,32,9,1,0,19,8,8,9,121,8,3,0,0,3,2,0,119,0,20,0,0,4,2,0,0,6,1,0,0,7,0,0,26,5,4,1,38,8,7,7,39,8,8,48,83,5,8,0,1,8,3,0,135,7,216,2,7,6,8,0,135,6,211,2,32,8,7,0,32,9,6,0,19,8,8,9,121,8,3,0,0,3,5,0,119,0,3,0,0,4,5,0,119,0,241,255,139,3,0,0,140,3,10,0,0,0,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,36,137,3,0,1,8,16,0,135,7,208,2,8,0,0,0,25,3,6,8,25,4,6,4,0,5,6,0,85,3,0,0,85,4,1,0,85,5,2,0,137,6,0,0,82,7,3,0,27,7,7,77,82,8,4,0,1,9,150,0,5,8,8,9,3,7,7,8,82,8,5,0,27,8,8,29,3,7,7,8,42,7,7,8,2,8,0,0,255,255,0,0,19,7,7,8,139,7,0,0,140,2,10,0,0,0,0,0,25,5,0,4,82,6,5,0,25,7,6,1,82,8,0,0,47,8,7,8,192,137,3,0,0,2,1,0,106,3,2,4,106,8,0,8,41,9,6,3,3,4,8,9,116,4,2,0,109,4,4,3,85,5,7,0,139,0,0,0,119,0,8,0,1,8,147,41,134,9,0,0,12,124,3,0,8,0,0,0,1,8,1,0,135,9,61,3,8,0,0,0,139,0,0,0,140,1,7,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,24,138,3,0,1,5,16,0,135,4,208,2,5,0,0,0,0,1,3,0,25,2,3,4,85,1,0,0,1,4,0,0,83,2,4,0,2,4,0,0,183,164,0,0,82,5,1,0,90,4,4,5,2,5,0,0,186,164,0,0,82,6,1,0,90,5,5,6,46,4,4,5,116,138,3,0,2,4,0,0,183,164,0,0,82,5,1,0,90,4,4,5,32,4,4,1,121,4,3,0,1,4,1,0,83,2,4,0,137,3,0,0,78,4,2,0,38,4,4,1,139,4,0,0,140,2,8,0,0,0,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,188,138,3,0,1,6,16,0,135,5,208,2,6,0,0,0,25,2,4,8,0,3,4,0,85,2,1,0,82,6,2,0,134,5,0,0,124,147,3,0,6,0,0,0,85,3,5,0,82,7,2,0,134,6,0,0,124,147,3,0,7,0,0,0,109,3,4,6,116,0,3,0,106,5,3,4,109,0,4,5,137,4,0,0,139,0,0,0,140,1,7,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,60,139,3,0,1,5,16,0,135,4,208,2,5,0,0,0,0,1,3,0,25,2,3,4,85,1,0,0,1,4,0,0,83,2,4,0,2,4,0,0,183,164,0,0,82,5,1,0,90,4,4,5,2,5,0,0,186,164,0,0,82,6,1,0,90,5,5,6,46,4,4,5,148,139,3,0,2,4,0,0,183,164,0,0,82,5,1,0,90,4,4,5,120,4,3,0,1,4,1,0,83,2,4,0,137,3,0,0,78,4,2,0,38,4,4,1,139,4,0,0,140,3,10,0,0,0,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,220,139,3,0,1,8,16,0,135,7,208,2,8,0,0,0,25,3,6,8,25,4,6,4,0,5,6,0,85,3,0,0,85,4,1,0,85,5,2,0,137,6,0,0,82,7,3,0,27,7,7,77,82,8,4,0,1,9,150,0,5,8,8,9,3,7,7,8,82,8,5,0,27,8,8,29,3,7,7,8,42,7,7,8,1,8,255,0,19,7,7,8,139,7,0,0,140,3,7,0,0,0,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,100,140,3,0,1,6,16,0,135,5,208,2,6,0,0,0,25,3,4,4,109,4,8,0,85,3,1,0,85,4,2,0,82,5,3,0,1,6,16,5,94,5,5,6,121,5,9,0,82,5,3,0,1,6,20,5,94,5,5,6,34,5,5,4,121,5,4,0,137,4,0,0,1,5,0,0,139,5,0,0,137,4,0,0,1,5,0,0,139,5,0,0,140,3,12,0,0,0,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,232,140,3,0,1,9,16,0,135,8,208,2,9,0,0,0,25,3,7,8,25,4,7,4,0,5,7,0,85,3,0,0,85,4,1,0,85,5,2,0,82,8,4,0,1,9,1,0,82,10,5,0,82,11,3,0,134,6,0,0,8,219,2,0,8,9,10,11,137,7,0,0,139,6,0,0,140,1,8,0,0,0,0,0,82,7,0,0,78,7,7,0,134,6,0,0,60,184,3,0,7,0,0,0,120,6,3,0,1,1,0,0,119,0,18,0,1,2,0,0,82,5,0,0,27,6,2,10,26,6,6,48,78,7,5,0,3,3,6,7,25,4,5,1,85,0,4,0,78,6,4,0,134,7,0,0,60,184,3,0,6,0,0,0,120,7,3,0,0,1,3,0,119,0,3,0,0,2,3,0,119,0,241,255,139,1,0,0,140,2,10,0,0,0,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,204,141,3,0,1,8,16,0,135,7,208,2,8,0,0,0,25,2,6,4,0,3,6,0,89,2,0,0,89,3,1,0,88,4,2,0,145,4,4,0,88,5,3,0,145,5,5,0,1,9,176,39,88,8,9,0,145,8,8,0,134,7,0,0,236,129,2,0,4,5,8,0,137,6,0,0,139,0,0,0,140,2,9,0,0,0,0,0,88,3,0,0,145,3,3,0,88,7,1,0,145,7,7,0,73,4,3,7,112,5,0,4,145,5,5,0,121,4,14,0,112,7,1,12,145,7,7,0,71,6,5,7,112,7,1,4,145,7,7,0,73,2,5,7,112,7,1,8,145,7,7,0,71,7,3,7,19,7,2,7,19,7,6,7,139,7,0,0,119,0,3,0,1,7,0,0,139,7,0,0,1,7,0,0,139,7,0,0,140,0,8,0,0,0,0,0,136,6,0,0,0,3,6,0,136,6,0,0,25,6,6,64,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,176,142,3,0,1,7,64,0,135,6,208,2,7,0,0,0,0,0,3,0,2,6,0,0,196,157,0,0,82,1,6,0,134,6,0,0,4,103,3,0,0,0,0,0,0,2,1,0,0,4,0,0,25,5,2,64,116,2,4,0,25,2,2,4,25,4,4,4,54,6,2,5,216,142,3,0,137,3,0,0,139,0,0,0,140,4,12,0,0,0,0,0,88,5,1,0,145,5,5,0,88,9,2,0,145,9,9,0,64,8,9,5,145,8,8,0,65,7,8,3,145,7,7,0,63,6,5,7,145,6,6,0,89,0,6,0,112,4,1,4,145,4,4,0,112,10,2,4,145,10,10,0,64,9,10,4,145,9,9,0,65,8,9,3,145,8,8,0,63,7,4,8,145,7,7,0,113,0,4,7,139,0,0,0,140,0,5,0,0,0,0,0,134,3,0,0,180,103,3,0,134,1,0,0,192,184,3,0,145,1,1,0,1,4,42,1,134,3,0,0,200,112,3,0,4,0,0,0,121,3,3,0,134,3,0,0,160,186,3,0,59,3,0,0,145,3,3,0,73,3,1,3,121,3,14,0,61,3,0,0,0,0,128,61,145,3,3,0,65,2,1,3,145,2,2,0,1,0,0,0,32,4,0,0,134,3,0,0,8,174,3,0,2,4,0,0,25,0,0,1,33,3,0,16,120,3,250,255,134,3,0,0,84,111,3,0,134,3,0,0,116,147,2,0,2,4,0,0,20,157,0,0,134,3,0,0,192,182,3,0,4,0,0,0,139,0,0,0,140,2,9,0,0,0,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,52,144,3,0,1,7,16,0,135,6,208,2,7,0,0,0,25,2,5,4,0,3,5,0,85,2,0,0,89,3,1,0,82,7,2,0,88,8,3,0,145,8,8,0,134,6,0,0,88,248,2,0,7,8,0,0,28,4,6,2,137,5,0,0,139,4,0,0,140,1,8,0,0,0,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,160,144,3,0,1,7,16,0,135,6,208,2,7,0,0,0,25,1,5,4,0,3,5,0,85,1,0,0,82,7,1,0,134,6,0,0,204,19,3,0,7,0,0,0,1,7,255,0,19,6,6,7,85,3,6,0,82,6,3,0,41,6,6,8,0,4,6,0,82,7,1,0,134,6,0,0,204,19,3,0,7,0,0,0,1,7,255,0,19,6,6,7,3,2,4,6,137,5,0,0,139,2,0,0,140,2,12,0,0,0,0,0,2,9,0,0,255,255,0,0,19,9,0,9,0,2,9,0,2,9,0,0,255,255,0,0,19,9,1,9,0,3,9,0,5,4,3,2,43,9,0,16,0,5,9,0,43,9,4,16,5,10,3,5,3,6,9,10,43,10,1,16,0,7,10,0,5,8,7,2,43,9,6,16,5,11,7,5,3,9,9,11,2,11,0,0,255,255,0,0,19,11,6,11,3,11,11,8,43,11,11,16,3,9,9,11,135,10,217,2,9,0,0,0,3,10,6,8,41,10,10,16,2,9,0,0,255,255,0,0,19,9,4,9,20,10,10,9,139,10,0,0,140,2,9,0,0,0,0,0,136,7,0,0,0,4,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,196,145,3,0,1,8,16,0,135,7,208,2,8,0,0,0,25,2,4,4,0,3,4,0,85,2,0,0,85,3,1,0,137,4,0,0,82,5,2,0,82,6,3,0,47,8,5,6,240,145,3,0,0,7,5,0,119,0,2,0,0,7,6,0,139,7,0,0,140,1,6,0,0,0,0,0,136,3,0,0,0,2,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,48,146,3,0,1,4,16,0,135,3,208,2,4,0,0,0,0,1,2,0,82,3,0,0,37,3,3,0,121,3,3,0,137,2,0,0,139,0,0,0,82,4,0,0,134,3,0,0,244,158,3,0,4,0,0,0,116,1,0,0,1,4,1,0,1,5,192,72,134,3,0,0,104,5,3,0,4,5,1,0,137,2,0,0,139,0,0,0,140,1,8,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,176,146,3,0,1,5,16,0,135,4,208,2,5,0,0,0,0,1,3,0,25,2,3,4,85,1,0,0,1,4,0,0,83,2,4,0,1,5,0,32,2,6,0,0,176,147,0,0,2,7,0,0,88,158,0,0,82,7,7,0,27,7,7,48,94,6,6,7,82,7,1,0,3,6,6,7,17,5,5,6,1,6,1,0,1,7,0,0,125,4,5,6,7,0,0,0,83,2,4,0,137,3,0,0,78,4,2,0,38,4,4,1,139,4,0,0,140,1,9,0,0,0,0,0,136,5,0,0,0,3,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,76,147,3,0,1,6,16,0,135,5,208,2,6,0,0,0,0,1,3,0,85,1,0,0,82,4,1,0,106,5,4,120,1,7,144,0,94,7,4,7,106,8,4,64,5,6,7,8,41,6,6,2,3,2,5,6,137,3,0,0,139,2,0,0,140,1,8,0,0,0,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,180,147,3,0,1,7,16,0,135,6,208,2,7,0,0,0,25,1,5,4,0,2,5,0,85,1,0,0,82,7,1,0,134,6,0,0,104,144,3,0,7,0,0,0,85,2,6,0,82,6,2,0,41,6,6,16,0,3,6,0,82,7,1,0,134,6,0,0,104,144,3,0,7,0,0,0,3,4,3,6,137,5,0,0,139,4,0,0,140,3,10,0,0,0,0,0,1,6,1,0,134,5,0,0,132,82,3,0,6,0,0,0,78,6,2,0,102,7,2,1,102,8,2,2,102,9,2,3,134,5,0,0,200,249,2,0,6,7,8,9,88,3,0,0,145,3,3,0,112,9,0,4,145,9,9,0,134,5,0,0,148,141,3,0,3,9,0,0,88,4,1,0,145,4,4,0,112,9,1,4,145,9,9,0,134,5,0,0,148,141,3,0,4,9,0,0,134,5,0,0,8,51,2,0,139,0,0,0,140,2,10,0,0,0,0,0,88,3,0,0,145,3,3,0,88,7,1,0,145,7,7,0,64,4,3,7,145,4,4,0,65,5,4,4,145,5,5,0,112,6,0,4,145,6,6,0,112,7,1,4,145,7,7,0,64,2,6,7,145,2,2,0,65,9,2,2,145,9,9,0,63,8,5,9,145,8,8,0,135,7,12,3,8,0,0,0,145,7,7,0,139,7,0,0,140,1,7,0,0,0,0,0,136,5,0,0,0,2,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,12,149,3,0,1,6,16,0,135,5,208,2,6,0,0,0,0,1,2,0,85,1,0,0,82,3,1,0,1,5,168,0,1,6,176,0,94,6,3,6,97,3,5,6,82,4,1,0,1,6,172,0,1,5,180,0,94,5,4,5,97,4,6,5,137,2,0,0,139,0,0,0,140,0,5,0,0,0,0,0,136,2,0,0,0,1,2,0,136,2,0,0,25,2,2,16,137,2,0,0,130,2,0,0,136,3,0,0,49,2,2,3,124,149,3,0,1,3,16,0,135,2,208,2,3,0,0,0,0,0,1,0,134,2,0,0,44,164,3,0,134,2,0,0,204,243,2,0,1,3,1,0,2,4,0,0,84,158,0,0,135,2,76,3,3,4,0,0,2,2,0,0,84,158,0,0,82,2,2,0,85,0,2,0,1,4,1,0,1,3,1,51,134,2,0,0,104,5,3,0,4,3,0,0,2,3,0,0,76,158,0,0,82,3,3,0,135,2,214,2,3,0,0,0,137,1,0,0,139,0,0,0,140,0,10,0,0,0,0,0,2,0,0,0,248,156,0,0,82,6,0,0,106,7,0,4,2,8,0,0,45,127,149,76,2,9,0,0,45,244,81,88,134,3,0,0,12,128,3,0,6,7,8,9,135,9,211,2,1,8,1,0,1,7,0,0,134,4,0,0,40,171,3,0,3,9,8,7,135,5,211,2,2,1,0,0,248,156,0,0,85,1,4,0,109,1,4,5,1,7,33,0,135,2,216,2,4,5,7,0,135,7,211,2,139,2,0,0,140,1,7,0,0,0,0,0,106,5,0,68,121,5,15,0,106,4,0,116,25,1,0,112,121,4,3,0,82,6,1,0,109,4,112,6,82,3,1,0,120,3,6,0,134,6,0,0,12,185,3,0,1,5,232,0,3,2,6,5,119,0,2,0,25,2,3,116,85,2,4,0,139,0,0,0,140,2,7,0,0,0,0,0,120,0,3,0,1,2,0,0,119,0,14,0,5,3,1,0,2,5,0,0,255,255,0,0,20,6,1,0,48,5,5,6,232,150,3,0,7,5,3,0,13,5,5,1,1,6,255,255,125,2,5,3,6,0,0,0,119,0,2,0,0,2,3,0,135,4,1,0,2,0,0,0,120,4,2,0,139,4,0,0,26,6,4,4,82,6,6,0,38,6,6,3,120,6,2,0,139,4,0,0,1,5,0,0,135,6,213,2,4,5,2,0,139,4,0,0,140,1,6,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,88,151,3,0,1,5,16,0,135,4,208,2,5,0,0,0,0,1,3,0,25,2,3,4,85,1,0,0,1,4,0,0,83,2,4,0,82,5,1,0,134,4,0,0,92,159,3,0,5,0,0,0,38,4,4,1,32,4,4,1,121,4,3,0,1,4,1,0,83,2,4,0,137,3,0,0,78,4,2,0,38,4,4,1,139,4,0,0,140,1,6,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,216,151,3,0,1,5,16,0,135,4,208,2,5,0,0,0,0,2,3,0,106,5,0,60,134,4,0,0,196,185,3,0,5,0,0,0,85,2,4,0,1,5,6,0,135,4,59,3,5,2,0,0,134,1,0,0], eb + 225280);
  HEAPU8.set([116,171,3,0,4,0,0,0,137,3,0,0,139,1,0,0,140,1,5,0,0,0,0,0,136,3,0,0,0,2,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,72,152,3,0,1,4,16,0,135,3,208,2,4,0,0,0,0,1,2,0,85,1,0,0,82,3,1,0,1,4,1,23,45,3,3,4,120,152,3,0,2,3,0,0,196,157,0,0,2,4,0,0,132,157,0,0,85,3,4,0,119,0,10,0,82,4,1,0,1,3,0,23,45,4,4,3,156,152,3,0,2,4,0,0,196,157,0,0,2,3,0,0,200,157,0,0,85,4,3,0,1,3,172,39,82,4,1,0,85,3,4,0,137,2,0,0,139,0,0,0,140,1,6,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,232,152,3,0,1,5,16,0,135,4,208,2,5,0,0,0,25,1,3,4,0,2,3,0,85,1,0,0,82,5,1,0,134,4,0,0,228,38,3,0,5,0,0,0,85,2,4,0,82,5,1,0,134,4,0,0,212,148,3,0,5,0,0,0,137,3,0,0,82,4,2,0,139,4,0,0,140,1,6,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,92,153,3,0,1,5,16,0,135,4,208,2,5,0,0,0,25,1,3,4,0,2,3,0,85,2,0,0,82,5,2,0,134,4,0,0,156,161,3,0,5,0,0,0,38,4,4,1,32,4,4,1,121,4,4,0,1,4,1,0,83,1,4,0,119,0,3,0,1,4,0,0,83,1,4,0,137,3,0,0,78,4,1,0,38,4,4,1,139,4,0,0,140,1,7,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,224,153,3,0,1,5,16,0,135,4,208,2,5,0,0,0,0,2,3,0,134,4,0,0,80,105,3,0,0,0,0,0,120,4,12,0,106,5,0,32,38,5,5,15,1,6,1,0,135,4,36,3,5,0,2,6,32,4,4,1,121,4,3,0,79,1,2,0,119,0,4,0,1,1,255,255,119,0,2,0,1,1,255,255,137,3,0,0,139,1,0,0,140,2,9,0,0,0,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,100,154,3,0,1,6,16,0,135,5,208,2,6,0,0,0,25,2,4,4,0,3,4,0,85,2,0,0,85,3,1,0,82,6,2,0,1,7,184,39,82,8,3,0,134,5,0,0,132,24,3,0,6,7,8,0,137,4,0,0,139,0,0,0,140,3,8,0,0,0,0,0,120,2,3,0,1,3,0,0,119,0,15,0,1,6,255,0,19,6,1,6,0,5,6,0,0,4,2,0,26,4,4,1,90,6,0,4,41,7,5,24,42,7,7,24,52,6,6,7,220,154,3,0,120,4,250,255,1,3,0,0,119,0,2,0,3,3,0,4,139,3,0,0,140,1,6,0,0,0,0,0,1,4,255,255,106,5,0,76,47,4,4,5,60,155,3,0,134,4,0,0,16,186,3,0,0,0,0,0,32,3,4,0,82,4,0,0,43,4,4,4,38,4,4,1,0,1,4,0,121,3,3,0,0,2,1,0,119,0,10,0,134,4,0,0,4,186,3,0,0,0,0,0,0,2,1,0,119,0,5,0,82,4,0,0,43,4,4,4,38,4,4,1,0,2,4,0,139,2,0,0,140,3,8,0,0,0,0,0,1,6,255,255,106,7,0,76,47,6,6,7,164,155,3,0,134,6,0,0,16,186,3,0,0,0,0,0,32,5,6,0,134,3,0,0,184,80,3,0,0,1,2,0,121,5,3,0,0,4,3,0,119,0,9,0,134,6,0,0,4,186,3,0,0,0,0,0,0,4,3,0,119,0,4,0,134,4,0,0,184,80,3,0,0,1,2,0,139,4,0,0,140,2,9,0,0,0,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,236,155,3,0,1,6,16,0,135,5,208,2,6,0,0,0,25,2,4,4,0,3,4,0,85,2,0,0,85,3,1,0,82,6,2,0,82,7,3,0,1,8,1,0,134,5,0,0,208,180,3,0,6,7,8,0,137,4,0,0,139,0,0,0,140,2,7,0,0,0,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,84,156,3,0,1,6,16,0,135,5,208,2,6,0,0,0,25,2,4,4,0,3,4,0,85,2,0,0,85,3,1,0,137,4,0,0,82,5,2,0,82,6,3,0,41,6,6,3,3,5,5,6,139,5,0,0,140,3,7,0,0,0,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,32,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,180,156,3,0,1,6,32,0,135,5,208,2,6,0,0,0,0,3,4,0,109,4,16,0,111,4,8,1,87,3,2,0,2,5,0,0,8,162,0,0,86,6,3,0,75,6,6,0,85,5,6,0,137,4,0,0,139,0,0,0,140,1,3,0,0,0,0,0,2,1,0,0,52,162,0,0,82,1,1,0,85,0,1,0,2,2,0,0,56,162,0,0,82,2,2,0,109,0,4,2,2,1,0,0,60,162,0,0,82,1,1,0,109,0,8,1,2,2,0,0,64,162,0,0,82,2,2,0,109,0,12,2,2,1,0,0,68,162,0,0,82,1,1,0,109,0,16,1,2,2,0,0,72,162,0,0,82,2,2,0,109,0,20,2,2,1,0,0,76,162,0,0,82,1,1,0,109,0,24,1,2,2,0,0,80,162,0,0,82,2,2,0,109,0,28,2,139,0,0,0,140,1,6,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,164,157,3,0,1,5,16,0,135,4,208,2,5,0,0,0,0,1,3,0,85,1,0,0,82,5,1,0,112,4,5,60,145,4,4,0,134,2,0,0,104,160,3,0,4,0,0,0,137,3,0,0,139,2,0,0,140,1,6,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,4,158,3,0,1,5,16,0,135,4,208,2,5,0,0,0,0,1,3,0,85,1,0,0,82,5,1,0,112,4,5,56,145,4,4,0,134,2,0,0,104,160,3,0,4,0,0,0,137,3,0,0,139,2,0,0,140,2,7,0,0,0,0,0,109,0,104,1,106,2,0,8,106,3,0,4,4,4,2,3,109,0,108,4,33,5,1,0,15,6,1,4,19,5,5,6,121,5,4,0,3,6,3,1,109,0,100,6,119,0,2,0,109,0,100,2,139,0,0,0,140,3,9,0,0,0,0,0,88,3,1,0,145,3,3,0,88,6,2,0,145,6,6,0,63,5,3,6,145,5,5,0,89,0,5,0,112,4,1,4,145,4,4,0,112,7,2,4,145,7,7,0,63,6,4,7,145,6,6,0,113,0,4,6,139,0,0,0,140,3,9,0,0,0,0,0,88,3,1,0,145,3,3,0,88,6,2,0,145,6,6,0,64,5,3,6,145,5,5,0,89,0,5,0,112,4,1,4,145,4,4,0,112,7,2,4,145,7,7,0,64,6,4,7,145,6,6,0,113,0,4,6,139,0,0,0,140,1,5,0,0,0,0,0,136,3,0,0,0,2,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,44,159,3,0,1,4,16,0,135,3,208,2,4,0,0,0,0,1,2,0,85,1,0,0,82,3,1,0,37,3,3,0,121,3,3,0,137,2,0,0,139,0,0,0,1,4,1,0,135,3,76,3,4,1,0,0,137,2,0,0,139,0,0,0,140,1,7,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,148,159,3,0,1,5,16,0,135,4,208,2,5,0,0,0,0,1,3,0,85,1,0,0,2,5,0,0,160,161,0,0,82,5,5,0,82,6,1,0,135,4,77,3,5,6,0,0,33,2,4,0,137,3,0,0,139,2,0,0,140,3,6,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,248,159,3,0,1,5,16,0,135,4,208,2,5,0,0,0,113,3,8,0,113,3,4,1,89,3,2,0,137,3,0,0,139,0,0,0,140,2,7,0,0,0,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,68,160,3,0,1,6,16,0,135,5,208,2,6,0,0,0,0,2,4,0,85,2,1,0,1,5,204,39,82,5,5,0,134,3,0,0,124,186,2,0,5,0,2,0,137,4,0,0,139,3,0,0,140,1,6,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,160,160,3,0,1,5,16,0,135,4,208,2,5,0,0,0,0,1,3,0,89,1,0,0,88,4,1,0,145,4,4,0,59,5,1,0,145,5,5,0,73,4,4,5,38,4,4,1,0,2,4,0,137,3,0,0,139,2,0,0,140,2,9,0,0,0,0,0,88,2,0,0,145,2,2,0,88,5,1,0,145,5,5,0,65,3,2,5,145,3,3,0,112,4,0,4,145,4,4,0,112,7,1,4,145,7,7,0,65,6,4,7,145,6,6,0,63,5,3,6,145,5,5,0,139,5,0,0,140,0,4,0,0,0,0,0,136,1,0,0,0,0,1,0,136,1,0,0,25,1,1,16,137,1,0,0,130,1,0,0,136,2,0,0,49,1,1,2,72,161,3,0,1,2,16,0,135,1,208,2,2,0,0,0,1,1,0,0,121,1,3,0,134,1,0,0,68,162,3,0,134,1,0,0,172,131,3,0,134,1,0,0,68,149,3,0,2,2,0,0,160,161,0,0,82,2,2,0,135,1,78,3,2,0,0,0,135,1,251,2,1,2,1,0,1,3,254,53,134,1,0,0,104,5,3,0,2,3,0,0,137,0,0,0,139,0,0,0,140,1,7,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,212,161,3,0,1,5,16,0,135,4,208,2,5,0,0,0,0,1,3,0,85,1,0,0,2,5,0,0,160,161,0,0,82,5,5,0,82,6,1,0,135,4,79,3,5,6,0,0,33,2,4,0,137,3,0,0,139,2,0,0,140,2,8,0,0,0,0,0,88,2,0,0,145,2,2,0,112,5,1,4,145,5,5,0,65,3,2,5,145,3,3,0,112,4,0,4,145,4,4,0,88,7,1,0,145,7,7,0,65,6,4,7,145,6,6,0,64,5,3,6,145,5,5,0,139,5,0,0,140,0,5,0,0,0,0,0,136,2,0,0,0,1,2,0,136,2,0,0,25,2,2,16,137,2,0,0,130,2,0,0,136,3,0,0,49,2,2,3,124,162,3,0,1,3,16,0,135,2,208,2,3,0,0,0,0,0,1,0,1,2,0,0,121,2,13,0,1,3,59,0,1,4,0,0,134,2,0,0,184,15,3,0,3,4,0,0,1,4,0,0,134,2,0,0,196,87,3,0,4,0,0,0,1,2,1,0,83,0,2,0,119,0,3,0,1,2,0,0,83,0,2,0,137,1,0,0,78,2,0,0,38,2,2,1,139,2,0,0,140,3,9,0,0,0,0,0,88,3,1,0,145,3,3,0,88,4,2,0,145,4,4,0,65,5,3,4,145,5,5,0,89,0,5,0,112,7,1,4,145,7,7,0,65,6,4,7,145,6,6,0,113,0,4,6,139,0,0,0,140,10,11,0,0,0,0,0,135,10,99,1,0,1,2,3,4,5,6,7,8,9,0,0,139,0,0,0,140,1,6,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,96,163,3,0,1,5,16,0,135,4,208,2,5,0,0,0,0,1,3,0,85,1,0,0,82,4,1,0,134,2,0,0,228,154,3,0,4,0,0,0,137,3,0,0,139,2,0,0,140,1,6,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,184,163,3,0,1,5,16,0,135,4,208,2,5,0,0,0,0,1,3,0,85,1,0,0,82,4,1,0,135,2,1,0,4,0,0,0,137,3,0,0,139,2,0,0,140,1,5,0,0,0,0,0,136,3,0,0,0,2,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,12,164,3,0,1,4,16,0,135,3,208,2,4,0,0,0,0,1,2,0,85,1,0,0,2,3,0,0,88,162,0,0,82,4,1,0,85,3,4,0,137,2,0,0,139,0,0,0,140,0,3,0,0,0,0,0,1,1,0,0,135,0,232,2,1,0,0,0,2,1,0,0,200,160,0,0,82,1,1,0,2,2,0,0,76,161,0,0,82,2,2,0,135,0,80,3,1,2,0,0,2,2,0,0,200,160,0,0,82,2,2,0,2,1,0,0,80,161,0,0,82,1,1,0,135,0,80,3,2,1,0,0,2,1,0,0,76,161,0,0,82,1,1,0,135,0,81,3,1,0,0,0,2,1,0,0,80,161,0,0,82,1,1,0,135,0,81,3,1,0,0,0,2,1,0,0,200,160,0,0,82,1,1,0,135,0,31,3,1,0,0,0,139,0,0,0,140,2,5,0,0,0,0,0,136,3,0,0,0,2,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,248,164,3,0,1,4,16,0,135,3,208,2,4,0,0,0,109,2,4,0,85,2,1,0,137,2,0,0,139,0,0,0,140,1,5,0,0,0,0,0,2,1,0,0,132,157,0,0,0,2,0,0,25,3,1,64,116,1,2,0,25,1,1,4,25,2,2,4,54,4,1,3,32,165,3,0,139,0,0,0,140,1,5,0,0,0,0,0,2,1,0,0,200,157,0,0,0,2,0,0,25,3,1,64,116,1,2,0,25,1,1,4,25,2,2,4,54,4,1,3,80,165,3,0,139,0,0,0,140,2,5,0,0,0,0,0,136,3,0,0,0,2,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,160,165,3,0,1,4,16,0,135,3,208,2,4,0,0,0,109,2,4,0,85,2,1,0,137,2,0,0,139,0,0,0,140,1,5,0,0,0,0,0,136,3,0,0,0,2,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,232,165,3,0,1,4,16,0,135,3,208,2,4,0,0,0,0,1,2,0,85,1,0,0,2,3,0,0,84,162,0,0,82,4,1,0,85,3,4,0,137,2,0,0,1,4,0,0,139,4,0,0,140,1,7,0,0,0,0,0,88,1,0,0,145,1,1,0,65,2,1,1,145,2,2,0,112,3,0,4,145,3,3,0,65,6,3,3,145,6,6,0,63,5,2,6,145,5,5,0,135,4,12,3,5,0,0,0,145,4,4,0,139,4,0,0,140,6,7,0,0,0,0,0,135,6,193,0,0,1,2,3,4,5,0,0,139,0,0,0,140,2,5,0,0,0,0,0,136,3,0,0,0,2,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,156,166,3,0,1,4,16,0,135,3,208,2,4,0,0,0,109,2,4,0,85,2,1,0,137,2,0,0,139,0,0,0,140,10,12,0,0,0,0,0,1,11,30,0,135,10,82,3,11,0,0,0,139,0,0,0,140,3,7,0,0,0,0,0,88,4,1,0,145,4,4,0,66,3,4,2,145,3,3,0,89,0,3,0,112,5,1,4,145,5,5,0,66,4,5,2,145,4,4,0,113,0,4,4,139,0,0,0,140,6,7,0,0,0,0,0,135,6,189,0,0,1,2,3,4,5,0,0,139,0,0,0,140,4,7,0,0,0,0,0,4,5,1,3,0,4,5,0,16,6,0,2,4,4,5,6,135,6,217,2,4,0,0,0,4,6,0,2,139,6,0,0,140,1,5,0,0,0,0,0,134,1,0,0,136,185,3,0,82,4,1,0,109,0,56,4,82,2,1,0,121,2,2,0,109,2,52,0,85,1,0,0,134,4,0,0,232,185,3,0,139,0,0,0,140,1,4,0,0,0,0,0,136,2,0,0,0,1,2,0,136,2,0,0,25,2,2,16,137,2,0,0,130,2,0,0,136,3,0,0,49,2,2,3,164,167,3,0,1,3,16,0,135,2,208,2,3,0,0,0,89,1,0,0,137,1,0,0,59,2,0,0,145,2,2,0,139,2,0,0,140,1,4,0,0,0,0,0,136,2,0,0,0,1,2,0,136,2,0,0,25,2,2,16,137,2,0,0,130,2,0,0,136,3,0,0,49,2,2,3,240,167,3,0,1,3,16,0,135,2,208,2,3,0,0,0,89,1,0,0,137,1,0,0,59,2,2,0,145,2,2,0,139,2,0,0,140,1,4,0,0,0,0,0,136,2,0,0,0,1,2,0,136,2,0,0,25,2,2,16,137,2,0,0,130,2,0,0,136,3,0,0,49,2,2,3,60,168,3,0,1,3,16,0,135,2,208,2,3,0,0,0,89,1,0,0,137,1,0,0,59,2,1,0,145,2,2,0,139,2,0,0,140,11,13,0,0,0,0,0,1,12,47,0,135,11,83,3,12,0,0,0,139,0,0,0,140,3,6,0,0,0,0,0,85,0,2,0,41,5,2,3,134,4,0,0,200,118,3,0,1,5,0,0,109,0,8,4,1,3,0,0,109,0,4,3,139,0,0,0,140,7,8,0,0,0,0,0,135,7,60,1,0,1,2,3,4,5,6,0,139,0,0,0,140,0,7,0,0,0,0,0,2,2,0,0,248,161,0,0,82,0,2,0,2,2,0,0,252,161,0,0,82,1,2,0,28,3,0,2,28,4,1,2,2,5,0,0,240,161,0,0,82,5,5,0,4,5,5,0,2,6,0,0,244,161,0,0,82,6,6,0,4,6,6,1,134,2,0,0,80,128,3,0,3,4,5,6,139,0,0,0,140,0,4,0,0,0,0,0,136,2,0,0,0,1,2,0,136,2,0,0,25,2,2,16,137,2,0,0,130,2,0,0,136,3,0,0,49,2,2,3,60,169,3,0,1,3,16,0,135,2,208,2,3,0,0,0,0,0,1,0,59,2,0,0,87,0,2,0,137,1,0,0,86,2,0,0,139,2,0,0,140,6,7,0,0,0,0,0,135,6,114,1,0,1,2,3,4,5,0,0,139,0,0,0,140,10,12,0,0,0,0,0,1,11,46,0,135,10,84,3,11,0,0,0,139,0,0,0,140,1,5,0,0,0,0,0,2,3,0,0,160,164,0,0,88,2,3,0,145,2,2,0,59,3,1,0,145,3,3,0,65,1,2,3,145,1,1,0,89,0,1,0,2,4,0,0,164,164,0,0,88,2,4,0,145,2,2,0,59,4,1,0,145,4,4,0,65,3,2,4,145,3,3,0,113,0,4,3,139,0,0,0,140,5,6,0,0,0,0,0,135,5,201,1,0,1,2,3,4,0,0,0,139,0,0,0,140,2,5,0,0,0,0,0,120,1,3,0,1,2,0,0,119,0,6,0,82,3,1,0,106,4,1,4,134,2,0,0,16,199,2,0,3,4,0,0,32,3,2,0,125,4,3,0,2,0,0,0,139,4,0,0,140,5,6,0,0,0,0,0,135,5,107,0,0,1,2,3,4,0,0,0,139,0,0,0,140,10,12,0,0,0,0,0,1,11,23,0,135,10,85,3,11,0,0,0,139,0,0,0,140,6,7,0,0,0,0,0,135,6,97,1,0,1,2,3,4,5,0,0,139,0,0,0,140,5,6,0,0,0,0,0,135,5,62,0,0,1,2,3,4,0,0,0,139,0,0,0,140,9,11,0,0,0,0,0,1,10,45,0,135,9,86,3,10,0,0,0,139,0,0,0,140,7,9,0,0,0,0,0,1,8,37,0,135,7,87,3,8,0,0,0,139,0,0,0,140,1,4,0,0,0,0,0,127,2,0,0,87,2,0,0,127,2,0,0,82,1,2,0,127,3,0,0,106,3,3,4,135,2,217,2,3,0,0,0,139,1,0,0,140,1,6,0,0,0,0,0,78,2,0,0,102,3,0,1,102,4,0,2,102,5,0,3,134,1,0,0,144,8,3,0,2,3,4,5,134,1,0,0,244,184,3,0,139,0,0,0,140,4,5,0,0,0,0,0,135,4,193,1,0,1,2,3,139,0,0,0,140,4,8,0,0,0,0,0,3,4,0,2,3,6,1,3,16,7,4,0,3,6,6,7,135,5,217,2,6,0,0,0,139,4,0,0,140,4,5,0,0,0,0,0,135,4,93,0,0,1,2,3,139,0,0,0,140,4,5,0,0,0,0,0,135,4,14,1,0,1,2,3,139,0,0,0,140,1,4,0,0,0,0,0,1,2,0,240,48,2,2,0,164,171,3,0,134,2,0,0,96,186,3,0,1,3,0,0,4,3,3,0,85,2,3,0,1,1,255,255,119,0,2,0,0,1,0,0,139,1,0,0,140,2,5,0,0,0,0,0,112,3,1,4,145,3,3,0,68,2,3,0,145,2,2,0,89,0,2,0,82,3,1,0,109,0,4,3,139,0,0,0,140,8,10,0,0,0,0,0,1,9,44,0,135,8,88,3,9,0,0,0,139,0,0,0,140,4,5,0,0,0,0,0,135,4,186,2,0,1,2,3,139,0,0,0,140,4,5,0,0,0,0,0,135,4,199,0,0,1,2,3,139,0,0,0,140,4,5,0,0,0,0,0,135,4,240,0,0,1,2,3,139,0,0,0,140,4,5,0,0,0,0,0,135,4,143,1,0,1,2,3,139,0,0,0,140,6,8,0,0,0,0,0,1,7,36,0,135,6,89,3,7,0,0,0,139,0,0,0,140,6,8,0,0,0,0,0,1,7,29,0,135,6,90,3,7,0,0,0,139,0,0,0,140,4,5,0,0,0,0,0,135,4,59,2,0,1,2,3,139,0,0,0,140,4,5,0,0,0,0,0,135,4,145,2,0,1,2,3,139,0,0,0,140,4,5,0,0,0,0,0,135,4,84,2,0,1,2,3,139,0,0,0,140,4,5,0,0,0,0,0,135,4,61,0,0,1,2,3,139,0,0,0,140,4,5,0,0,0,0,0,135,4,30,1,0,1,2,3,139,0,0,0,140,4,5,0,0,0,0,0,135,4,178,0,0,1,2,3,139,0,0,0,140,4,6,0,0,0,0,0,1,5,0,0,134,4,0,0,240,131,1,0,0,1,2,3,5,0,0,0,139,4,0,0,140,2,6,0,0,0,0,0,134,2,0,0,148,215,2,0,0,1,0,0,78,4,2,0,1,5,255,0,19,5,1,5,41,5,5,24,42,5,5,24,13,4,4,5,1,5,0,0,125,3,4,2,5,0,0,0,139,3,0,0,140,3,6,0,0,0,0,0,2,4,0,0,0,0,0,128,1,5,0,0,134,3,0,0,240,95,3,0,0,1,2,4,5,0,0,0,135,5,211,2,139,3,0,0,140,3,4,0,0,0,0,0,135,3,224,1,0,1,2,0,139,0,0,0,140,3,4,0,0,0,0,0,135,3,156,1,0,1,2,0,139,0,0,0,140,7,9,0,0,0,0,0,1,8,43,0,135,7,91,3,8,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,78,2,0,0,32,2,2,1,121,2,3,0,1,1,0,0,119,0,4,0,1,2,1,0,83,0,2,0,1,1,1,0,139,1,0,0,140,6,8,0,0,0,0,0,1,7,31,0,135,6,92,3,7,0,0,0,139,0,0,0,140,5,7,0,0,0,0,0,1,6,28,0,135,5,93,3,6,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,2,3,0,0,40,157,0,0,134,2,0,0,196,9,1,0,3,0,1,0,134,2,0,0,252,246,2,0,1,0,0,0,139,0,0,0,140,3,4,0,0,0,0,0,135,3,185,1,0,1,2,0,139,0,0,0,140,2,5,0,0,0,0,0,135,2,0,0,0,0,0,0,1,4,1,0,134,3,0,0,216,125,3,0,0,4,2,1,14,3,3,2,41,3,3,31,42,3,3,31,139,3,0,0,140,3,4,0,0,0,0,0,135,3,247,1,0,1,2,0,139,0,0,0,140,3,4,0,0,0,0,0,135,3,87,0,0,1,2,0,139,0,0,0,140,3,4,0,0,0,0,0,135,3,10,1,0,1,2,0,139,0,0,0,140,3,4,0,0,0,0,0,135,3,149,2,0,1,2,0,139,0,0,0,140,3,4,0,0,0,0,0,135,3,182,2,0,1,2,0,139,0,0,0,140,0,2,0,0,0,0,0,1,0,176,119,134,1,0,0,132,180,3,0,0,0,0,0,25,0,0,20,2,1,0,0,176,139,0,0,53,1,0,1,232,174,3,0,139,0,0,0,140,2,2,0,0,0,0,0,137,0,0,0,132,0,0,1,139,0,0,0,140,3,4,0,0,0,0,0,135,3,55,2,0,1,2,0,139,0,0,0,140,3,4,0,0,0,0,0,135,3,115,2,0,1,2,0,139,0,0,0,140,3,4,0,0,0,0,0,135,3,75,1,0,1,2,0,139,0,0,0,140,3,4,0,0,0,0,0,135,3,76,2,0,1,2,0,139,0,0,0,140,3,4,0,0,0,0,0,135,3,60,0,0,1,2,0,139,0,0,0,140,3,4,0,0,0,0,0,135,3,147,2,0,1,2,0,139,0,0,0,140,3,4,0,0,0,0,0,135,3,112,1,0,1,2,0,139,0,0,0,140,6,8,0,0,0,0,0,1,7,42,0,135,6,94,3,7,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,15,0,135,4,95,3,5,0,0,0,139,0,0,0,140,3,4,0,0,0,0,0,135,3,160,2,0,1,2,0,139,0,0,0,140,2,4,0,0,0,0,0,120,0,3,0,1,2,0,0,119,0,5,0,1,3,0,0,134,2,0,0,8,7,3,0,0,1,3,0,139,2,0,0,140,2,5,0,0,0,0,0,134,2,0,0,92,178,3,0,0,0,0,0,32,4,1,0,125,3,4,0,2,0,0,0,139,3,0,0,140,6,8,0,0,0,0,0,1,7,24,0,135,6,96,3,7,0,0,0,139,0,0,0,140,3,4,0,0,0,0,0,135,3,165,2,0,1,2,0,139,0,0,0,140,3,4,0,0,0,0,0,135,3,71,1,0,1,2,0,139,0,0,0,140,1,2,0,0,0,0,0,127,1,0,0,89,1,0,0,127,1,0,0,82,1,1,0,139,1,0,0,140,3,4,0,0,0,0,0,82,3,0,0,38,3,3,32,120,3,4,0,134,3,0,0,196,223,2,0,1,2,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,1,0,0,85,0,1,0,1,2,0,0,109,0,4,2,1,1,0,0,109,0,8,1,139,0,0,0,140,3,4,0,0,0,0,0,135,3,152,2,0,1,2,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,27,0,135,4,97,3,5,0,0,0,139,0,0,0,140,6,8,0,0,0,0,0,1,7,34,0,135,6,98,3,7,0,0,0,139,0,0,0,140,6,8,0,0,0,0,0,1,7,22,0,135,6,99,3,7,0,0,0,139,0,0,0,140,2,3,0,0,0,0,0,135,2,210,0,0,1,0,0,139,0,0,0,140,0,2,0,0,0,0,0,2,0,0,0,176,147,0,0,2,1,0,0,88,158,0,0,82,1,1,0,27,1,1,48,94,0,0,1,1,1,0,32,47,0,0,1,132,177,3,0,139,0,0,0,134,0,0,0,140,183,3,0,139,0,0,0,140,2,3,0,0,0,0,0,135,2,216,1,0,1,0,0,139,0,0,0,140,2,3,0,0,0,0,0,135,2,177,1,0,1,0,0,139,0,0,0,140,2,3,0,0,0,0,0,135,2,239,1,0,1,0,0,139,0,0,0,140,2,3,0,0,0,0,0,135,2,81,0,0,1,0,0,139,0,0,0,140,2,3,0,0,0,0,0,135,2,211,1,0,1,0,0,139,0,0,0,140,2,3,0,0,0,0,0,135,2,6,1,0,1,0,0,139,0,0,0,140,2,3,0,0,0,0,0,135,2,52,1,0,1,0,0,139,0,0,0,140,2,3,0,0,0,0,0,135,2,108,1,0,1,0,0,139,0,0,0,140,2,3,0,0,0,0,0,135,2,28,2,0,1,0,0,139,0,0,0,140,6,8,0,0,0,0,0,1,7,11,0,135,6,100,3,7,0,0,0,139,0,0,0,140,1,4,0,0,0,0,0,1,1,255,0,19,1,0,1,41,1,1,24,42,2,0,8,1,3,255,0,19,2,2,3,41,2,2,16,20,1,1,2,42,2,0,16,1,3,255,0,19,2,2,3,41,2,2,8,20,1,1,2,43,2,0,24,20,1,1,2,139,1,0,0,140,2,3,0,0,0,0,0,135,2,178,2,0,1,0,0,139,0,0,0,140,5,7,0,0,0,0,0,1,6,41,0,135,5,101,3,6,0,0,0,139,0,0,0,140,2,3,0,0,0,0,0,135,2,49,1,0,1,0,0,139,0,0,0,140,3,4,0,0,0,0,0,134,3,0,0,208,162,3,0,0,2,1,0,139,0,0,0,140,1,4,0,0,0,0,0,2,1,0,0,248,156,0,0,26,2,0,1,85,1,2,0,1,3,0,0,109,1,4,3,139,0,0,0,140,2,3,0,0,0,0,0,135,2,51,2,0,1,0,0,139,0,0,0,140,2,3,0,0,0,0,0,135,2,50,1,0,1,0,0,139,0,0,0,140,2,3,0,0,0,0,0,135,2,156,2,0,1,0,0,139,0,0,0,140,1,4,0,0,0,0,0,134,2,0,0,52,185,3,0,1,3,188,0,94,2,2,3,134,1,0,0,112,35,3,0,0,2,0,0,139,1,0,0,140,2,3,0,0,0,0,0,135,2,59,0,0,1,0,0,139,0,0,0,140,2,3,0,0,0,0,0,135,2,112,2,0,1,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,38,0,135,4,102,3,5,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,82,1,0,0,120,1,2,0,139,0,0,0,82,2,0,0,135,1,214,2,2,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,14,0,135,3,103,3,4,0,0,0,139,0,0,0,140,5,7,0,0,0,0,0,1,6,21,0,135,5,104,3,6,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,135,3,0,0,0,0,0,0,25,3,3,1,134,2,0,0,148,154,3,0,0,1,3,0,139,2,0,0,140,2,3,0,0,0,0,0,135,2,241,0,0,1,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,1,0,135,2,105,3,3,0,0,0,59,2,0,0,145,2,2,0,139,2,0,0,140,2,3,0,0,0,0,0,135,2,119,1,0,1,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,0,0,107,0,16,2,1,1,0,0,107,0,17,1,139,0,0,0,140,4,6,0,0,0,0,0,1,5,40,0,135,4,106,3,5,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,26,0,135,3,107,3,4,0,0,0,139,0,0,0,140,3,4,0,0,0,0,0,134,3,0,0,80,155,3,0,0,1,2,0,139,3,0,0,140,2,4,0,0,0,0,0,1,3,204,39,82,3,3,0,134,2,0,0,124,186,2,0,3,0,1,0,139,2,0,0,140,0,1,0,0,0,0,0,134,0,0,0,220,174,3,0,134,0,0,0,80,184,3,0,139,0,0,0,140,1,2,0,0,0,0,0,135,1,124,1,0,0,0,0,139,0,0,0,140,1,2,0,0,0,0,0,135,1,104,1,0,0,0,0,139,0,0,0,140,1,2,0,0,0,0,0,135,1,29,2,0,0,0,0,139,0,0,0,140,1,4,0,0,0,0,0,59,2,0,0,74,2,0,2,121,2,8,0,61,3,0,0,0,0,0,63,63,3,0,3,135,2,35,3,3,0,0,0,58,1,2,0,119,0,7,0,61,3,0,0,0,0,0,63,64,3,0,3,135,2,19,3,3,0,0,0,58,1,2,0,139,1,0,0,140,1,2,0,0,0,0,0,135,1,174,2,0,0,0,0,139,0,0,0,140,1,2,0,0,0,0,0,135,1,198,0,0,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,20,0,135,4,108,3,5,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,5,0,135,3,109,3,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,35,0,135,3,110,3,4,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,32,1,0,32,26,2,0,9,35,2,2,5,20,1,1,2,38,1,1,1,139,1,0,0,140,1,2,0,0,0,0,0,135,1,207,0,0,0,0,0,139,0,0,0,140,1,2,0,0,0,0,0,135,1,208,0,0,0,0,0,139,0,0,0,140,1,2,0,0,0,0,0,135,1,106,2,0,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,10,0,135,4,111,3,5,0,0,0,139,0,0,0,140,2,3,0,0,0,0,0,134,2,0,0,240,169,3,0,0,1,0,0,139,2,0,0,140,1,2,0,0,0,0,0,135,1,252,0,0,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,0,0,109,0,4,2,139,0,0,0,140,3,5,0,0,0,0,0,1,4,39,0,135,3,112,3,4,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,13,0,135,2,113,3,3,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,33,0,135,3,114,3,4,0,0,0,139,0,0,0,140,0,3,0,0,0,0,0,1,2,0,0,135,1,115,3,2,0,0,0,134,0,0,0,252,178,3,0,1,0,0,0,2,0,0,0,208,156,0,0,134,1,0,0,56,186,3,0,87,0,1,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,19,0,135,3,116,3,4,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,0,0,135,1,117,3,2,0,0,0,59,1,0,0,145,1,1,0,139,1,0,0,140,0,1,0,0,0,0,0,134,0,0,0,236,12,3,0,134,0,0,0,40,224,1,0,139,0,0,0,140,2,3,0,0,0,0,0,134,2,0,0,168,75,3,0,0,1,0,0,139,2,0,0,140,2,3,0,0,0,0,0,134,2,0,0,200,42,3,0,0,1,0,0,139,2,0,0,140,2,4,0,0,0,0,0,1,3,4,0,135,2,118,3,3,0,0,0,1,2,0,0,139,2,0,0,140,2,4,0,0,0,0,0,1,3,25,0,135,2,119,3,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,16,0,135,2,120,3,3,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,9,0,135,3,121,3,4,0,0,0,139,0,0,0,140,1,2,0,0,0,0,0,26,1,0,48,35,1,1,10,139,1,0,0,140,0,2,0,0,0,0,0,2,1,0,0,40,157,0,0,134,0,0,0,100,126,3,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,2,1,0,0,160,161,0,0,82,1,1,0,135,0,122,3,1,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,32,0,135,2,123,3,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,18,0,135,2,124,3,3,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,2,1,0,0,240,156,0,0,86,0,1,0,145,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,8,0,135,2,125,3,3,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,0,65,135,0,231,2,1,0,0,0,139,0,0,0,140,0,1,0,0,0,0,0,134,0,0,0,144,186,3,0,139,0,0,0,140,0,1,0,0,0,0,0,134,0,0,0,144,186,3,0,139,0,0,0,140,0,1,0,0,0,0,0,134,0,0,0,144,186,3,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,3,0,135,1,126,3,2,0,0,0,1,1,0,0,139,1,0,0,140,1,3,0,0,0,0,0,1,2,12,0,135,1,127,3,2,0,0,0,139,0,0,0,140,1,1,0,0,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,2,1,0,0,160,162,0,0,135,0,128,3,1,0,0,0,2,0,0,0,168,162,0,0,139,0,0,0,140,0,1,0,0,0,0,0,2,0,0,0,232,158,0,0,82,0,0,0,139,0,0,0,140,1,1,0,0,0,0,0,139,0,0,0,140,0,1,0,0,0,0,0,2,0,0,0,228,158,0,0,82,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,2,1,0,0,160,162,0,0,135,0,129,3,1,0,0,0,139,0,0,0,140,1,1,0,0,0,0,0,139,0,0,0,140,1,2,0,0,0,0,0,1,1,1,0,139,1,0,0,140,1,3,0,0,0,0,0,1,2,17,0,135,1,130,3,2,0,0,0,139,0,0,0,140,0,1,0,0,0,0,0,135,0,131,3,139,0,0,0,140,1,3,0,0,0,0,0,1,2,7,0,135,1,132,3,2,0,0,0,139,0,0,0,140,0,1,0,0,0,0,0,2,0,0,0,156,162,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,2,0,135,0,133,3,1,0,0,0,1,0,0,0,139,0,0,0,140,0,1,0,0,0,0,0,1,0,80,40,139,0,0,0,140,0,1,0,0,0,0,0,139,0,0,0,140,0,1,0,0,0,0,0,1,0,4,0,139,0,0,0,140,0,1,0,0,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,6,0,135,0,134,3,1,0,0,0,139,0,0,0], eb + 235520);

  var relocations = [];
  relocations = relocations.concat([34944,35240,35264,35500,35556,35628,35664,35788,35808,35812,35816,35820,35824,35828,35832,36120,36256,36376,36404,36432,36436,36440,36444,36448,36452,36456,36508,36672,36852,37028,37224,37452,37636,37872,37976,37980,37984,37988,37992,37996,38000,38052,38128,38200,38292,38416,38496,38780,39068,39384,39444,40016,40076,40140,40204,40268,40332,40456,40884,41060,41752,42004,42408,42448,42576,42608,42640,42684,42780,42840,42984,43044,43084,43140,43236,43464,43644,43672,43724,43820,43912,43948,44652,44664,44696,44728,44780,44876,44908,45128,45156,45236,45284,45580,46032,46048,46068,46128,46148,46184,46288,46320,46348,46392,46540,46560,46664,46720,46888,47096,47204,47324,47360,47380,47424,47464,47496,47648,47756,47796,47892,47952,48024,48104,48208,48212,48216,48220,48224,48228,48232,48236,48240,48244,48248,48252,48256,48260,48264,48268,48272,48276,48280,48284,48288,48292,48296,48300,48304,48308,48312,48316,48320,48324,48328,48332,48336,48340,48344,48348,48352,48356,48360,48364,48368,48372,48376,48380,48384,48388,48392,48396,48400,48404,48408,48412,48416,48420,48424,48428,48432,48436,48440,48444,48448,48452,48456,48460,48464,48468,48472,48476,48480,48484,48488,48492,48496,48500,48504,48508,48512,48516,48520,48524,48528,48532,48536,48540,48544,48548,48552,48556,48560,48564,48568,48572,48576,48580,48584,48588,48592,48596,48600,48604,48608,48612,48616,48620,48624,48628,48632,48636,48640,48644,48648,48652,48656,48660,48664,48668,48672,48676,48680,48684,48688,48692,48696,48700,48704,48708,48712,50476,50540,50900,50988,51000,51096,51100,51104,51108,51112,51116,51120,51124,51128,51132,51136,51140,51144,51148,51152,51156,51160,51164,51168,51172,51176,51180,51184,51188,51192,51196,51200,51204,51208,51212,51216,51220,51224,51228,51232,51236,51240,51244,52320,52388,52680,52684,52688,52692,52696,52700,52704,52708,52712,52716,52720,52724,52728,52732,52736,52740,52744,52748,52752,52756,52760,52764,52768,52772,52776,52780,52784,52788,52792,52796,52800,52804,52808,52812,52816,52820,52824,52828,52832,52836,52840,52844,52848,52852,52856,52860,52864,52868,52872,52876,52880,52884,52888,52892,52896,52900,53336,53340,53344,53348,53352,53356,53360,53364,54116,54252,54284,54424,54828,54912,55088,55296,55300,55304,55308,55312,55316,55320,55324,55328,55332,55408,55704,56104,56444,56788,57228,57644,58028,58312,58568,58940,59372,59392,59408,59432,59532,59536,59540,59544,59548,59552,59556,59560,59604,59680,59796,59872,60060,60136,60260,60336,60568,60644,60764,60840,61064,61140,61240,61316,61536,61692,61708,61848,61872,61964,61988,62116,62804,62808,62812,62816,62836,62952,62992,63212,63328,63528,63644,63932,64048,64416,64532,65016,65516,65520,65524,65528,65552,65676,65788,66004,66116,66384,66504,66860,66980,67416,67536,68100,69424,69444,69592,70292,71008,71032,71116,71144,71152,71168,71180,71240,71256,71276,71324,71452,71488,71508,71528,71588,71668,71692,71748,71776,71836,71892,71932,72000,72060,72140,72168,72176,72192,72204,72256,72272,72292,72332,72460,72496,72516,72536,72584,72656,72680,72728,72756,72804,72856,72924,73024,73096,73360,73460,73504,73644,73948,74020,74108,74128,74148,74168,74188,74208,74332,74348,74752,74780,74844,74908,75060,75112,75140,75204,75268,75472,76192,76244,76308,76312,76316,76364,76444,76536,76580,76716,76856,77056,77144,77284,77320,77548,77672,77704,77812,78020,78064,78144,78160,78200,78572,78888,79024,79040,79156,79172,79280,79284,79288,79292,79296,79300,79304,79308,79360,79400,79572,79612,79868,79908,80088,80128,80460,80500,80668,80708,81016,81056,81176,81216,81480,81712,81820,81856,81892,81932,81972,82000,82004,82008,82012,82032,82144,82284,82476,82756,83116,83568,83572,83576,83580,83584,83588,83592,83596,83600,83604,83608,83612,83616,83620,83624,83628,83632,83636,83640,83644,83648,83652,83656,83660,83664,83668,83672,83676,83680,83684,83688,83692,83696,83700,83704,83708,83712,83716,83720,83724,84028,84260,84348,84372,84552,84572,84592,85068,85128,85212,85300,85368,85428,85512,85600,85668,85728,85812,85900,85968,86024,86100,86180,86292,86392,86436,88452,88536,89648,89844,89992,90040,90072,90140,90172,90268,90884,91056,91208,91516,91552,91588,91624,91660,91700,91828,91856,91944,91976,92664,92780,93092,93172,93244,93264,93268,93272,93276,93280,93284,93288,93292,93296,93300,95588,95680,95888,95988,95992,95996,96000,96004,96008,96012,96016,96020,96024,96028,96032,96036,96040,96044,96048,96052,96056,96060,96064,96068,96072,96076,96080,96084,96088,97480,97572,97772,97864,97868,97872,97876,97880,97884,97888,97892,97896,97900,97904,97908,97912,97916,97920,97924,97928,97932,97936,97940,97944,97948,97952,97956,97960,97964,100716,100796,102956,103680,104436,104548,104676,104788,105156,105292,105312,105416,105436,105496,105516,105556,105732,105816,105972,105992,105996,106000,106004,106008,106012,106016,106020,106024,106028,108164,108588,108716,108720,108724,108728,108752,108792,108936,109060,109272,109564,109996,110696,112240,112288,112444,112508,112572,112620,112900,113112,113224,113352,114288,114588,114596,114652,114704,114784,114792,114848,114900,115160,115200,115372,115452,115472,115584,116668,116724,116916,116960,116988,117020,117176,117324,117352,117384,117528,117664,117828,117964,117988,118144,118368,118388,118416,118440,118540,118572,118656,118680,118704,118876,118908,118944,118952,118968,118980,119032,119048,119068,119108,119236,119272,119292,119312,119368,119440,119464,119512,119540,119588,119792,120196,120820,120848,121268,121584,121720,122240,122564,122992,123108,123144,123200,123248,123280,123324,123380,123416,123472,124060,124648,124684,124708,125004,125184,125704,125740,125780,127080,127644,127724,128204,128896,129368,129500,129580,130708,130764,131276,131580,131948,132020,132152,132228,132300,132376,132772,133692,134504,134528,134748,134772,135156,136292,137216,137316,137352,137444,137696,137732,138244,138448,138516,138572,139188,139464,139556,139588,139620,139652,140888,141056,141352,141476,141784,142032,142280,142436,142476,142556,142588,142684,142816,143008,143216,143368,143648,143880,144192,144300,144348,144452,144512,144980,145040,145268,145376,145500,146668,146800,147076,147236,147280,147400,147516,147780,147804,148344,149004,149104,149108,149112,149116,149120,149124,149128,149132,149136,149140,149144,149148,149152,149156,149160,149164,149168,149172,149176,149180,149184,150108,150148,150172,150240,150244,150248,150252,150324,150340,150428,150452,150472,150476,150480,150484,150588,150592,150596,150600,150856,150860,150864,151056,151980,152460,152484,152612,152644,152676,152828,153096,153120,153392,153680,153852,153920,153976,154476,154956,155008,155620,155836,155956,155984,156004,156032,156180,156340,156628,157008,157012,157016,157020,157024,157028,157032,157036,157040,157044,157828,158088,158116,158140,158276,158436,158660,158792,159032,159172,159320,159412,159684,159948,160040,160064,160080,160184,160364,160596,160700,160764,160828,161020,161124,161576,161684,161844,161888,161968,162064,162156,162424,162448,162604,162780,162896,162928,162952,162976,163352,163424,163428,163432,163436,163972,164376,164544,164616,164976,165484,165556,165908,165940,165984,166048,166160,166324,166500,166784,166836,166868,166912,166968,167056,167088,167208,167240,167284,167332,167364,167408,167472,167868,168084,168184,168200,168260,168276,168404,168860,169716,169884,170144,170728,171212,171756,172180,172628,173076,173564,174056,174124,174128,174132,174136,174204,174256,174300,174336,174392,174908,175300,175408,175588,175740,176184,176304,176640,176804,176892,177080,177260,177364,177388,177412,177436,177532,177700,177740,177796,177960,178140,178240,178264,178288,178312,178408,178676,178856,178920,178976,179320,179708,179868,180120,180296,180508,180560,181108,181204,181396,181676,182112,182556,182756,183004,183124,183268,183424,183868,184496,184668,184700,184744,184804,184940,185212,185620,185664,185888,185944,186028,186052,186084,186116,186728,187188,187260,187516,187956,188452,188588,188688,188976,189044,189204,189236,189280,189332,189648,189748,189856,189952,190316,190636,190952,191216,191268,191460,191572,191740,191756,191788,191876,191956,191960,191964,191968,191972,191976,191980,191984,191988,191992,191996,192000,192004,192008,192012,192016,192020,192024,192028,192032,192036,192288,192364,192452,192504,192620,192792,192948,193172,193236,193396,193532,193712,194348,194480,194688,194768,195056,195400,195692,195940,196084,196248,196524,196884,196920,197136,197264,197416,197696,197836,198040,198096,198100,198104,198108,198112,198116,198120,198124,198236,198240,198244,198248,198252,198256,198260,198264,198496,198544,198700,198840,199120,199400,199636,200476,200720,200748,200844,200864,200944,201188,201452,201568,201716,201776,201960,202204,202444,202724,202792,202872,202924,203132,203600,203712,203736,204044,204208,204328,204396,204508,204724,204936,205228,205448,205500,205608,205708,206148,206244,206408,206608,206660,206716,206864,207036,207208,207420,207628,207632,207636,207640,207644,207648,207652,207656,207660,207664,207668,207672,207676,207680,207684,207688,207692,207696,207700,207704,207708,207712,207716,207720,207724,207728,207732,207736,207740,207744,207748,207752,207756,207760,207764,207768,207772,207776,207780,207784,207788,207792,207796,207800,207804,207808,207812,207816,207820,207824,207828,207832,207836,207840,207844,207848,207852,207856,207860,207864,207868,207872,207876,207880,207884,207888,207892,207896,207900,207904,207908,207912,207916,207920,207924,207928,207932,207936,207940,207944,207948,207952,207956,207960,207964,207968,207972,207976,207980,207984,207988,207992,207996,208000,208004,208008,208012,208016,208020,208024,208028,208032,208036,208040,208044,208048,208052,208056,208060,208064,208068,208072,208076,208080,208084,208088,208092,208096,208100,208104,208108,208112,208116,208120,208124,208128,208132,208136,208140,208144,208148,208152,208156,208160,208164,208168,208172,208176,208180,208184,208188,208192,208196,208200,208204,208208,208212,208216,208220,208224,208228,208232,208236,208240,208244,208248,208252,208256,208260,208264,208268,208272,208276,208280,208284,208288,208292,208296,208300,208304,208308,208312,208316,208320,208324,208328,208332,208336,208340,208344,208348,208352,208356,208360,208364,208368,208372,208376,208380,208384,208388,208392,208396,208400,208404,208408,208412,208416,208420,208424,208428,208432,208436,208440,208444,208448,208452,208456,208460,208464,208468,208472,208476,208480,208484,208488,208492,208496,208500,208504,208508,208512,208516,208520,208524,208528,208532,208536,208540,208544,208548,208552,208556,208560,208564,208568,208572,208576,208580,208584,208588,208592,208596,208600,208604,208608,208612,208616,208620,208624,208628,208632,208636,208640,208644,208648,208652,208656,208660,208664,208668,208672,208676,208680,208684,208688,208692,208696,208700,208704,208708,208712,208716,208720,208724,208728,208732,208736,208740,208744,208748,208752,208756,208760,208764,208768,208772,208776,208780,208784,208788,208792,208796,208800,208804,208808,208812,208816,208820,208824,208828,208832,208836,208840,208844,208848,208852,208856,208860,208864,208868,208872,208876,208880,208884,208888,208892,208896,208900,208904,208908,208912,208916,208920,208924,208928,208932,208936,208940,208944,208948,208952,208956,208960,208964,208968,208972,208976,208980,208984,208988,208992,208996,209000,209004,209008,209012,209016,209020,209024,209028,209032,209036,209040,209044,209048,209052,209056,209060,209064,209068,209072,209076,209080,209084,209088,209092,209096,209100,209104,209108,209112,209116,209120,209124,209128,209132,209136,209140,209144,209148,209152,209156,209160,209164,209168,209172,209176,209180,209184,209188,209192,209196,209200,209204,209208,209212,209216,209220,209224,209228,209232,209236,209240,209244,209248,209252,209256,209260,209264,209268,209272,209276,209280,209284,209288,209292,209296,209300,209304,209308,209312,209316,209320,209324,209328,209332,209336,209340,209344,209348,209352,209356,209360,209364,209368,209372,209376,209380,209384,209388,209392,209396,209400,209404,209408,209412,209416,209420,209424,209428,209432,209436,209440,209444,209448,209452,209456,209460,209464,209468,209472,209476,209480,209484,209488,209492,209496,209500,209504,209508,209512,209516,209520,209524,209528,209532,209536,209540,209544,209548,209552,209556,209560,209564,209568,209572,209576,209580,209584,209588,209592,209596,209600,209604,209608,209612,209616,209620,209624,209628,209632,209636,209640,209644,209648,209652,209656,209660,209664,209668,209672,209676,209680,209684,209688,209692,209696,209700,209704,209708,209712,209716,209720,209724,209728,209732,209736,209740,209744,209748,209752,209756,209760,209764,209768,209772,209776,209780,209784,209788,209792,209796,209800,209804,209808,209812,209816,209820,209824,209828,209832,209836,209840,209844,209848,209852,209856,209860,209864,209868,209872,209876,209880,209884,209888,209892,209896,209900,209904,209908,209912,209916,209920,209924,209928,209932,209936,209940,209944,209948,209952,209956,209960,209964,209968,209972,209976,209980,209984,209988,209992,209996,210000,210004,210008,210012,210016,210020,210024,210028,210032,210036,210040,210044,210048,210052,210056,210060,210064,210068,210072,210076,210080,210084,210088,210092,210096,210100,210104,210108,210112,210116,210120,210124,210128,210132,210136,210140,210144,210148,210152,210156,210160,210164,210168,210172,210176,210180,210184,210188,210192,210196,210200,210204,210208,210212,210216,210220,210224,210228,210232,210236,210240,210244,210248,210252,210256,210260,210264,210268,210272,210276,210280,210284,210288,210292,210296,210300,210304,210308,210312,210316,210320,210324,210328,210332,210336,210340,210344,210348,210352,210356,210360,210364,210368,210372,210376,210380,210384,210388,210392,210396,210400,210404,210408,210412,210416,210420,210424,210428,210432,210436,210440,210444,210448,210452,210456,210460,210464,210468,210472,210476,210480,210484,210488,210492,210496,210500,210504,210508,210512,210516,210520,210524,210528,210532,210536,210540,210544,210548,210552,210556,210560,210564,210568,210572,210576,210580,210584,210588,210592,210596,210600,210604,210608,210612,210616,210620,210624,210628,210632,210636,210640,210644,210648,210652,210656,210660,210664,210668,210672,210676,210680,210684,210688,210692,210696,210700,210704,210708,210712,210716,210720,210724,210728,210732,210736,210740,210744,210748,210752,210756,210760,210764,210768,210772,210776,210780,210784,210788,210792,210796,210800,210804,210808,210812,210816,210820,210824,210828,210832,210836,210840,210844,210848,210852,210856,210860,210864,210868,210872,210876,210880,210884,210888,210892,210896,210900,210904,210908,210912,210916,210920,210924,210928,210932,210936,210940,210944,210948,210952,210956,210960,210964,210968,210972,210976,210980,210984,210988,210992,210996,211000,211004,211008,211012,211016,211020,211024,211028,211032,211036,211040,211044,211048,211052,211056,211060,211064,211068,211072,211076,211080,211084,211088,211092,211096,211100,211104,211108,211112,211116,211120,211124,211128,211132,211136,211140,211144,211148,211152,211156,211160,211164,211168,211172,211176,211180,211184,211188,211192,211196,211200,211204,211208,211212,211216,211220,211224,211228,211232,211236,211240,211244,211248,211252,211256,211260,211264,211268,211272,211276,211280,211284,211288,211292,211296,211300,211304,211308,211312,211316,211320,211324,211328,211332,211336,211340,211344,211348,211352,211356,211360,211364,211368,211372,211376,211380,211384,211388,211392,211396,211400,211404,211408,211412,211416,211420,211424,211428,211432,211436,211440,211444,211448,211452,211456,211460,211464,211468,211472,211476,211480,211484,211488,211492,211496,211500,211504,211508,211512,211516,211520,211524,211528,211532,211536,211540,211544,211548,211552,211556,211560,211564,211568,211572,211576,211580,211584,211588,211592,211596,211600,211604,211608,211612,211616,211620,211624,211628,211632,211636,211640,211644,211648,211652,211656,211660,211664,211668,211672,211676,211680,211684,211688,211692,211696,211700,211704,211708,211712,211716,211720,211724,211728,211732,211736,211740,211744,211748,211752,211756,211760,211764,211768,211772,211776,211780,211784,211788,211792,211796,211800,211804,211808,211812,211816,211820,211824,211828,211832,211836,211840,211844,211848,211852,211856,211860,211864,211868,211872,211876,211880,211884,211888,211892,211896,211900,211904,211908,211912,211916,211920,211924,211928,211932,211936,211940,211944,211948,211952,211956,211960,211964,211968,211972,211976,211980,211984,211988,211992,211996,212000,212004,212008,212012,212016,212020,212024,212028,212032,212036,212040,212044,212048,212052,212056,212060,212064,212068,212072,212076,212080,212084,212088,212092,212096,212100,212104,212108,212112,212116,212120,212124,212128,212132,212136,212140,212144,212148,212152,212156,212160,212164,212168,212172,212176,212180,212184,212188,212192,212196,212200,212204,212208,212212,212216,212220,212224,212228,212232,212236,212240,212244,212248,212252,212256,212260,212264,212268,212272,212276,212280,212284,212288,212292,212296,212300,212304,212308,212312,212316,212320,212324,212328,212332,212336,212340,212344,212348,212352,212356,212360,212364,212368,212372,212376,212380,212384,212388,212392,212396,212400,212404,212408,212412,212416,212420,212424,212428,212432,212436,212440,212444,212448,212452,212456,212460,212464,212468,212472,212476,212480,212484,212488,212492,212496,212500,212504,212508,212512,212516,212520,212524,212528,212532,212536,212540,212544,212548,212552,212556,212560,212564,212568,212572,212576,212580,212584,212588,212592,212596,212600,212604,212608,212612,212616,212620,212624,212628,212632,212636,212640,212644,212648,212652,212656,212660,212664,212668,212672,212676,212680,212684,212688,212692,212696,212700,212704,212708,212712,212716,212720,212724,212728,212732,212736,212740,212744,212748,212752,212756,212760,212764,212768,212772,212776,212780,212784,212788,212792,212796,212800,212804,212808,212812,212816,212820,212824,212828,212832,212836,212840,212844,212848,212852,212856,212860,212864,212868,212872,212876,212880,212884,212888,212892,212896,212900,212904,212908,212912,212916,212920,212924,212928,212932,212936,212940,212944,212948,212952,212956,212960,212964,212968,212972,212976,212980,212984,212988,212992,212996,213000,213004,213008,213012,213016,213020,213024,213028,213032,213036,213040,213044,213048,213052,213056,213060,213064,213068,213072,213076,213080,213084,213088,213092,213096,213100,213104,213108,213112,213116,213120,213124,213128,213132,213136,213140,213144,213148,213152,213156,213160,213164,213168,213172,213176,213180,213184,213188,213192,213196,213200,213204,213208,213212,213216,213220,213224,213228,213232,213236,213240,213244,213248,213252,213256,213260,213264,213268,213272,213276,213280,213284,213288,213292,213296,213300,213304,213308,213312,213316,213320,213324,213328,213332,213336,213340,213344,213348,213352,213356,213360,213364,213368,213372,213376,213380,213384,213388,213392,213396,213400,213404,213408,213412,213416,213420,213424,213428,213432,213436,213440,213444,213448,213452,213456,213460,213464,213468,213472,213476,213480,213484,213488,213492,213496,213500,213504,213508,213512,213516,213520,213524,213528,213532,213536,213540,213544,213548,213552,213556,213560,213564,213568,213572,213576,213580,213584,213588,213592,213596,213600,213604,213608,213612,213616,213620,213624,213628,213632,213636,213640,213644,213648,213652,213656,213660,213664,213668,213672,213676,213680,213684,213688,213692,213696,213700,213704,213708,213712,213716,213720,213724,213728,213732,213736,213740,213744,213748,213752,213756,213760,213764,213768,213772,213776,213780,213784,213788,213792,213796,213800,213804,213808,213812,213816,213820,213824,213828,213832,213836,213840,213844,213848,213852,213856,213860,213864,213868,213872,213876,213880,213884,213888,213892,213896,213900,213904,213908,213912,213916,213920,213924,213928,213932,213936,213940,213944,213948,213952,213956,213960,213964,213968,213972,213976,213980,213984,213988,213992,213996,214000,214004,214008,214012,214016,214020,214024,214028,214032,214036,214040,214044,214048,214052,214056,214060,214064,214068,214072,214076,214080,214084,214088,214092,214096,214100,214104,214108,214112,214116,214120,214124,214128,214132,214136,214140,214144,214148,214152,214156,214160,214164,214168,214172,214176,214180,214184,214188,214192,214196,214200,214204,214208,214212,214216,214220,214224,214228,214232,214236,214240,214244,214248,214252,214256,214260,214264,214268,214272,214276,214280,214284,214288,214292,214296,214300,214304,214308,214312,214316,214320,214324,214328,214332,214336,214340,214344,214348,214352,214356,214360,214364,214368,214372,214376,214380,214384,214388,214392,214396,214400,214404,214408,214412,214416,214420,214424,214428,214432,214436,214440,214444,214448,214452,214456,214460,214464,214468,214472,214476,214480,214484,214488,214492,214496,214500,214504,214508,214512,214516,214520,214524,214528,214532,214536,214540,214544,214548,214552,214556,214560,214564,214568,214572,214576,214580,214584,214588,214592,214596,214600,214604,214608,214612,214616,214620,214624,214628,214632,214636,214640,214644,214648,214652,214656,214660,214664,214668,214672,214676,214680,214684,214688,214692,214696,214700,214704,214708,214712,214716,214720,214724,214728,214732,214736,214740,214744,214748,214752,214756,214760,214764,214768,214772,214776,214780,214784,214788,214792,214796,214800,214804,214808,214812,214816,214820,214824,214828,214832,214836,214840,214844,214848,214852,214856,214860,214864,214868,214872,214876,214880,214884,214888,214892,214896,214900,214904,214908,214912,214916,214920,214924,214928,214932,214936,214940,214944,214948,214952,214956,214960,214964,214968,214972,214976,214980,214984,214988,214992,214996,215000,215004,215008,215012,215016,215020,215024,215028,215032,215036,215040,215044,215048,215052,215056,215060,215064,215068,215072,215076,215080,215084,215088,215092,215096,215100,215104,215108,215112,215116,215120,215124,215128,215132,215136,215140,215144,215148,215152,215156,215160,215164,215168,215172,215176,215180,215184,215188,215192,215196,215200,215204,215208,215212,215216,215220,215224,215228,215232,215236,215240,215244,215248,215252,215256,215260,215264,215268,215272,215276,215280,215284,215288,215292,215296,215300,215304,215308,215312,215316,215320,215324,215328,215332,215336,215340,215344,215348,215352,215356,215360,215364,215368,215372,215376,215380,215384,215388,215392,215396,215400,215404,215408,215412,215416,215420,215424,215428,215432,215436,215440,215444,215448,215452,215456,215460,215464,215468,215472,215476,215480,215484,215488,215492,215496,215500,215504,215508,215512,215516,215520,215524,215528,215532,215536,215540,215544,215548,215552,215556,215560,215564,215568,215572,215576,215580,215584,215588,215592,215596,215600,215604,215608,215612,215616,215620,215624,215628,215632,215636,215640,215644,215648,215652,215656,215660,215664,215668,215672,215676,215680,215684,215688,215692,215696,215700,215704,215708,215712,215716,215720,215724,215728,215732,215736,215740,215744,215748,215752,215756,215760,215764,215768,215772,215776,215780,215784,215788,215792,215796,215800,215804,215808,215812,215816,215992,216124,216356,216396,216456,216496,216660,216876,216948,217000,217088,217336,217532,217772,217840,217900,217952,218152,218212,218252,218344,218588,218852,219096,219196,219340,219496,219908,220076,220292,220344,220488,220572,220688,220876,220948,221008,221060,221212,221432,221604,221816,221872,221888,221988,222272,222516,222624,222720,222764,222848,223020,223064,223144,223200,223348,223424,223620,223776,224164,224388,224592,224744,224792,224900,224948,225148,225324,225396,225520,225592,225712,225892,226064,226244,226428,227056,227116,227224,227372,227408,227448,227548,227676,227760,228044,228392,228472,228584,228776,228864,228944,229152,229496,229616,229704,229816,230008,230172,230356,230860,230976,231092,231208,231368,231700,231828,231944,232016,232108,232236,232308,232396,232532,232664,232892,233120,233192,233508,233616,233908,233956,234016,234144,234300,234404,234748,234860,235212,235336,235464,235576,235612,235652,235736,235852,235984,236116,236236,236280,236388,236508,236612,236708,236948,237044,237340,237444,237544,237620,237712,237880,238020,238188,238416,238504,238588,238824,238896,238944,238992,239064,239244,239508,239584,239660,239916,240516,241412,242044,68,96,124,152,180,208,236,264,292,324,352,380,408,436,464,492,520,548,576,604,632,660,688,716,744,772,800,828,856,884,912,940,968,996,1024,1052,1080,1108,1136,1164,1192,1220,1248,1276,1304,1332,1360,1388,1416,1444,1472,1500,1528,1556,1584,1612,1640,1668,1696,1724,1752,1780,1808,1836,1864,1892,1920,1948,1976,2004,2032,2060,2088,2116,2144,2172,2200,2228,2256,2284,2312,2340,2368,2396,2424,2452,2480,2508,2536,2564,2592,2620,2648,2676,2704,2732,2760,2788,2816,2844,2872,2900,2928,2956,2984,3012,3040,3068,3096,3124,3152,3180,3208,3236,3264,3292,3320,3348,3376,3404,3432,3460,3488,3516,3544,3572,3600,3628,3656,3684,3712,3740,3768,3796,3824,3852,3880,3908,3936,3964,3992,4020,4048,4076,4104,4132,4160,4188,4216,4244,4272,4300,4328,4356,4384,4412,4440,4468,4496,4524,4552,4580,4608,4636,4664,4692,4720,4748,4776,4804,4832,4860,4888,4916,4944,4972,5000,5028,5056,5084,5112,5140,5168,5196,5224,5252,5280,5308,5336,5364,5392,5420,5448,5476,5504,5532,5560,5588,5616,5644,5672,5700,5728,5756,5784,5812,5840,5868,5896,5924,5952,5980,6008,6036,6064,6092,6120,6148,6176,6204,6232,6260,6288,6316,6344,6372,6400,6428,6456,6484,6512,6540,6568,6596,6624,6652,6680,6708,6736,6764,6792,6820,6848,6876,6904,6932,6960,6988,7016,7044,7072,7100,7128,7156,7184,7212,7240,7268,7296,7324,7352,7380,7408,7436,7464,7492,7520,7548,7576,7604,7632,7660,7688,7716,7744,7772,7800,7828,7856,7884,7912,7940,7968,7996,8024,8052,8080,8108,8136,8164,8192,8220,8248,8276,8304,8332,8360,8388,8416,8444,8472,8500,8528,8556,8584,8612,8640,8668,8696,8724,8752,8780,8808,8836,8864,8892,8920,8948,8976,9004,9032,9060,9088,9116,9144,9172,9200,9228,9256,9284,9312,9340,9368,9396,9424,9452,9480,9508,9536,9564,9592,9620,9648,9676,9704,9732,9760,9788,9816,9844,9872,9900,9928,9956,9984,10012,10040,10068,10096,10124,10152,10180,10208,10236,10264,10292,10320,10348,10376,10404,10432,10460,10488,10516,10544,10572,10600,10628,10656,10684,10712,10740,10768,10796,10824,10852,10880,10908,10936,10964,10992,11020,11048,11076,11104,11132,11160,11188,11216,11244,11272,11300,11328,11356,11384,11412,11440,11468,11496,11524,11552,11580,11608,11636,11664,11692,11720,11748,11776,11804,11832,11860,11888,11916,11944,11972,12000,12028,12056,12084,12112,12140,12168,12196,12224,12252,12280,12308,12336,12364,12392,12420,12448,12476,12504,12532,12560,12588,12616,12644,12672,12700,12728,12756,12784,12812,12840,12868,12896,12924,12952,12980,13008,13036,13064,13092,13120,13148,13176,13204,13232,13260,13288,13316,13344,13372,13400,13428,13456,13484,13512,13540,13568,13596,13624,13652,13680,13708,13736,13764,13792,13820,13848,13876,13904,13932,13960,13988,14016,14044,14072,14100,14128,14156,14184,14212,14240,14268,14296,14324,14352,14380,14408,14436,14464,14492,14520,14548,14576,14604,14632,14660,14688,14716,14744,14772,14800,14828,14856,14884,14912,14940,14968,14996,15024,15052,15080,15108,15136,15164,15192,15220,15248,15276,15304,15332,15360,15388,15416,15444,15472,15500,15528,15556,15584,15612,15640,15668,15696,15724,15752,15780,15808,15852,15880,15908,15936,15964,15992,16020,16048,16076,16104,16132,16160,16188,16216,16244,16272,16300,16328,16356,16384,16412,16440,16468,16496,16524,16552,16580,16608,16636,16664,16692,16720,16748,16776,16804,16832,16860,16888,16916,16944,16972,17000,17028,17056,17084,17112,17140,17168,17196,17224,17252,17280,17308,17336,17364,17392,17420,17448,17476,17504,17532,17560,17588,17616,17644,17672,17700,17728,17756,17784,17812,17840,17868,17896,17924,17952,17980,18008,18036,18064,18092,18120,18148,18176,18204,18232,18260,18288,18316,18344,18372,18400,18428,18456,18484,18512,18540,18568,18596,18624,18652,18680,18708,18736,18764,18792,18820,18848,18876,18904,18932,18960,18988,19016,19044,19072,19100,19128,19156,19184,19212,19240,19268,19296,19324,19352,19380,19408,19436,19464,19492,19520,19548,19576,19604,19632,19660,19688,19716,19744,19772,19800,19828,19856,19884,19912,19940,19968,19996,20024,20052,20080,20108,20136,20164,20192,20220,20248,20276,20304,20332,20360,20388,20416,20444,20472,35312,35348,35392,35412,35512,35996,37280,37684,38348,38544,38640,41100,41128,41316,41332,41432,41456,41484,41740,42076,42092,42120,42140,42180,42196,42220,42496,42516,42536,42552,44420,44548,44564,44592,44640,44764,44812,44864,44952,45028,45112,45172,45216,45328,45404,45424,45448,45936,46008,46104,46428,46496,46628,46684,46740,46860,46988,47028,47068,47508,47540,47572,47808,47964,48036,48168,48184,48728,48764,48800,48836,48872,48908,48944,48980,49016,49052,49088,49124,49160,49220,49256,49292,49328,49364,49400,49472,49508,49544,49580,49616,49652,49748,49784,49828,49900,50028,50280,50356,50404,50488,50576,50700,50796,51008,51380,51416,51720,51996,52072,52100,52524,52992,53104,53252,53284,53296,53536,53768,53892,53952,54072,54176,54236,54272,54492,54560,54576,54604,54628,54644,54668,54756,55156,55216,56148,56208,56268,56832,56892,56952,57272,57332,57392,57452,58868,59192,59248,59640,59832,60096,60296,60396,60604,60800,60896,61100,61276,61352,62712,62884,63172,63260,63488,63576,63892,63980,64376,64464,64940,65368,65464,68208,68268,68328,68388,68452,68512,68572,68632,68844,68896,68960,68996,69016,69052,69072,69160,69172,69204,69244,69388,69400,69548,69664,69788,69812,70000,70172,70220,70232,70264,70348,70480,70672,70720,74440,74572,74656,75516,75580,75644,75720,75780,75840,75896,75952,76008,76200,76268,76280,76396,76468,76560,76620,76764,76776,76880,76944,77032,77080,77344,77572,77728,77832,77916,77996,78044,78184,78208,78356,78380,78428,78480,79444,79664,79748,79952,80180,80196,80332,80544,80760,80776,80900,81268,81640,84720,88800,88824,88848,88868,88920,88960,89000,89052,89080,89100,89168,89224,89244,89316,89404,89428,89496,89528,89668,89692,89716,89804,89880,89972,90004,90184,90336,90416,90440,90524,90600,90684,90768,90932,91000,91352,92156,92196,92236,92276,92316,92356,92556,92868,92932,92952,92976,92992,93188,95780,95820,96732,96836,97076,97180,97664,97704,98608,98712,98952,99056,100292,100396,100496,100900,101100,101356,101468,101532,101612,101772,101872,101956,102220,102332,102372,102592,102640,102804,102840,103044,103860,103896,103964,104068,104100,104132,104168,104204,104240,104388,104504,104744,104992,105108,105352,105396,105604,105620,105832,105928,108536,108684,110332,110368,110404,110444,110540,110604,110668,110720,110840,110888,110936,110976,111016,111080,111120,111184,111232,111280,111328,111400,111448,111524,111548,111588,111612,111652,111692,111732,111772,111812,111872,111912,111952,112036,112096,112120,112132,112192,112200,112472,112532,112580,112824,113308,113440,113536,114028,115052,115172,115764,115812,115824,115856,115872,115940,115976,116072,116268,116292,116316,116392,116412,116424,116520,116856,116884,117072,117444,117704,117904,117932,118028,118076,118180,118508,119720,120104,120164,120776,121948,121964,122024,122152,122904,123288,123424,123480,125144,125220,125444,125488,125576,125920,125956,126200,126248,126300,126352,126404,126692,126776,126788,126800,126812,126900,126920,126932,127004,127132,127164,127208,127260,127332,127392,127760,128460,128532,128612,128692,128772,128868,128916,128936,128992,129412,129436,130928,131104,131144,131200,131224,131252,131292,131324,131368,131392,131428,131496,131552,131632,131652,131800,131868,132744,133548,133884,133904,133924,133944,133968,133996,134016,134036,134056,134080,134108,134132,134160,134184,134212,134236,134264,134300,134320,134368,134476,134680,134792,134896,134920,134952,134980,135012,135048,135068,135304,135348,135380,135404,135544,135572,135592,135620,135644,135660,135760,135808,135832,135852,135908,135928,135984,136004,136064,136120,136192,136496,136768,136800,136824,136924,136952,136976,137064,137132,137292,137372,137528,137564,137652,137752,137972,138092,138136,139820,140028,140160,140340,140548,140672,140848,140984,141192,141224,141252,141368,141424,141496,141620,141696,141748,141860,141904,141984,142044,142084,142144,142632,142940,143196,143508,143532,143684,143736,143772,143788,143904,143952,144004,144040,144056,144116,144380,145284,145292,145416,145432,145440,145456,145472,145524,145624,145652,145776,145948,146096,146276,146400,146580,146608,146616,147244,147332,147364,147448,147636,147672,147740,147936,147964,148000,148080,148156,148232,148248,148680,148732,148756,148768,148856,149200,150180,150828,151256,151268,151300,151344,151396,151412,151440,151476,151536,151564,151640,151668,151760,151788,151864,151892,151904,151912,151920,152108,152144,152212,152384,152412,152440,152504,152544,152588,152712,152728,152952,152992,154660,154932,155776,155912,156152,156200,156220,156456,156516,156688,156744,158184,158236,158572,158600,159884,159996,160096,160116,160156,160204,160224,160304,160440,160608,160712,160776,160852,162276,162320,163136,163640,164312,164552,164912,165296,165336,165380,165420,165492,165948,166148,166312,166616,166684,166748,166876,167152,167248,167372,167416,167772,167924,167996,168900,168988,169044,169192,169296,169312,169320,169328,169344,169548,169568,169808,169912,170056,170204,170284,170308,170336,170400,170440,170464,170492,171260,171276,171344,171392,171696,171860,171944,172016,172044,172100,173768,173864,174996,175052,175136,175204,175888,175932,175964,175984,176056,176120,176324,177656,177760,177828,177900,178580,178732,178784,178936,178984,179096,179212,179244,179396,179440,179488,179520,179552,179644,180208,180332,180360,180656,180748,181296,181328,181368,181416,181604,181776,181916,182008,182064,182080,182096,182212,182236,182300,182388,182412,182628,183068,183932,183976,184024,184032,184428,184440,184612,184708,185424,185472,185496,185540,187196,187344,187420,187460,188384,188768,188800,188844,188868,188908,188984,189148,189244,189400,189452,189512,189580,189676,190256,190392,190736,190816,191364,191392,192424,192480,192544,192852,193064,193104,193180,193344,194096,194124,194140,194392,194412,194492,194508,194528,194548,194576,194632,194808,195468,195620,195808,195860,196004,196024,196104,196136,196156,196448,196564,196580,196604,196656,196732,196832,196844,196892,196928,196960,196996,197024,197040,197056,197080,197448,197460,197472,197484,197756,197776,197796,197920,197940,197960,198284,198308,198332,198356,198460,198516,198776,199152,199164,199176,199188,199484,199540,200616,200676,200788,200800,200892,201004,201056,201116,201284,201312,201388,201532,201640,201836,202492,203056,203204,203248,203652,204124,204152,204244,204592,204768,204820,204852,204876,204984,205024,205076,205112,205148,205388,205520,205852,206192,206472,206524,206680,206760,207152,207544,215920,216964,217016,217152,217208,217960,218416,219104,219124,219152,219208,219216,219276,219436,219556,219592,219692,219756,219796,219836,219852,219984,220356,220732,220748,220776,220792,220816,221068,221312,221328,221544,221924,222044,222060,222072,222112,222132,222144,222152,222360,222388,222740,222792,222900,222952,223236,223312,223356,223368,223992,224040,224172,224232,224660,224812,225240,225260,225272,225940,225972,226104,226124,226164,226184,226568,226636,226684,227100,227128,227316,227424,227796,227812,227904,227988,228400,228420,228508,228532,228644,228672,228872,228888,228912,228932,229228,229408,229952,230044,230112,230460,230592,230600,230692,230920,231032,231148,231260,231880,232144,232164,232724,232760,232820,232956,233156,233316,233324,233340,233356,233408,233432,233440,233456,233556,233652,233692,234064,234088,234440,234472,234508,234536,234564,234592,234604,234884,234892,234944,235024,235048,235144,235380,235492,235520,235772,235792,235888,236008,236164,236288,236332,236396,236412,236436,236456,236556,236988,237084,237656,237908,237916,237924,237964,238228,238244,238448,239428,239460,239740,239864,240144,240384,240396,240524,240884,240912,240984,241180,241192,241248,241388,241676,241700,241840,242056,242416,242536,242552,242736,242908,242940,242964,242972,243360,243508,243528,243608,243616,243636,243660,243812,243992,244012,244032]);

  for (var i = 0; i < relocations.length; i++) {
    assert(relocations[i] % 4 === 0);
    assert(relocations[i] >= 0 && relocations[i] < eb + 244448); // in range
    assert(HEAPU32[eb + relocations[i] >> 2] + eb < (-1 >>> 0), [i, relocations[i]]); // no overflows
    HEAPU32[eb + relocations[i] >> 2] = HEAPU32[eb + relocations[i] >> 2] + eb;
  }
});



  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function']);
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var key in EXCEPTIONS.infos) {
          var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
          var adj = EXCEPTIONS.infos[ptr].adjusted;
          var len = adj.length;
          for (var i = 0; i < len; i++) {
            if (adj[i] === adjusted) {
              return ptr;
            }
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted.push(thrown);
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { abort("random_device"); /*Math.random() is not safe for random number generation, so this fallback random_device implementation aborts... see kripken/emscripten/pull/7096 */ };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
      x = x | 0;
      return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
    }  

  function ___unlock() {}

  function _abort() {
      Module['abort']();
    }

   

   

  
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
  
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          err('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) err('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
  
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) {
              Browser.setFullscreenCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          } else {
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
  
            if (Browser.resizeCanvas) {
              Browser.setWindowedCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          err('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll':
            delta = event.detail;
            break;
          case 'mousewheel':
            delta = event.wheelDelta;
            break;
          case 'wheel':
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
  
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
  
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var EGL={errorCode:12288,defaultDisplayInitialized:false,currentContext:0,currentReadSurface:0,currentDrawSurface:0,alpha:false,depth:true,stencil:true,antialias:true,stringCache:{},setErrorCode:function (code) {
        EGL.errorCode = code;
      },chooseConfig:function (display, attribList, config, config_size, numConfigs) { 
        if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
          EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
          return 0;
        }
  
        if (attribList) {
          // read attribList if it is non-null
          for(;;) {
            var param = HEAP32[((attribList)>>2)];
            if (param == 0x3021 /*EGL_ALPHA_SIZE*/) {
              var alphaSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.alpha = (alphaSize > 0);
            } else if (param == 0x3025 /*EGL_DEPTH_SIZE*/) {
              var depthSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.depth = (depthSize > 0);
            } else if (param == 0x3026 /*EGL_STENCIL_SIZE*/) {
              var stencilSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.stencil = (stencilSize > 0);
            } else if (param == 0x3031 /*EGL_SAMPLES*/) {
              var samples = HEAP32[(((attribList)+(4))>>2)];
              EGL.antialias = (samples > 0);
            } else if (param == 0x3032 /*EGL_SAMPLE_BUFFERS*/) {
              var samples = HEAP32[(((attribList)+(4))>>2)];
              EGL.antialias = (samples == 1);
            } else if (param == 0x3038 /*EGL_NONE*/) {
                break;
            }
            attribList += 8;
          }
        }
  
        if ((!config || !config_size) && !numConfigs) {
          EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
          return 0;
        }
        if (numConfigs) {
          HEAP32[((numConfigs)>>2)]=1; // Total number of supported configs: 1.
        }
        if (config && config_size > 0) {
          HEAP32[((config)>>2)]=62002; 
        }
        
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      }};function _eglGetProcAddress(name_) {
      return _emscripten_GetProcAddress(name_);
    }

  var _emscripten_asm_const_int=true;

  
  
  
  function _emscripten_get_canvas_element_size(target, width, height) {
      var canvas = JSEvents.findCanvasEventTarget(target);
      if (!canvas) return -4;
      HEAP32[((width)>>2)]=canvas.width;
      HEAP32[((height)>>2)]=canvas.height;
    }function __get_canvas_element_size(target) {
      var stackTop = stackSave();
      var w = stackAlloc(8);
      var h = w + 4;
  
      var targetInt = stackAlloc(target.id.length+1);
      stringToUTF8(target.id, targetInt, target.id.length+1);
      var ret = _emscripten_get_canvas_element_size(targetInt, w, h);
      var size = [HEAP32[((w)>>2)], HEAP32[((h)>>2)]];
      stackRestore(stackTop);
      return size;
    }
  
  
  function _emscripten_set_canvas_element_size(target, width, height) {
      var canvas = JSEvents.findCanvasEventTarget(target);
      if (!canvas) return -4;
      canvas.width = width;
      canvas.height = height;
      return 0;
    }function __set_canvas_element_size(target, width, height) {
      if (!target.controlTransferredOffscreen) {
        target.width = width;
        target.height = height;
      } else {
        // This function is being called from high-level JavaScript code instead of asm.js/Wasm,
        // and it needs to synchronously proxy over to another thread, so marshal the string onto the heap to do the call.
        var stackTop = stackSave();
        var targetInt = stackAlloc(target.id.length+1);
        stringToUTF8(target.id, targetInt, target.id.length+1);
        _emscripten_set_canvas_element_size(targetInt, width, height);
        stackRestore(stackTop);
      }
    }var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,removeAllEventListeners:function () {
        for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
          JSEvents._removeHandler(i);
        }
        JSEvents.eventHandlers = [];
        JSEvents.deferredCalls = [];
      },registerRemoveEventListeners:function () {
        if (!JSEvents.removeEventListenersRegistered) {
          __ATEXIT__.push(JSEvents.removeAllEventListeners);
          JSEvents.removeEventListenersRegistered = true;
        }
      },findEventTarget:function (target) {
        try {
          // The sensible "default" target varies between events, but use window as the default
          // since DOM events mostly can default to that. Specific callback registrations
          // override their own defaults.
          if (!target) return window;
          if (typeof target === "number") target = Pointer_stringify(target);
          if (target === '#window') return window;
          else if (target === '#document') return document;
          else if (target === '#screen') return window.screen;
          else if (target === '#canvas') return Module['canvas'];
          return (typeof target === 'string') ? document.getElementById(target) : target;
        } catch(e) {
          // In Web Workers, some objects above, such as '#document' do not exist. Gracefully
          // return null for them.
          return null;
        }
      },findCanvasEventTarget:function (target) {
        if (typeof target === 'number') target = Pointer_stringify(target);
        if (!target || target === '#canvas') {
          if (typeof GL !== 'undefined' && GL.offscreenCanvases['canvas']) return GL.offscreenCanvases['canvas']; // TODO: Remove this line, target '#canvas' should refer only to Module['canvas'], not to GL.offscreenCanvases['canvas'] - but need stricter tests to be able to remove this line.
          return Module['canvas'];
        }
        if (typeof GL !== 'undefined' && GL.offscreenCanvases[target]) return GL.offscreenCanvases[target];
        return JSEvents.findEventTarget(target);
      },deferredCalls:[],deferCall:function (targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function (targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function () {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function () {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],isInternetExplorer:function () { return navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0; },removeAllHandlersOnTarget:function (target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function (i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function (eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        }
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },registerKeyEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
        if (!JSEvents.keyEvent) JSEvents.keyEvent = _malloc( 164 );
  
        var keyEventHandlerFunc = function(event) {
          var e = event || window.event;
  
          var keyEventData = JSEvents.keyEvent;
          stringToUTF8(e.key ? e.key : "", keyEventData + 0, 32);
          stringToUTF8(e.code ? e.code : "", keyEventData + 32, 32);
          HEAP32[(((keyEventData)+(64))>>2)]=e.location;
          HEAP32[(((keyEventData)+(68))>>2)]=e.ctrlKey;
          HEAP32[(((keyEventData)+(72))>>2)]=e.shiftKey;
          HEAP32[(((keyEventData)+(76))>>2)]=e.altKey;
          HEAP32[(((keyEventData)+(80))>>2)]=e.metaKey;
          HEAP32[(((keyEventData)+(84))>>2)]=e.repeat;
          stringToUTF8(e.locale ? e.locale : "", keyEventData + 88, 32);
          stringToUTF8(e.char ? e.char : "", keyEventData + 120, 32);
          HEAP32[(((keyEventData)+(152))>>2)]=e.charCode;
          HEAP32[(((keyEventData)+(156))>>2)]=e.keyCode;
          HEAP32[(((keyEventData)+(160))>>2)]=e.which;
  
          if (Module['dynCall_iiii'](callbackfunc, eventTypeId, keyEventData, userData)) e.preventDefault();
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true, // MSIE doesn't allow fullscreen and pointerlock requests from key handlers, others do.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: keyEventHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getBoundingClientRectOrZeros:function (target) {
        return target.getBoundingClientRect ? target.getBoundingClientRect() : { left: 0, top: 0 };
      },fillMouseEventData:function (eventStruct, e, target) {
        HEAPF64[((eventStruct)>>3)]=JSEvents.tick();
        HEAP32[(((eventStruct)+(8))>>2)]=e.screenX;
        HEAP32[(((eventStruct)+(12))>>2)]=e.screenY;
        HEAP32[(((eventStruct)+(16))>>2)]=e.clientX;
        HEAP32[(((eventStruct)+(20))>>2)]=e.clientY;
        HEAP32[(((eventStruct)+(24))>>2)]=e.ctrlKey;
        HEAP32[(((eventStruct)+(28))>>2)]=e.shiftKey;
        HEAP32[(((eventStruct)+(32))>>2)]=e.altKey;
        HEAP32[(((eventStruct)+(36))>>2)]=e.metaKey;
        HEAP16[(((eventStruct)+(40))>>1)]=e.button;
        HEAP16[(((eventStruct)+(42))>>1)]=e.buttons;
        HEAP32[(((eventStruct)+(44))>>2)]=e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || (e.screenX-JSEvents.previousScreenX);
        HEAP32[(((eventStruct)+(48))>>2)]=e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || (e.screenY-JSEvents.previousScreenY);
  
        if (Module['canvas']) {
          var rect = Module['canvas'].getBoundingClientRect();
          HEAP32[(((eventStruct)+(60))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(64))>>2)]=e.clientY - rect.top;
        } else { // Canvas is not initialized, return 0.
          HEAP32[(((eventStruct)+(60))>>2)]=0;
          HEAP32[(((eventStruct)+(64))>>2)]=0;
        }
        if (target) {
          var rect = JSEvents.getBoundingClientRectOrZeros(target);
          HEAP32[(((eventStruct)+(52))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(56))>>2)]=e.clientY - rect.top;
        } else { // No specific target passed, return 0.
          HEAP32[(((eventStruct)+(52))>>2)]=0;
          HEAP32[(((eventStruct)+(56))>>2)]=0;
        }
        // wheel and mousewheel events contain wrong screenX/screenY on chrome/opera
        // https://github.com/kripken/emscripten/pull/4997
        // https://bugs.chromium.org/p/chromium/issues/detail?id=699956
        if (e.type !== 'wheel' && e.type !== 'mousewheel') {
          JSEvents.previousScreenX = e.screenX;
          JSEvents.previousScreenY = e.screenY;
        }
      },registerMouseEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
        if (!JSEvents.mouseEvent) JSEvents.mouseEvent = _malloc( 72 );
        target = JSEvents.findEventTarget(target);
  
        var mouseEventHandlerFunc = function(event) {
          var e = event || window.event;
  
          // TODO: Make this access thread safe, or this could update live while app is reading it.
          JSEvents.fillMouseEventData(JSEvents.mouseEvent, e, target);
  
          if (Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.mouseEvent, userData)) e.preventDefault();
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: mouseEventHandlerFunc,
          useCapture: useCapture
        };
        // In IE, mousedown events don't either allow deferred calls to be run!
        if (JSEvents.isInternetExplorer() && eventTypeString == 'mousedown') eventHandler.allowsDeferredCalls = false;
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWheelEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
        if (!JSEvents.wheelEvent) JSEvents.wheelEvent = _malloc( 104 );
        target = JSEvents.findEventTarget(target);
  
  
        // The DOM Level 3 events spec event 'wheel'
        var wheelHandlerFunc = function(event) {
          var e = event || window.event;
          var wheelEvent = JSEvents.wheelEvent;
          JSEvents.fillMouseEventData(wheelEvent, e, target);
          HEAPF64[(((wheelEvent)+(72))>>3)]=e["deltaX"];
          HEAPF64[(((wheelEvent)+(80))>>3)]=e["deltaY"];
          HEAPF64[(((wheelEvent)+(88))>>3)]=e["deltaZ"];
          HEAP32[(((wheelEvent)+(96))>>2)]=e["deltaMode"];
          if (Module['dynCall_iiii'](callbackfunc, eventTypeId, wheelEvent, userData)) e.preventDefault();
        };
        // The 'mousewheel' event as implemented in Safari 6.0.5
        var mouseWheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["wheelDeltaX"] || 0;
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=-(e["wheelDeltaY"] ? e["wheelDeltaY"] : e["wheelDelta"]) /* 1. Invert to unify direction with the DOM Level 3 wheel event. 2. MSIE does not provide wheelDeltaY, so wheelDelta is used as a fallback. */;
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=0 /* Not available */;
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=0 /* DOM_DELTA_PIXEL */;
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.wheelEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: (eventTypeString == 'wheel') ? wheelHandlerFunc : mouseWheelHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },pageScrollPos:function () {
        if (window.pageXOffset > 0 || window.pageYOffset > 0) {
          return [window.pageXOffset, window.pageYOffset];
        }
        if (typeof document.documentElement.scrollLeft !== 'undefined' || typeof document.documentElement.scrollTop !== 'undefined') {
          return [document.documentElement.scrollLeft, document.documentElement.scrollTop];
        }
        return [document.body.scrollLeft|0, document.body.scrollTop|0];
      },registerUiEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
        if (!JSEvents.uiEvent) JSEvents.uiEvent = _malloc( 36 );
  
        if (eventTypeString == "scroll" && !target) {
          target = document; // By default read scroll events on document rather than window.
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var uiEventHandlerFunc = function(event) {
          var e = event || window.event;
          if (e.target != target) {
            // Never take ui events such as scroll via a 'bubbled' route, but always from the direct element that
            // was targeted. Otherwise e.g. if app logs a message in response to a page scroll, the Emscripten log
            // message box could cause to scroll, generating a new (bubbled) scroll message, causing a new log print,
            // causing a new scroll, etc..
            return;
          }
          var scrollPos = JSEvents.pageScrollPos();
  
          var uiEvent = JSEvents.uiEvent;
          HEAP32[((uiEvent)>>2)]=e.detail;
          HEAP32[(((uiEvent)+(4))>>2)]=document.body.clientWidth;
          HEAP32[(((uiEvent)+(8))>>2)]=document.body.clientHeight;
          HEAP32[(((uiEvent)+(12))>>2)]=window.innerWidth;
          HEAP32[(((uiEvent)+(16))>>2)]=window.innerHeight;
          HEAP32[(((uiEvent)+(20))>>2)]=window.outerWidth;
          HEAP32[(((uiEvent)+(24))>>2)]=window.outerHeight;
          HEAP32[(((uiEvent)+(28))>>2)]=scrollPos[0];
          HEAP32[(((uiEvent)+(32))>>2)]=scrollPos[1];
          if (Module['dynCall_iiii'](callbackfunc, eventTypeId, uiEvent, userData)) e.preventDefault();
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false, // Neither scroll or resize events allow running requests inside them.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: uiEventHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getNodeNameForTarget:function (target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == window.screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },registerFocusEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
        if (!JSEvents.focusEvent) JSEvents.focusEvent = _malloc( 256 );
  
        var focusEventHandlerFunc = function(event) {
          var e = event || window.event;
  
          var nodeName = JSEvents.getNodeNameForTarget(e.target);
          var id = e.target.id ? e.target.id : '';
  
          var focusEvent = JSEvents.focusEvent;
          stringToUTF8(nodeName, focusEvent + 0, 128);
          stringToUTF8(id, focusEvent + 128, 128);
  
          if (Module['dynCall_iiii'](callbackfunc, eventTypeId, focusEvent, userData)) e.preventDefault();
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: focusEventHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },tick:function () {
        if (window['performance'] && window['performance']['now']) return window['performance']['now']();
        else return Date.now();
      },fillDeviceOrientationEventData:function (eventStruct, e, target) {
        HEAPF64[((eventStruct)>>3)]=JSEvents.tick();
        HEAPF64[(((eventStruct)+(8))>>3)]=e.alpha;
        HEAPF64[(((eventStruct)+(16))>>3)]=e.beta;
        HEAPF64[(((eventStruct)+(24))>>3)]=e.gamma;
        HEAP32[(((eventStruct)+(32))>>2)]=e.absolute;
      },registerDeviceOrientationEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
        if (!JSEvents.deviceOrientationEvent) JSEvents.deviceOrientationEvent = _malloc( 40 );
  
        var deviceOrientationEventHandlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillDeviceOrientationEventData(JSEvents.deviceOrientationEvent, e, target); // TODO: Thread-safety with respect to emscripten_get_deviceorientation_status()
  
          if (Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.deviceOrientationEvent, userData)) e.preventDefault();
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: deviceOrientationEventHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fillDeviceMotionEventData:function (eventStruct, e, target) {
        HEAPF64[((eventStruct)>>3)]=JSEvents.tick();
        HEAPF64[(((eventStruct)+(8))>>3)]=e.acceleration.x;
        HEAPF64[(((eventStruct)+(16))>>3)]=e.acceleration.y;
        HEAPF64[(((eventStruct)+(24))>>3)]=e.acceleration.z;
        HEAPF64[(((eventStruct)+(32))>>3)]=e.accelerationIncludingGravity.x;
        HEAPF64[(((eventStruct)+(40))>>3)]=e.accelerationIncludingGravity.y;
        HEAPF64[(((eventStruct)+(48))>>3)]=e.accelerationIncludingGravity.z;
        HEAPF64[(((eventStruct)+(56))>>3)]=e.rotationRate.alpha;
        HEAPF64[(((eventStruct)+(64))>>3)]=e.rotationRate.beta;
        HEAPF64[(((eventStruct)+(72))>>3)]=e.rotationRate.gamma;
      },registerDeviceMotionEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
        if (!JSEvents.deviceMotionEvent) JSEvents.deviceMotionEvent = _malloc( 80 );
  
        var deviceMotionEventHandlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillDeviceMotionEventData(JSEvents.deviceMotionEvent, e, target); // TODO: Thread-safety with respect to emscripten_get_devicemotion_status()
  
          if (Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.deviceMotionEvent, userData)) e.preventDefault();
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: deviceMotionEventHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },screenOrientation:function () {
        if (!window.screen) return undefined;
        return window.screen.orientation || window.screen.mozOrientation || window.screen.webkitOrientation || window.screen.msOrientation;
      },fillOrientationChangeEventData:function (eventStruct, e) {
        var orientations  = ["portrait-primary", "portrait-secondary", "landscape-primary", "landscape-secondary"];
        var orientations2 = ["portrait",         "portrait",           "landscape",         "landscape"];
  
        var orientationString = JSEvents.screenOrientation();
        var orientation = orientations.indexOf(orientationString);
        if (orientation == -1) {
          orientation = orientations2.indexOf(orientationString);
        }
  
        HEAP32[((eventStruct)>>2)]=1 << orientation;
        HEAP32[(((eventStruct)+(4))>>2)]=window.orientation;
      },registerOrientationChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
        if (!JSEvents.orientationChangeEvent) JSEvents.orientationChangeEvent = _malloc( 8 );
  
        if (!target) {
          target = window.screen; // Orientation events need to be captured from 'window.screen' instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var orientationChangeEventHandlerFunc = function(event) {
          var e = event || window.event;
  
          var orientationChangeEvent = JSEvents.orientationChangeEvent;
  
          JSEvents.fillOrientationChangeEventData(orientationChangeEvent, e);
  
          if (Module['dynCall_iiii'](callbackfunc, eventTypeId, orientationChangeEvent, userData)) e.preventDefault();
        };
  
        if (eventTypeString == "orientationchange" && window.screen.mozOrientation !== undefined) {
          eventTypeString = "mozorientationchange";
        }
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: orientationChangeEventHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fullscreenEnabled:function () {
        return document.fullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
      },fillFullscreenChangeEventData:function (eventStruct, e) {
        var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
        var isFullscreen = !!fullscreenElement;
        HEAP32[((eventStruct)>>2)]=isFullscreen;
        HEAP32[(((eventStruct)+(4))>>2)]=JSEvents.fullscreenEnabled();
        // If transitioning to fullscreen, report info about the element that is now fullscreen.
        // If transitioning to windowed mode, report info about the element that just was fullscreen.
        var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
        var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
        var id = (reportedElement && reportedElement.id) ? reportedElement.id : '';
        stringToUTF8(nodeName, eventStruct + 8, 128);
        stringToUTF8(id, eventStruct + 136, 128);
        HEAP32[(((eventStruct)+(264))>>2)]=reportedElement ? reportedElement.clientWidth : 0;
        HEAP32[(((eventStruct)+(268))>>2)]=reportedElement ? reportedElement.clientHeight : 0;
        HEAP32[(((eventStruct)+(272))>>2)]=screen.width;
        HEAP32[(((eventStruct)+(276))>>2)]=screen.height;
        if (isFullscreen) {
          JSEvents.previousFullscreenElement = fullscreenElement;
        }
      },registerFullscreenChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
        if (!JSEvents.fullscreenChangeEvent) JSEvents.fullscreenChangeEvent = _malloc( 280 );
  
        if (!target) target = document; // Fullscreen change events need to be captured from 'document' by default instead of 'window'
        else target = JSEvents.findEventTarget(target);
  
        var fullscreenChangeEventhandlerFunc = function(event) {
          var e = event || window.event;
  
          var fullscreenChangeEvent = JSEvents.fullscreenChangeEvent;
  
          JSEvents.fillFullscreenChangeEventData(fullscreenChangeEvent, e);
  
          if (Module['dynCall_iiii'](callbackfunc, eventTypeId, fullscreenChangeEvent, userData)) e.preventDefault();
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: fullscreenChangeEventhandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },resizeCanvasForFullscreen:function (target, strategy) {
        var restoreOldStyle = __registerRestoreOldStyle(target);
        var cssWidth = strategy.softFullscreen ? window.innerWidth : screen.width;
        var cssHeight = strategy.softFullscreen ? window.innerHeight : screen.height;
        var rect = target.getBoundingClientRect();
        var windowedCssWidth = rect.right - rect.left;
        var windowedCssHeight = rect.bottom - rect.top;
        var canvasSize = __get_canvas_element_size(target);
        var windowedRttWidth = canvasSize[0];
        var windowedRttHeight = canvasSize[1];
  
        if (strategy.scaleMode == 3) {
          __setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
          cssWidth = windowedCssWidth;
          cssHeight = windowedCssHeight;
        } else if (strategy.scaleMode == 2) {
          if (cssWidth*windowedRttHeight < windowedRttWidth*cssHeight) {
            var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
            __setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
            cssHeight = desiredCssHeight;
          } else {
            var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
            __setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
            cssWidth = desiredCssWidth;
          }
        }
  
        // If we are adding padding, must choose a background color or otherwise Chrome will give the
        // padding a default white color. Do it only if user has not customized their own background color.
        if (!target.style.backgroundColor) target.style.backgroundColor = 'black';
        // IE11 does the same, but requires the color to be set in the document body.
        if (!document.body.style.backgroundColor) document.body.style.backgroundColor = 'black'; // IE11
        // Firefox always shows black letterboxes independent of style color.
  
        target.style.width = cssWidth + 'px';
        target.style.height = cssHeight + 'px';
  
        if (strategy.filteringMode == 1) {
          target.style.imageRendering = 'optimizeSpeed';
          target.style.imageRendering = '-moz-crisp-edges';
          target.style.imageRendering = '-o-crisp-edges';
          target.style.imageRendering = '-webkit-optimize-contrast';
          target.style.imageRendering = 'optimize-contrast';
          target.style.imageRendering = 'crisp-edges';
          target.style.imageRendering = 'pixelated';
        }
  
        var dpiScale = (strategy.canvasResolutionScaleMode == 2) ? window.devicePixelRatio : 1;
        if (strategy.canvasResolutionScaleMode != 0) {
          var newWidth = (cssWidth * dpiScale)|0;
          var newHeight = (cssHeight * dpiScale)|0;
          __set_canvas_element_size(target, newWidth, newHeight);
          if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, newWidth, newHeight);
        }
        return restoreOldStyle;
      },requestFullscreen:function (target, strategy) {
        // EMSCRIPTEN_FULLSCREEN_SCALE_DEFAULT + EMSCRIPTEN_FULLSCREEN_CANVAS_SCALE_NONE is a mode where no extra logic is performed to the DOM elements.
        if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
          JSEvents.resizeCanvasForFullscreen(target, strategy);
        }
  
        if (target.requestFullscreen) {
          target.requestFullscreen();
        } else if (target.msRequestFullscreen) {
          target.msRequestFullscreen();
        } else if (target.mozRequestFullScreen) {
          target.mozRequestFullScreen();
        } else if (target.mozRequestFullscreen) {
          target.mozRequestFullscreen();
        } else if (target.webkitRequestFullscreen) {
          target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        } else {
          if (typeof JSEvents.fullscreenEnabled() === 'undefined') {
            return -1;
          } else {
            return -3;
          }
        }
  
        if (strategy.canvasResizedCallback) {
          Module['dynCall_iiii'](strategy.canvasResizedCallback, 37, 0, strategy.canvasResizedCallbackUserData);
        }
  
        return 0;
      },fillPointerlockChangeEventData:function (eventStruct, e) {
        var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
        var isPointerlocked = !!pointerLockElement;
        HEAP32[((eventStruct)>>2)]=isPointerlocked;
        var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
        var id = (pointerLockElement && pointerLockElement.id) ? pointerLockElement.id : '';
        stringToUTF8(nodeName, eventStruct + 4, 128);
        stringToUTF8(id, eventStruct + 132, 128);
      },registerPointerlockChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
        if (!JSEvents.pointerlockChangeEvent) JSEvents.pointerlockChangeEvent = _malloc( 260 );
  
        if (!target) target = document; // Pointer lock change events need to be captured from 'document' by default instead of 'window'
        else target = JSEvents.findEventTarget(target);
  
        var pointerlockChangeEventHandlerFunc = function(event) {
          var e = event || window.event;
  
          var pointerlockChangeEvent = JSEvents.pointerlockChangeEvent;
          JSEvents.fillPointerlockChangeEventData(pointerlockChangeEvent, e);
  
          if (Module['dynCall_iiii'](callbackfunc, eventTypeId, pointerlockChangeEvent, userData)) e.preventDefault();
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: pointerlockChangeEventHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerPointerlockErrorEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!target) target = document; // Pointer lock events need to be captured from 'document' by default instead of 'window'
        else target = JSEvents.findEventTarget(target);
  
        var pointerlockErrorEventHandlerFunc = function(event) {
          var e = event || window.event;
  
          if (Module['dynCall_iiii'](callbackfunc, eventTypeId, 0, userData)) e.preventDefault();
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: pointerlockErrorEventHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },requestPointerLock:function (target) {
        if (target.requestPointerLock) {
          target.requestPointerLock();
        } else if (target.mozRequestPointerLock) {
          target.mozRequestPointerLock();
        } else if (target.webkitRequestPointerLock) {
          target.webkitRequestPointerLock();
        } else if (target.msRequestPointerLock) {
          target.msRequestPointerLock();
        } else {
          // document.body is known to accept pointer lock, so use that to differentiate if the user passed a bad element,
          // or if the whole browser just doesn't support the feature.
          if (document.body.requestPointerLock || document.body.mozRequestPointerLock || document.body.webkitRequestPointerLock || document.body.msRequestPointerLock) {
            return -3;
          } else {
            return -1;
          }
        }
        return 0;
      },fillVisibilityChangeEventData:function (eventStruct, e) {
        var visibilityStates = [ "hidden", "visible", "prerender", "unloaded" ];
        var visibilityState = visibilityStates.indexOf(document.visibilityState);
  
        HEAP32[((eventStruct)>>2)]=document.hidden;
        HEAP32[(((eventStruct)+(4))>>2)]=visibilityState;
      },registerVisibilityChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
        if (!JSEvents.visibilityChangeEvent) JSEvents.visibilityChangeEvent = _malloc( 8 );
  
        if (!target) target = document; // Visibility change events need to be captured from 'document' by default instead of 'window'
        else target = JSEvents.findEventTarget(target);
  
        var visibilityChangeEventHandlerFunc = function(event) {
          var e = event || window.event;
  
          var visibilityChangeEvent = JSEvents.visibilityChangeEvent;
  
          JSEvents.fillVisibilityChangeEventData(visibilityChangeEvent, e);
  
          if (Module['dynCall_iiii'](callbackfunc, eventTypeId, visibilityChangeEvent, userData)) e.preventDefault();
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: visibilityChangeEventHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerTouchEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
        if (!JSEvents.touchEvent) JSEvents.touchEvent = _malloc( 1684 );
  
        target = JSEvents.findEventTarget(target);
  
        var touchEventHandlerFunc = function(event) {
          var e = event || window.event;
  
          var touches = {};
          for(var i = 0; i < e.touches.length; ++i) {
            var touch = e.touches[i];
            touches[touch.identifier] = touch;
          }
          for(var i = 0; i < e.changedTouches.length; ++i) {
            var touch = e.changedTouches[i];
            touches[touch.identifier] = touch;
            touch.changed = true;
          }
          for(var i = 0; i < e.targetTouches.length; ++i) {
            var touch = e.targetTouches[i];
            touches[touch.identifier].onTarget = true;
          }
  
          var touchEvent = JSEvents.touchEvent;
          var ptr = touchEvent;
          HEAP32[(((ptr)+(4))>>2)]=e.ctrlKey;
          HEAP32[(((ptr)+(8))>>2)]=e.shiftKey;
          HEAP32[(((ptr)+(12))>>2)]=e.altKey;
          HEAP32[(((ptr)+(16))>>2)]=e.metaKey;
          ptr += 20; // Advance to the start of the touch array.
          var canvasRect = Module['canvas'] ? Module['canvas'].getBoundingClientRect() : undefined;
          var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
          var numTouches = 0;
          for(var i in touches) {
            var t = touches[i];
            HEAP32[((ptr)>>2)]=t.identifier;
            HEAP32[(((ptr)+(4))>>2)]=t.screenX;
            HEAP32[(((ptr)+(8))>>2)]=t.screenY;
            HEAP32[(((ptr)+(12))>>2)]=t.clientX;
            HEAP32[(((ptr)+(16))>>2)]=t.clientY;
            HEAP32[(((ptr)+(20))>>2)]=t.pageX;
            HEAP32[(((ptr)+(24))>>2)]=t.pageY;
            HEAP32[(((ptr)+(28))>>2)]=t.changed;
            HEAP32[(((ptr)+(32))>>2)]=t.onTarget;
            if (canvasRect) {
              HEAP32[(((ptr)+(44))>>2)]=t.clientX - canvasRect.left;
              HEAP32[(((ptr)+(48))>>2)]=t.clientY - canvasRect.top;
            } else {
              HEAP32[(((ptr)+(44))>>2)]=0;
              HEAP32[(((ptr)+(48))>>2)]=0;            
            }
            HEAP32[(((ptr)+(36))>>2)]=t.clientX - targetRect.left;
            HEAP32[(((ptr)+(40))>>2)]=t.clientY - targetRect.top;
            
            ptr += 52;
  
            if (++numTouches >= 32) {
              break;
            }
          }
          HEAP32[((touchEvent)>>2)]=numTouches;
  
          if (Module['dynCall_iiii'](callbackfunc, eventTypeId, touchEvent, userData)) e.preventDefault();
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: eventTypeString == 'touchstart' || eventTypeString == 'touchend',
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: touchEventHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fillGamepadEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.timestamp;
        for(var i = 0; i < e.axes.length; ++i) {
          HEAPF64[(((eventStruct+i*8)+(16))>>3)]=e.axes[i];
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i].value;
          } else {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i];
          }
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i].pressed;
          } else {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i] == 1.0;
          }
        }
        HEAP32[(((eventStruct)+(1296))>>2)]=e.connected;
        HEAP32[(((eventStruct)+(1300))>>2)]=e.index;
        HEAP32[(((eventStruct)+(8))>>2)]=e.axes.length;
        HEAP32[(((eventStruct)+(12))>>2)]=e.buttons.length;
        stringToUTF8(e.id, eventStruct + 1304, 64);
        stringToUTF8(e.mapping, eventStruct + 1368, 64);
      },registerGamepadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
        if (!JSEvents.gamepadEvent) JSEvents.gamepadEvent = _malloc( 1432 );
  
        var gamepadEventHandlerFunc = function(event) {
          var e = event || window.event;
  
          var gamepadEvent = JSEvents.gamepadEvent;
          JSEvents.fillGamepadEventData(gamepadEvent, e.gamepad);
  
          if (Module['dynCall_iiii'](callbackfunc, eventTypeId, gamepadEvent, userData)) e.preventDefault();
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: gamepadEventHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerBeforeUnloadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        var beforeUnloadEventHandlerFunc = function(event) {
          var e = event || window.event;
  
          // Note: This is always called on the main browser thread, since it needs synchronously return a value!
          var confirmationMessage = Module['dynCall_iiii'](callbackfunc, eventTypeId, 0, userData);
          
          if (confirmationMessage) {
            confirmationMessage = Pointer_stringify(confirmationMessage);
          }
          if (confirmationMessage) {
            e.preventDefault();
            e.returnValue = confirmationMessage;
            return confirmationMessage;
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: beforeUnloadEventHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },battery:function () { return navigator.battery || navigator.mozBattery || navigator.webkitBattery; },fillBatteryEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.chargingTime;
        HEAPF64[(((eventStruct)+(8))>>3)]=e.dischargingTime;
        HEAPF64[(((eventStruct)+(16))>>3)]=e.level;
        HEAP32[(((eventStruct)+(24))>>2)]=e.charging;
      },registerBatteryEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
        if (!JSEvents.batteryEvent) JSEvents.batteryEvent = _malloc( 32 );
  
        var batteryEventHandlerFunc = function(event) {
          var e = event || window.event;
  
          var batteryEvent = JSEvents.batteryEvent;
          JSEvents.fillBatteryEventData(batteryEvent, JSEvents.battery());
  
          if (Module['dynCall_iiii'](callbackfunc, eventTypeId, batteryEvent, userData)) e.preventDefault();
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: batteryEventHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWebGlEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
        if (!target) target = Module['canvas'];
  
        var webGlEventHandlerFunc = function(event) {
          var e = event || window.event;
  
          if (Module['dynCall_iiii'](callbackfunc, eventTypeId, 0, userData)) e.preventDefault();
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: webGlEventHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      }};function _emscripten_exit_pointerlock() {
      // Make sure no queued up calls will fire after this.
      JSEvents.removeDeferredCalls(JSEvents.requestPointerLock);
  
      if (document.exitPointerLock) {
        document.exitPointerLock();
      } else if (document.msExitPointerLock) {
        document.msExitPointerLock();
      } else if (document.mozExitPointerLock) {
        document.mozExitPointerLock();
      } else if (document.webkitExitPointerLock) {
        document.webkitExitPointerLock();
      } else {
        return -1;
      }
      return 0;
    }

  function _emscripten_get_pointerlock_status(pointerlockStatus) {
      if (pointerlockStatus) JSEvents.fillPointerlockChangeEventData(pointerlockStatus);
      if (!document.body || (!document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock)) {
        return -1;
      }
      return 0;
    }

  function _emscripten_glAccum() {
  err('missing function: emscripten_glAccum'); abort(-1);
  }

  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:{},currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},tempFixedLengthArray:[],unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
  
        // For functions such as glDrawBuffers, glInvalidateFramebuffer and glInvalidateSubFramebuffer that need to pass a short array to the WebGL API,
        // create a set of short fixed-length arrays to avoid having to generate any garbage when calling those functions.
        for (var i = 0; i < 32; i++) {
          GL.tempFixedLengthArray.push(new Array(i));
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var len = length ? HEAP32[(((length)+(i*4))>>2)] : undefined;
          source += Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len >= 0 ? len : undefined);
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes['majorVersion'] === 'undefined' && typeof webGLContextAttributes['minorVersion'] === 'undefined') {
          webGLContextAttributes['majorVersion'] = 1;
          webGLContextAttributes['minorVersion'] = 0;
        }
  
  
  
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes['majorVersion'] == 1 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          return 0;
        }
  
        if (!ctx) return 0;
        var context = GL.registerContext(ctx, webGLContextAttributes);
        return context;
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = _malloc(8); // Make space on the heap to store GL context attributes that need to be accessible as shared between threads.
        HEAP32[((handle)>>2)]=webGLContextAttributes["explicitSwapControl"]; // explicitSwapControl
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes['majorVersion'],
          GLctx: ctx
        };
  
  
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes['enableExtensionsByDefault']) {
          GL.initExtensions(context);
        }
  
  
  
  
        return handle;
      },makeContextCurrent:function (contextHandle) {
        // Deactivating current context?
        if (!contextHandle) {
          GLctx = Module.ctx = GL.currentContext = null;
          return true;
        }
        var context = GL.contexts[contextHandle];
        if (!context) {
          return false;
        }
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        _free(GL.contexts[contextHandle]);
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ // Khronos ratified WebGL extensions ordered by number (no debug extensions):
                                               "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "EXT_frag_depth",
                                               "WEBGL_draw_buffers", "ANGLE_instanced_arrays", "OES_texture_float_linear",
                                               "OES_texture_half_float_linear", "EXT_blend_minmax", "EXT_shader_texture_lod",
                                               // Community approved WebGL extensions ordered by number:
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_sRGB", "WEBGL_compressed_texture_etc1", "EXT_disjoint_timer_query",
                                               "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_astc", "EXT_color_buffer_float",
                                               "WEBGL_compressed_texture_s3tc_srgb", "EXT_disjoint_timer_query_webgl2"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (extension.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, 0x8B86/*GL_ACTIVE_UNIFORMS*/);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc != null)
          {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};function _emscripten_glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _emscripten_glAlphaFunc() {
  err('missing function: emscripten_glAlphaFunc'); abort(-1);
  }

  function _emscripten_glAreTexturesResident() {
  err('missing function: emscripten_glAreTexturesResident'); abort(-1);
  }

  function _emscripten_glArrayElement() {
  err('missing function: emscripten_glArrayElement'); abort(-1);
  }

  function _emscripten_glAttachObjectARB() {
  err('missing function: emscripten_glAttachObjectARB'); abort(-1);
  }

  function _emscripten_glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glBegin(){ throw 'Legacy GL function (glBegin) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_glBeginConditionalRender() {
  err('missing function: emscripten_glBeginConditionalRender'); abort(-1);
  }

  function _emscripten_glBeginQuery() {
  err('missing function: emscripten_glBeginQuery'); abort(-1);
  }

  function _emscripten_glBeginTransformFeedback() {
  err('missing function: emscripten_glBeginTransformFeedback'); abort(-1);
  }

  function _emscripten_glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  function _emscripten_glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _emscripten_glBindBufferBase() {
  err('missing function: emscripten_glBindBufferBase'); abort(-1);
  }

  function _emscripten_glBindBufferRange() {
  err('missing function: emscripten_glBindBufferRange'); abort(-1);
  }

  function _emscripten_glBindFragDataLocation() {
  err('missing function: emscripten_glBindFragDataLocation'); abort(-1);
  }

  function _emscripten_glBindFramebuffer(target, framebuffer) {
  
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
  
    }

  function _emscripten_glBindProgramARB() {
  err('missing function: emscripten_glBindProgramARB'); abort(-1);
  }

  function _emscripten_glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, renderbuffer ? GL.renderbuffers[renderbuffer] : null);
    }

  function _emscripten_glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _emscripten_glBindVertexArray(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
    }

  function _emscripten_glBitmap() {
  err('missing function: emscripten_glBitmap'); abort(-1);
  }

  function _emscripten_glBlendColor(x0, x1, x2, x3) { GLctx['blendColor'](x0, x1, x2, x3) }

  function _emscripten_glBlendEquation(x0) { GLctx['blendEquation'](x0) }

  function _emscripten_glBlendEquationSeparate(x0, x1) { GLctx['blendEquationSeparate'](x0, x1) }

  function _emscripten_glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) { GLctx['blendFuncSeparate'](x0, x1, x2, x3) }

  function _emscripten_glBlitFramebuffer() {
  err('missing function: emscripten_glBlitFramebuffer'); abort(-1);
  }

  function _emscripten_glBufferData(target, size, data, usage) {
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _emscripten_glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _emscripten_glCallList() {
  err('missing function: emscripten_glCallList'); abort(-1);
  }

  function _emscripten_glCallLists() {
  err('missing function: emscripten_glCallLists'); abort(-1);
  }

  function _emscripten_glCheckFramebufferStatus(x0) { return GLctx['checkFramebufferStatus'](x0) }

  function _emscripten_glClampColor() {
  err('missing function: emscripten_glClampColor'); abort(-1);
  }

  function _emscripten_glClear(x0) { GLctx['clear'](x0) }

  function _emscripten_glClearAccum() {
  err('missing function: emscripten_glClearAccum'); abort(-1);
  }

  function _emscripten_glClearBufferfi() {
  err('missing function: emscripten_glClearBufferfi'); abort(-1);
  }

  function _emscripten_glClearBufferfv() {
  err('missing function: emscripten_glClearBufferfv'); abort(-1);
  }

  function _emscripten_glClearBufferiv() {
  err('missing function: emscripten_glClearBufferiv'); abort(-1);
  }

  function _emscripten_glClearBufferuiv() {
  err('missing function: emscripten_glClearBufferuiv'); abort(-1);
  }

  function _emscripten_glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _emscripten_glClearDepth(x0) { GLctx['clearDepth'](x0) }

  function _emscripten_glClearDepthf(x0) { GLctx['clearDepth'](x0) }

  function _emscripten_glClearIndex() {
  err('missing function: emscripten_glClearIndex'); abort(-1);
  }

  function _emscripten_glClearStencil(x0) { GLctx['clearStencil'](x0) }

  function _emscripten_glClientActiveTexture() {
  err('missing function: emscripten_glClientActiveTexture'); abort(-1);
  }

  function _emscripten_glClipPlane() {
  err('missing function: emscripten_glClipPlane'); abort(-1);
  }

  function _emscripten_glColor3b() {
  err('missing function: emscripten_glColor3b'); abort(-1);
  }

  function _emscripten_glColor3bv() {
  err('missing function: emscripten_glColor3bv'); abort(-1);
  }

  function _emscripten_glColor3d() {
  err('missing function: emscripten_glColor3d'); abort(-1);
  }

  function _emscripten_glColor3dv() {
  err('missing function: emscripten_glColor3dv'); abort(-1);
  }

  function _emscripten_glColor3f() {
  err('missing function: emscripten_glColor3f'); abort(-1);
  }

  function _emscripten_glColor3fv() {
  err('missing function: emscripten_glColor3fv'); abort(-1);
  }

  function _emscripten_glColor3i() {
  err('missing function: emscripten_glColor3i'); abort(-1);
  }

  function _emscripten_glColor3iv() {
  err('missing function: emscripten_glColor3iv'); abort(-1);
  }

  function _emscripten_glColor3s() {
  err('missing function: emscripten_glColor3s'); abort(-1);
  }

  function _emscripten_glColor3sv() {
  err('missing function: emscripten_glColor3sv'); abort(-1);
  }

  function _emscripten_glColor3ub() {
  err('missing function: emscripten_glColor3ub'); abort(-1);
  }

  function _emscripten_glColor3ubv() {
  err('missing function: emscripten_glColor3ubv'); abort(-1);
  }

  function _emscripten_glColor3ui() {
  err('missing function: emscripten_glColor3ui'); abort(-1);
  }

  function _emscripten_glColor3uiv() {
  err('missing function: emscripten_glColor3uiv'); abort(-1);
  }

  function _emscripten_glColor3us() {
  err('missing function: emscripten_glColor3us'); abort(-1);
  }

  function _emscripten_glColor3usv() {
  err('missing function: emscripten_glColor3usv'); abort(-1);
  }

  function _emscripten_glColor4b() {
  err('missing function: emscripten_glColor4b'); abort(-1);
  }

  function _emscripten_glColor4bv() {
  err('missing function: emscripten_glColor4bv'); abort(-1);
  }

  function _emscripten_glColor4d() {
  err('missing function: emscripten_glColor4d'); abort(-1);
  }

  function _emscripten_glColor4dv() {
  err('missing function: emscripten_glColor4dv'); abort(-1);
  }

  function _emscripten_glColor4f() {
  err('missing function: emscripten_glColor4f'); abort(-1);
  }

  function _emscripten_glColor4fv() {
  err('missing function: emscripten_glColor4fv'); abort(-1);
  }

  function _emscripten_glColor4i() {
  err('missing function: emscripten_glColor4i'); abort(-1);
  }

  function _emscripten_glColor4iv() {
  err('missing function: emscripten_glColor4iv'); abort(-1);
  }

  function _emscripten_glColor4s() {
  err('missing function: emscripten_glColor4s'); abort(-1);
  }

  function _emscripten_glColor4sv() {
  err('missing function: emscripten_glColor4sv'); abort(-1);
  }

  function _emscripten_glColor4ub() {
  err('missing function: emscripten_glColor4ub'); abort(-1);
  }

  function _emscripten_glColor4ubv() {
  err('missing function: emscripten_glColor4ubv'); abort(-1);
  }

  function _emscripten_glColor4ui() {
  err('missing function: emscripten_glColor4ui'); abort(-1);
  }

  function _emscripten_glColor4uiv() {
  err('missing function: emscripten_glColor4uiv'); abort(-1);
  }

  function _emscripten_glColor4us() {
  err('missing function: emscripten_glColor4us'); abort(-1);
  }

  function _emscripten_glColor4usv() {
  err('missing function: emscripten_glColor4usv'); abort(-1);
  }

  function _emscripten_glColorMask(red, green, blue, alpha) {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    }

  function _emscripten_glColorMaski() {
  err('missing function: emscripten_glColorMaski'); abort(-1);
  }

  function _emscripten_glColorMaterial() {
  err('missing function: emscripten_glColorMaterial'); abort(-1);
  }

  function _emscripten_glColorPointer() {
  err('missing function: emscripten_glColorPointer'); abort(-1);
  }

  function _emscripten_glColorSubTable() {
  err('missing function: emscripten_glColorSubTable'); abort(-1);
  }

  function _emscripten_glColorTable() {
  err('missing function: emscripten_glColorTable'); abort(-1);
  }

  function _emscripten_glColorTableParameterfv() {
  err('missing function: emscripten_glColorTableParameterfv'); abort(-1);
  }

  function _emscripten_glColorTableParameteriv() {
  err('missing function: emscripten_glColorTableParameteriv'); abort(-1);
  }

  function _emscripten_glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _emscripten_glCompressedTexImage1D() {
  err('missing function: emscripten_glCompressedTexImage1D'); abort(-1);
  }

  function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _emscripten_glCompressedTexImage3D() {
  err('missing function: emscripten_glCompressedTexImage3D'); abort(-1);
  }

  function _emscripten_glCompressedTexSubImage1D() {
  err('missing function: emscripten_glCompressedTexSubImage1D'); abort(-1);
  }

  function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
      GLctx['compressedTexSubImage2D'](target, level, xoffset, yoffset, width, height, format, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _emscripten_glCompressedTexSubImage3D() {
  err('missing function: emscripten_glCompressedTexSubImage3D'); abort(-1);
  }

  function _emscripten_glConvolutionFilter1D() {
  err('missing function: emscripten_glConvolutionFilter1D'); abort(-1);
  }

  function _emscripten_glConvolutionFilter2D() {
  err('missing function: emscripten_glConvolutionFilter2D'); abort(-1);
  }

  function _emscripten_glConvolutionParameterf() {
  err('missing function: emscripten_glConvolutionParameterf'); abort(-1);
  }

  function _emscripten_glConvolutionParameterfv() {
  err('missing function: emscripten_glConvolutionParameterfv'); abort(-1);
  }

  function _emscripten_glConvolutionParameteri() {
  err('missing function: emscripten_glConvolutionParameteri'); abort(-1);
  }

  function _emscripten_glConvolutionParameteriv() {
  err('missing function: emscripten_glConvolutionParameteriv'); abort(-1);
  }

  function _emscripten_glCopyColorSubTable() {
  err('missing function: emscripten_glCopyColorSubTable'); abort(-1);
  }

  function _emscripten_glCopyColorTable() {
  err('missing function: emscripten_glCopyColorTable'); abort(-1);
  }

  function _emscripten_glCopyConvolutionFilter1D() {
  err('missing function: emscripten_glCopyConvolutionFilter1D'); abort(-1);
  }

  function _emscripten_glCopyConvolutionFilter2D() {
  err('missing function: emscripten_glCopyConvolutionFilter2D'); abort(-1);
  }

  function _emscripten_glCopyPixels() {
  err('missing function: emscripten_glCopyPixels'); abort(-1);
  }

  function _emscripten_glCopyTexImage1D() {
  err('missing function: emscripten_glCopyTexImage1D'); abort(-1);
  }

  function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glCopyTexSubImage1D() {
  err('missing function: emscripten_glCopyTexSubImage1D'); abort(-1);
  }

  function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexSubImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glCopyTexSubImage3D() {
  err('missing function: emscripten_glCopyTexSubImage3D'); abort(-1);
  }

  function _emscripten_glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _emscripten_glCreateProgramObjectARB() {
  err('missing function: emscripten_glCreateProgramObjectARB'); abort(-1);
  }

  function _emscripten_glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _emscripten_glCreateShaderObjectARB() {
  err('missing function: emscripten_glCreateShaderObjectARB'); abort(-1);
  }

  function _emscripten_glCullFace(x0) { GLctx['cullFace'](x0) }

  function _emscripten_glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _emscripten_glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _emscripten_glDeleteLists() {
  err('missing function: emscripten_glDeleteLists'); abort(-1);
  }

  function _emscripten_glDeleteObjectARB() {
  err('missing function: emscripten_glDeleteObjectARB'); abort(-1);
  }

  function _emscripten_glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _emscripten_glDeleteProgramsARB() {
  err('missing function: emscripten_glDeleteProgramsARB'); abort(-1);
  }

  function _emscripten_glDeleteQueries() {
  err('missing function: emscripten_glDeleteQueries'); abort(-1);
  }

  function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _emscripten_glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _emscripten_glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _emscripten_glDeleteVertexArrays(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx['deleteVertexArray'](GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }

  function _emscripten_glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function _emscripten_glDepthMask(flag) {
      GLctx.depthMask(!!flag);
    }

  function _emscripten_glDepthRange(x0, x1) { GLctx['depthRange'](x0, x1) }

  function _emscripten_glDepthRangef(x0, x1) { GLctx['depthRange'](x0, x1) }

  function _emscripten_glDetachObjectARB() {
  err('missing function: emscripten_glDetachObjectARB'); abort(-1);
  }

  function _emscripten_glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glDisable(x0) { GLctx['disable'](x0) }

  function _emscripten_glDisableClientState() {
  err('missing function: emscripten_glDisableClientState'); abort(-1);
  }

  function _emscripten_glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _emscripten_glDisablei() {
  err('missing function: emscripten_glDisablei'); abort(-1);
  }

  function _emscripten_glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glDrawArraysInstanced(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }

  function _emscripten_glDrawBuffer() {
  err('missing function: emscripten_glDrawBuffer'); abort(-1);
  }

  function _emscripten_glDrawBuffers(n, bufs) {
  
      var bufArray = GL.tempFixedLengthArray[n];
      for (var i = 0; i < n; i++) {
        bufArray[i] = HEAP32[(((bufs)+(i*4))>>2)];
      }
  
      GLctx['drawBuffers'](bufArray);
    }

  function _emscripten_glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _emscripten_glDrawElementsInstanced(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }

  function _emscripten_glDrawPixels() {
  err('missing function: emscripten_glDrawPixels'); abort(-1);
  }

  function _emscripten_glDrawRangeElements() {
  err('missing function: emscripten_glDrawRangeElements'); abort(-1);
  }

  function _emscripten_glEdgeFlag() {
  err('missing function: emscripten_glEdgeFlag'); abort(-1);
  }

  function _emscripten_glEdgeFlagPointer() {
  err('missing function: emscripten_glEdgeFlagPointer'); abort(-1);
  }

  function _emscripten_glEdgeFlagv() {
  err('missing function: emscripten_glEdgeFlagv'); abort(-1);
  }

  function _emscripten_glEnable(x0) { GLctx['enable'](x0) }

  function _emscripten_glEnableClientState() {
  err('missing function: emscripten_glEnableClientState'); abort(-1);
  }

  function _emscripten_glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _emscripten_glEnablei() {
  err('missing function: emscripten_glEnablei'); abort(-1);
  }

  function _emscripten_glEnd() {
  err('missing function: emscripten_glEnd'); abort(-1);
  }

  function _emscripten_glEndConditionalRender() {
  err('missing function: emscripten_glEndConditionalRender'); abort(-1);
  }

  function _emscripten_glEndList() {
  err('missing function: emscripten_glEndList'); abort(-1);
  }

  function _emscripten_glEndQuery() {
  err('missing function: emscripten_glEndQuery'); abort(-1);
  }

  function _emscripten_glEndTransformFeedback() {
  err('missing function: emscripten_glEndTransformFeedback'); abort(-1);
  }

  function _emscripten_glEvalCoord1d() {
  err('missing function: emscripten_glEvalCoord1d'); abort(-1);
  }

  function _emscripten_glEvalCoord1dv() {
  err('missing function: emscripten_glEvalCoord1dv'); abort(-1);
  }

  function _emscripten_glEvalCoord1f() {
  err('missing function: emscripten_glEvalCoord1f'); abort(-1);
  }

  function _emscripten_glEvalCoord1fv() {
  err('missing function: emscripten_glEvalCoord1fv'); abort(-1);
  }

  function _emscripten_glEvalCoord2d() {
  err('missing function: emscripten_glEvalCoord2d'); abort(-1);
  }

  function _emscripten_glEvalCoord2dv() {
  err('missing function: emscripten_glEvalCoord2dv'); abort(-1);
  }

  function _emscripten_glEvalCoord2f() {
  err('missing function: emscripten_glEvalCoord2f'); abort(-1);
  }

  function _emscripten_glEvalCoord2fv() {
  err('missing function: emscripten_glEvalCoord2fv'); abort(-1);
  }

  function _emscripten_glEvalMesh1() {
  err('missing function: emscripten_glEvalMesh1'); abort(-1);
  }

  function _emscripten_glEvalMesh2() {
  err('missing function: emscripten_glEvalMesh2'); abort(-1);
  }

  function _emscripten_glEvalPoint1() {
  err('missing function: emscripten_glEvalPoint1'); abort(-1);
  }

  function _emscripten_glEvalPoint2() {
  err('missing function: emscripten_glEvalPoint2'); abort(-1);
  }

  function _emscripten_glFeedbackBuffer() {
  err('missing function: emscripten_glFeedbackBuffer'); abort(-1);
  }

  function _emscripten_glFinish() { GLctx['finish']() }

  function _emscripten_glFlush() { GLctx['flush']() }

  function _emscripten_glFogCoordPointer() {
  err('missing function: emscripten_glFogCoordPointer'); abort(-1);
  }

  function _emscripten_glFogCoordd() {
  err('missing function: emscripten_glFogCoordd'); abort(-1);
  }

  function _emscripten_glFogCoorddv() {
  err('missing function: emscripten_glFogCoorddv'); abort(-1);
  }

  function _emscripten_glFogCoordf() {
  err('missing function: emscripten_glFogCoordf'); abort(-1);
  }

  function _emscripten_glFogCoordfv() {
  err('missing function: emscripten_glFogCoordfv'); abort(-1);
  }

  function _emscripten_glFogf() {
  err('missing function: emscripten_glFogf'); abort(-1);
  }

  function _emscripten_glFogfv() {
  err('missing function: emscripten_glFogfv'); abort(-1);
  }

  function _emscripten_glFogi() {
  err('missing function: emscripten_glFogi'); abort(-1);
  }

  function _emscripten_glFogiv() {
  err('missing function: emscripten_glFogiv'); abort(-1);
  }

  function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }

  function _emscripten_glFramebufferTexture1D() {
  err('missing function: emscripten_glFramebufferTexture1D'); abort(-1);
  }

  function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function _emscripten_glFramebufferTexture3D() {
  err('missing function: emscripten_glFramebufferTexture3D'); abort(-1);
  }

  function _emscripten_glFramebufferTextureLayer() {
  err('missing function: emscripten_glFramebufferTextureLayer'); abort(-1);
  }

  function _emscripten_glFrontFace(x0) { GLctx['frontFace'](x0) }

  function _emscripten_glFrustum() {
  err('missing function: emscripten_glFrustum'); abort(-1);
  }

  
  function __glGenObject(n, buffers, createFunction, objectTable
      ) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx[createFunction]();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(objectTable);
        buffer.name = id;
        objectTable[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }function _emscripten_glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _emscripten_glGenFramebuffers(n, ids) {
      __glGenObject(n, ids, 'createFramebuffer', GL.framebuffers
        );
    }

  function _emscripten_glGenLists() {
  err('missing function: emscripten_glGenLists'); abort(-1);
  }

  function _emscripten_glGenProgramsARB() {
  err('missing function: emscripten_glGenProgramsARB'); abort(-1);
  }

  function _emscripten_glGenQueries() {
  err('missing function: emscripten_glGenQueries'); abort(-1);
  }

  function _emscripten_glGenRenderbuffers(n, renderbuffers) {
      __glGenObject(n, renderbuffers, 'createRenderbuffer', GL.renderbuffers
        );
    }

  function _emscripten_glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _emscripten_glGenVertexArrays(n, arrays) {
      __glGenObject(n, arrays, 'createVertexArray', GL.vaos
        );
    }

  function _emscripten_glGenerateMipmap(x0) { GLctx['generateMipmap'](x0) }

  function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveAttrib(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size and type and name.
  
      if (bufSize > 0 && name) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveUniform(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size, type and name.
  
      if (bufSize > 0 && name) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glGetActiveUniformBlockName() {
  err('missing function: emscripten_glGetActiveUniformBlockName'); abort(-1);
  }

  function _emscripten_glGetActiveUniformBlockiv() {
  err('missing function: emscripten_glGetActiveUniformBlockiv'); abort(-1);
  }

  function _emscripten_glGetActiveUniformName() {
  err('missing function: emscripten_glGetActiveUniformName'); abort(-1);
  }

  function _emscripten_glGetActiveUniformsiv() {
  err('missing function: emscripten_glGetActiveUniformsiv'); abort(-1);
  }

  function _emscripten_glGetAttachedObjectsARB() {
  err('missing function: emscripten_glGetAttachedObjectsARB'); abort(-1);
  }

  function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)]=len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        assert(id !== -1, 'shader not bound to local id');
        HEAP32[(((shaders)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGetAttribLocation(program, name) {
      return GLctx.getAttribLocation(GL.programs[program], Pointer_stringify(name));
    }

  function _emscripten_glGetBooleani_v() {
  err('missing function: emscripten_glGetBooleani_v'); abort(-1);
  }

  
  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type !== 'Integer' && type !== 'Integer64') {
            GL.recordError(0x0500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats ? formats.length : 0;
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x85B5: // WebGL 2 GL_VERTEX_ARRAY_BINDING, or WebGL 1 extension OES_vertex_array_object GL_VERTEX_ARRAY_BINDING_OES
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x0500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                  case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                  default: throw 'internal glGet error, bad type: ' + type;
                }
              }
              return;
            } else {
              try {
                ret = result.name | 0;
              } catch(e) {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                err('GL_INVALID_ENUM in glGet' + type + 'v: Unknown object returned from WebGL getParameter(' + name_ + ')! (error: ' + e + ')');
                return;
              }
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
        }
      }
  
      switch (type) {
        case 'Integer64': (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((p)>>2)]=tempI64[0],HEAP32[(((p)+(4))>>2)]=tempI64[1]);    break;
        case 'Integer': HEAP32[((p)>>2)]=ret;    break;
        case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
        case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
        default: throw 'internal glGet error, bad type: ' + type;
      }
    }function _emscripten_glGetBooleanv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Boolean');
    }

  function _emscripten_glGetBufferParameteriv(target, value, data) {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null pointer. Since calling this function does not make sense
        // if data == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((data)>>2)]=GLctx.getBufferParameter(target, value);
    }

  function _emscripten_glGetBufferPointerv() {
  err('missing function: emscripten_glGetBufferPointerv'); abort(-1);
  }

  function _emscripten_glGetBufferSubData() {
  err('missing function: emscripten_glGetBufferSubData'); abort(-1);
  }

  function _emscripten_glGetClipPlane() {
  err('missing function: emscripten_glGetClipPlane'); abort(-1);
  }

  function _emscripten_glGetColorTable() {
  err('missing function: emscripten_glGetColorTable'); abort(-1);
  }

  function _emscripten_glGetColorTableParameterfv() {
  err('missing function: emscripten_glGetColorTableParameterfv'); abort(-1);
  }

  function _emscripten_glGetColorTableParameteriv() {
  err('missing function: emscripten_glGetColorTableParameteriv'); abort(-1);
  }

  function _emscripten_glGetCompressedTexImage() {
  err('missing function: emscripten_glGetCompressedTexImage'); abort(-1);
  }

  function _emscripten_glGetConvolutionFilter() {
  err('missing function: emscripten_glGetConvolutionFilter'); abort(-1);
  }

  function _emscripten_glGetConvolutionParameterfv() {
  err('missing function: emscripten_glGetConvolutionParameterfv'); abort(-1);
  }

  function _emscripten_glGetConvolutionParameteriv() {
  err('missing function: emscripten_glGetConvolutionParameteriv'); abort(-1);
  }

  function _emscripten_glGetDoublev() {
  err('missing function: emscripten_glGetDoublev'); abort(-1);
  }

  function _emscripten_glGetError() {
      // First return any GL error generated by the emscripten library_gl.js interop layer.
      if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0/*GL_NO_ERROR*/;
        return error;
      } else { // If there were none, return the GL error from the browser GL context.
        return GLctx.getError();
      }
    }

  function _emscripten_glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Float');
    }

  function _emscripten_glGetFragDataLocation() {
  err('missing function: emscripten_glGetFragDataLocation'); abort(-1);
  }

  function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      if (result instanceof WebGLRenderbuffer ||
          result instanceof WebGLTexture) {
        result = result.name | 0;
      }
      HEAP32[((params)>>2)]=result;
    }

  function _emscripten_glGetHandleARB() {
  err('missing function: emscripten_glGetHandleARB'); abort(-1);
  }

  function _emscripten_glGetHistogram() {
  err('missing function: emscripten_glGetHistogram'); abort(-1);
  }

  function _emscripten_glGetHistogramParameterfv() {
  err('missing function: emscripten_glGetHistogramParameterfv'); abort(-1);
  }

  function _emscripten_glGetHistogramParameteriv() {
  err('missing function: emscripten_glGetHistogramParameteriv'); abort(-1);
  }

  function _emscripten_glGetInfoLogARB() {
  err('missing function: emscripten_glGetInfoLogARB'); abort(-1);
  }

  function _emscripten_glGetIntegeri_v() {
  err('missing function: emscripten_glGetIntegeri_v'); abort(-1);
  }

  function _emscripten_glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Integer');
    }

  function _emscripten_glGetLightfv() {
  err('missing function: emscripten_glGetLightfv'); abort(-1);
  }

  function _emscripten_glGetLightiv() {
  err('missing function: emscripten_glGetLightiv'); abort(-1);
  }

  function _emscripten_glGetMapdv() {
  err('missing function: emscripten_glGetMapdv'); abort(-1);
  }

  function _emscripten_glGetMapfv() {
  err('missing function: emscripten_glGetMapfv'); abort(-1);
  }

  function _emscripten_glGetMapiv() {
  err('missing function: emscripten_glGetMapiv'); abort(-1);
  }

  function _emscripten_glGetMaterialfv() {
  err('missing function: emscripten_glGetMaterialfv'); abort(-1);
  }

  function _emscripten_glGetMaterialiv() {
  err('missing function: emscripten_glGetMaterialiv'); abort(-1);
  }

  function _emscripten_glGetMinmax() {
  err('missing function: emscripten_glGetMinmax'); abort(-1);
  }

  function _emscripten_glGetMinmaxParameterfv() {
  err('missing function: emscripten_glGetMinmaxParameterfv'); abort(-1);
  }

  function _emscripten_glGetMinmaxParameteriv() {
  err('missing function: emscripten_glGetMinmaxParameteriv'); abort(-1);
  }

  function _emscripten_glGetObjectParameterfvARB() {
  err('missing function: emscripten_glGetObjectParameterfvARB'); abort(-1);
  }

  function _emscripten_glGetObjectParameterivARB() {
  err('missing function: emscripten_glGetObjectParameterivARB'); abort(-1);
  }

  function _emscripten_glGetPixelMapfv() {
  err('missing function: emscripten_glGetPixelMapfv'); abort(-1);
  }

  function _emscripten_glGetPixelMapuiv() {
  err('missing function: emscripten_glGetPixelMapuiv'); abort(-1);
  }

  function _emscripten_glGetPixelMapusv() {
  err('missing function: emscripten_glGetPixelMapusv'); abort(-1);
  }

  function _emscripten_glGetPointerv() {
  err('missing function: emscripten_glGetPointerv'); abort(-1);
  }

  function _emscripten_glGetPolygonStipple() {
  err('missing function: emscripten_glGetPolygonStipple'); abort(-1);
  }

  function _emscripten_glGetProgramEnvParameterdvARB() {
  err('missing function: emscripten_glGetProgramEnvParameterdvARB'); abort(-1);
  }

  function _emscripten_glGetProgramEnvParameterfvARB() {
  err('missing function: emscripten_glGetProgramEnvParameterfvARB'); abort(-1);
  }

  function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glGetProgramLocalParameterdvARB() {
  err('missing function: emscripten_glGetProgramLocalParameterdvARB'); abort(-1);
  }

  function _emscripten_glGetProgramLocalParameterfvARB() {
  err('missing function: emscripten_glGetProgramLocalParameterfvARB'); abort(-1);
  }

  function _emscripten_glGetProgramStringARB() {
  err('missing function: emscripten_glGetProgramStringARB'); abort(-1);
  }

  function _emscripten_glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _emscripten_glGetQueryObjectiv() {
  err('missing function: emscripten_glGetQueryObjectiv'); abort(-1);
  }

  function _emscripten_glGetQueryObjectuiv() {
  err('missing function: emscripten_glGetQueryObjectuiv'); abort(-1);
  }

  function _emscripten_glGetQueryiv() {
  err('missing function: emscripten_glGetQueryiv'); abort(-1);
  }

  function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getRenderbufferParameter(target, pname);
    }

  function _emscripten_glGetSeparableFilter() {
  err('missing function: emscripten_glGetSeparableFilter'); abort(-1);
  }

  function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[((range)>>2)]=result.rangeMin;
      HEAP32[(((range)+(4))>>2)]=result.rangeMax;
      HEAP32[((precision)>>2)]=result.precision;
    }

  function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return; // If an error occurs, nothing will be written to length or source.
      if (bufSize > 0 && source) {
        var numBytesWrittenExclNull = stringToUTF8(result, source, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _emscripten_glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i = 0; i < exts.length; ++i) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          var s = GLctx.getParameter(name_);
          if (!s) {
            GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          }
          ret = allocate(intArrayFromString(s), 'i8', ALLOC_NORMAL);
          break;
  
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = allocate(intArrayFromString(glVersion), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = allocate(intArrayFromString(glslVersion), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _emscripten_glGetStringi() {
  err('missing function: emscripten_glGetStringi'); abort(-1);
  }

  function _emscripten_glGetTexEnvfv() {
  err('missing function: emscripten_glGetTexEnvfv'); abort(-1);
  }

  function _emscripten_glGetTexEnviv() {
  err('missing function: emscripten_glGetTexEnviv'); abort(-1);
  }

  function _emscripten_glGetTexGendv() {
  err('missing function: emscripten_glGetTexGendv'); abort(-1);
  }

  function _emscripten_glGetTexGenfv() {
  err('missing function: emscripten_glGetTexGenfv'); abort(-1);
  }

  function _emscripten_glGetTexGeniv() {
  err('missing function: emscripten_glGetTexGeniv'); abort(-1);
  }

  function _emscripten_glGetTexImage() {
  err('missing function: emscripten_glGetTexImage'); abort(-1);
  }

  function _emscripten_glGetTexLevelParameterfv() {
  err('missing function: emscripten_glGetTexLevelParameterfv'); abort(-1);
  }

  function _emscripten_glGetTexLevelParameteriv() {
  err('missing function: emscripten_glGetTexLevelParameteriv'); abort(-1);
  }

  function _emscripten_glGetTexParameterIiv() {
  err('missing function: emscripten_glGetTexParameterIiv'); abort(-1);
  }

  function _emscripten_glGetTexParameterIuiv() {
  err('missing function: emscripten_glGetTexParameterIuiv'); abort(-1);
  }

  function _emscripten_glGetTexParameterfv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAPF32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glGetTexParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glGetTransformFeedbackVarying() {
  err('missing function: emscripten_glGetTransformFeedbackVarying'); abort(-1);
  }

  function _emscripten_glGetUniformBlockIndex() {
  err('missing function: emscripten_glGetUniformBlockIndex'); abort(-1);
  }

  function _emscripten_glGetUniformIndices() {
  err('missing function: emscripten_glGetUniformIndices'); abort(-1);
  }

  function _emscripten_glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  
  function emscriptenWebGLGetUniform(program, location, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
      if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 'Integer': HEAP32[((params)>>2)]=data; break;
          case 'Float': HEAPF32[((params)>>2)]=data; break;
          default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 'Integer': HEAP32[(((params)+(i*4))>>2)]=data[i]; break;
            case 'Float': HEAPF32[(((params)+(i*4))>>2)]=data[i]; break;
            default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetUniformfv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 'Float');
    }

  function _emscripten_glGetUniformiv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 'Integer');
    }

  function _emscripten_glGetUniformuiv() {
  err('missing function: emscripten_glGetUniformuiv'); abort(-1);
  }

  function _emscripten_glGetVertexAttribIiv() {
  err('missing function: emscripten_glGetVertexAttribIiv'); abort(-1);
  }

  function _emscripten_glGetVertexAttribIuiv() {
  err('missing function: emscripten_glGetVertexAttribIuiv'); abort(-1);
  }

  function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
      if (!pointer) {
        // GLES2 specification does not specify how to behave if pointer is a null pointer. Since calling this function does not make sense
        // if pointer == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((pointer)>>2)]=GLctx.getVertexAttribOffset(index, pname);
    }

  function _emscripten_glGetVertexAttribdv() {
  err('missing function: emscripten_glGetVertexAttribdv'); abort(-1);
  }

  
  function emscriptenWebGLGetVertexAttrib(index, pname, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getVertexAttrib(index, pname);
      if (pname == 0x889F/*VERTEX_ATTRIB_ARRAY_BUFFER_BINDING*/) {
        HEAP32[((params)>>2)]=data["name"];
      } else if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 'Integer': HEAP32[((params)>>2)]=data; break;
          case 'Float': HEAPF32[((params)>>2)]=data; break;
          case 'FloatToInteger': HEAP32[((params)>>2)]=Math.fround(data); break;
          default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 'Integer': HEAP32[(((params)+(i*4))>>2)]=data[i]; break;
            case 'Float': HEAPF32[(((params)+(i*4))>>2)]=data[i]; break;
            case 'FloatToInteger': HEAP32[(((params)+(i*4))>>2)]=Math.fround(data[i]); break;
            default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetVertexAttribfv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 'Float');
    }

  function _emscripten_glGetVertexAttribiv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 'FloatToInteger');
    }

  function _emscripten_glHint(x0, x1) { GLctx['hint'](x0, x1) }

  function _emscripten_glHistogram() {
  err('missing function: emscripten_glHistogram'); abort(-1);
  }

  function _emscripten_glIndexMask() {
  err('missing function: emscripten_glIndexMask'); abort(-1);
  }

  function _emscripten_glIndexPointer() {
  err('missing function: emscripten_glIndexPointer'); abort(-1);
  }

  function _emscripten_glIndexd() {
  err('missing function: emscripten_glIndexd'); abort(-1);
  }

  function _emscripten_glIndexdv() {
  err('missing function: emscripten_glIndexdv'); abort(-1);
  }

  function _emscripten_glIndexf() {
  err('missing function: emscripten_glIndexf'); abort(-1);
  }

  function _emscripten_glIndexfv() {
  err('missing function: emscripten_glIndexfv'); abort(-1);
  }

  function _emscripten_glIndexi() {
  err('missing function: emscripten_glIndexi'); abort(-1);
  }

  function _emscripten_glIndexiv() {
  err('missing function: emscripten_glIndexiv'); abort(-1);
  }

  function _emscripten_glIndexs() {
  err('missing function: emscripten_glIndexs'); abort(-1);
  }

  function _emscripten_glIndexsv() {
  err('missing function: emscripten_glIndexsv'); abort(-1);
  }

  function _emscripten_glIndexub() {
  err('missing function: emscripten_glIndexub'); abort(-1);
  }

  function _emscripten_glIndexubv() {
  err('missing function: emscripten_glIndexubv'); abort(-1);
  }

  function _emscripten_glInitNames() {
  err('missing function: emscripten_glInitNames'); abort(-1);
  }

  function _emscripten_glInterleavedArrays() {
  err('missing function: emscripten_glInterleavedArrays'); abort(-1);
  }

  function _emscripten_glIsBuffer(buffer) {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    }

  function _emscripten_glIsEnabled(x0) { return GLctx['isEnabled'](x0) }

  function _emscripten_glIsEnabledi() {
  err('missing function: emscripten_glIsEnabledi'); abort(-1);
  }

  function _emscripten_glIsFramebuffer(framebuffer) {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    }

  function _emscripten_glIsList() {
  err('missing function: emscripten_glIsList'); abort(-1);
  }

  function _emscripten_glIsProgram(program) {
      program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    }

  function _emscripten_glIsQuery() {
  err('missing function: emscripten_glIsQuery'); abort(-1);
  }

  function _emscripten_glIsRenderbuffer(renderbuffer) {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    }

  function _emscripten_glIsShader(shader) {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    }

  function _emscripten_glIsTexture(texture) {
      var texture = GL.textures[texture];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    }

  function _emscripten_glIsVertexArray(array) {
  
      var vao = GL.vaos[array];
      if (!vao) return 0;
      return GLctx['isVertexArray'](vao);
    }

  function _emscripten_glLightModelf() {
  err('missing function: emscripten_glLightModelf'); abort(-1);
  }

  function _emscripten_glLightModelfv() {
  err('missing function: emscripten_glLightModelfv'); abort(-1);
  }

  function _emscripten_glLightModeli() {
  err('missing function: emscripten_glLightModeli'); abort(-1);
  }

  function _emscripten_glLightModeliv() {
  err('missing function: emscripten_glLightModeliv'); abort(-1);
  }

  function _emscripten_glLightf() {
  err('missing function: emscripten_glLightf'); abort(-1);
  }

  function _emscripten_glLightfv() {
  err('missing function: emscripten_glLightfv'); abort(-1);
  }

  function _emscripten_glLighti() {
  err('missing function: emscripten_glLighti'); abort(-1);
  }

  function _emscripten_glLightiv() {
  err('missing function: emscripten_glLightiv'); abort(-1);
  }

  function _emscripten_glLineStipple() {
  err('missing function: emscripten_glLineStipple'); abort(-1);
  }

  function _emscripten_glLineWidth(x0) { GLctx['lineWidth'](x0) }

  function _emscripten_glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _emscripten_glListBase() {
  err('missing function: emscripten_glListBase'); abort(-1);
  }

  function _emscripten_glLoadIdentity(){ throw 'Legacy GL function (glLoadIdentity) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_glLoadMatrixd() {
  err('missing function: emscripten_glLoadMatrixd'); abort(-1);
  }

  function _emscripten_glLoadMatrixf() {
  err('missing function: emscripten_glLoadMatrixf'); abort(-1);
  }

  function _emscripten_glLoadName() {
  err('missing function: emscripten_glLoadName'); abort(-1);
  }

  function _emscripten_glLoadTransposeMatrixd() {
  err('missing function: emscripten_glLoadTransposeMatrixd'); abort(-1);
  }

  function _emscripten_glLoadTransposeMatrixdARB() {
  err('missing function: emscripten_glLoadTransposeMatrixdARB'); abort(-1);
  }

  function _emscripten_glLoadTransposeMatrixf() {
  err('missing function: emscripten_glLoadTransposeMatrixf'); abort(-1);
  }

  function _emscripten_glLoadTransposeMatrixfARB() {
  err('missing function: emscripten_glLoadTransposeMatrixfARB'); abort(-1);
  }

  function _emscripten_glLogicOp() {
  err('missing function: emscripten_glLogicOp'); abort(-1);
  }

  function _emscripten_glMap1d() {
  err('missing function: emscripten_glMap1d'); abort(-1);
  }

  function _emscripten_glMap1f() {
  err('missing function: emscripten_glMap1f'); abort(-1);
  }

  function _emscripten_glMap2d() {
  err('missing function: emscripten_glMap2d'); abort(-1);
  }

  function _emscripten_glMap2f() {
  err('missing function: emscripten_glMap2f'); abort(-1);
  }

  function _emscripten_glMapBuffer() {
  err('missing function: emscripten_glMapBuffer'); abort(-1);
  }

  function _emscripten_glMapGrid1d() {
  err('missing function: emscripten_glMapGrid1d'); abort(-1);
  }

  function _emscripten_glMapGrid1f() {
  err('missing function: emscripten_glMapGrid1f'); abort(-1);
  }

  function _emscripten_glMapGrid2d() {
  err('missing function: emscripten_glMapGrid2d'); abort(-1);
  }

  function _emscripten_glMapGrid2f() {
  err('missing function: emscripten_glMapGrid2f'); abort(-1);
  }

  function _emscripten_glMaterialf() {
  err('missing function: emscripten_glMaterialf'); abort(-1);
  }

  function _emscripten_glMaterialfv() {
  err('missing function: emscripten_glMaterialfv'); abort(-1);
  }

  function _emscripten_glMateriali() {
  err('missing function: emscripten_glMateriali'); abort(-1);
  }

  function _emscripten_glMaterialiv() {
  err('missing function: emscripten_glMaterialiv'); abort(-1);
  }

  function _emscripten_glMatrixMode(){ throw 'Legacy GL function (glMatrixMode) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_glMinmax() {
  err('missing function: emscripten_glMinmax'); abort(-1);
  }

  function _emscripten_glMultMatrixd() {
  err('missing function: emscripten_glMultMatrixd'); abort(-1);
  }

  function _emscripten_glMultMatrixf() {
  err('missing function: emscripten_glMultMatrixf'); abort(-1);
  }

  function _emscripten_glMultTransposeMatrixd() {
  err('missing function: emscripten_glMultTransposeMatrixd'); abort(-1);
  }

  function _emscripten_glMultTransposeMatrixdARB() {
  err('missing function: emscripten_glMultTransposeMatrixdARB'); abort(-1);
  }

  function _emscripten_glMultTransposeMatrixf() {
  err('missing function: emscripten_glMultTransposeMatrixf'); abort(-1);
  }

  function _emscripten_glMultTransposeMatrixfARB() {
  err('missing function: emscripten_glMultTransposeMatrixfARB'); abort(-1);
  }

  function _emscripten_glMultiDrawArrays() {
  err('missing function: emscripten_glMultiDrawArrays'); abort(-1);
  }

  function _emscripten_glMultiDrawElements() {
  err('missing function: emscripten_glMultiDrawElements'); abort(-1);
  }

  function _emscripten_glMultiTexCoord1d() {
  err('missing function: emscripten_glMultiTexCoord1d'); abort(-1);
  }

  function _emscripten_glMultiTexCoord1dv() {
  err('missing function: emscripten_glMultiTexCoord1dv'); abort(-1);
  }

  function _emscripten_glMultiTexCoord1f() {
  err('missing function: emscripten_glMultiTexCoord1f'); abort(-1);
  }

  function _emscripten_glMultiTexCoord1fv() {
  err('missing function: emscripten_glMultiTexCoord1fv'); abort(-1);
  }

  function _emscripten_glMultiTexCoord1i() {
  err('missing function: emscripten_glMultiTexCoord1i'); abort(-1);
  }

  function _emscripten_glMultiTexCoord1iv() {
  err('missing function: emscripten_glMultiTexCoord1iv'); abort(-1);
  }

  function _emscripten_glMultiTexCoord1s() {
  err('missing function: emscripten_glMultiTexCoord1s'); abort(-1);
  }

  function _emscripten_glMultiTexCoord1sv() {
  err('missing function: emscripten_glMultiTexCoord1sv'); abort(-1);
  }

  function _emscripten_glMultiTexCoord2d() {
  err('missing function: emscripten_glMultiTexCoord2d'); abort(-1);
  }

  function _emscripten_glMultiTexCoord2dv() {
  err('missing function: emscripten_glMultiTexCoord2dv'); abort(-1);
  }

  function _emscripten_glMultiTexCoord2f() {
  err('missing function: emscripten_glMultiTexCoord2f'); abort(-1);
  }

  function _emscripten_glMultiTexCoord2fv() {
  err('missing function: emscripten_glMultiTexCoord2fv'); abort(-1);
  }

  function _emscripten_glMultiTexCoord2i() {
  err('missing function: emscripten_glMultiTexCoord2i'); abort(-1);
  }

  function _emscripten_glMultiTexCoord2iv() {
  err('missing function: emscripten_glMultiTexCoord2iv'); abort(-1);
  }

  function _emscripten_glMultiTexCoord2s() {
  err('missing function: emscripten_glMultiTexCoord2s'); abort(-1);
  }

  function _emscripten_glMultiTexCoord2sv() {
  err('missing function: emscripten_glMultiTexCoord2sv'); abort(-1);
  }

  function _emscripten_glMultiTexCoord3d() {
  err('missing function: emscripten_glMultiTexCoord3d'); abort(-1);
  }

  function _emscripten_glMultiTexCoord3dv() {
  err('missing function: emscripten_glMultiTexCoord3dv'); abort(-1);
  }

  function _emscripten_glMultiTexCoord3f() {
  err('missing function: emscripten_glMultiTexCoord3f'); abort(-1);
  }

  function _emscripten_glMultiTexCoord3fv() {
  err('missing function: emscripten_glMultiTexCoord3fv'); abort(-1);
  }

  function _emscripten_glMultiTexCoord3i() {
  err('missing function: emscripten_glMultiTexCoord3i'); abort(-1);
  }

  function _emscripten_glMultiTexCoord3iv() {
  err('missing function: emscripten_glMultiTexCoord3iv'); abort(-1);
  }

  function _emscripten_glMultiTexCoord3s() {
  err('missing function: emscripten_glMultiTexCoord3s'); abort(-1);
  }

  function _emscripten_glMultiTexCoord3sv() {
  err('missing function: emscripten_glMultiTexCoord3sv'); abort(-1);
  }

  function _emscripten_glMultiTexCoord4d() {
  err('missing function: emscripten_glMultiTexCoord4d'); abort(-1);
  }

  function _emscripten_glMultiTexCoord4dv() {
  err('missing function: emscripten_glMultiTexCoord4dv'); abort(-1);
  }

  function _emscripten_glMultiTexCoord4f() {
  err('missing function: emscripten_glMultiTexCoord4f'); abort(-1);
  }

  function _emscripten_glMultiTexCoord4fv() {
  err('missing function: emscripten_glMultiTexCoord4fv'); abort(-1);
  }

  function _emscripten_glMultiTexCoord4i() {
  err('missing function: emscripten_glMultiTexCoord4i'); abort(-1);
  }

  function _emscripten_glMultiTexCoord4iv() {
  err('missing function: emscripten_glMultiTexCoord4iv'); abort(-1);
  }

  function _emscripten_glMultiTexCoord4s() {
  err('missing function: emscripten_glMultiTexCoord4s'); abort(-1);
  }

  function _emscripten_glMultiTexCoord4sv() {
  err('missing function: emscripten_glMultiTexCoord4sv'); abort(-1);
  }

  function _emscripten_glNewList() {
  err('missing function: emscripten_glNewList'); abort(-1);
  }

  function _emscripten_glNormal3b() {
  err('missing function: emscripten_glNormal3b'); abort(-1);
  }

  function _emscripten_glNormal3bv() {
  err('missing function: emscripten_glNormal3bv'); abort(-1);
  }

  function _emscripten_glNormal3d() {
  err('missing function: emscripten_glNormal3d'); abort(-1);
  }

  function _emscripten_glNormal3dv() {
  err('missing function: emscripten_glNormal3dv'); abort(-1);
  }

  function _emscripten_glNormal3f() {
  err('missing function: emscripten_glNormal3f'); abort(-1);
  }

  function _emscripten_glNormal3fv() {
  err('missing function: emscripten_glNormal3fv'); abort(-1);
  }

  function _emscripten_glNormal3i() {
  err('missing function: emscripten_glNormal3i'); abort(-1);
  }

  function _emscripten_glNormal3iv() {
  err('missing function: emscripten_glNormal3iv'); abort(-1);
  }

  function _emscripten_glNormal3s() {
  err('missing function: emscripten_glNormal3s'); abort(-1);
  }

  function _emscripten_glNormal3sv() {
  err('missing function: emscripten_glNormal3sv'); abort(-1);
  }

  function _emscripten_glNormalPointer() {
  err('missing function: emscripten_glNormalPointer'); abort(-1);
  }

  function _emscripten_glOrtho() {
  err('missing function: emscripten_glOrtho'); abort(-1);
  }

  function _emscripten_glPassThrough() {
  err('missing function: emscripten_glPassThrough'); abort(-1);
  }

  function _emscripten_glPixelMapfv() {
  err('missing function: emscripten_glPixelMapfv'); abort(-1);
  }

  function _emscripten_glPixelMapuiv() {
  err('missing function: emscripten_glPixelMapuiv'); abort(-1);
  }

  function _emscripten_glPixelMapusv() {
  err('missing function: emscripten_glPixelMapusv'); abort(-1);
  }

  function _emscripten_glPixelStoref() {
  err('missing function: emscripten_glPixelStoref'); abort(-1);
  }

  function _emscripten_glPixelStorei(pname, param) {
      if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _emscripten_glPixelTransferf() {
  err('missing function: emscripten_glPixelTransferf'); abort(-1);
  }

  function _emscripten_glPixelTransferi() {
  err('missing function: emscripten_glPixelTransferi'); abort(-1);
  }

  function _emscripten_glPixelZoom() {
  err('missing function: emscripten_glPixelZoom'); abort(-1);
  }

  function _emscripten_glPointParameterf() {
  err('missing function: emscripten_glPointParameterf'); abort(-1);
  }

  function _emscripten_glPointParameterfv() {
  err('missing function: emscripten_glPointParameterfv'); abort(-1);
  }

  function _emscripten_glPointParameteri() {
  err('missing function: emscripten_glPointParameteri'); abort(-1);
  }

  function _emscripten_glPointParameteriv() {
  err('missing function: emscripten_glPointParameteriv'); abort(-1);
  }

  function _emscripten_glPointSize() {
  err('missing function: emscripten_glPointSize'); abort(-1);
  }

  function _emscripten_glPolygonMode() {
  err('missing function: emscripten_glPolygonMode'); abort(-1);
  }

  function _emscripten_glPolygonOffset(x0, x1) { GLctx['polygonOffset'](x0, x1) }

  function _emscripten_glPolygonStipple() {
  err('missing function: emscripten_glPolygonStipple'); abort(-1);
  }

  function _emscripten_glPopAttrib() {
  err('missing function: emscripten_glPopAttrib'); abort(-1);
  }

  function _emscripten_glPopClientAttrib() {
  err('missing function: emscripten_glPopClientAttrib'); abort(-1);
  }

  function _emscripten_glPopMatrix() {
  err('missing function: emscripten_glPopMatrix'); abort(-1);
  }

  function _emscripten_glPopName() {
  err('missing function: emscripten_glPopName'); abort(-1);
  }

  function _emscripten_glPrimitiveRestartIndex() {
  err('missing function: emscripten_glPrimitiveRestartIndex'); abort(-1);
  }

  function _emscripten_glPrioritizeTextures() {
  err('missing function: emscripten_glPrioritizeTextures'); abort(-1);
  }

  function _emscripten_glProgramEnvParameter4dARB() {
  err('missing function: emscripten_glProgramEnvParameter4dARB'); abort(-1);
  }

  function _emscripten_glProgramEnvParameter4dvARB() {
  err('missing function: emscripten_glProgramEnvParameter4dvARB'); abort(-1);
  }

  function _emscripten_glProgramEnvParameter4fARB() {
  err('missing function: emscripten_glProgramEnvParameter4fARB'); abort(-1);
  }

  function _emscripten_glProgramEnvParameter4fvARB() {
  err('missing function: emscripten_glProgramEnvParameter4fvARB'); abort(-1);
  }

  function _emscripten_glProgramLocalParameter4dARB() {
  err('missing function: emscripten_glProgramLocalParameter4dARB'); abort(-1);
  }

  function _emscripten_glProgramLocalParameter4dvARB() {
  err('missing function: emscripten_glProgramLocalParameter4dvARB'); abort(-1);
  }

  function _emscripten_glProgramLocalParameter4fARB() {
  err('missing function: emscripten_glProgramLocalParameter4fARB'); abort(-1);
  }

  function _emscripten_glProgramLocalParameter4fvARB() {
  err('missing function: emscripten_glProgramLocalParameter4fvARB'); abort(-1);
  }

  function _emscripten_glProgramStringARB() {
  err('missing function: emscripten_glProgramStringARB'); abort(-1);
  }

  function _emscripten_glPushAttrib() {
  err('missing function: emscripten_glPushAttrib'); abort(-1);
  }

  function _emscripten_glPushClientAttrib() {
  err('missing function: emscripten_glPushClientAttrib'); abort(-1);
  }

  function _emscripten_glPushMatrix() {
  err('missing function: emscripten_glPushMatrix'); abort(-1);
  }

  function _emscripten_glPushName() {
  err('missing function: emscripten_glPushName'); abort(-1);
  }

  function _emscripten_glRasterPos2d() {
  err('missing function: emscripten_glRasterPos2d'); abort(-1);
  }

  function _emscripten_glRasterPos2dv() {
  err('missing function: emscripten_glRasterPos2dv'); abort(-1);
  }

  function _emscripten_glRasterPos2f() {
  err('missing function: emscripten_glRasterPos2f'); abort(-1);
  }

  function _emscripten_glRasterPos2fv() {
  err('missing function: emscripten_glRasterPos2fv'); abort(-1);
  }

  function _emscripten_glRasterPos2i() {
  err('missing function: emscripten_glRasterPos2i'); abort(-1);
  }

  function _emscripten_glRasterPos2iv() {
  err('missing function: emscripten_glRasterPos2iv'); abort(-1);
  }

  function _emscripten_glRasterPos2s() {
  err('missing function: emscripten_glRasterPos2s'); abort(-1);
  }

  function _emscripten_glRasterPos2sv() {
  err('missing function: emscripten_glRasterPos2sv'); abort(-1);
  }

  function _emscripten_glRasterPos3d() {
  err('missing function: emscripten_glRasterPos3d'); abort(-1);
  }

  function _emscripten_glRasterPos3dv() {
  err('missing function: emscripten_glRasterPos3dv'); abort(-1);
  }

  function _emscripten_glRasterPos3f() {
  err('missing function: emscripten_glRasterPos3f'); abort(-1);
  }

  function _emscripten_glRasterPos3fv() {
  err('missing function: emscripten_glRasterPos3fv'); abort(-1);
  }

  function _emscripten_glRasterPos3i() {
  err('missing function: emscripten_glRasterPos3i'); abort(-1);
  }

  function _emscripten_glRasterPos3iv() {
  err('missing function: emscripten_glRasterPos3iv'); abort(-1);
  }

  function _emscripten_glRasterPos3s() {
  err('missing function: emscripten_glRasterPos3s'); abort(-1);
  }

  function _emscripten_glRasterPos3sv() {
  err('missing function: emscripten_glRasterPos3sv'); abort(-1);
  }

  function _emscripten_glRasterPos4d() {
  err('missing function: emscripten_glRasterPos4d'); abort(-1);
  }

  function _emscripten_glRasterPos4dv() {
  err('missing function: emscripten_glRasterPos4dv'); abort(-1);
  }

  function _emscripten_glRasterPos4f() {
  err('missing function: emscripten_glRasterPos4f'); abort(-1);
  }

  function _emscripten_glRasterPos4fv() {
  err('missing function: emscripten_glRasterPos4fv'); abort(-1);
  }

  function _emscripten_glRasterPos4i() {
  err('missing function: emscripten_glRasterPos4i'); abort(-1);
  }

  function _emscripten_glRasterPos4iv() {
  err('missing function: emscripten_glRasterPos4iv'); abort(-1);
  }

  function _emscripten_glRasterPos4s() {
  err('missing function: emscripten_glRasterPos4s'); abort(-1);
  }

  function _emscripten_glRasterPos4sv() {
  err('missing function: emscripten_glRasterPos4sv'); abort(-1);
  }

  function _emscripten_glReadBuffer() {
  err('missing function: emscripten_glReadBuffer'); abort(-1);
  }

  
  
  function emscriptenWebGLComputeImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return Math.floor((x + y - 1) / y) * y
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return (height <= 0) ? 0 :
               ((height - 1) * alignedRowSize + plainRowSize);
    }
  
  var __colorChannelsInGlTextureFormat={6402:1,6406:1,6407:3,6408:4,6409:1,6410:2,35904:3,35906:4};
  
  var __sizeOfGlTextureElementType={5121:1,5123:2,5125:4,5126:4,32819:2,32820:2,33635:2,34042:4,36193:2};function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel = __colorChannelsInGlTextureFormat[format] * __sizeOfGlTextureElementType[type];
      if (!sizePerPixel) {
        GL.recordError(0x0500); // GL_INVALID_ENUM
        return;
      }
      var bytes = emscriptenWebGLComputeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      switch(type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8.subarray((pixels),(pixels+bytes));
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          return HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          return HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
      }
    }function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x0500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }

  function _emscripten_glRectd() {
  err('missing function: emscripten_glRectd'); abort(-1);
  }

  function _emscripten_glRectdv() {
  err('missing function: emscripten_glRectdv'); abort(-1);
  }

  function _emscripten_glRectf() {
  err('missing function: emscripten_glRectf'); abort(-1);
  }

  function _emscripten_glRectfv() {
  err('missing function: emscripten_glRectfv'); abort(-1);
  }

  function _emscripten_glRecti() {
  err('missing function: emscripten_glRecti'); abort(-1);
  }

  function _emscripten_glRectiv() {
  err('missing function: emscripten_glRectiv'); abort(-1);
  }

  function _emscripten_glRects() {
  err('missing function: emscripten_glRects'); abort(-1);
  }

  function _emscripten_glRectsv() {
  err('missing function: emscripten_glRectsv'); abort(-1);
  }

  function _emscripten_glReleaseShaderCompiler() {
      // NOP (as allowed by GLES 2.0 spec)
    }

  function _emscripten_glRenderMode() {
  err('missing function: emscripten_glRenderMode'); abort(-1);
  }

  function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) { GLctx['renderbufferStorage'](x0, x1, x2, x3) }

  function _emscripten_glRenderbufferStorageMultisample() {
  err('missing function: emscripten_glRenderbufferStorageMultisample'); abort(-1);
  }

  function _emscripten_glResetHistogram() {
  err('missing function: emscripten_glResetHistogram'); abort(-1);
  }

  function _emscripten_glResetMinmax() {
  err('missing function: emscripten_glResetMinmax'); abort(-1);
  }

  function _emscripten_glRotated() {
  err('missing function: emscripten_glRotated'); abort(-1);
  }

  function _emscripten_glRotatef() {
  err('missing function: emscripten_glRotatef'); abort(-1);
  }

  function _emscripten_glSampleCoverage(value, invert) {
      GLctx.sampleCoverage(value, !!invert);
    }

  function _emscripten_glScaled() {
  err('missing function: emscripten_glScaled'); abort(-1);
  }

  function _emscripten_glScalef() {
  err('missing function: emscripten_glScalef'); abort(-1);
  }

  function _emscripten_glScissor(x0, x1, x2, x3) { GLctx['scissor'](x0, x1, x2, x3) }

  function _emscripten_glSecondaryColor3b() {
  err('missing function: emscripten_glSecondaryColor3b'); abort(-1);
  }

  function _emscripten_glSecondaryColor3bv() {
  err('missing function: emscripten_glSecondaryColor3bv'); abort(-1);
  }

  function _emscripten_glSecondaryColor3d() {
  err('missing function: emscripten_glSecondaryColor3d'); abort(-1);
  }

  function _emscripten_glSecondaryColor3dv() {
  err('missing function: emscripten_glSecondaryColor3dv'); abort(-1);
  }

  function _emscripten_glSecondaryColor3f() {
  err('missing function: emscripten_glSecondaryColor3f'); abort(-1);
  }

  function _emscripten_glSecondaryColor3fv() {
  err('missing function: emscripten_glSecondaryColor3fv'); abort(-1);
  }

  function _emscripten_glSecondaryColor3i() {
  err('missing function: emscripten_glSecondaryColor3i'); abort(-1);
  }

  function _emscripten_glSecondaryColor3iv() {
  err('missing function: emscripten_glSecondaryColor3iv'); abort(-1);
  }

  function _emscripten_glSecondaryColor3s() {
  err('missing function: emscripten_glSecondaryColor3s'); abort(-1);
  }

  function _emscripten_glSecondaryColor3sv() {
  err('missing function: emscripten_glSecondaryColor3sv'); abort(-1);
  }

  function _emscripten_glSecondaryColor3ub() {
  err('missing function: emscripten_glSecondaryColor3ub'); abort(-1);
  }

  function _emscripten_glSecondaryColor3ubv() {
  err('missing function: emscripten_glSecondaryColor3ubv'); abort(-1);
  }

  function _emscripten_glSecondaryColor3ui() {
  err('missing function: emscripten_glSecondaryColor3ui'); abort(-1);
  }

  function _emscripten_glSecondaryColor3uiv() {
  err('missing function: emscripten_glSecondaryColor3uiv'); abort(-1);
  }

  function _emscripten_glSecondaryColor3us() {
  err('missing function: emscripten_glSecondaryColor3us'); abort(-1);
  }

  function _emscripten_glSecondaryColor3usv() {
  err('missing function: emscripten_glSecondaryColor3usv'); abort(-1);
  }

  function _emscripten_glSecondaryColorPointer() {
  err('missing function: emscripten_glSecondaryColorPointer'); abort(-1);
  }

  function _emscripten_glSelectBuffer() {
  err('missing function: emscripten_glSelectBuffer'); abort(-1);
  }

  function _emscripten_glSeparableFilter2D() {
  err('missing function: emscripten_glSeparableFilter2D'); abort(-1);
  }

  function _emscripten_glShadeModel() {
  err('missing function: emscripten_glShadeModel'); abort(-1);
  }

  function _emscripten_glShaderBinary() {
      GL.recordError(0x0500/*GL_INVALID_ENUM*/);
    }

  function _emscripten_glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _emscripten_glStencilFunc(x0, x1, x2) { GLctx['stencilFunc'](x0, x1, x2) }

  function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) { GLctx['stencilFuncSeparate'](x0, x1, x2, x3) }

  function _emscripten_glStencilMask(x0) { GLctx['stencilMask'](x0) }

  function _emscripten_glStencilMaskSeparate(x0, x1) { GLctx['stencilMaskSeparate'](x0, x1) }

  function _emscripten_glStencilOp(x0, x1, x2) { GLctx['stencilOp'](x0, x1, x2) }

  function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) { GLctx['stencilOpSeparate'](x0, x1, x2, x3) }

  function _emscripten_glTexBuffer() {
  err('missing function: emscripten_glTexBuffer'); abort(-1);
  }

  function _emscripten_glTexCoord1d() {
  err('missing function: emscripten_glTexCoord1d'); abort(-1);
  }

  function _emscripten_glTexCoord1dv() {
  err('missing function: emscripten_glTexCoord1dv'); abort(-1);
  }

  function _emscripten_glTexCoord1f() {
  err('missing function: emscripten_glTexCoord1f'); abort(-1);
  }

  function _emscripten_glTexCoord1fv() {
  err('missing function: emscripten_glTexCoord1fv'); abort(-1);
  }

  function _emscripten_glTexCoord1i() {
  err('missing function: emscripten_glTexCoord1i'); abort(-1);
  }

  function _emscripten_glTexCoord1iv() {
  err('missing function: emscripten_glTexCoord1iv'); abort(-1);
  }

  function _emscripten_glTexCoord1s() {
  err('missing function: emscripten_glTexCoord1s'); abort(-1);
  }

  function _emscripten_glTexCoord1sv() {
  err('missing function: emscripten_glTexCoord1sv'); abort(-1);
  }

  function _emscripten_glTexCoord2d() {
  err('missing function: emscripten_glTexCoord2d'); abort(-1);
  }

  function _emscripten_glTexCoord2dv() {
  err('missing function: emscripten_glTexCoord2dv'); abort(-1);
  }

  function _emscripten_glTexCoord2f() {
  err('missing function: emscripten_glTexCoord2f'); abort(-1);
  }

  function _emscripten_glTexCoord2fv() {
  err('missing function: emscripten_glTexCoord2fv'); abort(-1);
  }

  function _emscripten_glTexCoord2i() {
  err('missing function: emscripten_glTexCoord2i'); abort(-1);
  }

  function _emscripten_glTexCoord2iv() {
  err('missing function: emscripten_glTexCoord2iv'); abort(-1);
  }

  function _emscripten_glTexCoord2s() {
  err('missing function: emscripten_glTexCoord2s'); abort(-1);
  }

  function _emscripten_glTexCoord2sv() {
  err('missing function: emscripten_glTexCoord2sv'); abort(-1);
  }

  function _emscripten_glTexCoord3d() {
  err('missing function: emscripten_glTexCoord3d'); abort(-1);
  }

  function _emscripten_glTexCoord3dv() {
  err('missing function: emscripten_glTexCoord3dv'); abort(-1);
  }

  function _emscripten_glTexCoord3f() {
  err('missing function: emscripten_glTexCoord3f'); abort(-1);
  }

  function _emscripten_glTexCoord3fv() {
  err('missing function: emscripten_glTexCoord3fv'); abort(-1);
  }

  function _emscripten_glTexCoord3i() {
  err('missing function: emscripten_glTexCoord3i'); abort(-1);
  }

  function _emscripten_glTexCoord3iv() {
  err('missing function: emscripten_glTexCoord3iv'); abort(-1);
  }

  function _emscripten_glTexCoord3s() {
  err('missing function: emscripten_glTexCoord3s'); abort(-1);
  }

  function _emscripten_glTexCoord3sv() {
  err('missing function: emscripten_glTexCoord3sv'); abort(-1);
  }

  function _emscripten_glTexCoord4d() {
  err('missing function: emscripten_glTexCoord4d'); abort(-1);
  }

  function _emscripten_glTexCoord4dv() {
  err('missing function: emscripten_glTexCoord4dv'); abort(-1);
  }

  function _emscripten_glTexCoord4f() {
  err('missing function: emscripten_glTexCoord4f'); abort(-1);
  }

  function _emscripten_glTexCoord4fv() {
  err('missing function: emscripten_glTexCoord4fv'); abort(-1);
  }

  function _emscripten_glTexCoord4i() {
  err('missing function: emscripten_glTexCoord4i'); abort(-1);
  }

  function _emscripten_glTexCoord4iv() {
  err('missing function: emscripten_glTexCoord4iv'); abort(-1);
  }

  function _emscripten_glTexCoord4s() {
  err('missing function: emscripten_glTexCoord4s'); abort(-1);
  }

  function _emscripten_glTexCoord4sv() {
  err('missing function: emscripten_glTexCoord4sv'); abort(-1);
  }

  function _emscripten_glTexCoordPointer() {
  err('missing function: emscripten_glTexCoordPointer'); abort(-1);
  }

  function _emscripten_glTexEnvf() {
  err('missing function: emscripten_glTexEnvf'); abort(-1);
  }

  function _emscripten_glTexEnvfv() {
  err('missing function: emscripten_glTexEnvfv'); abort(-1);
  }

  function _emscripten_glTexEnvi() {
  err('missing function: emscripten_glTexEnvi'); abort(-1);
  }

  function _emscripten_glTexEnviv() {
  err('missing function: emscripten_glTexEnviv'); abort(-1);
  }

  function _emscripten_glTexGend() {
  err('missing function: emscripten_glTexGend'); abort(-1);
  }

  function _emscripten_glTexGendv() {
  err('missing function: emscripten_glTexGendv'); abort(-1);
  }

  function _emscripten_glTexGenf() {
  err('missing function: emscripten_glTexGenf'); abort(-1);
  }

  function _emscripten_glTexGenfv() {
  err('missing function: emscripten_glTexGenfv'); abort(-1);
  }

  function _emscripten_glTexGeni() {
  err('missing function: emscripten_glTexGeni'); abort(-1);
  }

  function _emscripten_glTexGeniv() {
  err('missing function: emscripten_glTexGeniv'); abort(-1);
  }

  function _emscripten_glTexImage1D() {
  err('missing function: emscripten_glTexImage1D'); abort(-1);
  }

  function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
  
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }

  function _emscripten_glTexImage3D() {
  err('missing function: emscripten_glTexImage3D'); abort(-1);
  }

  function _emscripten_glTexParameterIiv() {
  err('missing function: emscripten_glTexParameterIiv'); abort(-1);
  }

  function _emscripten_glTexParameterIuiv() {
  err('missing function: emscripten_glTexParameterIuiv'); abort(-1);
  }

  function _emscripten_glTexParameterf(x0, x1, x2) { GLctx['texParameterf'](x0, x1, x2) }

  function _emscripten_glTexParameterfv(target, pname, params) {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    }

  function _emscripten_glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _emscripten_glTexParameteriv(target, pname, params) {
      var param = HEAP32[((params)>>2)];
      GLctx.texParameteri(target, pname, param);
    }

  function _emscripten_glTexStorage2D() {
  err('missing function: emscripten_glTexStorage2D'); abort(-1);
  }

  function _emscripten_glTexStorage3D() {
  err('missing function: emscripten_glTexStorage3D'); abort(-1);
  }

  function _emscripten_glTexSubImage1D() {
  err('missing function: emscripten_glTexSubImage1D'); abort(-1);
  }

  function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    }

  function _emscripten_glTexSubImage3D() {
  err('missing function: emscripten_glTexSubImage3D'); abort(-1);
  }

  function _emscripten_glTransformFeedbackVaryings() {
  err('missing function: emscripten_glTransformFeedbackVaryings'); abort(-1);
  }

  function _emscripten_glTranslated() {
  err('missing function: emscripten_glTranslated'); abort(-1);
  }

  function _emscripten_glTranslatef() {
  err('missing function: emscripten_glTranslatef'); abort(-1);
  }

  function _emscripten_glUniform1f(location, v0) {
      GLctx.uniform1f(GL.uniforms[location], v0);
    }

  function _emscripten_glUniform1fv(location, count, value) {
  
  
      var view;
      if (count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[count-1];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _emscripten_glUniform1iv(location, count, value) {
  
  
      GLctx.uniform1iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*4)>>2));
    }

  function _emscripten_glUniform1ui() {
  err('missing function: emscripten_glUniform1ui'); abort(-1);
  }

  function _emscripten_glUniform1uiv() {
  err('missing function: emscripten_glUniform1uiv'); abort(-1);
  }

  function _emscripten_glUniform2f(location, v0, v1) {
      GLctx.uniform2f(GL.uniforms[location], v0, v1);
    }

  function _emscripten_glUniform2fv(location, count, value) {
  
  
      var view;
      if (2*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform2i(location, v0, v1) {
      GLctx.uniform2i(GL.uniforms[location], v0, v1);
    }

  function _emscripten_glUniform2iv(location, count, value) {
  
  
      GLctx.uniform2iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*8)>>2));
    }

  function _emscripten_glUniform2ui() {
  err('missing function: emscripten_glUniform2ui'); abort(-1);
  }

  function _emscripten_glUniform2uiv() {
  err('missing function: emscripten_glUniform2uiv'); abort(-1);
  }

  function _emscripten_glUniform3f(location, v0, v1, v2) {
      GLctx.uniform3f(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glUniform3fv(location, count, value) {
  
  
      var view;
      if (3*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform3i(location, v0, v1, v2) {
      GLctx.uniform3i(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glUniform3iv(location, count, value) {
  
  
      GLctx.uniform3iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*12)>>2));
    }

  function _emscripten_glUniform3ui() {
  err('missing function: emscripten_glUniform3ui'); abort(-1);
  }

  function _emscripten_glUniform3uiv() {
  err('missing function: emscripten_glUniform3uiv'); abort(-1);
  }

  function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_glUniform4fv(location, count, value) {
  
  
      var view;
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
      GLctx.uniform4i(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_glUniform4iv(location, count, value) {
  
  
      GLctx.uniform4iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*16)>>2));
    }

  function _emscripten_glUniform4ui() {
  err('missing function: emscripten_glUniform4ui'); abort(-1);
  }

  function _emscripten_glUniform4uiv() {
  err('missing function: emscripten_glUniform4uiv'); abort(-1);
  }

  function _emscripten_glUniformBlockBinding() {
  err('missing function: emscripten_glUniformBlockBinding'); abort(-1);
  }

  function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
  
  
      var view;
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUniformMatrix2x3fv() {
  err('missing function: emscripten_glUniformMatrix2x3fv'); abort(-1);
  }

  function _emscripten_glUniformMatrix2x4fv() {
  err('missing function: emscripten_glUniformMatrix2x4fv'); abort(-1);
  }

  function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
  
  
      var view;
      if (9*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[9*count-1];
        for (var i = 0; i < 9*count; i += 9) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUniformMatrix3x2fv() {
  err('missing function: emscripten_glUniformMatrix3x2fv'); abort(-1);
  }

  function _emscripten_glUniformMatrix3x4fv() {
  err('missing function: emscripten_glUniformMatrix3x4fv'); abort(-1);
  }

  function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
  
  
      var view;
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUniformMatrix4x2fv() {
  err('missing function: emscripten_glUniformMatrix4x2fv'); abort(-1);
  }

  function _emscripten_glUniformMatrix4x3fv() {
  err('missing function: emscripten_glUniformMatrix4x3fv'); abort(-1);
  }

  function _emscripten_glUnmapBuffer() {
  err('missing function: emscripten_glUnmapBuffer'); abort(-1);
  }

  function _emscripten_glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _emscripten_glUseProgramObjectARB() {
  err('missing function: emscripten_glUseProgramObjectARB'); abort(-1);
  }

  function _emscripten_glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }

  function _emscripten_glVertex2d() {
  err('missing function: emscripten_glVertex2d'); abort(-1);
  }

  function _emscripten_glVertex2dv() {
  err('missing function: emscripten_glVertex2dv'); abort(-1);
  }

  function _emscripten_glVertex2f() {
  err('missing function: emscripten_glVertex2f'); abort(-1);
  }

  function _emscripten_glVertex2fv() {
  err('missing function: emscripten_glVertex2fv'); abort(-1);
  }

  function _emscripten_glVertex2i() {
  err('missing function: emscripten_glVertex2i'); abort(-1);
  }

  function _emscripten_glVertex2iv() {
  err('missing function: emscripten_glVertex2iv'); abort(-1);
  }

  function _emscripten_glVertex2s() {
  err('missing function: emscripten_glVertex2s'); abort(-1);
  }

  function _emscripten_glVertex2sv() {
  err('missing function: emscripten_glVertex2sv'); abort(-1);
  }

  function _emscripten_glVertex3d() {
  err('missing function: emscripten_glVertex3d'); abort(-1);
  }

  function _emscripten_glVertex3dv() {
  err('missing function: emscripten_glVertex3dv'); abort(-1);
  }

  function _emscripten_glVertex3f() {
  err('missing function: emscripten_glVertex3f'); abort(-1);
  }

  function _emscripten_glVertex3fv() {
  err('missing function: emscripten_glVertex3fv'); abort(-1);
  }

  function _emscripten_glVertex3i() {
  err('missing function: emscripten_glVertex3i'); abort(-1);
  }

  function _emscripten_glVertex3iv() {
  err('missing function: emscripten_glVertex3iv'); abort(-1);
  }

  function _emscripten_glVertex3s() {
  err('missing function: emscripten_glVertex3s'); abort(-1);
  }

  function _emscripten_glVertex3sv() {
  err('missing function: emscripten_glVertex3sv'); abort(-1);
  }

  function _emscripten_glVertex4d() {
  err('missing function: emscripten_glVertex4d'); abort(-1);
  }

  function _emscripten_glVertex4dv() {
  err('missing function: emscripten_glVertex4dv'); abort(-1);
  }

  function _emscripten_glVertex4f() {
  err('missing function: emscripten_glVertex4f'); abort(-1);
  }

  function _emscripten_glVertex4fv() {
  err('missing function: emscripten_glVertex4fv'); abort(-1);
  }

  function _emscripten_glVertex4i() {
  err('missing function: emscripten_glVertex4i'); abort(-1);
  }

  function _emscripten_glVertex4iv() {
  err('missing function: emscripten_glVertex4iv'); abort(-1);
  }

  function _emscripten_glVertex4s() {
  err('missing function: emscripten_glVertex4s'); abort(-1);
  }

  function _emscripten_glVertex4sv() {
  err('missing function: emscripten_glVertex4sv'); abort(-1);
  }

  function _emscripten_glVertexAttrib1d() {
  err('missing function: emscripten_glVertexAttrib1d'); abort(-1);
  }

  function _emscripten_glVertexAttrib1dv() {
  err('missing function: emscripten_glVertexAttrib1dv'); abort(-1);
  }

  function _emscripten_glVertexAttrib1f(x0, x1) { GLctx['vertexAttrib1f'](x0, x1) }

  function _emscripten_glVertexAttrib1fv(index, v) {
  
      GLctx.vertexAttrib1f(index, HEAPF32[v>>2]);
    }

  function _emscripten_glVertexAttrib1s() {
  err('missing function: emscripten_glVertexAttrib1s'); abort(-1);
  }

  function _emscripten_glVertexAttrib1sv() {
  err('missing function: emscripten_glVertexAttrib1sv'); abort(-1);
  }

  function _emscripten_glVertexAttrib2d() {
  err('missing function: emscripten_glVertexAttrib2d'); abort(-1);
  }

  function _emscripten_glVertexAttrib2dv() {
  err('missing function: emscripten_glVertexAttrib2dv'); abort(-1);
  }

  function _emscripten_glVertexAttrib2f(x0, x1, x2) { GLctx['vertexAttrib2f'](x0, x1, x2) }

  function _emscripten_glVertexAttrib2fv(index, v) {
  
      GLctx.vertexAttrib2f(index, HEAPF32[v>>2], HEAPF32[v+4>>2]);
    }

  function _emscripten_glVertexAttrib2s() {
  err('missing function: emscripten_glVertexAttrib2s'); abort(-1);
  }

  function _emscripten_glVertexAttrib2sv() {
  err('missing function: emscripten_glVertexAttrib2sv'); abort(-1);
  }

  function _emscripten_glVertexAttrib3d() {
  err('missing function: emscripten_glVertexAttrib3d'); abort(-1);
  }

  function _emscripten_glVertexAttrib3dv() {
  err('missing function: emscripten_glVertexAttrib3dv'); abort(-1);
  }

  function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) { GLctx['vertexAttrib3f'](x0, x1, x2, x3) }

  function _emscripten_glVertexAttrib3fv(index, v) {
  
      GLctx.vertexAttrib3f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2]);
    }

  function _emscripten_glVertexAttrib3s() {
  err('missing function: emscripten_glVertexAttrib3s'); abort(-1);
  }

  function _emscripten_glVertexAttrib3sv() {
  err('missing function: emscripten_glVertexAttrib3sv'); abort(-1);
  }

  function _emscripten_glVertexAttrib4Nbv() {
  err('missing function: emscripten_glVertexAttrib4Nbv'); abort(-1);
  }

  function _emscripten_glVertexAttrib4Niv() {
  err('missing function: emscripten_glVertexAttrib4Niv'); abort(-1);
  }

  function _emscripten_glVertexAttrib4Nsv() {
  err('missing function: emscripten_glVertexAttrib4Nsv'); abort(-1);
  }

  function _emscripten_glVertexAttrib4Nub() {
  err('missing function: emscripten_glVertexAttrib4Nub'); abort(-1);
  }

  function _emscripten_glVertexAttrib4Nubv() {
  err('missing function: emscripten_glVertexAttrib4Nubv'); abort(-1);
  }

  function _emscripten_glVertexAttrib4Nuiv() {
  err('missing function: emscripten_glVertexAttrib4Nuiv'); abort(-1);
  }

  function _emscripten_glVertexAttrib4Nusv() {
  err('missing function: emscripten_glVertexAttrib4Nusv'); abort(-1);
  }

  function _emscripten_glVertexAttrib4bv() {
  err('missing function: emscripten_glVertexAttrib4bv'); abort(-1);
  }

  function _emscripten_glVertexAttrib4d() {
  err('missing function: emscripten_glVertexAttrib4d'); abort(-1);
  }

  function _emscripten_glVertexAttrib4dv() {
  err('missing function: emscripten_glVertexAttrib4dv'); abort(-1);
  }

  function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) { GLctx['vertexAttrib4f'](x0, x1, x2, x3, x4) }

  function _emscripten_glVertexAttrib4fv(index, v) {
  
      GLctx.vertexAttrib4f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2], HEAPF32[v+12>>2]);
    }

  function _emscripten_glVertexAttrib4iv() {
  err('missing function: emscripten_glVertexAttrib4iv'); abort(-1);
  }

  function _emscripten_glVertexAttrib4s() {
  err('missing function: emscripten_glVertexAttrib4s'); abort(-1);
  }

  function _emscripten_glVertexAttrib4sv() {
  err('missing function: emscripten_glVertexAttrib4sv'); abort(-1);
  }

  function _emscripten_glVertexAttrib4ubv() {
  err('missing function: emscripten_glVertexAttrib4ubv'); abort(-1);
  }

  function _emscripten_glVertexAttrib4uiv() {
  err('missing function: emscripten_glVertexAttrib4uiv'); abort(-1);
  }

  function _emscripten_glVertexAttrib4usv() {
  err('missing function: emscripten_glVertexAttrib4usv'); abort(-1);
  }

  function _emscripten_glVertexAttribDivisor(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }

  function _emscripten_glVertexAttribI1i() {
  err('missing function: emscripten_glVertexAttribI1i'); abort(-1);
  }

  function _emscripten_glVertexAttribI1iv() {
  err('missing function: emscripten_glVertexAttribI1iv'); abort(-1);
  }

  function _emscripten_glVertexAttribI1ui() {
  err('missing function: emscripten_glVertexAttribI1ui'); abort(-1);
  }

  function _emscripten_glVertexAttribI1uiv() {
  err('missing function: emscripten_glVertexAttribI1uiv'); abort(-1);
  }

  function _emscripten_glVertexAttribI2i() {
  err('missing function: emscripten_glVertexAttribI2i'); abort(-1);
  }

  function _emscripten_glVertexAttribI2iv() {
  err('missing function: emscripten_glVertexAttribI2iv'); abort(-1);
  }

  function _emscripten_glVertexAttribI2ui() {
  err('missing function: emscripten_glVertexAttribI2ui'); abort(-1);
  }

  function _emscripten_glVertexAttribI2uiv() {
  err('missing function: emscripten_glVertexAttribI2uiv'); abort(-1);
  }

  function _emscripten_glVertexAttribI3i() {
  err('missing function: emscripten_glVertexAttribI3i'); abort(-1);
  }

  function _emscripten_glVertexAttribI3iv() {
  err('missing function: emscripten_glVertexAttribI3iv'); abort(-1);
  }

  function _emscripten_glVertexAttribI3ui() {
  err('missing function: emscripten_glVertexAttribI3ui'); abort(-1);
  }

  function _emscripten_glVertexAttribI3uiv() {
  err('missing function: emscripten_glVertexAttribI3uiv'); abort(-1);
  }

  function _emscripten_glVertexAttribI4bv() {
  err('missing function: emscripten_glVertexAttribI4bv'); abort(-1);
  }

  function _emscripten_glVertexAttribI4i() {
  err('missing function: emscripten_glVertexAttribI4i'); abort(-1);
  }

  function _emscripten_glVertexAttribI4iv() {
  err('missing function: emscripten_glVertexAttribI4iv'); abort(-1);
  }

  function _emscripten_glVertexAttribI4sv() {
  err('missing function: emscripten_glVertexAttribI4sv'); abort(-1);
  }

  function _emscripten_glVertexAttribI4ubv() {
  err('missing function: emscripten_glVertexAttribI4ubv'); abort(-1);
  }

  function _emscripten_glVertexAttribI4ui() {
  err('missing function: emscripten_glVertexAttribI4ui'); abort(-1);
  }

  function _emscripten_glVertexAttribI4uiv() {
  err('missing function: emscripten_glVertexAttribI4uiv'); abort(-1);
  }

  function _emscripten_glVertexAttribI4usv() {
  err('missing function: emscripten_glVertexAttribI4usv'); abort(-1);
  }

  function _emscripten_glVertexAttribIPointer() {
  err('missing function: emscripten_glVertexAttribIPointer'); abort(-1);
  }

  function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _emscripten_glVertexPointer(){ throw 'Legacy GL function (glVertexPointer) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  function _emscripten_glWindowPos2d() {
  err('missing function: emscripten_glWindowPos2d'); abort(-1);
  }

  function _emscripten_glWindowPos2dv() {
  err('missing function: emscripten_glWindowPos2dv'); abort(-1);
  }

  function _emscripten_glWindowPos2f() {
  err('missing function: emscripten_glWindowPos2f'); abort(-1);
  }

  function _emscripten_glWindowPos2fv() {
  err('missing function: emscripten_glWindowPos2fv'); abort(-1);
  }

  function _emscripten_glWindowPos2i() {
  err('missing function: emscripten_glWindowPos2i'); abort(-1);
  }

  function _emscripten_glWindowPos2iv() {
  err('missing function: emscripten_glWindowPos2iv'); abort(-1);
  }

  function _emscripten_glWindowPos2s() {
  err('missing function: emscripten_glWindowPos2s'); abort(-1);
  }

  function _emscripten_glWindowPos2sv() {
  err('missing function: emscripten_glWindowPos2sv'); abort(-1);
  }

  function _emscripten_glWindowPos3d() {
  err('missing function: emscripten_glWindowPos3d'); abort(-1);
  }

  function _emscripten_glWindowPos3dv() {
  err('missing function: emscripten_glWindowPos3dv'); abort(-1);
  }

  function _emscripten_glWindowPos3f() {
  err('missing function: emscripten_glWindowPos3f'); abort(-1);
  }

  function _emscripten_glWindowPos3fv() {
  err('missing function: emscripten_glWindowPos3fv'); abort(-1);
  }

  function _emscripten_glWindowPos3i() {
  err('missing function: emscripten_glWindowPos3i'); abort(-1);
  }

  function _emscripten_glWindowPos3iv() {
  err('missing function: emscripten_glWindowPos3iv'); abort(-1);
  }

  function _emscripten_glWindowPos3s() {
  err('missing function: emscripten_glWindowPos3s'); abort(-1);
  }

  function _emscripten_glWindowPos3sv() {
  err('missing function: emscripten_glWindowPos3sv'); abort(-1);
  }

  function _emscripten_request_pointerlock(target, deferUntilInEventHandler) {
      if (!target) target = '#canvas';
      target = JSEvents.findEventTarget(target);
      if (!target) return -4;
      if (!target.requestPointerLock && !target.mozRequestPointerLock && !target.webkitRequestPointerLock && !target.msRequestPointerLock) {
        return -1;
      }
  
      var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
  
      // Queue this function call if we're not currently in an event handler and the user saw it appropriate to do so.
      if (!canPerformRequests) {
        if (deferUntilInEventHandler) {
          JSEvents.deferCall(JSEvents.requestPointerLock, 2 /* priority below fullscreen */, [target]);
          return 1;
        } else {
          return -2;
        }
      }
  
      return JSEvents.requestPointerLock(target);
    }

  function _emscripten_set_click_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 4, "click", targetThread);
      return 0;
    }

  function _emscripten_set_fullscreenchange_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      if (typeof JSEvents.fullscreenEnabled() === 'undefined') return -1;
      if (!target) target = document;
      else {
        target = JSEvents.findEventTarget(target);
        if (!target) return -4;
      }
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange", targetThread);
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "mozfullscreenchange", targetThread);
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange", targetThread);
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "msfullscreenchange", targetThread);
      return 0;
    }

  function _emscripten_set_gamepadconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      JSEvents.registerGamepadEventCallback(window, userData, useCapture, callbackfunc, 26, "gamepadconnected", targetThread);
      return 0;
    }

  function _emscripten_set_gamepaddisconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      JSEvents.registerGamepadEventCallback(window, userData, useCapture, callbackfunc, 27, "gamepaddisconnected", targetThread);
      return 0;
    }

  function _emscripten_set_keypress_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      JSEvents.registerKeyEventCallback(target, userData, useCapture, callbackfunc, 1, "keypress", targetThread);
      return 0;
    }


  function _emscripten_set_touchcancel_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel", targetThread);
      return 0;
    }

  function _emscripten_set_touchend_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend", targetThread);
      return 0;
    }

  function _emscripten_set_touchmove_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove", targetThread);
      return 0;
    }

  function _emscripten_set_touchstart_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart", targetThread);
      return 0;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }function _exit(status) {
      __exit(status);
    }

  function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _glBufferData(target, size, data, usage) {
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _glClearDepthf(x0) { GLctx['clearDepth'](x0) }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glCullFace(x0) { GLctx['cullFace'](x0) }

  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function _glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glDisable(x0) { GLctx['disable'](x0) }

  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _glEnable(x0) { GLctx['enable'](x0) }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _glFrontFace(x0) { GLctx['frontFace'](x0) }

  function _glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _glGetAttribLocation(program, name) {
      return GLctx.getAttribLocation(GL.programs[program], Pointer_stringify(name));
    }

  function _glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Float');
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i = 0; i < exts.length; ++i) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          var s = GLctx.getParameter(name_);
          if (!s) {
            GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          }
          ret = allocate(intArrayFromString(s), 'i8', ALLOC_NORMAL);
          break;
  
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = allocate(intArrayFromString(glVersion), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = allocate(intArrayFromString(glslVersion), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _glPixelStorei(pname, param) {
      if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _glReadPixels(x, y, width, height, format, type, pixels) {
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x0500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
  
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
  
  
      var view;
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  
  var GLFW={Window:function (id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.fullscreen = false; // Used to determine if app in fullscreen mode
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.domKeys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.dropFunc = null; // GLFWdropfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      },WindowFromId:function (id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },joystickFunc:null,errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function (keycode) {
        switch (keycode) {
          // these keycodes are only defined for GLFW3, assume they are the same for GLFW2
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBD:return 45; // DOM_VK_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x3D:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0xBB:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
          
  
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function (win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function (event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
        if (event.ctrlKey || event.metaKey) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
  
        Module['dynCall_vii'](GLFW.active.charFunc, GLFW.active.id, charCode);
      },onKeyChanged:function (keyCode, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(keyCode);
        if (key == -1) return;
  
        var repeat = status && GLFW.active.keys[key];
        GLFW.active.keys[key] = status;
        GLFW.active.domKeys[keyCode] = status;
        if (!GLFW.active.keyFunc) return;
  
  
        if (repeat) status = 2; // GLFW_REPEAT
        Module['dynCall_viiiii'](GLFW.active.keyFunc, GLFW.active.id, key, keyCode, status, GLFW.getModBits(GLFW.active));
      },onGamepadConnected:function (event) {
        GLFW.refreshJoysticks();
      },onGamepadDisconnected:function (event) {
        GLFW.refreshJoysticks();
      },onKeydown:function (event) {
        GLFW.onKeyChanged(event.keyCode, 1); // GLFW_PRESS or GLFW_REPEAT
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function (event) {
        GLFW.onKeyChanged(event.keyCode, 0); // GLFW_RELEASE
      },onBlur:function (event) {
        if (!GLFW.active) return;
  
        for (var i = 0; i < GLFW.active.domKeys.length; ++i) {
          if (GLFW.active.domKeys[i]) {
            GLFW.onKeyChanged(i, 0); // GLFW_RELEASE
          }
        }
      },onMousemove:function (event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
  
        Module['dynCall_vidd'](GLFW.active.cursorPosFunc, GLFW.active.id, Browser.mouseX, Browser.mouseY);
      },DOMToGLFWMouseButton:function (event) {
        // DOM and glfw have different button codes.
        // See http://www.w3schools.com/jsref/event_button.asp.
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
        return eventButton;
      },onMouseenter:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        Module['dynCall_vii'](GLFW.active.cursorEnterFunc, GLFW.active.id, 1);
      },onMouseleave:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        Module['dynCall_vii'](GLFW.active.cursorEnterFunc, GLFW.active.id, 0);
      },onMouseButtonChanged:function (event, status) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        var eventButton = GLFW.DOMToGLFWMouseButton(event);
  
        if (status == 1) { // GLFW_PRESS
          GLFW.active.buttons |= (1 << eventButton);
          try {
            event.target.setCapture();
          } catch (e) {}
        } else {  // GLFW_RELEASE
          GLFW.active.buttons &= ~(1 << eventButton);
        }
  
        if (!GLFW.active.mouseButtonFunc) return;
  
  
        Module['dynCall_viiii'](GLFW.active.mouseButtonFunc, GLFW.active.id, eventButton, status, GLFW.getModBits(GLFW.active));
      },onMouseButtonDown:function (event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function (event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function (event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
  
        var sx = 0;
        var sy = 0;
        if (event.type == 'mousewheel') {
          sx = event.wheelDeltaX;
          sy = event.wheelDeltaY;
        } else {
          sx = event.deltaX;
          sy = event.deltaY;
        }
  
        Module['dynCall_vidd'](GLFW.active.scrollFunc, GLFW.active.id, sx, sy);
  
        event.preventDefault();
      },onCanvasResize:function (width, height) {
        if (!GLFW.active) return;
  
        var resizeNeeded = true;
  
        // If the client is requesting fullscreen mode
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
          GLFW.active.fullscreen = true;
  
        // If the client is reverting from fullscreen mode
        } else if (GLFW.active.fullscreen == true) {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
          GLFW.active.fullscreen = false;
  
        // If the width/height values do not match current active window sizes
        } else if (GLFW.active.width != width || GLFW.active.height != height) {
            GLFW.active.width = width;
            GLFW.active.height = height;
        } else {
          resizeNeeded = false;
        }
  
        // If any of the above conditions were true, we need to resize the canvas
        if (resizeNeeded) {
          // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
          Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true);
          // TODO: Client dimensions (clientWidth/clientHeight) vs pixel dimensions (width/height) of
          // the canvas should drive window and framebuffer size respectfully.
          GLFW.onWindowSizeChanged();
          GLFW.onFramebufferSizeChanged();
        }
      },onWindowSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.windowSizeFunc) return;
  
  
        Module['dynCall_viii'](GLFW.active.windowSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },onFramebufferSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.framebufferSizeFunc) return;
  
        Module['dynCall_viii'](GLFW.active.framebufferSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },requestFullscreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },requestFullScreen:function () {
        err('GLFW.requestFullScreen() is deprecated. Please call GLFW.requestFullscreen instead.');
        GLFW.requestFullScreen = function() {
          return GLFW.requestFullscreen();
        }
        return GLFW.requestFullscreen();
      },exitFullscreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      },cancelFullScreen:function () {
        err('GLFW.cancelFullScreen() is deprecated. Please call GLFW.exitFullscreen instead.');
        GLFW.cancelFullScreen = function() {
          return GLFW.exitFullscreen();
        }
        return GLFW.exitFullscreen();
      },getTime:function () {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function (winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = Pointer_stringify(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setJoystickCallback:function (cbfun) {
        GLFW.joystickFunc = cbfun;
        GLFW.refreshJoysticks();
      },joys:{},lastGamepadState:null,lastGamepadStateFrame:null,refreshJoysticks:function () {
        // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
        if (Browser.mainLoop.currentFrameNumber !== GLFW.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
          GLFW.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : null);
          GLFW.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
  
          for (var joy = 0; joy < GLFW.lastGamepadState.length; ++joy) {
            var gamepad = GLFW.lastGamepadState[joy];
  
            if (gamepad) {
              if (!GLFW.joys[joy]) {
                console.log('glfw joystick connected:',joy);
                GLFW.joys[joy] = {
                  id: allocate(intArrayFromString(gamepad.id), 'i8', ALLOC_NORMAL),
                  buttonsCount: gamepad.buttons.length,
                  axesCount: gamepad.axes.length,
                  buttons: allocate(new Array(gamepad.buttons.length), 'i8', ALLOC_NORMAL),
                  axes: allocate(new Array(gamepad.axes.length*4), 'float', ALLOC_NORMAL)
                };
  
                if (GLFW.joystickFunc) {
                  Module['dynCall_vii'](GLFW.joystickFunc, joy, 0x00040001); // GLFW_CONNECTED
                }
              }
  
              var data = GLFW.joys[joy];
  
              for (var i = 0; i < gamepad.buttons.length;  ++i) {
                setValue(data.buttons + i, gamepad.buttons[i].pressed, 'i8');
              }
  
              for (var i = 0; i < gamepad.axes.length; ++i) {
                setValue(data.axes + i*4, gamepad.axes[i], 'float');
              }
            } else {
              if (GLFW.joys[joy]) {
                console.log('glfw joystick disconnected',joy);
  
                if (GLFW.joystickFunc) {
                  Module['dynCall_vii'](GLFW.joystickFunc, joy, 0x00040002); // GLFW_DISCONNECTED
                }
  
                _free(GLFW.joys[joy].id);
                _free(GLFW.joys[joy].buttons);
                _free(GLFW.joys[joy].axes);
  
                delete GLFW.joys[joy];
              }
            }
          }
        }
      },setKeyCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.keyFunc = cbfun;
      },setCharCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.charFunc = cbfun;
      },setMouseButtonCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.mouseButtonFunc = cbfun;
      },setCursorPosCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.cursorPosFunc = cbfun;
      },setScrollCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.scrollFunc = cbfun;
      },setDropCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.dropFunc = cbfun;
      },onDrop:function (event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
        if (!event.dataTransfer || !event.dataTransfer.files || event.dataTransfer.files.length == 0) return;
  
        event.preventDefault();
  
        var filenames = allocate(new Array(event.dataTransfer.files.length*4), 'i8*', ALLOC_NORMAL);
        var filenamesArray = [];
        var count = event.dataTransfer.files.length;
  
        // Read and save the files to emscripten's FS
        var written = 0;
        var drop_dir = '.glfw_dropped_files';
        FS.createPath('/', drop_dir);
  
        function save(file) {
          var path = '/' + drop_dir + '/' + file.name.replace(/\//g, '_');
          var reader = new FileReader();
          reader.onloadend = function(e) {
            if (reader.readyState != 2) { // not DONE
              ++written;
              console.log('failed to read dropped file: '+file.name+': '+reader.error);
              return;
            }
  
            var data = e.target.result;
            FS.writeFile(path, new Uint8Array(data));
            if (++written === count) {
              Module['dynCall_viii'](GLFW.active.dropFunc, GLFW.active.id, count, filenames);
  
              for (var i = 0; i < filenamesArray.length; ++i) {
                _free(filenamesArray[i]);
              }
              _free(filenames);
            }
          };
          reader.readAsArrayBuffer(file);
  
          var filename = allocate(intArrayFromString(path), 'i8', ALLOC_NORMAL);
          filenamesArray.push(filename);
          setValue(filenames + i*4, filename, 'i8*');
        }
  
        for (var i = 0; i < count; ++i) {
          save(event.dataTransfer.files[i]);
        }
  
        return false;
      },onDragover:function (event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
  
        event.preventDefault();
        return false;
      },setWindowSizeCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowSizeFunc = cbfun;
       
      },setWindowCloseCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowCloseFunc = cbfun;
      },setWindowRefreshCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowRefreshFunc = cbfun;
      },onClickRequestPointerLock:function (e) {
        if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
          Module['canvas'].requestPointerLock();
          e.preventDefault();
        }
      },setInputMode:function (winid, mode, value) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        switch(mode) {
          case 0x00033001: { // GLFW_CURSOR
            switch(value) {
              case 0x00034001: { // GLFW_CURSOR_NORMAL
                win.inputModes[mode] = value;
                Module['canvas'].removeEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].exitPointerLock();
                break;
              }
              case 0x00034002: { // GLFW_CURSOR_HIDDEN
                console.log("glfwSetInputMode called with GLFW_CURSOR_HIDDEN value not implemented.");
                break;
              }
              case 0x00034003: { // GLFW_CURSOR_DISABLED
                win.inputModes[mode] = value;
                Module['canvas'].addEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].requestPointerLock();
                break;
              }
              default: {
                console.log("glfwSetInputMode called with unknown value parameter value: " + value + ".");
                break;
              }
            }
            break;
          }
          case 0x00033002: { // GLFW_STICKY_KEYS
            console.log("glfwSetInputMode called with GLFW_STICKY_KEYS mode not implemented.");
            break;
          }
          case 0x00033003: { // GLFW_STICKY_MOUSE_BUTTONS
            console.log("glfwSetInputMode called with GLFW_STICKY_MOUSE_BUTTONS mode not implemented.");
            break;
          }
          default: {
            console.log("glfwSetInputMode called with unknown mode parameter value: " + mode + ".");
            break;
          }
        }
      },getKey:function (winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function (winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function (winid, x, y) {
      },getWindowPos:function (winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        setValue(x, wx, 'i32');
        setValue(y, wy, 'i32');
      },setWindowPos:function (winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function (winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        setValue(width, ww, 'i32');
        setValue(height, wh, 'i32');
      },setWindowSize:function (winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            GLFW.requestFullscreen();
          } else {
            GLFW.exitFullscreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowSizeFunc) return;
  
  
        Module['dynCall_viii'](win.windowSizeFunc, win.id, width, height);
      },createWindow:function (width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++);
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          GLFW.requestFullscreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++);
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0),   // GLFW_STENCIL_BITS
            alpha: (GLFW.hints[0x00021004] > 0)      // GLFW_ALPHA_BITS 
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx) return 0;
  
        // Get non alive id
        var win = new GLFW.Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function (winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (win.windowCloseFunc)
          Module['dynCall_vi'](win.windowCloseFunc, win.id);
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function (winid) {
      },GLFW2ParamToGLFW3Param:function (param) {
        var table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};function _glfwCreateWindow(width, height, title, monitor, share) {
      return GLFW.createWindow(width, height, title, monitor, share);
    }

  function _glfwDefaultWindowHints() {
      GLFW.hints = GLFW.defaultHints;
    }

  function _glfwDestroyWindow(winid) {
      return GLFW.destroyWindow(winid);
    }

  function _glfwGetCursorPos(winid, x, y) {
      GLFW.getCursorPos(winid, x, y);
    }

  function _glfwGetKey(winid, key) {
      return GLFW.getKey(winid, key);
    }

  function _glfwGetMouseButton(winid, button) {
      return GLFW.getMouseButton(winid, button);
    }

  function _glfwGetPrimaryMonitor() {
      return 1;
    }

  function _glfwGetTime() {
      return GLFW.getTime() - GLFW.initialTime;
    }

  function _glfwGetVideoModes(monitor, count) {
      setValue(count, 0, 'i32');
      return 0;
    }

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.addEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      window.addEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].addEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].addEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].addEventListener('dragover', GLFW.onDragover, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onCanvasResize(width, height);
      });
      return 1; // GL_TRUE
    }

  function _glfwMakeContextCurrent(winid) {}

  function _glfwSetCharCallback(winid, cbfun) {
      GLFW.setCharCallback(winid, cbfun);
    }

  function _glfwSetCursorEnterCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.cursorEnterFunc = cbfun;
    }

  function _glfwSetCursorPosCallback(winid, cbfun) {
      GLFW.setCursorPosCallback(winid, cbfun);
    }

  function _glfwSetDropCallback(winid, cbfun) {
      GLFW.setDropCallback(winid, cbfun);
    }

  function _glfwSetErrorCallback(cbfun) {
      GLFW.errorFunc = cbfun;
    }

  function _glfwSetKeyCallback(winid, cbfun) {
      GLFW.setKeyCallback(winid, cbfun);
    }

  function _glfwSetMouseButtonCallback(winid, cbfun) {
      GLFW.setMouseButtonCallback(winid, cbfun);
    }

  function _glfwSetScrollCallback(winid, cbfun) {
      GLFW.setScrollCallback(winid, cbfun);
    }

  function _glfwSetWindowIconifyCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.windowIconifyFunc = cbfun;
    }

  function _glfwSetWindowShouldClose(winid, value) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.shouldClose = value;
    }

  function _glfwSetWindowSizeCallback(winid, cbfun) {
      GLFW.setWindowSizeCallback(winid, cbfun);
    }

  function _glfwSwapBuffers(winid) {
      GLFW.swapBuffers(winid);
    }

  function _glfwSwapInterval(interval) {
      interval = Math.abs(interval); // GLFW uses negative values to enable GLX_EXT_swap_control_tear, which we don't have, so just treat negative and positive the same.
      if (interval == 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 0);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, interval);
    }

  function _glfwTerminate() {
      window.removeEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.removeEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      window.removeEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].removeEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].removeEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].removeEventListener('dragover', GLFW.onDragover, true);
  
  
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }

  function _glfwWindowHint(target, hint) {
      GLFW.hints[target] = hint;
    }



   

  var _llvm_cos_f32=Math_cos;

   

  var _llvm_sin_f32=Math_sin;

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { err("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
var GLctx; GL.init();
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



function nullFunc_ff(x) { err("Invalid function pointer called with signature 'ff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_fff(x) { err("Invalid function pointer called with signature 'fff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { err("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { err("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { err("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { err("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { err("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vd(x) { err("Invalid function pointer called with signature 'vd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdd(x) { err("Invalid function pointer called with signature 'vdd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vddd(x) { err("Invalid function pointer called with signature 'vddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdddd(x) { err("Invalid function pointer called with signature 'vdddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdddddd(x) { err("Invalid function pointer called with signature 'vdddddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vf(x) { err("Invalid function pointer called with signature 'vf'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vff(x) { err("Invalid function pointer called with signature 'vff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vfff(x) { err("Invalid function pointer called with signature 'vfff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vffff(x) { err("Invalid function pointer called with signature 'vffff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vfi(x) { err("Invalid function pointer called with signature 'vfi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { err("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vid(x) { err("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidd(x) { err("Invalid function pointer called with signature 'vidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viddd(x) { err("Invalid function pointer called with signature 'viddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidddd(x) { err("Invalid function pointer called with signature 'vidddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viddidd(x) { err("Invalid function pointer called with signature 'viddidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viddiiddiii(x) { err("Invalid function pointer called with signature 'viddiiddiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viddiii(x) { err("Invalid function pointer called with signature 'viddiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vif(x) { err("Invalid function pointer called with signature 'vif'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viff(x) { err("Invalid function pointer called with signature 'viff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vifff(x) { err("Invalid function pointer called with signature 'vifff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viffff(x) { err("Invalid function pointer called with signature 'viffff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viffiff(x) { err("Invalid function pointer called with signature 'viffiff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viffiiffiii(x) { err("Invalid function pointer called with signature 'viffiiffiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viffiii(x) { err("Invalid function pointer called with signature 'viffiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { err("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viid(x) { err("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viidddd(x) { err("Invalid function pointer called with signature 'viidddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viif(x) { err("Invalid function pointer called with signature 'viif'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiffff(x) { err("Invalid function pointer called with signature 'viiffff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiffffi(x) { err("Invalid function pointer called with signature 'viiffffi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viifi(x) { err("Invalid function pointer called with signature 'viifi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { err("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { err("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { err("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { err("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { err("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiii(x) { err("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiii(x) { err("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiii(x) { err("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiiii(x) { err("Invalid function pointer called with signature 'viiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

Module['wasmTableSize'] = 1304;

Module['wasmMaxTableSize'] = 1304;

Module.asmGlobalArg = {};

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "setTempRet0": setTempRet0, "getTempRet0": getTempRet0, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "abortStackOverflowEmterpreter": abortStackOverflowEmterpreter, "nullFunc_ff": nullFunc_ff, "nullFunc_fff": nullFunc_fff, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_v": nullFunc_v, "nullFunc_vd": nullFunc_vd, "nullFunc_vdd": nullFunc_vdd, "nullFunc_vddd": nullFunc_vddd, "nullFunc_vdddd": nullFunc_vdddd, "nullFunc_vdddddd": nullFunc_vdddddd, "nullFunc_vf": nullFunc_vf, "nullFunc_vff": nullFunc_vff, "nullFunc_vfff": nullFunc_vfff, "nullFunc_vffff": nullFunc_vffff, "nullFunc_vfi": nullFunc_vfi, "nullFunc_vi": nullFunc_vi, "nullFunc_vid": nullFunc_vid, "nullFunc_vidd": nullFunc_vidd, "nullFunc_viddd": nullFunc_viddd, "nullFunc_vidddd": nullFunc_vidddd, "nullFunc_viddidd": nullFunc_viddidd, "nullFunc_viddiiddiii": nullFunc_viddiiddiii, "nullFunc_viddiii": nullFunc_viddiii, "nullFunc_vif": nullFunc_vif, "nullFunc_viff": nullFunc_viff, "nullFunc_vifff": nullFunc_vifff, "nullFunc_viffff": nullFunc_viffff, "nullFunc_viffiff": nullFunc_viffiff, "nullFunc_viffiiffiii": nullFunc_viffiiffiii, "nullFunc_viffiii": nullFunc_viffiii, "nullFunc_vii": nullFunc_vii, "nullFunc_viid": nullFunc_viid, "nullFunc_viidddd": nullFunc_viidddd, "nullFunc_viif": nullFunc_viif, "nullFunc_viiffff": nullFunc_viiffff, "nullFunc_viiffffi": nullFunc_viiffffi, "nullFunc_viifi": nullFunc_viifi, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_viiiiiiiiiii": nullFunc_viiiiiiiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___assert_fail": ___assert_fail, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "__exit": __exit, "__get_canvas_element_size": __get_canvas_element_size, "__glGenObject": __glGenObject, "__set_canvas_element_size": __set_canvas_element_size, "_abort": _abort, "_eglGetProcAddress": _eglGetProcAddress, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_exit_pointerlock": _emscripten_exit_pointerlock, "_emscripten_get_canvas_element_size": _emscripten_get_canvas_element_size, "_emscripten_get_now": _emscripten_get_now, "_emscripten_get_pointerlock_status": _emscripten_get_pointerlock_status, "_emscripten_glAccum": _emscripten_glAccum, "_emscripten_glActiveTexture": _emscripten_glActiveTexture, "_emscripten_glAlphaFunc": _emscripten_glAlphaFunc, "_emscripten_glAreTexturesResident": _emscripten_glAreTexturesResident, "_emscripten_glArrayElement": _emscripten_glArrayElement, "_emscripten_glAttachObjectARB": _emscripten_glAttachObjectARB, "_emscripten_glAttachShader": _emscripten_glAttachShader, "_emscripten_glBegin": _emscripten_glBegin, "_emscripten_glBeginConditionalRender": _emscripten_glBeginConditionalRender, "_emscripten_glBeginQuery": _emscripten_glBeginQuery, "_emscripten_glBeginTransformFeedback": _emscripten_glBeginTransformFeedback, "_emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation, "_emscripten_glBindBuffer": _emscripten_glBindBuffer, "_emscripten_glBindBufferBase": _emscripten_glBindBufferBase, "_emscripten_glBindBufferRange": _emscripten_glBindBufferRange, "_emscripten_glBindFragDataLocation": _emscripten_glBindFragDataLocation, "_emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer, "_emscripten_glBindProgramARB": _emscripten_glBindProgramARB, "_emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer, "_emscripten_glBindTexture": _emscripten_glBindTexture, "_emscripten_glBindVertexArray": _emscripten_glBindVertexArray, "_emscripten_glBitmap": _emscripten_glBitmap, "_emscripten_glBlendColor": _emscripten_glBlendColor, "_emscripten_glBlendEquation": _emscripten_glBlendEquation, "_emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate, "_emscripten_glBlendFunc": _emscripten_glBlendFunc, "_emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate, "_emscripten_glBlitFramebuffer": _emscripten_glBlitFramebuffer, "_emscripten_glBufferData": _emscripten_glBufferData, "_emscripten_glBufferSubData": _emscripten_glBufferSubData, "_emscripten_glCallList": _emscripten_glCallList, "_emscripten_glCallLists": _emscripten_glCallLists, "_emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus, "_emscripten_glClampColor": _emscripten_glClampColor, "_emscripten_glClear": _emscripten_glClear, "_emscripten_glClearAccum": _emscripten_glClearAccum, "_emscripten_glClearBufferfi": _emscripten_glClearBufferfi, "_emscripten_glClearBufferfv": _emscripten_glClearBufferfv, "_emscripten_glClearBufferiv": _emscripten_glClearBufferiv, "_emscripten_glClearBufferuiv": _emscripten_glClearBufferuiv, "_emscripten_glClearColor": _emscripten_glClearColor, "_emscripten_glClearDepth": _emscripten_glClearDepth, "_emscripten_glClearDepthf": _emscripten_glClearDepthf, "_emscripten_glClearIndex": _emscripten_glClearIndex, "_emscripten_glClearStencil": _emscripten_glClearStencil, "_emscripten_glClientActiveTexture": _emscripten_glClientActiveTexture, "_emscripten_glClipPlane": _emscripten_glClipPlane, "_emscripten_glColor3b": _emscripten_glColor3b, "_emscripten_glColor3bv": _emscripten_glColor3bv, "_emscripten_glColor3d": _emscripten_glColor3d, "_emscripten_glColor3dv": _emscripten_glColor3dv, "_emscripten_glColor3f": _emscripten_glColor3f, "_emscripten_glColor3fv": _emscripten_glColor3fv, "_emscripten_glColor3i": _emscripten_glColor3i, "_emscripten_glColor3iv": _emscripten_glColor3iv, "_emscripten_glColor3s": _emscripten_glColor3s, "_emscripten_glColor3sv": _emscripten_glColor3sv, "_emscripten_glColor3ub": _emscripten_glColor3ub, "_emscripten_glColor3ubv": _emscripten_glColor3ubv, "_emscripten_glColor3ui": _emscripten_glColor3ui, "_emscripten_glColor3uiv": _emscripten_glColor3uiv, "_emscripten_glColor3us": _emscripten_glColor3us, "_emscripten_glColor3usv": _emscripten_glColor3usv, "_emscripten_glColor4b": _emscripten_glColor4b, "_emscripten_glColor4bv": _emscripten_glColor4bv, "_emscripten_glColor4d": _emscripten_glColor4d, "_emscripten_glColor4dv": _emscripten_glColor4dv, "_emscripten_glColor4f": _emscripten_glColor4f, "_emscripten_glColor4fv": _emscripten_glColor4fv, "_emscripten_glColor4i": _emscripten_glColor4i, "_emscripten_glColor4iv": _emscripten_glColor4iv, "_emscripten_glColor4s": _emscripten_glColor4s, "_emscripten_glColor4sv": _emscripten_glColor4sv, "_emscripten_glColor4ub": _emscripten_glColor4ub, "_emscripten_glColor4ubv": _emscripten_glColor4ubv, "_emscripten_glColor4ui": _emscripten_glColor4ui, "_emscripten_glColor4uiv": _emscripten_glColor4uiv, "_emscripten_glColor4us": _emscripten_glColor4us, "_emscripten_glColor4usv": _emscripten_glColor4usv, "_emscripten_glColorMask": _emscripten_glColorMask, "_emscripten_glColorMaski": _emscripten_glColorMaski, "_emscripten_glColorMaterial": _emscripten_glColorMaterial, "_emscripten_glColorPointer": _emscripten_glColorPointer, "_emscripten_glColorSubTable": _emscripten_glColorSubTable, "_emscripten_glColorTable": _emscripten_glColorTable, "_emscripten_glColorTableParameterfv": _emscripten_glColorTableParameterfv, "_emscripten_glColorTableParameteriv": _emscripten_glColorTableParameteriv, "_emscripten_glCompileShader": _emscripten_glCompileShader, "_emscripten_glCompressedTexImage1D": _emscripten_glCompressedTexImage1D, "_emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D, "_emscripten_glCompressedTexImage3D": _emscripten_glCompressedTexImage3D, "_emscripten_glCompressedTexSubImage1D": _emscripten_glCompressedTexSubImage1D, "_emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D, "_emscripten_glCompressedTexSubImage3D": _emscripten_glCompressedTexSubImage3D, "_emscripten_glConvolutionFilter1D": _emscripten_glConvolutionFilter1D, "_emscripten_glConvolutionFilter2D": _emscripten_glConvolutionFilter2D, "_emscripten_glConvolutionParameterf": _emscripten_glConvolutionParameterf, "_emscripten_glConvolutionParameterfv": _emscripten_glConvolutionParameterfv, "_emscripten_glConvolutionParameteri": _emscripten_glConvolutionParameteri, "_emscripten_glConvolutionParameteriv": _emscripten_glConvolutionParameteriv, "_emscripten_glCopyColorSubTable": _emscripten_glCopyColorSubTable, "_emscripten_glCopyColorTable": _emscripten_glCopyColorTable, "_emscripten_glCopyConvolutionFilter1D": _emscripten_glCopyConvolutionFilter1D, "_emscripten_glCopyConvolutionFilter2D": _emscripten_glCopyConvolutionFilter2D, "_emscripten_glCopyPixels": _emscripten_glCopyPixels, "_emscripten_glCopyTexImage1D": _emscripten_glCopyTexImage1D, "_emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D, "_emscripten_glCopyTexSubImage1D": _emscripten_glCopyTexSubImage1D, "_emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D, "_emscripten_glCopyTexSubImage3D": _emscripten_glCopyTexSubImage3D, "_emscripten_glCreateProgram": _emscripten_glCreateProgram, "_emscripten_glCreateProgramObjectARB": _emscripten_glCreateProgramObjectARB, "_emscripten_glCreateShader": _emscripten_glCreateShader, "_emscripten_glCreateShaderObjectARB": _emscripten_glCreateShaderObjectARB, "_emscripten_glCullFace": _emscripten_glCullFace, "_emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers, "_emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers, "_emscripten_glDeleteLists": _emscripten_glDeleteLists, "_emscripten_glDeleteObjectARB": _emscripten_glDeleteObjectARB, "_emscripten_glDeleteProgram": _emscripten_glDeleteProgram, "_emscripten_glDeleteProgramsARB": _emscripten_glDeleteProgramsARB, "_emscripten_glDeleteQueries": _emscripten_glDeleteQueries, "_emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers, "_emscripten_glDeleteShader": _emscripten_glDeleteShader, "_emscripten_glDeleteTextures": _emscripten_glDeleteTextures, "_emscripten_glDeleteVertexArrays": _emscripten_glDeleteVertexArrays, "_emscripten_glDepthFunc": _emscripten_glDepthFunc, "_emscripten_glDepthMask": _emscripten_glDepthMask, "_emscripten_glDepthRange": _emscripten_glDepthRange, "_emscripten_glDepthRangef": _emscripten_glDepthRangef, "_emscripten_glDetachObjectARB": _emscripten_glDetachObjectARB, "_emscripten_glDetachShader": _emscripten_glDetachShader, "_emscripten_glDisable": _emscripten_glDisable, "_emscripten_glDisableClientState": _emscripten_glDisableClientState, "_emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray, "_emscripten_glDisablei": _emscripten_glDisablei, "_emscripten_glDrawArrays": _emscripten_glDrawArrays, "_emscripten_glDrawArraysInstanced": _emscripten_glDrawArraysInstanced, "_emscripten_glDrawBuffer": _emscripten_glDrawBuffer, "_emscripten_glDrawBuffers": _emscripten_glDrawBuffers, "_emscripten_glDrawElements": _emscripten_glDrawElements, "_emscripten_glDrawElementsInstanced": _emscripten_glDrawElementsInstanced, "_emscripten_glDrawPixels": _emscripten_glDrawPixels, "_emscripten_glDrawRangeElements": _emscripten_glDrawRangeElements, "_emscripten_glEdgeFlag": _emscripten_glEdgeFlag, "_emscripten_glEdgeFlagPointer": _emscripten_glEdgeFlagPointer, "_emscripten_glEdgeFlagv": _emscripten_glEdgeFlagv, "_emscripten_glEnable": _emscripten_glEnable, "_emscripten_glEnableClientState": _emscripten_glEnableClientState, "_emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray, "_emscripten_glEnablei": _emscripten_glEnablei, "_emscripten_glEnd": _emscripten_glEnd, "_emscripten_glEndConditionalRender": _emscripten_glEndConditionalRender, "_emscripten_glEndList": _emscripten_glEndList, "_emscripten_glEndQuery": _emscripten_glEndQuery, "_emscripten_glEndTransformFeedback": _emscripten_glEndTransformFeedback, "_emscripten_glEvalCoord1d": _emscripten_glEvalCoord1d, "_emscripten_glEvalCoord1dv": _emscripten_glEvalCoord1dv, "_emscripten_glEvalCoord1f": _emscripten_glEvalCoord1f, "_emscripten_glEvalCoord1fv": _emscripten_glEvalCoord1fv, "_emscripten_glEvalCoord2d": _emscripten_glEvalCoord2d, "_emscripten_glEvalCoord2dv": _emscripten_glEvalCoord2dv, "_emscripten_glEvalCoord2f": _emscripten_glEvalCoord2f, "_emscripten_glEvalCoord2fv": _emscripten_glEvalCoord2fv, "_emscripten_glEvalMesh1": _emscripten_glEvalMesh1, "_emscripten_glEvalMesh2": _emscripten_glEvalMesh2, "_emscripten_glEvalPoint1": _emscripten_glEvalPoint1, "_emscripten_glEvalPoint2": _emscripten_glEvalPoint2, "_emscripten_glFeedbackBuffer": _emscripten_glFeedbackBuffer, "_emscripten_glFinish": _emscripten_glFinish, "_emscripten_glFlush": _emscripten_glFlush, "_emscripten_glFogCoordPointer": _emscripten_glFogCoordPointer, "_emscripten_glFogCoordd": _emscripten_glFogCoordd, "_emscripten_glFogCoorddv": _emscripten_glFogCoorddv, "_emscripten_glFogCoordf": _emscripten_glFogCoordf, "_emscripten_glFogCoordfv": _emscripten_glFogCoordfv, "_emscripten_glFogf": _emscripten_glFogf, "_emscripten_glFogfv": _emscripten_glFogfv, "_emscripten_glFogi": _emscripten_glFogi, "_emscripten_glFogiv": _emscripten_glFogiv, "_emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer, "_emscripten_glFramebufferTexture1D": _emscripten_glFramebufferTexture1D, "_emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D, "_emscripten_glFramebufferTexture3D": _emscripten_glFramebufferTexture3D, "_emscripten_glFramebufferTextureLayer": _emscripten_glFramebufferTextureLayer, "_emscripten_glFrontFace": _emscripten_glFrontFace, "_emscripten_glFrustum": _emscripten_glFrustum, "_emscripten_glGenBuffers": _emscripten_glGenBuffers, "_emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers, "_emscripten_glGenLists": _emscripten_glGenLists, "_emscripten_glGenProgramsARB": _emscripten_glGenProgramsARB, "_emscripten_glGenQueries": _emscripten_glGenQueries, "_emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers, "_emscripten_glGenTextures": _emscripten_glGenTextures, "_emscripten_glGenVertexArrays": _emscripten_glGenVertexArrays, "_emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap, "_emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib, "_emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform, "_emscripten_glGetActiveUniformBlockName": _emscripten_glGetActiveUniformBlockName, "_emscripten_glGetActiveUniformBlockiv": _emscripten_glGetActiveUniformBlockiv, "_emscripten_glGetActiveUniformName": _emscripten_glGetActiveUniformName, "_emscripten_glGetActiveUniformsiv": _emscripten_glGetActiveUniformsiv, "_emscripten_glGetAttachedObjectsARB": _emscripten_glGetAttachedObjectsARB, "_emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders, "_emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation, "_emscripten_glGetBooleani_v": _emscripten_glGetBooleani_v, "_emscripten_glGetBooleanv": _emscripten_glGetBooleanv, "_emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv, "_emscripten_glGetBufferPointerv": _emscripten_glGetBufferPointerv, "_emscripten_glGetBufferSubData": _emscripten_glGetBufferSubData, "_emscripten_glGetClipPlane": _emscripten_glGetClipPlane, "_emscripten_glGetColorTable": _emscripten_glGetColorTable, "_emscripten_glGetColorTableParameterfv": _emscripten_glGetColorTableParameterfv, "_emscripten_glGetColorTableParameteriv": _emscripten_glGetColorTableParameteriv, "_emscripten_glGetCompressedTexImage": _emscripten_glGetCompressedTexImage, "_emscripten_glGetConvolutionFilter": _emscripten_glGetConvolutionFilter, "_emscripten_glGetConvolutionParameterfv": _emscripten_glGetConvolutionParameterfv, "_emscripten_glGetConvolutionParameteriv": _emscripten_glGetConvolutionParameteriv, "_emscripten_glGetDoublev": _emscripten_glGetDoublev, "_emscripten_glGetError": _emscripten_glGetError, "_emscripten_glGetFloatv": _emscripten_glGetFloatv, "_emscripten_glGetFragDataLocation": _emscripten_glGetFragDataLocation, "_emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv, "_emscripten_glGetHandleARB": _emscripten_glGetHandleARB, "_emscripten_glGetHistogram": _emscripten_glGetHistogram, "_emscripten_glGetHistogramParameterfv": _emscripten_glGetHistogramParameterfv, "_emscripten_glGetHistogramParameteriv": _emscripten_glGetHistogramParameteriv, "_emscripten_glGetInfoLogARB": _emscripten_glGetInfoLogARB, "_emscripten_glGetIntegeri_v": _emscripten_glGetIntegeri_v, "_emscripten_glGetIntegerv": _emscripten_glGetIntegerv, "_emscripten_glGetLightfv": _emscripten_glGetLightfv, "_emscripten_glGetLightiv": _emscripten_glGetLightiv, "_emscripten_glGetMapdv": _emscripten_glGetMapdv, "_emscripten_glGetMapfv": _emscripten_glGetMapfv, "_emscripten_glGetMapiv": _emscripten_glGetMapiv, "_emscripten_glGetMaterialfv": _emscripten_glGetMaterialfv, "_emscripten_glGetMaterialiv": _emscripten_glGetMaterialiv, "_emscripten_glGetMinmax": _emscripten_glGetMinmax, "_emscripten_glGetMinmaxParameterfv": _emscripten_glGetMinmaxParameterfv, "_emscripten_glGetMinmaxParameteriv": _emscripten_glGetMinmaxParameteriv, "_emscripten_glGetObjectParameterfvARB": _emscripten_glGetObjectParameterfvARB, "_emscripten_glGetObjectParameterivARB": _emscripten_glGetObjectParameterivARB, "_emscripten_glGetPixelMapfv": _emscripten_glGetPixelMapfv, "_emscripten_glGetPixelMapuiv": _emscripten_glGetPixelMapuiv, "_emscripten_glGetPixelMapusv": _emscripten_glGetPixelMapusv, "_emscripten_glGetPointerv": _emscripten_glGetPointerv, "_emscripten_glGetPolygonStipple": _emscripten_glGetPolygonStipple, "_emscripten_glGetProgramEnvParameterdvARB": _emscripten_glGetProgramEnvParameterdvARB, "_emscripten_glGetProgramEnvParameterfvARB": _emscripten_glGetProgramEnvParameterfvARB, "_emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog, "_emscripten_glGetProgramLocalParameterdvARB": _emscripten_glGetProgramLocalParameterdvARB, "_emscripten_glGetProgramLocalParameterfvARB": _emscripten_glGetProgramLocalParameterfvARB, "_emscripten_glGetProgramStringARB": _emscripten_glGetProgramStringARB, "_emscripten_glGetProgramiv": _emscripten_glGetProgramiv, "_emscripten_glGetQueryObjectiv": _emscripten_glGetQueryObjectiv, "_emscripten_glGetQueryObjectuiv": _emscripten_glGetQueryObjectuiv, "_emscripten_glGetQueryiv": _emscripten_glGetQueryiv, "_emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv, "_emscripten_glGetSeparableFilter": _emscripten_glGetSeparableFilter, "_emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog, "_emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat, "_emscripten_glGetShaderSource": _emscripten_glGetShaderSource, "_emscripten_glGetShaderiv": _emscripten_glGetShaderiv, "_emscripten_glGetString": _emscripten_glGetString, "_emscripten_glGetStringi": _emscripten_glGetStringi, "_emscripten_glGetTexEnvfv": _emscripten_glGetTexEnvfv, "_emscripten_glGetTexEnviv": _emscripten_glGetTexEnviv, "_emscripten_glGetTexGendv": _emscripten_glGetTexGendv, "_emscripten_glGetTexGenfv": _emscripten_glGetTexGenfv, "_emscripten_glGetTexGeniv": _emscripten_glGetTexGeniv, "_emscripten_glGetTexImage": _emscripten_glGetTexImage, "_emscripten_glGetTexLevelParameterfv": _emscripten_glGetTexLevelParameterfv, "_emscripten_glGetTexLevelParameteriv": _emscripten_glGetTexLevelParameteriv, "_emscripten_glGetTexParameterIiv": _emscripten_glGetTexParameterIiv, "_emscripten_glGetTexParameterIuiv": _emscripten_glGetTexParameterIuiv, "_emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv, "_emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv, "_emscripten_glGetTransformFeedbackVarying": _emscripten_glGetTransformFeedbackVarying, "_emscripten_glGetUniformBlockIndex": _emscripten_glGetUniformBlockIndex, "_emscripten_glGetUniformIndices": _emscripten_glGetUniformIndices, "_emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation, "_emscripten_glGetUniformfv": _emscripten_glGetUniformfv, "_emscripten_glGetUniformiv": _emscripten_glGetUniformiv, "_emscripten_glGetUniformuiv": _emscripten_glGetUniformuiv, "_emscripten_glGetVertexAttribIiv": _emscripten_glGetVertexAttribIiv, "_emscripten_glGetVertexAttribIuiv": _emscripten_glGetVertexAttribIuiv, "_emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv, "_emscripten_glGetVertexAttribdv": _emscripten_glGetVertexAttribdv, "_emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv, "_emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv, "_emscripten_glHint": _emscripten_glHint, "_emscripten_glHistogram": _emscripten_glHistogram, "_emscripten_glIndexMask": _emscripten_glIndexMask, "_emscripten_glIndexPointer": _emscripten_glIndexPointer, "_emscripten_glIndexd": _emscripten_glIndexd, "_emscripten_glIndexdv": _emscripten_glIndexdv, "_emscripten_glIndexf": _emscripten_glIndexf, "_emscripten_glIndexfv": _emscripten_glIndexfv, "_emscripten_glIndexi": _emscripten_glIndexi, "_emscripten_glIndexiv": _emscripten_glIndexiv, "_emscripten_glIndexs": _emscripten_glIndexs, "_emscripten_glIndexsv": _emscripten_glIndexsv, "_emscripten_glIndexub": _emscripten_glIndexub, "_emscripten_glIndexubv": _emscripten_glIndexubv, "_emscripten_glInitNames": _emscripten_glInitNames, "_emscripten_glInterleavedArrays": _emscripten_glInterleavedArrays, "_emscripten_glIsBuffer": _emscripten_glIsBuffer, "_emscripten_glIsEnabled": _emscripten_glIsEnabled, "_emscripten_glIsEnabledi": _emscripten_glIsEnabledi, "_emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer, "_emscripten_glIsList": _emscripten_glIsList, "_emscripten_glIsProgram": _emscripten_glIsProgram, "_emscripten_glIsQuery": _emscripten_glIsQuery, "_emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer, "_emscripten_glIsShader": _emscripten_glIsShader, "_emscripten_glIsTexture": _emscripten_glIsTexture, "_emscripten_glIsVertexArray": _emscripten_glIsVertexArray, "_emscripten_glLightModelf": _emscripten_glLightModelf, "_emscripten_glLightModelfv": _emscripten_glLightModelfv, "_emscripten_glLightModeli": _emscripten_glLightModeli, "_emscripten_glLightModeliv": _emscripten_glLightModeliv, "_emscripten_glLightf": _emscripten_glLightf, "_emscripten_glLightfv": _emscripten_glLightfv, "_emscripten_glLighti": _emscripten_glLighti, "_emscripten_glLightiv": _emscripten_glLightiv, "_emscripten_glLineStipple": _emscripten_glLineStipple, "_emscripten_glLineWidth": _emscripten_glLineWidth, "_emscripten_glLinkProgram": _emscripten_glLinkProgram, "_emscripten_glListBase": _emscripten_glListBase, "_emscripten_glLoadIdentity": _emscripten_glLoadIdentity, "_emscripten_glLoadMatrixd": _emscripten_glLoadMatrixd, "_emscripten_glLoadMatrixf": _emscripten_glLoadMatrixf, "_emscripten_glLoadName": _emscripten_glLoadName, "_emscripten_glLoadTransposeMatrixd": _emscripten_glLoadTransposeMatrixd, "_emscripten_glLoadTransposeMatrixdARB": _emscripten_glLoadTransposeMatrixdARB, "_emscripten_glLoadTransposeMatrixf": _emscripten_glLoadTransposeMatrixf, "_emscripten_glLoadTransposeMatrixfARB": _emscripten_glLoadTransposeMatrixfARB, "_emscripten_glLogicOp": _emscripten_glLogicOp, "_emscripten_glMap1d": _emscripten_glMap1d, "_emscripten_glMap1f": _emscripten_glMap1f, "_emscripten_glMap2d": _emscripten_glMap2d, "_emscripten_glMap2f": _emscripten_glMap2f, "_emscripten_glMapBuffer": _emscripten_glMapBuffer, "_emscripten_glMapGrid1d": _emscripten_glMapGrid1d, "_emscripten_glMapGrid1f": _emscripten_glMapGrid1f, "_emscripten_glMapGrid2d": _emscripten_glMapGrid2d, "_emscripten_glMapGrid2f": _emscripten_glMapGrid2f, "_emscripten_glMaterialf": _emscripten_glMaterialf, "_emscripten_glMaterialfv": _emscripten_glMaterialfv, "_emscripten_glMateriali": _emscripten_glMateriali, "_emscripten_glMaterialiv": _emscripten_glMaterialiv, "_emscripten_glMatrixMode": _emscripten_glMatrixMode, "_emscripten_glMinmax": _emscripten_glMinmax, "_emscripten_glMultMatrixd": _emscripten_glMultMatrixd, "_emscripten_glMultMatrixf": _emscripten_glMultMatrixf, "_emscripten_glMultTransposeMatrixd": _emscripten_glMultTransposeMatrixd, "_emscripten_glMultTransposeMatrixdARB": _emscripten_glMultTransposeMatrixdARB, "_emscripten_glMultTransposeMatrixf": _emscripten_glMultTransposeMatrixf, "_emscripten_glMultTransposeMatrixfARB": _emscripten_glMultTransposeMatrixfARB, "_emscripten_glMultiDrawArrays": _emscripten_glMultiDrawArrays, "_emscripten_glMultiDrawElements": _emscripten_glMultiDrawElements, "_emscripten_glMultiTexCoord1d": _emscripten_glMultiTexCoord1d, "_emscripten_glMultiTexCoord1dv": _emscripten_glMultiTexCoord1dv, "_emscripten_glMultiTexCoord1f": _emscripten_glMultiTexCoord1f, "_emscripten_glMultiTexCoord1fv": _emscripten_glMultiTexCoord1fv, "_emscripten_glMultiTexCoord1i": _emscripten_glMultiTexCoord1i, "_emscripten_glMultiTexCoord1iv": _emscripten_glMultiTexCoord1iv, "_emscripten_glMultiTexCoord1s": _emscripten_glMultiTexCoord1s, "_emscripten_glMultiTexCoord1sv": _emscripten_glMultiTexCoord1sv, "_emscripten_glMultiTexCoord2d": _emscripten_glMultiTexCoord2d, "_emscripten_glMultiTexCoord2dv": _emscripten_glMultiTexCoord2dv, "_emscripten_glMultiTexCoord2f": _emscripten_glMultiTexCoord2f, "_emscripten_glMultiTexCoord2fv": _emscripten_glMultiTexCoord2fv, "_emscripten_glMultiTexCoord2i": _emscripten_glMultiTexCoord2i, "_emscripten_glMultiTexCoord2iv": _emscripten_glMultiTexCoord2iv, "_emscripten_glMultiTexCoord2s": _emscripten_glMultiTexCoord2s, "_emscripten_glMultiTexCoord2sv": _emscripten_glMultiTexCoord2sv, "_emscripten_glMultiTexCoord3d": _emscripten_glMultiTexCoord3d, "_emscripten_glMultiTexCoord3dv": _emscripten_glMultiTexCoord3dv, "_emscripten_glMultiTexCoord3f": _emscripten_glMultiTexCoord3f, "_emscripten_glMultiTexCoord3fv": _emscripten_glMultiTexCoord3fv, "_emscripten_glMultiTexCoord3i": _emscripten_glMultiTexCoord3i, "_emscripten_glMultiTexCoord3iv": _emscripten_glMultiTexCoord3iv, "_emscripten_glMultiTexCoord3s": _emscripten_glMultiTexCoord3s, "_emscripten_glMultiTexCoord3sv": _emscripten_glMultiTexCoord3sv, "_emscripten_glMultiTexCoord4d": _emscripten_glMultiTexCoord4d, "_emscripten_glMultiTexCoord4dv": _emscripten_glMultiTexCoord4dv, "_emscripten_glMultiTexCoord4f": _emscripten_glMultiTexCoord4f, "_emscripten_glMultiTexCoord4fv": _emscripten_glMultiTexCoord4fv, "_emscripten_glMultiTexCoord4i": _emscripten_glMultiTexCoord4i, "_emscripten_glMultiTexCoord4iv": _emscripten_glMultiTexCoord4iv, "_emscripten_glMultiTexCoord4s": _emscripten_glMultiTexCoord4s, "_emscripten_glMultiTexCoord4sv": _emscripten_glMultiTexCoord4sv, "_emscripten_glNewList": _emscripten_glNewList, "_emscripten_glNormal3b": _emscripten_glNormal3b, "_emscripten_glNormal3bv": _emscripten_glNormal3bv, "_emscripten_glNormal3d": _emscripten_glNormal3d, "_emscripten_glNormal3dv": _emscripten_glNormal3dv, "_emscripten_glNormal3f": _emscripten_glNormal3f, "_emscripten_glNormal3fv": _emscripten_glNormal3fv, "_emscripten_glNormal3i": _emscripten_glNormal3i, "_emscripten_glNormal3iv": _emscripten_glNormal3iv, "_emscripten_glNormal3s": _emscripten_glNormal3s, "_emscripten_glNormal3sv": _emscripten_glNormal3sv, "_emscripten_glNormalPointer": _emscripten_glNormalPointer, "_emscripten_glOrtho": _emscripten_glOrtho, "_emscripten_glPassThrough": _emscripten_glPassThrough, "_emscripten_glPixelMapfv": _emscripten_glPixelMapfv, "_emscripten_glPixelMapuiv": _emscripten_glPixelMapuiv, "_emscripten_glPixelMapusv": _emscripten_glPixelMapusv, "_emscripten_glPixelStoref": _emscripten_glPixelStoref, "_emscripten_glPixelStorei": _emscripten_glPixelStorei, "_emscripten_glPixelTransferf": _emscripten_glPixelTransferf, "_emscripten_glPixelTransferi": _emscripten_glPixelTransferi, "_emscripten_glPixelZoom": _emscripten_glPixelZoom, "_emscripten_glPointParameterf": _emscripten_glPointParameterf, "_emscripten_glPointParameterfv": _emscripten_glPointParameterfv, "_emscripten_glPointParameteri": _emscripten_glPointParameteri, "_emscripten_glPointParameteriv": _emscripten_glPointParameteriv, "_emscripten_glPointSize": _emscripten_glPointSize, "_emscripten_glPolygonMode": _emscripten_glPolygonMode, "_emscripten_glPolygonOffset": _emscripten_glPolygonOffset, "_emscripten_glPolygonStipple": _emscripten_glPolygonStipple, "_emscripten_glPopAttrib": _emscripten_glPopAttrib, "_emscripten_glPopClientAttrib": _emscripten_glPopClientAttrib, "_emscripten_glPopMatrix": _emscripten_glPopMatrix, "_emscripten_glPopName": _emscripten_glPopName, "_emscripten_glPrimitiveRestartIndex": _emscripten_glPrimitiveRestartIndex, "_emscripten_glPrioritizeTextures": _emscripten_glPrioritizeTextures, "_emscripten_glProgramEnvParameter4dARB": _emscripten_glProgramEnvParameter4dARB, "_emscripten_glProgramEnvParameter4dvARB": _emscripten_glProgramEnvParameter4dvARB, "_emscripten_glProgramEnvParameter4fARB": _emscripten_glProgramEnvParameter4fARB, "_emscripten_glProgramEnvParameter4fvARB": _emscripten_glProgramEnvParameter4fvARB, "_emscripten_glProgramLocalParameter4dARB": _emscripten_glProgramLocalParameter4dARB, "_emscripten_glProgramLocalParameter4dvARB": _emscripten_glProgramLocalParameter4dvARB, "_emscripten_glProgramLocalParameter4fARB": _emscripten_glProgramLocalParameter4fARB, "_emscripten_glProgramLocalParameter4fvARB": _emscripten_glProgramLocalParameter4fvARB, "_emscripten_glProgramStringARB": _emscripten_glProgramStringARB, "_emscripten_glPushAttrib": _emscripten_glPushAttrib, "_emscripten_glPushClientAttrib": _emscripten_glPushClientAttrib, "_emscripten_glPushMatrix": _emscripten_glPushMatrix, "_emscripten_glPushName": _emscripten_glPushName, "_emscripten_glRasterPos2d": _emscripten_glRasterPos2d, "_emscripten_glRasterPos2dv": _emscripten_glRasterPos2dv, "_emscripten_glRasterPos2f": _emscripten_glRasterPos2f, "_emscripten_glRasterPos2fv": _emscripten_glRasterPos2fv, "_emscripten_glRasterPos2i": _emscripten_glRasterPos2i, "_emscripten_glRasterPos2iv": _emscripten_glRasterPos2iv, "_emscripten_glRasterPos2s": _emscripten_glRasterPos2s, "_emscripten_glRasterPos2sv": _emscripten_glRasterPos2sv, "_emscripten_glRasterPos3d": _emscripten_glRasterPos3d, "_emscripten_glRasterPos3dv": _emscripten_glRasterPos3dv, "_emscripten_glRasterPos3f": _emscripten_glRasterPos3f, "_emscripten_glRasterPos3fv": _emscripten_glRasterPos3fv, "_emscripten_glRasterPos3i": _emscripten_glRasterPos3i, "_emscripten_glRasterPos3iv": _emscripten_glRasterPos3iv, "_emscripten_glRasterPos3s": _emscripten_glRasterPos3s, "_emscripten_glRasterPos3sv": _emscripten_glRasterPos3sv, "_emscripten_glRasterPos4d": _emscripten_glRasterPos4d, "_emscripten_glRasterPos4dv": _emscripten_glRasterPos4dv, "_emscripten_glRasterPos4f": _emscripten_glRasterPos4f, "_emscripten_glRasterPos4fv": _emscripten_glRasterPos4fv, "_emscripten_glRasterPos4i": _emscripten_glRasterPos4i, "_emscripten_glRasterPos4iv": _emscripten_glRasterPos4iv, "_emscripten_glRasterPos4s": _emscripten_glRasterPos4s, "_emscripten_glRasterPos4sv": _emscripten_glRasterPos4sv, "_emscripten_glReadBuffer": _emscripten_glReadBuffer, "_emscripten_glReadPixels": _emscripten_glReadPixels, "_emscripten_glRectd": _emscripten_glRectd, "_emscripten_glRectdv": _emscripten_glRectdv, "_emscripten_glRectf": _emscripten_glRectf, "_emscripten_glRectfv": _emscripten_glRectfv, "_emscripten_glRecti": _emscripten_glRecti, "_emscripten_glRectiv": _emscripten_glRectiv, "_emscripten_glRects": _emscripten_glRects, "_emscripten_glRectsv": _emscripten_glRectsv, "_emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler, "_emscripten_glRenderMode": _emscripten_glRenderMode, "_emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage, "_emscripten_glRenderbufferStorageMultisample": _emscripten_glRenderbufferStorageMultisample, "_emscripten_glResetHistogram": _emscripten_glResetHistogram, "_emscripten_glResetMinmax": _emscripten_glResetMinmax, "_emscripten_glRotated": _emscripten_glRotated, "_emscripten_glRotatef": _emscripten_glRotatef, "_emscripten_glSampleCoverage": _emscripten_glSampleCoverage, "_emscripten_glScaled": _emscripten_glScaled, "_emscripten_glScalef": _emscripten_glScalef, "_emscripten_glScissor": _emscripten_glScissor, "_emscripten_glSecondaryColor3b": _emscripten_glSecondaryColor3b, "_emscripten_glSecondaryColor3bv": _emscripten_glSecondaryColor3bv, "_emscripten_glSecondaryColor3d": _emscripten_glSecondaryColor3d, "_emscripten_glSecondaryColor3dv": _emscripten_glSecondaryColor3dv, "_emscripten_glSecondaryColor3f": _emscripten_glSecondaryColor3f, "_emscripten_glSecondaryColor3fv": _emscripten_glSecondaryColor3fv, "_emscripten_glSecondaryColor3i": _emscripten_glSecondaryColor3i, "_emscripten_glSecondaryColor3iv": _emscripten_glSecondaryColor3iv, "_emscripten_glSecondaryColor3s": _emscripten_glSecondaryColor3s, "_emscripten_glSecondaryColor3sv": _emscripten_glSecondaryColor3sv, "_emscripten_glSecondaryColor3ub": _emscripten_glSecondaryColor3ub, "_emscripten_glSecondaryColor3ubv": _emscripten_glSecondaryColor3ubv, "_emscripten_glSecondaryColor3ui": _emscripten_glSecondaryColor3ui, "_emscripten_glSecondaryColor3uiv": _emscripten_glSecondaryColor3uiv, "_emscripten_glSecondaryColor3us": _emscripten_glSecondaryColor3us, "_emscripten_glSecondaryColor3usv": _emscripten_glSecondaryColor3usv, "_emscripten_glSecondaryColorPointer": _emscripten_glSecondaryColorPointer, "_emscripten_glSelectBuffer": _emscripten_glSelectBuffer, "_emscripten_glSeparableFilter2D": _emscripten_glSeparableFilter2D, "_emscripten_glShadeModel": _emscripten_glShadeModel, "_emscripten_glShaderBinary": _emscripten_glShaderBinary, "_emscripten_glShaderSource": _emscripten_glShaderSource, "_emscripten_glStencilFunc": _emscripten_glStencilFunc, "_emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate, "_emscripten_glStencilMask": _emscripten_glStencilMask, "_emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate, "_emscripten_glStencilOp": _emscripten_glStencilOp, "_emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate, "_emscripten_glTexBuffer": _emscripten_glTexBuffer, "_emscripten_glTexCoord1d": _emscripten_glTexCoord1d, "_emscripten_glTexCoord1dv": _emscripten_glTexCoord1dv, "_emscripten_glTexCoord1f": _emscripten_glTexCoord1f, "_emscripten_glTexCoord1fv": _emscripten_glTexCoord1fv, "_emscripten_glTexCoord1i": _emscripten_glTexCoord1i, "_emscripten_glTexCoord1iv": _emscripten_glTexCoord1iv, "_emscripten_glTexCoord1s": _emscripten_glTexCoord1s, "_emscripten_glTexCoord1sv": _emscripten_glTexCoord1sv, "_emscripten_glTexCoord2d": _emscripten_glTexCoord2d, "_emscripten_glTexCoord2dv": _emscripten_glTexCoord2dv, "_emscripten_glTexCoord2f": _emscripten_glTexCoord2f, "_emscripten_glTexCoord2fv": _emscripten_glTexCoord2fv, "_emscripten_glTexCoord2i": _emscripten_glTexCoord2i, "_emscripten_glTexCoord2iv": _emscripten_glTexCoord2iv, "_emscripten_glTexCoord2s": _emscripten_glTexCoord2s, "_emscripten_glTexCoord2sv": _emscripten_glTexCoord2sv, "_emscripten_glTexCoord3d": _emscripten_glTexCoord3d, "_emscripten_glTexCoord3dv": _emscripten_glTexCoord3dv, "_emscripten_glTexCoord3f": _emscripten_glTexCoord3f, "_emscripten_glTexCoord3fv": _emscripten_glTexCoord3fv, "_emscripten_glTexCoord3i": _emscripten_glTexCoord3i, "_emscripten_glTexCoord3iv": _emscripten_glTexCoord3iv, "_emscripten_glTexCoord3s": _emscripten_glTexCoord3s, "_emscripten_glTexCoord3sv": _emscripten_glTexCoord3sv, "_emscripten_glTexCoord4d": _emscripten_glTexCoord4d, "_emscripten_glTexCoord4dv": _emscripten_glTexCoord4dv, "_emscripten_glTexCoord4f": _emscripten_glTexCoord4f, "_emscripten_glTexCoord4fv": _emscripten_glTexCoord4fv, "_emscripten_glTexCoord4i": _emscripten_glTexCoord4i, "_emscripten_glTexCoord4iv": _emscripten_glTexCoord4iv, "_emscripten_glTexCoord4s": _emscripten_glTexCoord4s, "_emscripten_glTexCoord4sv": _emscripten_glTexCoord4sv, "_emscripten_glTexCoordPointer": _emscripten_glTexCoordPointer, "_emscripten_glTexEnvf": _emscripten_glTexEnvf, "_emscripten_glTexEnvfv": _emscripten_glTexEnvfv, "_emscripten_glTexEnvi": _emscripten_glTexEnvi, "_emscripten_glTexEnviv": _emscripten_glTexEnviv, "_emscripten_glTexGend": _emscripten_glTexGend, "_emscripten_glTexGendv": _emscripten_glTexGendv, "_emscripten_glTexGenf": _emscripten_glTexGenf, "_emscripten_glTexGenfv": _emscripten_glTexGenfv, "_emscripten_glTexGeni": _emscripten_glTexGeni, "_emscripten_glTexGeniv": _emscripten_glTexGeniv, "_emscripten_glTexImage1D": _emscripten_glTexImage1D, "_emscripten_glTexImage2D": _emscripten_glTexImage2D, "_emscripten_glTexImage3D": _emscripten_glTexImage3D, "_emscripten_glTexParameterIiv": _emscripten_glTexParameterIiv, "_emscripten_glTexParameterIuiv": _emscripten_glTexParameterIuiv, "_emscripten_glTexParameterf": _emscripten_glTexParameterf, "_emscripten_glTexParameterfv": _emscripten_glTexParameterfv, "_emscripten_glTexParameteri": _emscripten_glTexParameteri, "_emscripten_glTexParameteriv": _emscripten_glTexParameteriv, "_emscripten_glTexStorage2D": _emscripten_glTexStorage2D, "_emscripten_glTexStorage3D": _emscripten_glTexStorage3D, "_emscripten_glTexSubImage1D": _emscripten_glTexSubImage1D, "_emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D, "_emscripten_glTexSubImage3D": _emscripten_glTexSubImage3D, "_emscripten_glTransformFeedbackVaryings": _emscripten_glTransformFeedbackVaryings, "_emscripten_glTranslated": _emscripten_glTranslated, "_emscripten_glTranslatef": _emscripten_glTranslatef, "_emscripten_glUniform1f": _emscripten_glUniform1f, "_emscripten_glUniform1fv": _emscripten_glUniform1fv, "_emscripten_glUniform1i": _emscripten_glUniform1i, "_emscripten_glUniform1iv": _emscripten_glUniform1iv, "_emscripten_glUniform1ui": _emscripten_glUniform1ui, "_emscripten_glUniform1uiv": _emscripten_glUniform1uiv, "_emscripten_glUniform2f": _emscripten_glUniform2f, "_emscripten_glUniform2fv": _emscripten_glUniform2fv, "_emscripten_glUniform2i": _emscripten_glUniform2i, "_emscripten_glUniform2iv": _emscripten_glUniform2iv, "_emscripten_glUniform2ui": _emscripten_glUniform2ui, "_emscripten_glUniform2uiv": _emscripten_glUniform2uiv, "_emscripten_glUniform3f": _emscripten_glUniform3f, "_emscripten_glUniform3fv": _emscripten_glUniform3fv, "_emscripten_glUniform3i": _emscripten_glUniform3i, "_emscripten_glUniform3iv": _emscripten_glUniform3iv, "_emscripten_glUniform3ui": _emscripten_glUniform3ui, "_emscripten_glUniform3uiv": _emscripten_glUniform3uiv, "_emscripten_glUniform4f": _emscripten_glUniform4f, "_emscripten_glUniform4fv": _emscripten_glUniform4fv, "_emscripten_glUniform4i": _emscripten_glUniform4i, "_emscripten_glUniform4iv": _emscripten_glUniform4iv, "_emscripten_glUniform4ui": _emscripten_glUniform4ui, "_emscripten_glUniform4uiv": _emscripten_glUniform4uiv, "_emscripten_glUniformBlockBinding": _emscripten_glUniformBlockBinding, "_emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv, "_emscripten_glUniformMatrix2x3fv": _emscripten_glUniformMatrix2x3fv, "_emscripten_glUniformMatrix2x4fv": _emscripten_glUniformMatrix2x4fv, "_emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv, "_emscripten_glUniformMatrix3x2fv": _emscripten_glUniformMatrix3x2fv, "_emscripten_glUniformMatrix3x4fv": _emscripten_glUniformMatrix3x4fv, "_emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv, "_emscripten_glUniformMatrix4x2fv": _emscripten_glUniformMatrix4x2fv, "_emscripten_glUniformMatrix4x3fv": _emscripten_glUniformMatrix4x3fv, "_emscripten_glUnmapBuffer": _emscripten_glUnmapBuffer, "_emscripten_glUseProgram": _emscripten_glUseProgram, "_emscripten_glUseProgramObjectARB": _emscripten_glUseProgramObjectARB, "_emscripten_glValidateProgram": _emscripten_glValidateProgram, "_emscripten_glVertex2d": _emscripten_glVertex2d, "_emscripten_glVertex2dv": _emscripten_glVertex2dv, "_emscripten_glVertex2f": _emscripten_glVertex2f, "_emscripten_glVertex2fv": _emscripten_glVertex2fv, "_emscripten_glVertex2i": _emscripten_glVertex2i, "_emscripten_glVertex2iv": _emscripten_glVertex2iv, "_emscripten_glVertex2s": _emscripten_glVertex2s, "_emscripten_glVertex2sv": _emscripten_glVertex2sv, "_emscripten_glVertex3d": _emscripten_glVertex3d, "_emscripten_glVertex3dv": _emscripten_glVertex3dv, "_emscripten_glVertex3f": _emscripten_glVertex3f, "_emscripten_glVertex3fv": _emscripten_glVertex3fv, "_emscripten_glVertex3i": _emscripten_glVertex3i, "_emscripten_glVertex3iv": _emscripten_glVertex3iv, "_emscripten_glVertex3s": _emscripten_glVertex3s, "_emscripten_glVertex3sv": _emscripten_glVertex3sv, "_emscripten_glVertex4d": _emscripten_glVertex4d, "_emscripten_glVertex4dv": _emscripten_glVertex4dv, "_emscripten_glVertex4f": _emscripten_glVertex4f, "_emscripten_glVertex4fv": _emscripten_glVertex4fv, "_emscripten_glVertex4i": _emscripten_glVertex4i, "_emscripten_glVertex4iv": _emscripten_glVertex4iv, "_emscripten_glVertex4s": _emscripten_glVertex4s, "_emscripten_glVertex4sv": _emscripten_glVertex4sv, "_emscripten_glVertexAttrib1d": _emscripten_glVertexAttrib1d, "_emscripten_glVertexAttrib1dv": _emscripten_glVertexAttrib1dv, "_emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f, "_emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv, "_emscripten_glVertexAttrib1s": _emscripten_glVertexAttrib1s, "_emscripten_glVertexAttrib1sv": _emscripten_glVertexAttrib1sv, "_emscripten_glVertexAttrib2d": _emscripten_glVertexAttrib2d, "_emscripten_glVertexAttrib2dv": _emscripten_glVertexAttrib2dv, "_emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f, "_emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv, "_emscripten_glVertexAttrib2s": _emscripten_glVertexAttrib2s, "_emscripten_glVertexAttrib2sv": _emscripten_glVertexAttrib2sv, "_emscripten_glVertexAttrib3d": _emscripten_glVertexAttrib3d, "_emscripten_glVertexAttrib3dv": _emscripten_glVertexAttrib3dv, "_emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f, "_emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv, "_emscripten_glVertexAttrib3s": _emscripten_glVertexAttrib3s, "_emscripten_glVertexAttrib3sv": _emscripten_glVertexAttrib3sv, "_emscripten_glVertexAttrib4Nbv": _emscripten_glVertexAttrib4Nbv, "_emscripten_glVertexAttrib4Niv": _emscripten_glVertexAttrib4Niv, "_emscripten_glVertexAttrib4Nsv": _emscripten_glVertexAttrib4Nsv, "_emscripten_glVertexAttrib4Nub": _emscripten_glVertexAttrib4Nub, "_emscripten_glVertexAttrib4Nubv": _emscripten_glVertexAttrib4Nubv, "_emscripten_glVertexAttrib4Nuiv": _emscripten_glVertexAttrib4Nuiv, "_emscripten_glVertexAttrib4Nusv": _emscripten_glVertexAttrib4Nusv, "_emscripten_glVertexAttrib4bv": _emscripten_glVertexAttrib4bv, "_emscripten_glVertexAttrib4d": _emscripten_glVertexAttrib4d, "_emscripten_glVertexAttrib4dv": _emscripten_glVertexAttrib4dv, "_emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f, "_emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv, "_emscripten_glVertexAttrib4iv": _emscripten_glVertexAttrib4iv, "_emscripten_glVertexAttrib4s": _emscripten_glVertexAttrib4s, "_emscripten_glVertexAttrib4sv": _emscripten_glVertexAttrib4sv, "_emscripten_glVertexAttrib4ubv": _emscripten_glVertexAttrib4ubv, "_emscripten_glVertexAttrib4uiv": _emscripten_glVertexAttrib4uiv, "_emscripten_glVertexAttrib4usv": _emscripten_glVertexAttrib4usv, "_emscripten_glVertexAttribDivisor": _emscripten_glVertexAttribDivisor, "_emscripten_glVertexAttribI1i": _emscripten_glVertexAttribI1i, "_emscripten_glVertexAttribI1iv": _emscripten_glVertexAttribI1iv, "_emscripten_glVertexAttribI1ui": _emscripten_glVertexAttribI1ui, "_emscripten_glVertexAttribI1uiv": _emscripten_glVertexAttribI1uiv, "_emscripten_glVertexAttribI2i": _emscripten_glVertexAttribI2i, "_emscripten_glVertexAttribI2iv": _emscripten_glVertexAttribI2iv, "_emscripten_glVertexAttribI2ui": _emscripten_glVertexAttribI2ui, "_emscripten_glVertexAttribI2uiv": _emscripten_glVertexAttribI2uiv, "_emscripten_glVertexAttribI3i": _emscripten_glVertexAttribI3i, "_emscripten_glVertexAttribI3iv": _emscripten_glVertexAttribI3iv, "_emscripten_glVertexAttribI3ui": _emscripten_glVertexAttribI3ui, "_emscripten_glVertexAttribI3uiv": _emscripten_glVertexAttribI3uiv, "_emscripten_glVertexAttribI4bv": _emscripten_glVertexAttribI4bv, "_emscripten_glVertexAttribI4i": _emscripten_glVertexAttribI4i, "_emscripten_glVertexAttribI4iv": _emscripten_glVertexAttribI4iv, "_emscripten_glVertexAttribI4sv": _emscripten_glVertexAttribI4sv, "_emscripten_glVertexAttribI4ubv": _emscripten_glVertexAttribI4ubv, "_emscripten_glVertexAttribI4ui": _emscripten_glVertexAttribI4ui, "_emscripten_glVertexAttribI4uiv": _emscripten_glVertexAttribI4uiv, "_emscripten_glVertexAttribI4usv": _emscripten_glVertexAttribI4usv, "_emscripten_glVertexAttribIPointer": _emscripten_glVertexAttribIPointer, "_emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer, "_emscripten_glVertexPointer": _emscripten_glVertexPointer, "_emscripten_glViewport": _emscripten_glViewport, "_emscripten_glWindowPos2d": _emscripten_glWindowPos2d, "_emscripten_glWindowPos2dv": _emscripten_glWindowPos2dv, "_emscripten_glWindowPos2f": _emscripten_glWindowPos2f, "_emscripten_glWindowPos2fv": _emscripten_glWindowPos2fv, "_emscripten_glWindowPos2i": _emscripten_glWindowPos2i, "_emscripten_glWindowPos2iv": _emscripten_glWindowPos2iv, "_emscripten_glWindowPos2s": _emscripten_glWindowPos2s, "_emscripten_glWindowPos2sv": _emscripten_glWindowPos2sv, "_emscripten_glWindowPos3d": _emscripten_glWindowPos3d, "_emscripten_glWindowPos3dv": _emscripten_glWindowPos3dv, "_emscripten_glWindowPos3f": _emscripten_glWindowPos3f, "_emscripten_glWindowPos3fv": _emscripten_glWindowPos3fv, "_emscripten_glWindowPos3i": _emscripten_glWindowPos3i, "_emscripten_glWindowPos3iv": _emscripten_glWindowPos3iv, "_emscripten_glWindowPos3s": _emscripten_glWindowPos3s, "_emscripten_glWindowPos3sv": _emscripten_glWindowPos3sv, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_request_pointerlock": _emscripten_request_pointerlock, "_emscripten_set_canvas_element_size": _emscripten_set_canvas_element_size, "_emscripten_set_click_callback_on_thread": _emscripten_set_click_callback_on_thread, "_emscripten_set_fullscreenchange_callback_on_thread": _emscripten_set_fullscreenchange_callback_on_thread, "_emscripten_set_gamepadconnected_callback_on_thread": _emscripten_set_gamepadconnected_callback_on_thread, "_emscripten_set_gamepaddisconnected_callback_on_thread": _emscripten_set_gamepaddisconnected_callback_on_thread, "_emscripten_set_keypress_callback_on_thread": _emscripten_set_keypress_callback_on_thread, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_set_touchcancel_callback_on_thread": _emscripten_set_touchcancel_callback_on_thread, "_emscripten_set_touchend_callback_on_thread": _emscripten_set_touchend_callback_on_thread, "_emscripten_set_touchmove_callback_on_thread": _emscripten_set_touchmove_callback_on_thread, "_emscripten_set_touchstart_callback_on_thread": _emscripten_set_touchstart_callback_on_thread, "_exit": _exit, "_glActiveTexture": _glActiveTexture, "_glAttachShader": _glAttachShader, "_glBindAttribLocation": _glBindAttribLocation, "_glBindBuffer": _glBindBuffer, "_glBindTexture": _glBindTexture, "_glBlendFunc": _glBlendFunc, "_glBufferData": _glBufferData, "_glBufferSubData": _glBufferSubData, "_glClear": _glClear, "_glClearColor": _glClearColor, "_glClearDepthf": _glClearDepthf, "_glCompileShader": _glCompileShader, "_glCompressedTexImage2D": _glCompressedTexImage2D, "_glCreateProgram": _glCreateProgram, "_glCreateShader": _glCreateShader, "_glCullFace": _glCullFace, "_glDeleteBuffers": _glDeleteBuffers, "_glDeleteProgram": _glDeleteProgram, "_glDeleteShader": _glDeleteShader, "_glDeleteTextures": _glDeleteTextures, "_glDepthFunc": _glDepthFunc, "_glDetachShader": _glDetachShader, "_glDisable": _glDisable, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "_glDrawArrays": _glDrawArrays, "_glDrawElements": _glDrawElements, "_glEnable": _glEnable, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_glFrontFace": _glFrontFace, "_glGenBuffers": _glGenBuffers, "_glGenTextures": _glGenTextures, "_glGetAttribLocation": _glGetAttribLocation, "_glGetFloatv": _glGetFloatv, "_glGetProgramInfoLog": _glGetProgramInfoLog, "_glGetProgramiv": _glGetProgramiv, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_glGetShaderiv": _glGetShaderiv, "_glGetString": _glGetString, "_glGetUniformLocation": _glGetUniformLocation, "_glLinkProgram": _glLinkProgram, "_glPixelStorei": _glPixelStorei, "_glReadPixels": _glReadPixels, "_glShaderSource": _glShaderSource, "_glTexImage2D": _glTexImage2D, "_glTexParameteri": _glTexParameteri, "_glUniform1i": _glUniform1i, "_glUniform4f": _glUniform4f, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_glUseProgram": _glUseProgram, "_glVertexAttribPointer": _glVertexAttribPointer, "_glViewport": _glViewport, "_glfwCreateWindow": _glfwCreateWindow, "_glfwDefaultWindowHints": _glfwDefaultWindowHints, "_glfwDestroyWindow": _glfwDestroyWindow, "_glfwGetCursorPos": _glfwGetCursorPos, "_glfwGetKey": _glfwGetKey, "_glfwGetMouseButton": _glfwGetMouseButton, "_glfwGetPrimaryMonitor": _glfwGetPrimaryMonitor, "_glfwGetTime": _glfwGetTime, "_glfwGetVideoModes": _glfwGetVideoModes, "_glfwInit": _glfwInit, "_glfwMakeContextCurrent": _glfwMakeContextCurrent, "_glfwSetCharCallback": _glfwSetCharCallback, "_glfwSetCursorEnterCallback": _glfwSetCursorEnterCallback, "_glfwSetCursorPosCallback": _glfwSetCursorPosCallback, "_glfwSetDropCallback": _glfwSetDropCallback, "_glfwSetErrorCallback": _glfwSetErrorCallback, "_glfwSetKeyCallback": _glfwSetKeyCallback, "_glfwSetMouseButtonCallback": _glfwSetMouseButtonCallback, "_glfwSetScrollCallback": _glfwSetScrollCallback, "_glfwSetWindowIconifyCallback": _glfwSetWindowIconifyCallback, "_glfwSetWindowShouldClose": _glfwSetWindowShouldClose, "_glfwSetWindowSizeCallback": _glfwSetWindowSizeCallback, "_glfwSwapBuffers": _glfwSwapBuffers, "_glfwSwapInterval": _glfwSwapInterval, "_glfwTerminate": _glfwTerminate, "_glfwWindowHint": _glfwWindowHint, "_llvm_cos_f32": _llvm_cos_f32, "_llvm_cttz_i32": _llvm_cttz_i32, "_llvm_sin_f32": _llvm_sin_f32, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "_time": _time, "emscriptenWebGLComputeImageSize": emscriptenWebGLComputeImageSize, "emscriptenWebGLGet": emscriptenWebGLGet, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "emscriptenWebGLGetUniform": emscriptenWebGLGetUniform, "emscriptenWebGLGetVertexAttrib": emscriptenWebGLGetVertexAttrib, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "EMTSTACKTOP": EMTSTACKTOP, "EMT_STACK_MAX": EMT_STACK_MAX, "eb": eb };
// EMSCRIPTEN_START_ASM
var asm =Module["asm"]// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_game_cpp = asm["__GLOBAL__sub_I_game_cpp"]; asm["__GLOBAL__sub_I_game_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_game_cpp.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_GetProcAddress = asm["_emscripten_GetProcAddress"]; asm["_emscripten_GetProcAddress"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_GetProcAddress.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__llvm_round_f64 = asm["_llvm_round_f64"]; asm["_llvm_round_f64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_round_f64.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real__strstr = asm["_strstr"]; asm["_strstr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strstr.apply(null, arguments);
};

var real_emtStackRestore = asm["emtStackRestore"]; asm["emtStackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_emtStackRestore.apply(null, arguments);
};

var real_emtStackSave = asm["emtStackSave"]; asm["emtStackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_emtStackSave.apply(null, arguments);
};

var real_emterpret = asm["emterpret"]; asm["emterpret"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_emterpret.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getEmtStackMax = asm["getEmtStackMax"]; asm["getEmtStackMax"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getEmtStackMax.apply(null, arguments);
};

var real_setAsyncState = asm["setAsyncState"]; asm["setAsyncState"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsyncState.apply(null, arguments);
};

var real_setEmtStackMax = asm["setEmtStackMax"]; asm["setEmtStackMax"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setEmtStackMax.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
Module["asm"] = asm;
var __GLOBAL__sub_I_game_cpp = Module["__GLOBAL__sub_I_game_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__GLOBAL__sub_I_game_cpp"].apply(null, arguments) };
var ___errno_location = Module["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___errno_location"].apply(null, arguments) };
var ___muldi3 = Module["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___muldi3"].apply(null, arguments) };
var ___udivdi3 = Module["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___udivdi3"].apply(null, arguments) };
var _bitshift64Lshr = Module["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_bitshift64Lshr"].apply(null, arguments) };
var _bitshift64Shl = Module["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_bitshift64Shl"].apply(null, arguments) };
var _emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_emscripten_GetProcAddress"].apply(null, arguments) };
var _fflush = Module["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fflush"].apply(null, arguments) };
var _free = Module["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_free"].apply(null, arguments) };
var _i64Add = Module["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_i64Add"].apply(null, arguments) };
var _i64Subtract = Module["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_i64Subtract"].apply(null, arguments) };
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_llvm_bswap_i32"].apply(null, arguments) };
var _llvm_round_f64 = Module["_llvm_round_f64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_llvm_round_f64"].apply(null, arguments) };
var _main = Module["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_main"].apply(null, arguments) };
var _malloc = Module["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_malloc"].apply(null, arguments) };
var _memcpy = Module["_memcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memcpy"].apply(null, arguments) };
var _memset = Module["_memset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memset"].apply(null, arguments) };
var _sbrk = Module["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_sbrk"].apply(null, arguments) };
var _strstr = Module["_strstr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strstr"].apply(null, arguments) };
var emtStackRestore = Module["emtStackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emtStackRestore"].apply(null, arguments) };
var emtStackSave = Module["emtStackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emtStackSave"].apply(null, arguments) };
var emterpret = Module["emterpret"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emterpret"].apply(null, arguments) };
var establishStackSpace = Module["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["establishStackSpace"].apply(null, arguments) };
var getEmtStackMax = Module["getEmtStackMax"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getEmtStackMax"].apply(null, arguments) };
var setAsyncState = Module["setAsyncState"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setAsyncState"].apply(null, arguments) };
var setEmtStackMax = Module["setEmtStackMax"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setEmtStackMax"].apply(null, arguments) };
var setThrew = Module["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setThrew"].apply(null, arguments) };
var stackAlloc = Module["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackAlloc"].apply(null, arguments) };
var stackRestore = Module["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackRestore"].apply(null, arguments) };
var stackSave = Module["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackSave"].apply(null, arguments) };
var dynCall_ff = Module["dynCall_ff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ff"].apply(null, arguments) };
var dynCall_fff = Module["dynCall_fff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_fff"].apply(null, arguments) };
var dynCall_i = Module["dynCall_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_i"].apply(null, arguments) };
var dynCall_ii = Module["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ii"].apply(null, arguments) };
var dynCall_iii = Module["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iii"].apply(null, arguments) };
var dynCall_iiii = Module["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiii"].apply(null, arguments) };
var dynCall_v = Module["dynCall_v"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_v"].apply(null, arguments) };
var dynCall_vd = Module["dynCall_vd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vd"].apply(null, arguments) };
var dynCall_vdd = Module["dynCall_vdd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vdd"].apply(null, arguments) };
var dynCall_vddd = Module["dynCall_vddd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vddd"].apply(null, arguments) };
var dynCall_vdddd = Module["dynCall_vdddd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vdddd"].apply(null, arguments) };
var dynCall_vdddddd = Module["dynCall_vdddddd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vdddddd"].apply(null, arguments) };
var dynCall_vf = Module["dynCall_vf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vf"].apply(null, arguments) };
var dynCall_vff = Module["dynCall_vff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vff"].apply(null, arguments) };
var dynCall_vfff = Module["dynCall_vfff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vfff"].apply(null, arguments) };
var dynCall_vffff = Module["dynCall_vffff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vffff"].apply(null, arguments) };
var dynCall_vfi = Module["dynCall_vfi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vfi"].apply(null, arguments) };
var dynCall_vi = Module["dynCall_vi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vi"].apply(null, arguments) };
var dynCall_vid = Module["dynCall_vid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vid"].apply(null, arguments) };
var dynCall_vidd = Module["dynCall_vidd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vidd"].apply(null, arguments) };
var dynCall_viddd = Module["dynCall_viddd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viddd"].apply(null, arguments) };
var dynCall_vidddd = Module["dynCall_vidddd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vidddd"].apply(null, arguments) };
var dynCall_viddidd = Module["dynCall_viddidd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viddidd"].apply(null, arguments) };
var dynCall_viddiiddiii = Module["dynCall_viddiiddiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viddiiddiii"].apply(null, arguments) };
var dynCall_viddiii = Module["dynCall_viddiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viddiii"].apply(null, arguments) };
var dynCall_vif = Module["dynCall_vif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vif"].apply(null, arguments) };
var dynCall_viff = Module["dynCall_viff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viff"].apply(null, arguments) };
var dynCall_vifff = Module["dynCall_vifff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vifff"].apply(null, arguments) };
var dynCall_viffff = Module["dynCall_viffff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viffff"].apply(null, arguments) };
var dynCall_viffiff = Module["dynCall_viffiff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viffiff"].apply(null, arguments) };
var dynCall_viffiiffiii = Module["dynCall_viffiiffiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viffiiffiii"].apply(null, arguments) };
var dynCall_viffiii = Module["dynCall_viffiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viffiii"].apply(null, arguments) };
var dynCall_vii = Module["dynCall_vii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vii"].apply(null, arguments) };
var dynCall_viid = Module["dynCall_viid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viid"].apply(null, arguments) };
var dynCall_viidddd = Module["dynCall_viidddd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viidddd"].apply(null, arguments) };
var dynCall_viif = Module["dynCall_viif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viif"].apply(null, arguments) };
var dynCall_viiffff = Module["dynCall_viiffff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiffff"].apply(null, arguments) };
var dynCall_viiffffi = Module["dynCall_viiffffi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiffffi"].apply(null, arguments) };
var dynCall_viifi = Module["dynCall_viifi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viifi"].apply(null, arguments) };
var dynCall_viii = Module["dynCall_viii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viii"].apply(null, arguments) };
var dynCall_viiii = Module["dynCall_viiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiii"].apply(null, arguments) };
var dynCall_viiiii = Module["dynCall_viiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiii"].apply(null, arguments) };
var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiii"].apply(null, arguments) };
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiii"].apply(null, arguments) };
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiii"].apply(null, arguments) };
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiiii"].apply(null, arguments) };
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiiiii"].apply(null, arguments) };
var dynCall_viiiiiiiiiii = Module["dynCall_viiiiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiiiiii"].apply(null, arguments) };
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["getMemory"] = getMemory;
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Module["ENV"]) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["establishStackSpace"]) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["print"]) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["printErr"]) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getTempRet0"]) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setTempRet0"]) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });




/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;

  var initialEmtStackTop = Module['emtStackSave']();

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we are saving the stack, then do not call exit, we are not
    // really exiting now, just unwinding the JS stack
    if (typeof EmterpreterAsync === 'object' && EmterpreterAsync.state !== 1) {
    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      // an infinite loop keeps the C stack around, but the emterpreter stack must be unwound - we do not want to restore the call stack at infinite loop
      Module['emtStackRestore'](initialEmtStackTop);
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}










